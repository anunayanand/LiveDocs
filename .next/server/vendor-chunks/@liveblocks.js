"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@liveblocks";
exports.ids = ["vendor-chunks/@liveblocks"];
exports.modules = {

/***/ "(ssr)/./node_modules/@liveblocks/core/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/core/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientMsgCode: () => (/* binding */ ClientMsgCode),\n/* harmony export */   CommentsApiError: () => (/* binding */ CommentsApiError),\n/* harmony export */   CrdtType: () => (/* binding */ CrdtType),\n/* harmony export */   LiveList: () => (/* binding */ LiveList),\n/* harmony export */   LiveMap: () => (/* binding */ LiveMap),\n/* harmony export */   LiveObject: () => (/* binding */ LiveObject),\n/* harmony export */   NotificationsApiError: () => (/* binding */ NotificationsApiError),\n/* harmony export */   OpCode: () => (/* binding */ OpCode),\n/* harmony export */   ServerMsgCode: () => (/* binding */ ServerMsgCode),\n/* harmony export */   WebsocketCloseCodes: () => (/* binding */ WebsocketCloseCodes),\n/* harmony export */   ackOp: () => (/* binding */ ackOp),\n/* harmony export */   addReaction: () => (/* binding */ addReaction),\n/* harmony export */   applyOptimisticUpdates: () => (/* binding */ applyOptimisticUpdates),\n/* harmony export */   asPos: () => (/* binding */ asPos),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   b64decode: () => (/* binding */ b64decode),\n/* harmony export */   cloneLson: () => (/* binding */ cloneLson),\n/* harmony export */   console: () => (/* binding */ fancy_console_exports),\n/* harmony export */   convertToCommentData: () => (/* binding */ convertToCommentData),\n/* harmony export */   convertToCommentUserReaction: () => (/* binding */ convertToCommentUserReaction),\n/* harmony export */   convertToInboxNotificationData: () => (/* binding */ convertToInboxNotificationData),\n/* harmony export */   convertToThreadData: () => (/* binding */ convertToThreadData),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   deleteComment: () => (/* binding */ deleteComment),\n/* harmony export */   deprecate: () => (/* binding */ deprecate),\n/* harmony export */   deprecateIf: () => (/* binding */ deprecateIf),\n/* harmony export */   detectDupes: () => (/* binding */ detectDupes),\n/* harmony export */   errorIf: () => (/* binding */ errorIf),\n/* harmony export */   freeze: () => (/* binding */ freeze),\n/* harmony export */   getMentionedIdsFromCommentBody: () => (/* binding */ getMentionedIdsFromCommentBody),\n/* harmony export */   isChildCrdt: () => (/* binding */ isChildCrdt),\n/* harmony export */   isJsonArray: () => (/* binding */ isJsonArray),\n/* harmony export */   isJsonObject: () => (/* binding */ isJsonObject),\n/* harmony export */   isJsonScalar: () => (/* binding */ isJsonScalar),\n/* harmony export */   isLiveNode: () => (/* binding */ isLiveNode),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRootCrdt: () => (/* binding */ isRootCrdt),\n/* harmony export */   kInternal: () => (/* binding */ kInternal),\n/* harmony export */   legacy_patchImmutableObject: () => (/* binding */ legacy_patchImmutableObject),\n/* harmony export */   lsonToJson: () => (/* binding */ lsonToJson),\n/* harmony export */   makeEventSource: () => (/* binding */ makeEventSource),\n/* harmony export */   makePoller: () => (/* binding */ makePoller),\n/* harmony export */   makePosition: () => (/* binding */ makePosition),\n/* harmony export */   memoizeOnSuccess: () => (/* binding */ memoizeOnSuccess),\n/* harmony export */   nn: () => (/* binding */ nn),\n/* harmony export */   objectToQuery: () => (/* binding */ objectToQuery),\n/* harmony export */   patchLiveObjectKey: () => (/* binding */ patchLiveObjectKey),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   removeReaction: () => (/* binding */ removeReaction),\n/* harmony export */   shallow: () => (/* binding */ shallow),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   stringifyCommentBody: () => (/* binding */ stringifyCommentBody),\n/* harmony export */   throwUsageError: () => (/* binding */ throwUsageError),\n/* harmony export */   toPlainLson: () => (/* binding */ toPlainLson),\n/* harmony export */   tryParseJson: () => (/* binding */ tryParseJson),\n/* harmony export */   upsertComment: () => (/* binding */ upsertComment),\n/* harmony export */   wait: () => (/* binding */ wait),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/core\";\nvar PKG_VERSION = \"2.3.0\";\nvar PKG_FORMAT = \"esm\";\n\n// src/dupe-detection.ts\nvar g = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {};\nvar crossLinkedDocs = \"https://liveblocks.io/docs/errors/cross-linked\";\nvar dupesDocs = \"https://liveblocks.io/docs/errors/dupes\";\nvar SPACE = \" \";\nfunction error(msg) {\n  if (false) {} else {\n    throw new Error(msg);\n  }\n}\nfunction detectDupes(pkgName, pkgVersion, pkgFormat) {\n  const pkgId = Symbol.for(pkgName);\n  const pkgBuildInfo = pkgFormat ? `${pkgVersion || \"dev\"} (${pkgFormat})` : pkgVersion || \"dev\";\n  if (!g[pkgId]) {\n    g[pkgId] = pkgBuildInfo;\n  } else if (g[pkgId] === pkgBuildInfo) {\n  } else {\n    const msg = [\n      `Multiple copies of Liveblocks are being loaded in your project. This will cause issues! See ${dupesDocs + SPACE}`,\n      \"\",\n      \"Conflicts:\",\n      `- ${pkgName} ${g[pkgId]} (already loaded)`,\n      `- ${pkgName} ${pkgBuildInfo} (trying to load this now)`\n    ].join(\"\\n\");\n    error(msg);\n  }\n  if (pkgVersion && PKG_VERSION && pkgVersion !== PKG_VERSION) {\n    error(\n      [\n        `Cross-linked versions of Liveblocks found, which will cause issues! See ${crossLinkedDocs + SPACE}`,\n        \"\",\n        \"Conflicts:\",\n        `- ${PKG_NAME} is at ${PKG_VERSION}`,\n        `- ${pkgName} is at ${pkgVersion}`,\n        \"\",\n        \"Always upgrade all Liveblocks packages to the same version number.\"\n      ].join(\"\\n\")\n    );\n  }\n}\n\n// src/lib/assert.ts\nfunction assertNever(_value, errmsg) {\n  throw new Error(errmsg);\n}\nfunction assert(condition, errmsg) {\n  if (true) {\n    if (!condition) {\n      const err = new Error(errmsg);\n      err.name = \"Assertion failure\";\n      throw err;\n    }\n  }\n}\nfunction nn(value, errmsg = \"Expected value to be non-nullable\") {\n  assert(value !== null && value !== void 0, errmsg);\n  return value;\n}\n\n// src/lib/controlledPromise.ts\nfunction controlledPromise() {\n  let resolve;\n  let reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return [promise, resolve, reject];\n}\nfunction Promise_withResolvers() {\n  const [promise, resolve, reject] = controlledPromise();\n  return { promise, resolve, reject };\n}\n\n// src/lib/EventSource.ts\nfunction makeEventSource() {\n  const _onetimeObservers = /* @__PURE__ */ new Set();\n  const _observers = /* @__PURE__ */ new Set();\n  let _buffer = null;\n  function pause() {\n    _buffer = [];\n  }\n  function unpause() {\n    if (_buffer === null) {\n      return;\n    }\n    for (const event of _buffer) {\n      notify(event);\n    }\n    _buffer = null;\n  }\n  function subscribe(callback) {\n    _observers.add(callback);\n    return () => _observers.delete(callback);\n  }\n  function subscribeOnce(callback) {\n    _onetimeObservers.add(callback);\n    return () => _onetimeObservers.delete(callback);\n  }\n  async function waitUntil(predicate) {\n    let unsub;\n    return new Promise((res) => {\n      unsub = subscribe((event) => {\n        if (predicate === void 0 || predicate(event)) {\n          res(event);\n        }\n      });\n    }).finally(() => unsub?.());\n  }\n  function notifyOrBuffer(event) {\n    if (_buffer !== null) {\n      _buffer.push(event);\n    } else {\n      notify(event);\n    }\n  }\n  function notify(event) {\n    _onetimeObservers.forEach((callback) => callback(event));\n    _onetimeObservers.clear();\n    _observers.forEach((callback) => callback(event));\n  }\n  function clear() {\n    _onetimeObservers.clear();\n    _observers.clear();\n  }\n  function count() {\n    return _onetimeObservers.size + _observers.size;\n  }\n  return {\n    // Private/internal control over event emission\n    notify: notifyOrBuffer,\n    subscribe,\n    subscribeOnce,\n    clear,\n    count,\n    waitUntil,\n    pause,\n    unpause,\n    // Publicly exposable subscription API\n    observable: {\n      subscribe,\n      subscribeOnce,\n      waitUntil\n    }\n  };\n}\n\n// src/lib/fancy-console.ts\nvar fancy_console_exports = {};\n__export(fancy_console_exports, {\n  error: () => error2,\n  errorWithTitle: () => errorWithTitle,\n  warn: () => warn,\n  warnWithTitle: () => warnWithTitle\n});\nvar badge = \"background:#0e0d12;border-radius:9999px;color:#fff;padding:3px 7px;font-family:sans-serif;font-weight:600;\";\nvar bold = \"font-weight:600\";\nfunction wrap(method) {\n  return typeof window === \"undefined\" || \"development\" === \"test\" ? console[method] : (\n    /* istanbul ignore next */\n    (message, ...args) => console[method](\"%cLiveblocks\", badge, message, ...args)\n  );\n}\nvar warn = wrap(\"warn\");\nvar error2 = wrap(\"error\");\nfunction wrapWithTitle(method) {\n  return typeof window === \"undefined\" || \"development\" === \"test\" ? console[method] : (\n    /* istanbul ignore next */\n    (title, message, ...args) => console[method](\n      `%cLiveblocks%c ${title}`,\n      badge,\n      bold,\n      message,\n      ...args\n    )\n  );\n}\nvar warnWithTitle = wrapWithTitle(\"warn\");\nvar errorWithTitle = wrapWithTitle(\"error\");\n\n// src/lib/fsm.ts\nfunction distance(state1, state2) {\n  if (state1 === state2) {\n    return [0, 0];\n  }\n  const chunks1 = state1.split(\".\");\n  const chunks2 = state2.split(\".\");\n  const minLen = Math.min(chunks1.length, chunks2.length);\n  let shared = 0;\n  for (; shared < minLen; shared++) {\n    if (chunks1[shared] !== chunks2[shared]) {\n      break;\n    }\n  }\n  const up = chunks1.length - shared;\n  const down = chunks2.length - shared;\n  return [up, down];\n}\nfunction patterns(targetState, levels) {\n  const parts = targetState.split(\".\");\n  if (levels < 1 || levels > parts.length + 1) {\n    throw new Error(\"Invalid number of levels\");\n  }\n  const result = [];\n  if (levels > parts.length) {\n    result.push(\"*\");\n  }\n  for (let i = parts.length - levels + 1; i < parts.length; i++) {\n    const slice = parts.slice(0, i);\n    if (slice.length > 0) {\n      result.push(slice.join(\".\") + \".*\");\n    }\n  }\n  result.push(targetState);\n  return result;\n}\nvar SafeContext = class {\n  constructor(initialContext) {\n    this.curr = initialContext;\n  }\n  get current() {\n    return this.curr;\n  }\n  /**\n   * Call a callback function that allows patching of the context, by\n   * calling `context.patch()`. Patching is only allowed for the duration\n   * of this window.\n   */\n  allowPatching(callback) {\n    const self = this;\n    let allowed = true;\n    const patchableContext = {\n      ...this.curr,\n      patch(patch) {\n        if (allowed) {\n          self.curr = Object.assign({}, self.curr, patch);\n          for (const pair of Object.entries(patch)) {\n            const [key, value] = pair;\n            if (key !== \"patch\") {\n              this[key] = value;\n            }\n          }\n        } else {\n          throw new Error(\"Can no longer patch stale context\");\n        }\n      }\n    };\n    callback(patchableContext);\n    allowed = false;\n    return;\n  }\n};\nvar nextId = 1;\nvar FSM = class {\n  /**\n   * Returns the initial state, which is defined by the first call made to\n   * .addState().\n   */\n  get initialState() {\n    const result = this.states.values()[Symbol.iterator]().next();\n    if (result.done) {\n      throw new Error(\"No states defined yet\");\n    } else {\n      return result.value;\n    }\n  }\n  get currentState() {\n    if (this.currentStateOrNull === null) {\n      if (this.runningState === 0 /* NOT_STARTED_YET */) {\n        throw new Error(\"Not started yet\");\n      } else {\n        throw new Error(\"Already stopped\");\n      }\n    }\n    return this.currentStateOrNull;\n  }\n  /**\n   * Starts the machine by entering the initial state.\n   */\n  start() {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"State machine has already started\");\n    }\n    this.runningState = 1 /* STARTED */;\n    this.currentStateOrNull = this.initialState;\n    this.enter(null);\n    return this;\n  }\n  /**\n   * Stops the state machine. Stopping the state machine will call exit\n   * handlers for the current state, but not enter a new state.\n   */\n  stop() {\n    if (this.runningState !== 1 /* STARTED */) {\n      throw new Error(\"Cannot stop a state machine that hasn't started yet\");\n    }\n    this.exit(null);\n    this.runningState = 2 /* STOPPED */;\n    this.currentStateOrNull = null;\n  }\n  constructor(initialContext) {\n    this.id = nextId++;\n    this.runningState = 0 /* NOT_STARTED_YET */;\n    this.currentStateOrNull = null;\n    this.states = /* @__PURE__ */ new Set();\n    this.enterFns = /* @__PURE__ */ new Map();\n    this.cleanupStack = [];\n    this.knownEventTypes = /* @__PURE__ */ new Set();\n    this.allowedTransitions = /* @__PURE__ */ new Map();\n    this.currentContext = new SafeContext(initialContext);\n    this.eventHub = {\n      didReceiveEvent: makeEventSource(),\n      willTransition: makeEventSource(),\n      didIgnoreEvent: makeEventSource(),\n      willExitState: makeEventSource(),\n      didEnterState: makeEventSource()\n    };\n    this.events = {\n      didReceiveEvent: this.eventHub.didReceiveEvent.observable,\n      willTransition: this.eventHub.willTransition.observable,\n      didIgnoreEvent: this.eventHub.didIgnoreEvent.observable,\n      willExitState: this.eventHub.willExitState.observable,\n      didEnterState: this.eventHub.didEnterState.observable\n    };\n  }\n  get context() {\n    return this.currentContext.current;\n  }\n  /**\n   * Define an explicit finite state in the state machine.\n   */\n  addState(state) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    }\n    this.states.add(state);\n    return this;\n  }\n  onEnter(nameOrPattern, enterFn) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    } else if (this.enterFns.has(nameOrPattern)) {\n      throw new Error(\n        // TODO We _currently_ don't support multiple .onEnters() for the same\n        // state, but this is not a fundamental limitation. Just not\n        // implemented yet. If we wanted to, we could make this an array.\n        `enter/exit function for ${nameOrPattern} already exists`\n      );\n    }\n    this.enterFns.set(nameOrPattern, enterFn);\n    return this;\n  }\n  onEnterAsync(nameOrPattern, promiseFn, onOK, onError) {\n    return this.onEnter(nameOrPattern, () => {\n      const abortController = new AbortController();\n      const signal = abortController.signal;\n      let done = false;\n      void promiseFn(this.currentContext.current, signal).then(\n        // On OK\n        (data) => {\n          if (!signal.aborted) {\n            done = true;\n            this.transition({ type: \"ASYNC_OK\", data }, onOK);\n          }\n        },\n        // On Error\n        (reason) => {\n          if (!signal.aborted) {\n            done = true;\n            this.transition({ type: \"ASYNC_ERROR\", reason }, onError);\n          }\n        }\n      );\n      return () => {\n        if (!done) {\n          abortController.abort();\n        }\n      };\n    });\n  }\n  getStatesMatching(nameOrPattern) {\n    const matches = [];\n    if (nameOrPattern === \"*\") {\n      for (const state of this.states) {\n        matches.push(state);\n      }\n    } else if (nameOrPattern.endsWith(\".*\")) {\n      const prefix = nameOrPattern.slice(0, -1);\n      for (const state of this.states) {\n        if (state.startsWith(prefix)) {\n          matches.push(state);\n        }\n      }\n    } else {\n      const name = nameOrPattern;\n      if (this.states.has(name)) {\n        matches.push(name);\n      }\n    }\n    if (matches.length === 0) {\n      throw new Error(`No states match ${JSON.stringify(nameOrPattern)}`);\n    }\n    return matches;\n  }\n  /**\n   * Define all allowed outgoing transitions for a state.\n   *\n   * The targets for each event can be defined as a function which returns the\n   * next state to transition to. These functions can look at the `event` or\n   * `context` params to conditionally decide which next state to transition\n   * to.\n   *\n   * If you set it to `null`, then the transition will be explicitly forbidden\n   * and throw an error. If you don't define a target for a transition, then\n   * such events will get ignored.\n   */\n  addTransitions(nameOrPattern, mapping) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    }\n    for (const srcState of this.getStatesMatching(nameOrPattern)) {\n      let map = this.allowedTransitions.get(srcState);\n      if (map === void 0) {\n        map = /* @__PURE__ */ new Map();\n        this.allowedTransitions.set(srcState, map);\n      }\n      for (const [type, target_] of Object.entries(mapping)) {\n        if (map.has(type)) {\n          throw new Error(\n            `Trying to set transition \"${type}\" on \"${srcState}\" (via \"${nameOrPattern}\"), but a transition already exists there.`\n          );\n        }\n        const target = target_;\n        this.knownEventTypes.add(type);\n        if (target !== void 0) {\n          const targetFn = typeof target === \"function\" ? target : () => target;\n          map.set(type, targetFn);\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * Like `.addTransition()`, but takes an (anonymous) transition whenever the\n   * timer fires.\n   *\n   * @param stateOrPattern The state name, or state group pattern name.\n   * @param after          Number of milliseconds after which to take the\n   *                       transition. If in the mean time, another transition\n   *                       is taken, the timer will get cancelled.\n   * @param target     The target state to go to.\n   */\n  addTimedTransition(stateOrPattern, after2, target) {\n    return this.onEnter(stateOrPattern, () => {\n      const ms = typeof after2 === \"function\" ? after2(this.currentContext.current) : after2;\n      const timeoutID = setTimeout(() => {\n        this.transition({ type: \"TIMER\" }, target);\n      }, ms);\n      return () => {\n        clearTimeout(timeoutID);\n      };\n    });\n  }\n  getTargetFn(eventName) {\n    return this.allowedTransitions.get(this.currentState)?.get(eventName);\n  }\n  /**\n   * Exits the current state, and executes any necessary cleanup functions.\n   * Call this before changing the current state to the next state.\n   *\n   * @param levels Defines how many \"levels\" of nesting will be\n   * exited. For example, if you transition from `foo.bar.qux` to\n   * `foo.bar.baz`, then the level is 1. But if you transition from\n   * `foo.bar.qux` to `bla.bla`, then the level is 3.\n   * If `null`, it will exit all levels.\n   */\n  exit(levels) {\n    this.eventHub.willExitState.notify(this.currentState);\n    this.currentContext.allowPatching((patchableContext) => {\n      levels = levels ?? this.cleanupStack.length;\n      for (let i = 0; i < levels; i++) {\n        this.cleanupStack.pop()?.(patchableContext);\n      }\n    });\n  }\n  /**\n   * Enters the current state, and executes any necessary onEnter handlers.\n   * Call this directly _after_ setting the current state to the next state.\n   */\n  enter(levels) {\n    const enterPatterns = patterns(\n      this.currentState,\n      levels ?? this.currentState.split(\".\").length + 1\n    );\n    this.currentContext.allowPatching((patchableContext) => {\n      for (const pattern of enterPatterns) {\n        const enterFn = this.enterFns.get(pattern);\n        const cleanupFn = enterFn?.(patchableContext);\n        if (typeof cleanupFn === \"function\") {\n          this.cleanupStack.push(cleanupFn);\n        } else {\n          this.cleanupStack.push(null);\n        }\n      }\n    });\n    this.eventHub.didEnterState.notify(this.currentState);\n  }\n  /**\n   * Sends an event to the machine, which may cause an internal state\n   * transition to happen. When that happens, will trigger side effects.\n   */\n  send(event) {\n    if (!this.knownEventTypes.has(event.type)) {\n      throw new Error(`Invalid event ${JSON.stringify(event.type)}`);\n    }\n    if (this.runningState === 2 /* STOPPED */) {\n      return;\n    }\n    const targetFn = this.getTargetFn(event.type);\n    if (targetFn !== void 0) {\n      return this.transition(event, targetFn);\n    } else {\n      this.eventHub.didIgnoreEvent.notify(event);\n    }\n  }\n  transition(event, target) {\n    this.eventHub.didReceiveEvent.notify(event);\n    const oldState = this.currentState;\n    const targetFn = typeof target === \"function\" ? target : () => target;\n    const nextTarget = targetFn(event, this.currentContext.current);\n    let nextState;\n    let effects = void 0;\n    if (nextTarget === null) {\n      this.eventHub.didIgnoreEvent.notify(event);\n      return;\n    }\n    if (typeof nextTarget === \"string\") {\n      nextState = nextTarget;\n    } else {\n      nextState = nextTarget.target;\n      effects = Array.isArray(nextTarget.effect) ? nextTarget.effect : [nextTarget.effect];\n    }\n    if (!this.states.has(nextState)) {\n      throw new Error(`Invalid next state name: ${JSON.stringify(nextState)}`);\n    }\n    this.eventHub.willTransition.notify({ from: oldState, to: nextState });\n    const [up, down] = distance(this.currentState, nextState);\n    if (up > 0) {\n      this.exit(up);\n    }\n    this.currentStateOrNull = nextState;\n    if (effects !== void 0) {\n      const effectsToRun = effects;\n      this.currentContext.allowPatching((patchableContext) => {\n        for (const effect of effectsToRun) {\n          if (typeof effect === \"function\") {\n            effect(patchableContext, event);\n          } else {\n            patchableContext.patch(effect);\n          }\n        }\n      });\n    }\n    if (down > 0) {\n      this.enter(down);\n    }\n  }\n};\n\n// src/lib/utils.ts\nfunction raise(msg) {\n  throw new Error(msg);\n}\nfunction isPlainObject(blob) {\n  return blob !== null && typeof blob === \"object\" && Object.prototype.toString.call(blob) === \"[object Object]\";\n}\nfunction entries(obj) {\n  return Object.entries(obj);\n}\nfunction tryParseJson(rawMessage) {\n  try {\n    return JSON.parse(rawMessage);\n  } catch (e) {\n    return void 0;\n  }\n}\nfunction deepClone(value) {\n  return JSON.parse(JSON.stringify(value));\n}\nfunction b64decode(b64value) {\n  try {\n    const formattedValue = b64value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const decodedValue = decodeURIComponent(\n      atob(formattedValue).split(\"\").map(function(c) {\n        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(\"\")\n    );\n    return decodedValue;\n  } catch (err) {\n    return atob(b64value);\n  }\n}\nfunction compact(items) {\n  return items.filter(\n    (item) => item !== null && item !== void 0\n  );\n}\nfunction compactObject(obj) {\n  const newObj = { ...obj };\n  Object.keys(obj).forEach((k) => {\n    const key = k;\n    if (newObj[key] === void 0) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n}\nfunction wait(millis) {\n  return new Promise((res) => setTimeout(res, millis));\n}\nasync function withTimeout(promise, millis, errmsg) {\n  let timerID;\n  const timer$ = new Promise((_, reject) => {\n    timerID = setTimeout(() => {\n      reject(new Error(errmsg));\n    }, millis);\n  });\n  return Promise.race([promise, timer$]).finally(() => clearTimeout(timerID));\n}\nfunction memoizeOnSuccess(factoryFn) {\n  let cached = null;\n  return () => {\n    if (cached === null) {\n      cached = factoryFn().catch((err) => {\n        setTimeout(() => {\n          cached = null;\n        }, 5e3);\n        throw err;\n      });\n    }\n    return cached;\n  };\n}\n\n// src/protocol/ServerMsg.ts\nvar ServerMsgCode = /* @__PURE__ */ ((ServerMsgCode2) => {\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n  ServerMsgCode2[ServerMsgCode2[\"USER_JOINED\"] = 101] = \"USER_JOINED\";\n  ServerMsgCode2[ServerMsgCode2[\"USER_LEFT\"] = 102] = \"USER_LEFT\";\n  ServerMsgCode2[ServerMsgCode2[\"BROADCASTED_EVENT\"] = 103] = \"BROADCASTED_EVENT\";\n  ServerMsgCode2[ServerMsgCode2[\"ROOM_STATE\"] = 104] = \"ROOM_STATE\";\n  ServerMsgCode2[ServerMsgCode2[\"INITIAL_STORAGE_STATE\"] = 200] = \"INITIAL_STORAGE_STATE\";\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n  ServerMsgCode2[ServerMsgCode2[\"REJECT_STORAGE_OP\"] = 299] = \"REJECT_STORAGE_OP\";\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_YDOC\"] = 300] = \"UPDATE_YDOC\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_CREATED\"] = 400] = \"THREAD_CREATED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_DELETED\"] = 407] = \"THREAD_DELETED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_METADATA_UPDATED\"] = 401] = \"THREAD_METADATA_UPDATED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_UPDATED\"] = 408] = \"THREAD_UPDATED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_CREATED\"] = 402] = \"COMMENT_CREATED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_EDITED\"] = 403] = \"COMMENT_EDITED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_DELETED\"] = 404] = \"COMMENT_DELETED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_ADDED\"] = 405] = \"COMMENT_REACTION_ADDED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_REMOVED\"] = 406] = \"COMMENT_REACTION_REMOVED\";\n  return ServerMsgCode2;\n})(ServerMsgCode || {});\n\n// src/types/IWebSocket.ts\nvar WebsocketCloseCodes = /* @__PURE__ */ ((WebsocketCloseCodes2) => {\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_NORMAL\"] = 1e3] = \"CLOSE_NORMAL\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_ABNORMAL\"] = 1006] = \"CLOSE_ABNORMAL\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"UNEXPECTED_CONDITION\"] = 1011] = \"UNEXPECTED_CONDITION\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"TRY_AGAIN_LATER\"] = 1013] = \"TRY_AGAIN_LATER\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"INVALID_MESSAGE_FORMAT\"] = 4e3] = \"INVALID_MESSAGE_FORMAT\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"NOT_ALLOWED\"] = 4001] = \"NOT_ALLOWED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\"] = 4002] = \"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\"] = 4003] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\"] = 4004] = \"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\"] = 4005] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"ROOM_ID_UPDATED\"] = 4006] = \"ROOM_ID_UPDATED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"KICKED\"] = 4100] = \"KICKED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"TOKEN_EXPIRED\"] = 4109] = \"TOKEN_EXPIRED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_WITHOUT_RETRY\"] = 4999] = \"CLOSE_WITHOUT_RETRY\";\n  return WebsocketCloseCodes2;\n})(WebsocketCloseCodes || {});\nfunction shouldDisconnect(code) {\n  return code === 4999 /* CLOSE_WITHOUT_RETRY */ || code >= 4e3 && code < 4100;\n}\nfunction shouldReauth(code) {\n  return code >= 4100 && code < 4200;\n}\nfunction shouldRetryWithoutReauth(code) {\n  return code === 1013 /* TRY_AGAIN_LATER */ || code >= 4200 && code < 4300;\n}\n\n// src/connection.ts\nfunction isIdle(status) {\n  return status === \"initial\" || status === \"disconnected\";\n}\nfunction toNewConnectionStatus(machine) {\n  const state = machine.currentState;\n  switch (state) {\n    case \"@ok.connected\":\n    case \"@ok.awaiting-pong\":\n      return \"connected\";\n    case \"@idle.initial\":\n      return \"initial\";\n    case \"@auth.busy\":\n    case \"@auth.backoff\":\n    case \"@connecting.busy\":\n    case \"@connecting.backoff\":\n    case \"@idle.zombie\":\n      return machine.context.successCount > 0 ? \"reconnecting\" : \"connecting\";\n    case \"@idle.failed\":\n      return \"disconnected\";\n    default:\n      return assertNever(state, \"Unknown state\");\n  }\n}\nvar BACKOFF_DELAYS = [250, 500, 1e3, 2e3, 4e3, 8e3, 1e4];\nvar RESET_DELAY = BACKOFF_DELAYS[0] - 1;\nvar BACKOFF_DELAYS_SLOW = [2e3, 3e4, 6e4, 3e5];\nvar HEARTBEAT_INTERVAL = 3e4;\nvar PONG_TIMEOUT = 2e3;\nvar AUTH_TIMEOUT = 1e4;\nvar SOCKET_CONNECT_TIMEOUT = 1e4;\nvar StopRetrying = class extends Error {\n  constructor(reason) {\n    super(reason);\n  }\n};\nvar LiveblocksError = class extends Error {\n  /** @internal */\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n};\nfunction nextBackoffDelay(currentDelay, delays) {\n  return delays.find((delay) => delay > currentDelay) ?? delays[delays.length - 1];\n}\nfunction increaseBackoffDelay(context) {\n  context.patch({\n    backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS)\n  });\n}\nfunction increaseBackoffDelayAggressively(context) {\n  context.patch({\n    backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS_SLOW)\n  });\n}\nfunction resetSuccessCount(context) {\n  context.patch({ successCount: 0 });\n}\nfunction log(level, message) {\n  const logger = level === 2 /* ERROR */ ? error2 : level === 1 /* WARN */ ? warn : (\n    /* black hole */\n    () => {\n    }\n  );\n  return () => {\n    logger(message);\n  };\n}\nfunction logPrematureErrorOrCloseEvent(e) {\n  const conn = \"Connection to Liveblocks websocket server\";\n  return (ctx) => {\n    if (e instanceof Error) {\n      warn(`${conn} could not be established. ${String(e)}`);\n    } else {\n      warn(\n        isCloseEvent(e) ? `${conn} closed prematurely (code: ${e.code}). Retrying in ${ctx.backoffDelay}ms.` : `${conn} could not be established.`\n      );\n    }\n  };\n}\nfunction logCloseEvent(event) {\n  const details = [`code: ${event.code}`];\n  if (event.reason) {\n    details.push(`reason: ${event.reason}`);\n  }\n  return (ctx) => {\n    warn(\n      `Connection to Liveblocks websocket server closed (${details.join(\", \")}). Retrying in ${ctx.backoffDelay}ms.`\n    );\n  };\n}\nvar logPermanentClose = log(\n  1 /* WARN */,\n  \"Connection to WebSocket closed permanently. Won't retry.\"\n);\nfunction isCloseEvent(error3) {\n  return !(error3 instanceof Error) && error3.type === \"close\";\n}\nfunction enableTracing(machine) {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  function log2(...args) {\n    warn(\n      `${(((/* @__PURE__ */ new Date()).getTime() - start) / 1e3).toFixed(2)} [FSM #${machine.id}]`,\n      ...args\n    );\n  }\n  const unsubs = [\n    machine.events.didReceiveEvent.subscribe((e) => log2(`Event ${e.type}`)),\n    machine.events.willTransition.subscribe(\n      ({ from, to }) => log2(\"Transitioning\", from, \"\\u2192\", to)\n    ),\n    machine.events.didIgnoreEvent.subscribe(\n      (e) => log2(\"Ignored event\", e.type, e, \"(current state won't handle it)\")\n    )\n    // machine.events.willExitState.subscribe((s) => log(\"Exiting state\", s)),\n    // machine.events.didEnterState.subscribe((s) => log(\"Entering state\", s)),\n  ];\n  return () => {\n    for (const unsub of unsubs) {\n      unsub();\n    }\n  };\n}\nfunction defineConnectivityEvents(machine) {\n  const statusDidChange = makeEventSource();\n  const didConnect = makeEventSource();\n  const didDisconnect = makeEventSource();\n  let lastStatus = null;\n  const unsubscribe = machine.events.didEnterState.subscribe(() => {\n    const currStatus = toNewConnectionStatus(machine);\n    if (currStatus !== lastStatus) {\n      statusDidChange.notify(currStatus);\n    }\n    if (lastStatus === \"connected\" && currStatus !== \"connected\") {\n      didDisconnect.notify();\n    } else if (lastStatus !== \"connected\" && currStatus === \"connected\") {\n      didConnect.notify();\n    }\n    lastStatus = currStatus;\n  });\n  return {\n    statusDidChange: statusDidChange.observable,\n    didConnect: didConnect.observable,\n    didDisconnect: didDisconnect.observable,\n    unsubscribe\n  };\n}\nvar assign = (patch) => (ctx) => ctx.patch(patch);\nfunction createConnectionStateMachine(delegates, options) {\n  const onMessage = makeEventSource();\n  onMessage.pause();\n  const onLiveblocksError = makeEventSource();\n  function fireErrorEvent(errmsg, errcode) {\n    return () => {\n      const err = new LiveblocksError(errmsg, errcode);\n      onLiveblocksError.notify(err);\n    };\n  }\n  const initialContext = {\n    successCount: 0,\n    authValue: null,\n    socket: null,\n    backoffDelay: RESET_DELAY\n  };\n  const machine = new FSM(initialContext).addState(\"@idle.initial\").addState(\"@idle.failed\").addState(\"@idle.zombie\").addState(\"@auth.busy\").addState(\"@auth.backoff\").addState(\"@connecting.busy\").addState(\"@connecting.backoff\").addState(\"@ok.connected\").addState(\"@ok.awaiting-pong\");\n  machine.addTransitions(\"*\", {\n    RECONNECT: {\n      target: \"@auth.backoff\",\n      effect: [increaseBackoffDelay, resetSuccessCount]\n    },\n    DISCONNECT: \"@idle.initial\"\n  });\n  machine.onEnter(\"@idle.*\", resetSuccessCount).addTransitions(\"@idle.*\", {\n    CONNECT: (_, ctx) => (\n      // If we still have a known authValue, try to reconnect to the socket directly,\n      // otherwise, try to obtain a new authValue\n      ctx.authValue !== null ? \"@connecting.busy\" : \"@auth.busy\"\n    )\n  });\n  machine.addTransitions(\"@auth.backoff\", {\n    NAVIGATOR_ONLINE: {\n      target: \"@auth.busy\",\n      effect: assign({ backoffDelay: RESET_DELAY })\n    }\n  }).addTimedTransition(\n    \"@auth.backoff\",\n    (ctx) => ctx.backoffDelay,\n    \"@auth.busy\"\n  ).onEnterAsync(\n    \"@auth.busy\",\n    () => withTimeout(\n      delegates.authenticate(),\n      AUTH_TIMEOUT,\n      \"Timed out during auth\"\n    ),\n    // On successful authentication\n    (okEvent) => ({\n      target: \"@connecting.busy\",\n      effect: assign({\n        authValue: okEvent.data\n      })\n    }),\n    // Auth failed\n    (failedEvent) => {\n      if (failedEvent.reason instanceof StopRetrying) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            log(2 /* ERROR */, failedEvent.reason.message),\n            fireErrorEvent(failedEvent.reason.message, -1)\n          ]\n        };\n      }\n      return {\n        target: \"@auth.backoff\",\n        effect: [\n          increaseBackoffDelay,\n          log(\n            2 /* ERROR */,\n            `Authentication failed: ${failedEvent.reason instanceof Error ? failedEvent.reason.message : String(failedEvent.reason)}`\n          )\n        ]\n      };\n    }\n  );\n  const onSocketError = (event) => machine.send({ type: \"EXPLICIT_SOCKET_ERROR\", event });\n  const onSocketClose = (event) => machine.send({ type: \"EXPLICIT_SOCKET_CLOSE\", event });\n  const onSocketMessage = (event) => event.data === \"pong\" ? machine.send({ type: \"PONG\" }) : onMessage.notify(event);\n  function teardownSocket(socket) {\n    if (socket) {\n      socket.removeEventListener(\"error\", onSocketError);\n      socket.removeEventListener(\"close\", onSocketClose);\n      socket.removeEventListener(\"message\", onSocketMessage);\n      socket.close();\n    }\n  }\n  machine.addTransitions(\"@connecting.backoff\", {\n    NAVIGATOR_ONLINE: {\n      target: \"@connecting.busy\",\n      effect: assign({ backoffDelay: RESET_DELAY })\n    }\n  }).addTimedTransition(\n    \"@connecting.backoff\",\n    (ctx) => ctx.backoffDelay,\n    \"@connecting.busy\"\n  ).onEnterAsync(\n    \"@connecting.busy\",\n    //\n    // Use the \"createSocket\" delegate function (provided to the\n    // ManagedSocket) to create the actual WebSocket connection instance.\n    // Then, set up all the necessary event listeners, and wait for the\n    // \"open\" event to occur.\n    //\n    // When the \"open\" event happens, we're ready to transition to the\n    // OK state. This is done by resolving the Promise.\n    //\n    async (ctx, signal) => {\n      let capturedPrematureEvent = null;\n      let unconfirmedSocket = null;\n      const connect$ = new Promise(\n        (resolve, rej) => {\n          if (ctx.authValue === null) {\n            throw new Error(\"No auth authValue\");\n          }\n          const socket = delegates.createSocket(ctx.authValue);\n          unconfirmedSocket = socket;\n          function reject(event) {\n            capturedPrematureEvent = event;\n            socket.removeEventListener(\"message\", onSocketMessage);\n            rej(event);\n          }\n          const [actor$, didReceiveActor] = controlledPromise();\n          if (!options.waitForActorId) {\n            didReceiveActor();\n          }\n          function waitForActorId(event) {\n            const serverMsg = tryParseJson(event.data);\n            if (serverMsg?.type === 104 /* ROOM_STATE */) {\n              didReceiveActor();\n            }\n          }\n          socket.addEventListener(\"message\", onSocketMessage);\n          if (options.waitForActorId) {\n            socket.addEventListener(\"message\", waitForActorId);\n          }\n          socket.addEventListener(\"error\", reject);\n          socket.addEventListener(\"close\", reject);\n          socket.addEventListener(\"open\", () => {\n            socket.addEventListener(\"error\", onSocketError);\n            socket.addEventListener(\"close\", onSocketClose);\n            const unsub = () => {\n              socket.removeEventListener(\"error\", reject);\n              socket.removeEventListener(\"close\", reject);\n              socket.removeEventListener(\"message\", waitForActorId);\n            };\n            void actor$.then(() => {\n              resolve([socket, unsub]);\n            });\n          });\n        }\n      );\n      return withTimeout(\n        connect$,\n        SOCKET_CONNECT_TIMEOUT,\n        \"Timed out during websocket connection\"\n      ).then(\n        //\n        // Part 3:\n        // By now, our \"open\" event has fired, and the promise has been\n        // resolved. Two possible scenarios:\n        //\n        // 1. The happy path. Most likely.\n        // 2. Uh-oh. A premature close/error event has been observed. Let's\n        //    reject the promise after all.\n        //\n        // Any close/error event that will get scheduled after this point\n        // onwards, will be caught in the OK state, and dealt with\n        // accordingly.\n        //\n        ([socket, unsub]) => {\n          unsub();\n          if (signal.aborted) {\n            throw new Error(\"Aborted\");\n          }\n          if (capturedPrematureEvent) {\n            throw capturedPrematureEvent;\n          }\n          return socket;\n        }\n      ).catch((e) => {\n        teardownSocket(unconfirmedSocket);\n        throw e;\n      });\n    },\n    // Only transition to OK state after a successfully opened WebSocket connection\n    (okEvent) => ({\n      target: \"@ok.connected\",\n      effect: assign({\n        socket: okEvent.data,\n        backoffDelay: RESET_DELAY\n      })\n    }),\n    // If the WebSocket connection cannot be established\n    (failure) => {\n      const err = failure.reason;\n      if (err instanceof StopRetrying) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            log(2 /* ERROR */, err.message),\n            fireErrorEvent(err.message, -1)\n          ]\n        };\n      }\n      if (isCloseEvent(err)) {\n        if (err.code === 4109 /* TOKEN_EXPIRED */) {\n          return \"@auth.busy\";\n        }\n        if (shouldRetryWithoutReauth(err.code)) {\n          return {\n            target: \"@connecting.backoff\",\n            effect: [\n              increaseBackoffDelayAggressively,\n              logPrematureErrorOrCloseEvent(err)\n            ]\n          };\n        }\n        if (shouldDisconnect(err.code)) {\n          return {\n            target: \"@idle.failed\",\n            effect: [\n              log(2 /* ERROR */, err.reason),\n              fireErrorEvent(err.reason, err.code)\n            ]\n          };\n        }\n      }\n      return {\n        target: \"@auth.backoff\",\n        effect: [increaseBackoffDelay, logPrematureErrorOrCloseEvent(err)]\n      };\n    }\n  );\n  const sendHeartbeat = {\n    target: \"@ok.awaiting-pong\",\n    effect: (ctx) => {\n      ctx.socket?.send(\"ping\");\n    }\n  };\n  const maybeHeartbeat = () => {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const canZombie = doc?.visibilityState === \"hidden\" && delegates.canZombie();\n    return canZombie ? \"@idle.zombie\" : sendHeartbeat;\n  };\n  machine.addTimedTransition(\"@ok.connected\", HEARTBEAT_INTERVAL, maybeHeartbeat).addTransitions(\"@ok.connected\", {\n    NAVIGATOR_OFFLINE: maybeHeartbeat,\n    // Don't take the browser's word for it when it says it's offline. Do a ping/pong to make sure.\n    WINDOW_GOT_FOCUS: sendHeartbeat\n  });\n  machine.addTransitions(\"@idle.zombie\", {\n    WINDOW_GOT_FOCUS: \"@connecting.backoff\"\n    // When in zombie state, the client will try to wake up automatically when the window regains focus\n  });\n  machine.onEnter(\"@ok.*\", (ctx) => {\n    ctx.patch({ successCount: ctx.successCount + 1 });\n    const timerID = setTimeout(\n      // On the next tick, start delivering all messages that have already\n      // been received, and continue synchronous delivery of all future\n      // incoming messages.\n      onMessage.unpause,\n      0\n    );\n    return (ctx2) => {\n      teardownSocket(ctx2.socket);\n      ctx2.patch({ socket: null });\n      clearTimeout(timerID);\n      onMessage.pause();\n    };\n  }).addTransitions(\"@ok.awaiting-pong\", { PONG: \"@ok.connected\" }).addTimedTransition(\"@ok.awaiting-pong\", PONG_TIMEOUT, {\n    target: \"@connecting.busy\",\n    // Log implicit connection loss and drop the current open socket\n    effect: log(\n      1 /* WARN */,\n      \"Received no pong from server, assume implicit connection loss.\"\n    )\n  }).addTransitions(\"@ok.*\", {\n    // When a socket receives an error, this can cause the closing of the\n    // socket, or not. So always check to see if the socket is still OPEN or\n    // not. When still OPEN, don't transition.\n    EXPLICIT_SOCKET_ERROR: (_, context) => {\n      if (context.socket?.readyState === 1) {\n        return null;\n      }\n      return {\n        target: \"@connecting.backoff\",\n        effect: increaseBackoffDelay\n      };\n    },\n    EXPLICIT_SOCKET_CLOSE: (e) => {\n      if (shouldDisconnect(e.event.code)) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            logPermanentClose,\n            fireErrorEvent(e.event.reason, e.event.code)\n          ]\n        };\n      }\n      if (shouldReauth(e.event.code)) {\n        if (e.event.code === 4109 /* TOKEN_EXPIRED */) {\n          return \"@auth.busy\";\n        } else {\n          return {\n            target: \"@auth.backoff\",\n            effect: [increaseBackoffDelay, logCloseEvent(e.event)]\n          };\n        }\n      }\n      if (shouldRetryWithoutReauth(e.event.code)) {\n        return {\n          target: \"@connecting.backoff\",\n          effect: [increaseBackoffDelayAggressively, logCloseEvent(e.event)]\n        };\n      }\n      return {\n        target: \"@connecting.backoff\",\n        effect: [increaseBackoffDelay, logCloseEvent(e.event)]\n      };\n    }\n  });\n  if (typeof document !== \"undefined\") {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const win = typeof window !== \"undefined\" ? window : void 0;\n    const root = win ?? doc;\n    machine.onEnter(\"*\", (ctx) => {\n      function onNetworkOffline() {\n        machine.send({ type: \"NAVIGATOR_OFFLINE\" });\n      }\n      function onNetworkBackOnline() {\n        machine.send({ type: \"NAVIGATOR_ONLINE\" });\n      }\n      function onVisibilityChange() {\n        if (doc?.visibilityState === \"visible\") {\n          machine.send({ type: \"WINDOW_GOT_FOCUS\" });\n        }\n      }\n      win?.addEventListener(\"online\", onNetworkBackOnline);\n      win?.addEventListener(\"offline\", onNetworkOffline);\n      root?.addEventListener(\"visibilitychange\", onVisibilityChange);\n      return () => {\n        root?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n        win?.removeEventListener(\"online\", onNetworkBackOnline);\n        win?.removeEventListener(\"offline\", onNetworkOffline);\n        teardownSocket(ctx.socket);\n      };\n    });\n  }\n  const cleanups = [];\n  const { statusDidChange, didConnect, didDisconnect, unsubscribe } = defineConnectivityEvents(machine);\n  cleanups.push(unsubscribe);\n  if (options.enableDebugLogging) {\n    cleanups.push(enableTracing(machine));\n  }\n  machine.start();\n  return {\n    machine,\n    cleanups,\n    // Observable events that will be emitted by this machine\n    events: {\n      statusDidChange,\n      didConnect,\n      didDisconnect,\n      onMessage: onMessage.observable,\n      onLiveblocksError: onLiveblocksError.observable\n    }\n  };\n}\nvar ManagedSocket = class {\n  constructor(delegates, enableDebugLogging = false, waitForActorId = true) {\n    const { machine, events, cleanups } = createConnectionStateMachine(\n      delegates,\n      { waitForActorId, enableDebugLogging }\n    );\n    this.machine = machine;\n    this.events = events;\n    this.cleanups = cleanups;\n  }\n  getStatus() {\n    try {\n      return toNewConnectionStatus(this.machine);\n    } catch {\n      return \"initial\";\n    }\n  }\n  /**\n   * Returns the current auth authValue.\n   */\n  get authValue() {\n    return this.machine.context.authValue;\n  }\n  /**\n   * Call this method to try to connect to a WebSocket. This only has an effect\n   * if the machine is idle at the moment, otherwise this is a no-op.\n   */\n  connect() {\n    this.machine.send({ type: \"CONNECT\" });\n  }\n  /**\n   * If idle, will try to connect. Otherwise, it will attempt to reconnect to\n   * the socket, potentially obtaining a new authValue first, if needed.\n   */\n  reconnect() {\n    this.machine.send({ type: \"RECONNECT\" });\n  }\n  /**\n   * Call this method to disconnect from the current WebSocket. Is going to be\n   * a no-op if there is no active connection.\n   */\n  disconnect() {\n    this.machine.send({ type: \"DISCONNECT\" });\n  }\n  /**\n   * Call this to stop the machine and run necessary cleanup functions. After\n   * calling destroy(), you can no longer use this instance. Call this before\n   * letting the instance get garbage collected.\n   */\n  destroy() {\n    this.machine.stop();\n    let cleanup;\n    while (cleanup = this.cleanups.pop()) {\n      cleanup();\n    }\n  }\n  /**\n   * Safely send a message to the current WebSocket connection. Will emit a log\n   * message if this is somehow impossible.\n   */\n  send(data) {\n    const socket = this.machine.context?.socket;\n    if (socket === null) {\n      warn(\"Cannot send: not connected yet\", data);\n    } else if (socket.readyState !== 1) {\n      warn(\"Cannot send: WebSocket no longer open\", data);\n    } else {\n      socket.send(data);\n    }\n  }\n  /**\n   * NOTE: Used by the E2E app only, to simulate explicit events.\n   * Not ideal to keep exposed :(\n   */\n  _privateSendMachineEvent(event) {\n    this.machine.send(event);\n  }\n};\n\n// src/protocol/AuthToken.ts\nfunction canWriteStorage(scopes) {\n  return scopes.includes(\"room:write\" /* Write */);\n}\nfunction canComment(scopes) {\n  return scopes.includes(\"comments:write\" /* CommentsWrite */) || scopes.includes(\"room:write\" /* Write */);\n}\nfunction isValidAuthTokenPayload(data) {\n  return isPlainObject(data) && (data.k === \"acc\" /* ACCESS_TOKEN */ || data.k === \"id\" /* ID_TOKEN */ || data.k === \"sec-legacy\" /* SECRET_LEGACY */);\n}\nfunction parseAuthToken(rawTokenString) {\n  const tokenParts = rawTokenString.split(\".\");\n  if (tokenParts.length !== 3) {\n    throw new Error(\"Authentication error: invalid JWT token\");\n  }\n  const payload = tryParseJson(b64decode(tokenParts[1]));\n  if (!(payload && isValidAuthTokenPayload(payload))) {\n    throw new Error(\n      \"Authentication error: expected a valid token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback\"\n    );\n  }\n  return {\n    raw: rawTokenString,\n    parsed: payload\n  };\n}\n\n// src/auth-manager.ts\nfunction createAuthManager(authOptions) {\n  const authentication = prepareAuthentication(authOptions);\n  const seenTokens = /* @__PURE__ */ new Set();\n  const tokens = [];\n  const expiryTimes = [];\n  const requestPromises = /* @__PURE__ */ new Map();\n  function reset() {\n    seenTokens.clear();\n    tokens.length = 0;\n    expiryTimes.length = 0;\n    requestPromises.clear();\n  }\n  function hasCorrespondingScopes(requestedScope, scopes) {\n    if (requestedScope === \"comments:read\") {\n      return scopes.includes(\"comments:read\" /* CommentsRead */) || scopes.includes(\"comments:write\" /* CommentsWrite */) || scopes.includes(\"room:read\" /* Read */) || scopes.includes(\"room:write\" /* Write */);\n    } else if (requestedScope === \"room:read\") {\n      return scopes.includes(\"room:read\" /* Read */) || scopes.includes(\"room:write\" /* Write */);\n    }\n    return false;\n  }\n  function getCachedToken(requestOptions) {\n    const now = Math.ceil(Date.now() / 1e3);\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const token = tokens[i];\n      const expiresAt = expiryTimes[i];\n      if (expiresAt <= now) {\n        tokens.splice(i, 1);\n        expiryTimes.splice(i, 1);\n        continue;\n      }\n      if (token.parsed.k === \"id\" /* ID_TOKEN */) {\n        return token;\n      } else if (token.parsed.k === \"acc\" /* ACCESS_TOKEN */) {\n        if (!requestOptions.roomId && Object.entries(token.parsed.perms).length === 0) {\n          return token;\n        }\n        for (const [resource, scopes] of Object.entries(token.parsed.perms)) {\n          if (!requestOptions.roomId) {\n            if (resource.includes(\"*\") && hasCorrespondingScopes(requestOptions.requestedScope, scopes)) {\n              return token;\n            }\n          } else if (resource.includes(\"*\") && requestOptions.roomId.startsWith(resource.replace(\"*\", \"\")) || requestOptions.roomId === resource && hasCorrespondingScopes(requestOptions.requestedScope, scopes)) {\n            return token;\n          }\n        }\n      }\n    }\n    return void 0;\n  }\n  async function makeAuthRequest(options) {\n    const fetcher = authOptions.polyfills?.fetch ?? (typeof window === \"undefined\" ? void 0 : window.fetch);\n    if (authentication.type === \"private\") {\n      if (fetcher === void 0) {\n        throw new StopRetrying(\n          \"To use Liveblocks client in a non-DOM environment with a url as auth endpoint, you need to provide a fetch polyfill.\"\n        );\n      }\n      const response = await fetchAuthEndpoint(fetcher, authentication.url, {\n        room: options.roomId\n      });\n      const parsed = parseAuthToken(response.token);\n      if (seenTokens.has(parsed.raw)) {\n        throw new StopRetrying(\n          \"The same Liveblocks auth token was issued from the backend before. Caching Liveblocks tokens is not supported.\"\n        );\n      }\n      return parsed;\n    }\n    if (authentication.type === \"custom\") {\n      const response = await authentication.callback(options.roomId);\n      if (response && typeof response === \"object\") {\n        if (typeof response.token === \"string\") {\n          const parsed = parseAuthToken(response.token);\n          return parsed;\n        } else if (typeof response.error === \"string\") {\n          const reason = `Authentication failed: ${\"reason\" in response && typeof response.reason === \"string\" ? response.reason : \"Forbidden\"}`;\n          if (response.error === \"forbidden\") {\n            throw new StopRetrying(reason);\n          } else {\n            throw new Error(reason);\n          }\n        }\n      }\n      throw new Error(\n        'Your authentication callback function should return a token, but it did not. Hint: the return value should look like: { token: \"...\" }'\n      );\n    }\n    throw new Error(\n      \"Unexpected authentication type. Must be private or custom.\"\n    );\n  }\n  async function getAuthValue(requestOptions) {\n    if (authentication.type === \"public\") {\n      return { type: \"public\", publicApiKey: authentication.publicApiKey };\n    }\n    const cachedToken = getCachedToken(requestOptions);\n    if (cachedToken !== void 0) {\n      return { type: \"secret\", token: cachedToken };\n    }\n    let currentPromise;\n    if (requestOptions.roomId) {\n      currentPromise = requestPromises.get(requestOptions.roomId);\n      if (currentPromise === void 0) {\n        currentPromise = makeAuthRequest(requestOptions);\n        requestPromises.set(requestOptions.roomId, currentPromise);\n      }\n    } else {\n      currentPromise = requestPromises.get(\"liveblocks-user-token\");\n      if (currentPromise === void 0) {\n        currentPromise = makeAuthRequest(requestOptions);\n        requestPromises.set(\"liveblocks-user-token\", currentPromise);\n      }\n    }\n    try {\n      const token = await currentPromise;\n      const BUFFER = 30;\n      const expiresAt = Math.floor(Date.now() / 1e3) + (token.parsed.exp - token.parsed.iat) - BUFFER;\n      seenTokens.add(token.raw);\n      if (token.parsed.k !== \"sec-legacy\" /* SECRET_LEGACY */) {\n        tokens.push(token);\n        expiryTimes.push(expiresAt);\n      }\n      return { type: \"secret\", token };\n    } finally {\n      if (requestOptions.roomId) {\n        requestPromises.delete(requestOptions.roomId);\n      } else {\n        requestPromises.delete(\"liveblocks-user-token\");\n      }\n    }\n  }\n  return {\n    reset,\n    getAuthValue\n  };\n}\nfunction prepareAuthentication(authOptions) {\n  const { publicApiKey, authEndpoint } = authOptions;\n  if (authEndpoint !== void 0 && publicApiKey !== void 0) {\n    throw new Error(\n      \"You cannot simultaneously use `publicApiKey` and `authEndpoint` options. Please pick one and leave the other option unspecified. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n    );\n  }\n  if (typeof publicApiKey === \"string\") {\n    if (publicApiKey.startsWith(\"sk_\")) {\n      throw new Error(\n        \"Invalid `publicApiKey` option. The value you passed is a secret key, which should not be used from the client. Please only ever pass a public key here. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    } else if (!publicApiKey.startsWith(\"pk_\")) {\n      throw new Error(\n        \"Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    }\n    return {\n      type: \"public\",\n      publicApiKey\n    };\n  }\n  if (typeof authEndpoint === \"string\") {\n    return {\n      type: \"private\",\n      url: authEndpoint\n    };\n  } else if (typeof authEndpoint === \"function\") {\n    return {\n      type: \"custom\",\n      callback: authEndpoint\n    };\n  } else if (authEndpoint !== void 0) {\n    throw new Error(\n      \"The `authEndpoint` option must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint\"\n    );\n  }\n  throw new Error(\n    \"Invalid Liveblocks client options. Please provide either a `publicApiKey` or `authEndpoint` option. They cannot both be empty. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n  );\n}\nasync function fetchAuthEndpoint(fetch2, endpoint, body) {\n  const res = await fetch2(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) {\n    const reason = `${(await res.text()).trim() || \"reason not provided in auth response\"} (${res.status} returned by POST ${endpoint})`;\n    if (res.status === 401 || res.status === 403) {\n      throw new StopRetrying(`Unauthorized: ${reason}`);\n    } else {\n      throw new Error(`Failed to authenticate: ${reason}`);\n    }\n  }\n  let data;\n  try {\n    data = await res.json();\n  } catch (er) {\n    throw new Error(\n      `Expected a JSON response when doing a POST request on \"${endpoint}\". ${String(\n        er\n      )}`\n    );\n  }\n  if (!isPlainObject(data) || typeof data.token !== \"string\") {\n    throw new Error(\n      `Expected a JSON response of the form \\`{ token: \"...\" }\\` when doing a POST request on \"${endpoint}\", but got ${JSON.stringify(\n        data\n      )}`\n    );\n  }\n  const { token } = data;\n  return { token };\n}\n\n// src/constants.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\n\n// src/internal.ts\nvar kInternal = Symbol();\n\n// src/devtools/bridge.ts\nvar _bridgeActive = false;\nfunction activateBridge(allowed) {\n  _bridgeActive = allowed;\n}\nfunction sendToPanel(message, options) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  const fullMsg = {\n    ...message,\n    source: \"liveblocks-devtools-client\"\n  };\n  if (!(options?.force || _bridgeActive)) {\n    return;\n  }\n  window.postMessage(fullMsg, \"*\");\n}\nvar eventSource = makeEventSource();\nif ( true && typeof window !== \"undefined\") {\n  window.addEventListener(\"message\", (event) => {\n    if (event.source === window && event.data?.source === \"liveblocks-devtools-panel\") {\n      eventSource.notify(event.data);\n    } else {\n    }\n  });\n}\nvar onMessageFromPanel = eventSource.observable;\n\n// src/devtools/index.ts\nvar VERSION = PKG_VERSION || \"dev\";\nvar _devtoolsSetupHasRun = false;\nfunction setupDevTools(getAllRooms) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  if (_devtoolsSetupHasRun) {\n    return;\n  }\n  _devtoolsSetupHasRun = true;\n  onMessageFromPanel.subscribe((msg) => {\n    switch (msg.msg) {\n      case \"connect\": {\n        activateBridge(true);\n        for (const roomId of getAllRooms()) {\n          sendToPanel({\n            msg: \"room::available\",\n            roomId,\n            clientVersion: VERSION\n          });\n        }\n        break;\n      }\n    }\n  });\n  sendToPanel({ msg: \"wake-up-devtools\" }, { force: true });\n}\nvar unsubsByRoomId = /* @__PURE__ */ new Map();\nfunction stopSyncStream(roomId) {\n  const unsubs = unsubsByRoomId.get(roomId) ?? [];\n  unsubsByRoomId.delete(roomId);\n  for (const unsub of unsubs) {\n    unsub();\n  }\n}\nfunction startSyncStream(room) {\n  stopSyncStream(room.id);\n  fullSync(room);\n  unsubsByRoomId.set(room.id, [\n    // When the connection status changes\n    room.events.status.subscribe(() => partialSyncConnection(room)),\n    // When storage initializes, send the update\n    room.events.storageDidLoad.subscribeOnce(() => partialSyncStorage(room)),\n    // Any time storage updates, send the new storage root\n    room.events.storageBatch.subscribe(() => partialSyncStorage(room)),\n    // Any time \"me\" or \"others\" updates, send the new values accordingly\n    room.events.self.subscribe(() => partialSyncMe(room)),\n    room.events.others.subscribe(() => partialSyncOthers(room)),\n    // Any time ydoc is updated, forward the update\n    room.events.ydoc.subscribe((update) => syncYdocUpdate(room, update)),\n    // Any time a custom room event is received, forward it\n    room.events.customEvent.subscribe(\n      (eventData) => forwardEvent(room, eventData)\n    )\n  ]);\n}\nfunction syncYdocUpdate(room, update) {\n  sendToPanel({\n    msg: \"room::sync::ydoc\",\n    roomId: room.id,\n    update\n  });\n}\nvar loadedAt = Date.now();\nvar eventCounter = 0;\nfunction nextEventId() {\n  return `event-${loadedAt}-${eventCounter++}`;\n}\nfunction forwardEvent(room, eventData) {\n  sendToPanel({\n    msg: \"room::events::custom-event\",\n    roomId: room.id,\n    event: {\n      type: \"CustomEvent\",\n      id: nextEventId(),\n      key: \"Event\",\n      connectionId: eventData.connectionId,\n      payload: eventData.event\n    }\n  });\n}\nfunction partialSyncConnection(room) {\n  sendToPanel({\n    msg: \"room::sync::partial\",\n    roomId: room.id,\n    status: room.getStatus()\n  });\n}\nfunction partialSyncStorage(room) {\n  const root = room.getStorageSnapshot();\n  if (root) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      storage: root.toTreeNode(\"root\").payload\n    });\n  }\n}\nfunction partialSyncMe(room) {\n  const me = room[kInternal].getSelf_forDevTools();\n  if (me) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      me\n    });\n  }\n}\nfunction partialSyncOthers(room) {\n  const others = room[kInternal].getOthers_forDevTools();\n  if (others) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      others\n    });\n  }\n}\nfunction fullSync(room) {\n  const root = room.getStorageSnapshot();\n  const me = room[kInternal].getSelf_forDevTools();\n  const others = room[kInternal].getOthers_forDevTools();\n  room.fetchYDoc(\"\");\n  sendToPanel({\n    msg: \"room::sync::full\",\n    roomId: room.id,\n    status: room.getStatus(),\n    storage: root?.toTreeNode(\"root\").payload ?? null,\n    me,\n    others\n  });\n}\nvar roomChannelListeners = /* @__PURE__ */ new Map();\nfunction stopRoomChannelListener(roomId) {\n  const listener = roomChannelListeners.get(roomId);\n  roomChannelListeners.delete(roomId);\n  if (listener) {\n    listener();\n  }\n}\nfunction linkDevTools(roomId, room) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  sendToPanel({ msg: \"room::available\", roomId, clientVersion: VERSION });\n  stopRoomChannelListener(roomId);\n  roomChannelListeners.set(\n    roomId,\n    // Returns the unsubscribe callback, that we store in the\n    // roomChannelListeners registry\n    onMessageFromPanel.subscribe((msg) => {\n      switch (msg.msg) {\n        case \"room::subscribe\": {\n          if (msg.roomId === roomId) {\n            startSyncStream(room);\n          }\n          break;\n        }\n        case \"room::unsubscribe\": {\n          if (msg.roomId === roomId) {\n            stopSyncStream(roomId);\n          }\n          break;\n        }\n      }\n    })\n  );\n}\nfunction unlinkDevTools(roomId) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  stopSyncStream(roomId);\n  stopRoomChannelListener(roomId);\n  sendToPanel({\n    msg: \"room::unavailable\",\n    roomId\n  });\n}\n\n// src/lib/stringify.ts\nfunction stringify(object, ...args) {\n  if (typeof object !== \"object\" || object === null || Array.isArray(object)) {\n    return JSON.stringify(object, ...args);\n  }\n  const sortedObject = Object.keys(object).sort().reduce(\n    (sortedObject2, key) => {\n      sortedObject2[key] = object[key];\n      return sortedObject2;\n    },\n    {}\n  );\n  return JSON.stringify(sortedObject, ...args);\n}\n\n// src/lib/batch.ts\nvar DEFAULT_SIZE = 50;\nvar BatchCall = class {\n  constructor(input) {\n    this.input = input;\n    const { promise, resolve, reject } = Promise_withResolvers();\n    this.promise = promise;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n};\nvar Batch = class {\n  constructor(callback, options) {\n    this.queue = [];\n    this.error = false;\n    this.callback = callback;\n    this.size = options.size ?? DEFAULT_SIZE;\n    this.delay = options.delay;\n  }\n  clearDelayTimeout() {\n    if (this.delayTimeoutId !== void 0) {\n      clearTimeout(this.delayTimeoutId);\n      this.delayTimeoutId = void 0;\n    }\n  }\n  schedule() {\n    if (this.queue.length === this.size) {\n      void this.flush();\n    } else if (this.queue.length === 1) {\n      this.clearDelayTimeout();\n      this.delayTimeoutId = setTimeout(() => void this.flush(), this.delay);\n    }\n  }\n  async flush() {\n    if (this.queue.length === 0) {\n      return;\n    }\n    const calls = this.queue.splice(0);\n    const inputs = calls.map((call) => call.input);\n    try {\n      const results = await this.callback(inputs);\n      this.error = false;\n      calls.forEach((call, index) => {\n        const result = results?.[index];\n        if (!Array.isArray(results)) {\n          call.reject(new Error(\"Callback must return an array.\"));\n        } else if (calls.length !== results.length) {\n          call.reject(\n            new Error(\n              `Callback must return an array of the same length as the number of provided items. Expected ${calls.length}, but got ${results.length}.`\n            )\n          );\n        } else if (result instanceof Error) {\n          call.reject(result);\n        } else {\n          call.resolve(result);\n        }\n      });\n    } catch (error3) {\n      this.error = true;\n      calls.forEach((call) => {\n        call.reject(error3);\n      });\n    }\n  }\n  get(input) {\n    const existingCall = this.queue.find(\n      (call2) => stringify(call2.input) === stringify(input)\n    );\n    if (existingCall) {\n      return existingCall.promise;\n    }\n    const call = new BatchCall(input);\n    this.queue.push(call);\n    this.schedule();\n    return call.promise;\n  }\n  clear() {\n    this.queue = [];\n    this.error = false;\n    this.clearDelayTimeout();\n  }\n};\nfunction createBatchStore(callback, options) {\n  const batch = new Batch(callback, options);\n  const cache = /* @__PURE__ */ new Map();\n  const eventSource2 = makeEventSource();\n  function getCacheKey(args) {\n    return stringify(args);\n  }\n  function setStateAndNotify(cacheKey, state) {\n    cache.set(cacheKey, state);\n    eventSource2.notify();\n  }\n  async function get(input) {\n    const cacheKey = getCacheKey(input);\n    if (cache.has(cacheKey)) {\n      return;\n    }\n    try {\n      setStateAndNotify(cacheKey, { isLoading: true });\n      const result = await batch.get(input);\n      setStateAndNotify(cacheKey, { isLoading: false, data: result });\n    } catch (error3) {\n      setStateAndNotify(cacheKey, {\n        isLoading: false,\n        error: error3\n      });\n    }\n  }\n  function getState(input) {\n    const cacheKey = getCacheKey(input);\n    return cache.get(cacheKey);\n  }\n  return {\n    ...eventSource2.observable,\n    get,\n    getState\n  };\n}\n\n// src/lib/create-store.ts\nfunction createStore(initialState) {\n  let state = initialState;\n  const subscribers = /* @__PURE__ */ new Set();\n  function get() {\n    return state;\n  }\n  function set(callback) {\n    const newState = callback(state);\n    if (state === newState) {\n      return;\n    }\n    state = newState;\n    for (const subscriber of subscribers) {\n      subscriber(state);\n    }\n  }\n  function subscribe(callback) {\n    subscribers.add(callback);\n    callback(state);\n    return () => {\n      subscribers.delete(callback);\n    };\n  }\n  return {\n    get,\n    set,\n    subscribe\n  };\n}\n\n// src/convert-plain-data.ts\nfunction convertToCommentData(data) {\n  const editedAt = data.editedAt ? new Date(data.editedAt) : void 0;\n  const createdAt = new Date(data.createdAt);\n  const reactions = data.reactions.map((reaction) => ({\n    ...reaction,\n    createdAt: new Date(reaction.createdAt)\n  }));\n  if (data.body) {\n    return {\n      ...data,\n      reactions,\n      createdAt,\n      editedAt\n    };\n  } else {\n    const deletedAt = new Date(data.deletedAt);\n    return {\n      ...data,\n      reactions,\n      createdAt,\n      editedAt,\n      deletedAt\n    };\n  }\n}\nfunction convertToThreadData(data) {\n  const updatedAt = data.updatedAt ? new Date(data.updatedAt) : void 0;\n  const createdAt = new Date(data.createdAt);\n  const comments = data.comments.map(\n    (comment) => convertToCommentData(comment)\n  );\n  return {\n    ...data,\n    createdAt,\n    updatedAt,\n    comments\n  };\n}\nfunction convertToCommentUserReaction(data) {\n  return {\n    ...data,\n    createdAt: new Date(data.createdAt)\n  };\n}\nfunction convertToInboxNotificationData(data) {\n  const notifiedAt = new Date(data.notifiedAt);\n  const readAt = data.readAt ? new Date(data.readAt) : null;\n  if (\"activities\" in data) {\n    const activities = data.activities.map((activity) => ({\n      ...activity,\n      createdAt: new Date(activity.createdAt)\n    }));\n    return {\n      ...data,\n      notifiedAt,\n      readAt,\n      activities\n    };\n  }\n  return {\n    ...data,\n    notifiedAt,\n    readAt\n  };\n}\nfunction convertToThreadDeleteInfo(data) {\n  const deletedAt = new Date(data.deletedAt);\n  return {\n    ...data,\n    deletedAt\n  };\n}\nfunction convertToInboxNotificationDeleteInfo(data) {\n  const deletedAt = new Date(data.deletedAt);\n  return {\n    ...data,\n    deletedAt\n  };\n}\n\n// src/lib/url.ts\nfunction toURLSearchParams(params) {\n  const result = new URLSearchParams();\n  for (const [key, value] of Object.entries(params)) {\n    if (value !== void 0 && value !== null) {\n      result.set(key, value.toString());\n    }\n  }\n  return result;\n}\nfunction urljoin(baseUrl, path, params) {\n  const url = new URL(path, baseUrl);\n  if (params !== void 0) {\n    url.search = (params instanceof URLSearchParams ? params : toURLSearchParams(params)).toString();\n  }\n  return url.toString();\n}\n\n// src/notifications.ts\nvar MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY = 50;\nfunction createNotificationsApi({\n  baseUrl,\n  authManager,\n  currentUserIdStore,\n  fetcher\n}) {\n  async function fetchJson(endpoint, options, params) {\n    const authValue = await authManager.getAuthValue({\n      requestedScope: \"comments:read\"\n    });\n    if (authValue.type === \"secret\" && authValue.token.parsed.k === \"acc\" /* ACCESS_TOKEN */) {\n      const userId = authValue.token.parsed.uid;\n      currentUserIdStore.set(() => userId);\n    }\n    const url = urljoin(baseUrl, `/v2/c${endpoint}`, params);\n    const response = await fetcher(url.toString(), {\n      ...options,\n      headers: {\n        ...options?.headers,\n        Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n      }\n    });\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new NotificationsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new NotificationsApiError(\n            response.statusText,\n            response.status\n          );\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  async function getInboxNotifications(options) {\n    const json = await fetchJson(\"/inbox-notifications\", void 0, {\n      limit: options?.limit,\n      since: options?.since?.toISOString()\n    });\n    return {\n      threads: json.threads.map((thread) => convertToThreadData(thread)),\n      inboxNotifications: json.inboxNotifications.map(\n        (notification) => convertToInboxNotificationData(notification)\n      ),\n      deletedThreads: json.deletedThreads.map(\n        (info) => convertToThreadDeleteInfo(info)\n      ),\n      deletedInboxNotifications: json.deletedInboxNotifications.map(\n        (info) => convertToInboxNotificationDeleteInfo(info)\n      ),\n      meta: {\n        requestedAt: new Date(json.meta.requestedAt)\n      }\n    };\n  }\n  async function getUnreadInboxNotificationsCount() {\n    const { count } = await fetchJson(\"/inbox-notifications/count\");\n    return count;\n  }\n  async function markAllInboxNotificationsAsRead() {\n    await fetchJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds: \"all\" })\n    });\n  }\n  async function markInboxNotificationsAsRead(inboxNotificationIds) {\n    await fetchJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds })\n    });\n  }\n  const batchedMarkInboxNotificationsAsRead = new Batch(\n    async (batchedInboxNotificationIds) => {\n      const inboxNotificationIds = batchedInboxNotificationIds.flat();\n      await markInboxNotificationsAsRead(inboxNotificationIds);\n      return inboxNotificationIds;\n    },\n    { delay: MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY }\n  );\n  async function markInboxNotificationAsRead(inboxNotificationId) {\n    await batchedMarkInboxNotificationsAsRead.get(inboxNotificationId);\n  }\n  async function deleteAllInboxNotifications() {\n    await fetchJson(\"/inbox-notifications\", {\n      method: \"DELETE\"\n    });\n  }\n  async function deleteInboxNotification(inboxNotificationId) {\n    await fetchJson(\n      `/inbox-notifications/${encodeURIComponent(inboxNotificationId)}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  return {\n    getInboxNotifications,\n    getUnreadInboxNotificationsCount,\n    markAllInboxNotificationsAsRead,\n    markInboxNotificationAsRead,\n    deleteAllInboxNotifications,\n    deleteInboxNotification\n  };\n}\n\n// src/lib/position.ts\nvar MIN_CODE = 32;\nvar MAX_CODE = 126;\nvar NUM_DIGITS = MAX_CODE - MIN_CODE + 1;\nvar ZERO = nthDigit(0);\nvar ONE = nthDigit(1);\nvar ZERO_NINE = ZERO + nthDigit(-1);\nfunction nthDigit(n) {\n  const code = MIN_CODE + (n < 0 ? NUM_DIGITS + n : n);\n  if (code < MIN_CODE || code > MAX_CODE) {\n    throw new Error(`Invalid n value: ${n}`);\n  }\n  return String.fromCharCode(code);\n}\nfunction makePosition(x, y) {\n  if (x !== void 0 && y !== void 0) {\n    return between(x, y);\n  } else if (x !== void 0) {\n    return after(x);\n  } else if (y !== void 0) {\n    return before(y);\n  } else {\n    return ONE;\n  }\n}\nfunction before(pos) {\n  const lastIndex = pos.length - 1;\n  for (let i = 0; i <= lastIndex; i++) {\n    const code = pos.charCodeAt(i);\n    if (code <= MIN_CODE) {\n      continue;\n    }\n    if (i === lastIndex) {\n      if (code === MIN_CODE + 1) {\n        return pos.substring(0, i) + ZERO_NINE;\n      } else {\n        return pos.substring(0, i) + String.fromCharCode(code - 1);\n      }\n    } else {\n      return pos.substring(0, i + 1);\n    }\n  }\n  return ONE;\n}\nfunction after(pos) {\n  for (let i = 0; i <= pos.length - 1; i++) {\n    const code = pos.charCodeAt(i);\n    if (code >= MAX_CODE) {\n      continue;\n    }\n    return pos.substring(0, i) + String.fromCharCode(code + 1);\n  }\n  return pos + ONE;\n}\nfunction between(lo, hi) {\n  if (lo < hi) {\n    return _between(lo, hi);\n  } else if (lo > hi) {\n    return _between(hi, lo);\n  } else {\n    throw new Error(\"Cannot compute value between two equal positions\");\n  }\n}\nfunction _between(lo, hi) {\n  let index = 0;\n  const loLen = lo.length;\n  const hiLen = hi.length;\n  while (true) {\n    const loCode = index < loLen ? lo.charCodeAt(index) : MIN_CODE;\n    const hiCode = index < hiLen ? hi.charCodeAt(index) : MAX_CODE;\n    if (loCode === hiCode) {\n      index++;\n      continue;\n    }\n    if (hiCode - loCode === 1) {\n      const size = index + 1;\n      let prefix = lo.substring(0, size);\n      if (prefix.length < size) {\n        prefix += ZERO.repeat(size - prefix.length);\n      }\n      const suffix = lo.substring(size);\n      const nines = \"\";\n      return prefix + _between(suffix, nines);\n    } else {\n      return takeN(lo, index) + String.fromCharCode(hiCode + loCode >> 1);\n    }\n  }\n}\nfunction takeN(pos, n) {\n  return n < pos.length ? pos.substring(0, n) : pos + ZERO.repeat(n - pos.length);\n}\nvar MIN_NON_ZERO_CODE = MIN_CODE + 1;\nfunction isPos(str) {\n  if (str === \"\") {\n    return false;\n  }\n  const lastIdx = str.length - 1;\n  const last = str.charCodeAt(lastIdx);\n  if (last < MIN_NON_ZERO_CODE || last > MAX_CODE) {\n    return false;\n  }\n  for (let i = 0; i < lastIdx; i++) {\n    const code = str.charCodeAt(i);\n    if (code < MIN_CODE || code > MAX_CODE) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction convertToPos(str) {\n  const codes = [];\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i);\n    codes.push(code < MIN_CODE ? MIN_CODE : code > MAX_CODE ? MAX_CODE : code);\n  }\n  while (codes.length > 0 && codes[codes.length - 1] === MIN_CODE) {\n    codes.length--;\n  }\n  return codes.length > 0 ? String.fromCharCode(...codes) : (\n    // Edge case: the str was a 0-only string, which is invalid. Default back to .1\n    ONE\n  );\n}\nfunction asPos(str) {\n  return isPos(str) ? str : convertToPos(str);\n}\n\n// src/protocol/Op.ts\nvar OpCode = /* @__PURE__ */ ((OpCode2) => {\n  OpCode2[OpCode2[\"INIT\"] = 0] = \"INIT\";\n  OpCode2[OpCode2[\"SET_PARENT_KEY\"] = 1] = \"SET_PARENT_KEY\";\n  OpCode2[OpCode2[\"CREATE_LIST\"] = 2] = \"CREATE_LIST\";\n  OpCode2[OpCode2[\"UPDATE_OBJECT\"] = 3] = \"UPDATE_OBJECT\";\n  OpCode2[OpCode2[\"CREATE_OBJECT\"] = 4] = \"CREATE_OBJECT\";\n  OpCode2[OpCode2[\"DELETE_CRDT\"] = 5] = \"DELETE_CRDT\";\n  OpCode2[OpCode2[\"DELETE_OBJECT_KEY\"] = 6] = \"DELETE_OBJECT_KEY\";\n  OpCode2[OpCode2[\"CREATE_MAP\"] = 7] = \"CREATE_MAP\";\n  OpCode2[OpCode2[\"CREATE_REGISTER\"] = 8] = \"CREATE_REGISTER\";\n  return OpCode2;\n})(OpCode || {});\nfunction ackOp(opId) {\n  return {\n    type: 5 /* DELETE_CRDT */,\n    id: \"ACK\",\n    // (H)ACK\n    opId\n  };\n}\nfunction isAckOp(op) {\n  return op.type === 5 /* DELETE_CRDT */ && op.id === \"ACK\";\n}\n\n// src/crdts/AbstractCrdt.ts\nfunction crdtAsLiveNode(value) {\n  return value;\n}\nfunction HasParent(node, key, pos = asPos(key)) {\n  return Object.freeze({ type: \"HasParent\", node, key, pos });\n}\nvar NoParent = Object.freeze({ type: \"NoParent\" });\nfunction Orphaned(oldKey, oldPos = asPos(oldKey)) {\n  return Object.freeze({ type: \"Orphaned\", oldKey, oldPos });\n}\nvar AbstractCrdt = class {\n  constructor() {\n    /** @internal */\n    this._parent = NoParent;\n  }\n  /** @internal */\n  _getParentKeyOrThrow() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        throw new Error(\"Parent key is missing\");\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  get _parentPos() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.pos;\n      case \"NoParent\":\n        throw new Error(\"Parent key is missing\");\n      case \"Orphaned\":\n        return this.parent.oldPos;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  get _pool() {\n    return this.__pool;\n  }\n  get roomId() {\n    return this.__pool ? this.__pool.roomId : null;\n  }\n  /** @internal */\n  get _id() {\n    return this.__id;\n  }\n  /** @internal */\n  get parent() {\n    return this._parent;\n  }\n  /** @internal */\n  get _parentKey() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        return null;\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  _apply(op, _isLocal) {\n    switch (op.type) {\n      case 5 /* DELETE_CRDT */: {\n        if (this.parent.type === \"HasParent\") {\n          return this.parent.node._detachChild(crdtAsLiveNode(this));\n        }\n        return { modified: false };\n      }\n    }\n    return { modified: false };\n  }\n  /** @internal */\n  _setParentLink(newParentNode, newParentKey) {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        if (this.parent.node !== newParentNode) {\n          throw new Error(\"Cannot set parent: node already has a parent\");\n        } else {\n          this._parent = HasParent(newParentNode, newParentKey);\n          return;\n        }\n      case \"Orphaned\":\n      case \"NoParent\": {\n        this._parent = HasParent(newParentNode, newParentKey);\n        return;\n      }\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  _attach(id, pool) {\n    if (this.__id || this.__pool) {\n      throw new Error(\"Cannot attach node: already attached\");\n    }\n    pool.addNode(id, crdtAsLiveNode(this));\n    this.__id = id;\n    this.__pool = pool;\n  }\n  /** @internal */\n  _detach() {\n    if (this.__pool && this.__id) {\n      this.__pool.deleteNode(this.__id);\n    }\n    switch (this.parent.type) {\n      case \"HasParent\": {\n        this._parent = Orphaned(this.parent.key, this.parent.pos);\n        break;\n      }\n      case \"NoParent\": {\n        this._parent = NoParent;\n        break;\n      }\n      case \"Orphaned\": {\n        break;\n      }\n      default:\n        assertNever(this.parent, \"Unknown state\");\n    }\n    this.__pool = void 0;\n  }\n  /**\n   * @internal\n   *\n   * Clear the Immutable cache, so that the next call to `.toImmutable()` will\n   * recompute the equivalent Immutable value again.  Call this after every\n   * mutation to the Live node.\n   */\n  invalidate() {\n    if (this._cachedImmutable !== void 0 || this._cachedTreeNode !== void 0) {\n      this._cachedImmutable = void 0;\n      this._cachedTreeNode = void 0;\n      if (this.parent.type === \"HasParent\") {\n        this.parent.node.invalidate();\n      }\n    }\n  }\n  /**\n   * @internal\n   *\n   * Return an snapshot of this Live tree for use in DevTools.\n   */\n  toTreeNode(key) {\n    if (this._cachedTreeNode === void 0 || this._cachedTreeNodeKey !== key) {\n      this._cachedTreeNodeKey = key;\n      this._cachedTreeNode = this._toTreeNode(key);\n    }\n    return this._cachedTreeNode;\n  }\n  /**\n   * Return an immutable snapshot of this Live node and its children.\n   */\n  toImmutable() {\n    if (this._cachedImmutable === void 0) {\n      this._cachedImmutable = this._toImmutable();\n    }\n    return this._cachedImmutable;\n  }\n};\n\n// src/protocol/SerializedCrdt.ts\nvar CrdtType = /* @__PURE__ */ ((CrdtType2) => {\n  CrdtType2[CrdtType2[\"OBJECT\"] = 0] = \"OBJECT\";\n  CrdtType2[CrdtType2[\"LIST\"] = 1] = \"LIST\";\n  CrdtType2[CrdtType2[\"MAP\"] = 2] = \"MAP\";\n  CrdtType2[CrdtType2[\"REGISTER\"] = 3] = \"REGISTER\";\n  return CrdtType2;\n})(CrdtType || {});\nfunction isRootCrdt(crdt) {\n  return crdt.type === 0 /* OBJECT */ && !isChildCrdt(crdt);\n}\nfunction isChildCrdt(crdt) {\n  return crdt.parentId !== void 0 && crdt.parentKey !== void 0;\n}\n\n// src/lib/nanoid.ts\nfunction nanoid(length = 7) {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./;[]~!@#$%&*()_+=-\";\n  const len = alphabet.length;\n  return Array.from(\n    { length },\n    () => alphabet.charAt(Math.floor(Math.random() * len))\n  ).join(\"\");\n}\n\n// src/crdts/LiveRegister.ts\nvar LiveRegister = class _LiveRegister extends AbstractCrdt {\n  constructor(data) {\n    super();\n    this._data = data;\n  }\n  get data() {\n    return this._data;\n  }\n  /** @internal */\n  static _deserialize([id, item], _parentToChildren, pool) {\n    const register = new _LiveRegister(item.data);\n    register._attach(id, pool);\n    return register;\n  }\n  /** @internal */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\n        \"Cannot serialize register if parentId or parentKey is undefined\"\n      );\n    }\n    return [\n      {\n        type: 8 /* CREATE_REGISTER */,\n        opId: pool?.generateOpId(),\n        id: this._id,\n        parentId,\n        parentKey,\n        data: this.data\n      }\n    ];\n  }\n  /** @internal */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveRegister if parent is missing\");\n    }\n    return {\n      type: 3 /* REGISTER */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key,\n      data: this.data\n    };\n  }\n  /** @internal */\n  _attachChild(_op) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @internal */\n  _detachChild(_crdt) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"Json\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: this._data\n    };\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._data;\n  }\n  clone() {\n    return deepClone(this.data);\n  }\n};\n\n// src/crdts/LiveList.ts\nfunction compareNodePosition(itemA, itemB) {\n  const posA = itemA._parentPos;\n  const posB = itemB._parentPos;\n  return posA === posB ? 0 : posA < posB ? -1 : 1;\n}\nvar LiveList = class _LiveList extends AbstractCrdt {\n  constructor(items) {\n    super();\n    this._items = [];\n    this._implicitlyDeletedItems = /* @__PURE__ */ new WeakSet();\n    this._unacknowledgedSets = /* @__PURE__ */ new Map();\n    let position = void 0;\n    for (const item of items) {\n      const newPosition = makePosition(position);\n      const node = lsonToLiveNode(item);\n      node._setParentLink(this, newPosition);\n      this._items.push(node);\n      position = newPosition;\n    }\n  }\n  /** @internal */\n  static _deserialize([id], parentToChildren, pool) {\n    const list = new _LiveList([]);\n    list._attach(id, pool);\n    const children = parentToChildren.get(id);\n    if (children === void 0) {\n      return list;\n    }\n    for (const [id2, crdt] of children) {\n      const child = deserialize([id2, crdt], parentToChildren, pool);\n      child._setParentLink(list, crdt.parentKey);\n      list._insertAndSort(child);\n    }\n    return list;\n  }\n  /**\n   * @internal\n   * This function assumes that the resulting ops will be sent to the server if they have an 'opId'\n   * so we mutate _unacknowledgedSets to avoid potential flickering\n   * https://github.com/liveblocks/liveblocks/pull/1177\n   *\n   * This is quite unintuitive and should disappear as soon as\n   * we introduce an explicit LiveList.Set operation\n   */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const ops = [];\n    const op = {\n      id: this._id,\n      opId: pool?.generateOpId(),\n      type: 2 /* CREATE_LIST */,\n      parentId,\n      parentKey\n    };\n    ops.push(op);\n    for (const item of this._items) {\n      const parentKey2 = item._getParentKeyOrThrow();\n      const childOps = HACK_addIntentAndDeletedIdToOperation(\n        item._toOps(this._id, parentKey2, pool),\n        void 0\n      );\n      const childOpId = childOps[0].opId;\n      if (childOpId !== void 0) {\n        this._unacknowledgedSets.set(parentKey2, childOpId);\n      }\n      ops.push(...childOps);\n    }\n    return ops;\n  }\n  /**\n   * @internal\n   *\n   * Adds a new item into the sorted list, in the correct position.\n   */\n  _insertAndSort(item) {\n    this._items.push(item);\n    this._sortItems();\n  }\n  /** @internal */\n  _sortItems() {\n    this._items.sort(compareNodePosition);\n    this.invalidate();\n  }\n  /** @internal */\n  _indexOfPosition(position) {\n    return this._items.findIndex(\n      (item) => item._getParentKeyOrThrow() === position\n    );\n  }\n  /** @internal */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const item of this._items) {\n      item._attach(pool.generateId(), pool);\n    }\n  }\n  /** @internal */\n  _detach() {\n    super._detach();\n    for (const item of this._items) {\n      item._detach();\n    }\n  }\n  /** @internal */\n  _applySetRemote(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    child._attach(id, this._pool);\n    child._setParentLink(this, key);\n    const deletedId = op.deletedId;\n    const indexOfItemWithSamePosition = this._indexOfPosition(key);\n    if (indexOfItemWithSamePosition !== -1) {\n      const itemWithSamePosition = this._items[indexOfItemWithSamePosition];\n      if (itemWithSamePosition._id === deletedId) {\n        itemWithSamePosition._detach();\n        this._items[indexOfItemWithSamePosition] = child;\n        return {\n          modified: makeUpdate(this, [\n            setDelta(indexOfItemWithSamePosition, child)\n          ]),\n          reverse: []\n        };\n      } else {\n        this._implicitlyDeletedItems.add(itemWithSamePosition);\n        this._items[indexOfItemWithSamePosition] = child;\n        const delta = [\n          setDelta(indexOfItemWithSamePosition, child)\n        ];\n        const deleteDelta2 = this._detachItemAssociatedToSetOperation(\n          op.deletedId\n        );\n        if (deleteDelta2) {\n          delta.push(deleteDelta2);\n        }\n        return {\n          modified: makeUpdate(this, delta),\n          reverse: []\n        };\n      }\n    } else {\n      const updates = [];\n      const deleteDelta2 = this._detachItemAssociatedToSetOperation(\n        op.deletedId\n      );\n      if (deleteDelta2) {\n        updates.push(deleteDelta2);\n      }\n      this._insertAndSort(child);\n      updates.push(insertDelta(this._indexOfPosition(key), child));\n      return {\n        reverse: [],\n        modified: makeUpdate(this, updates)\n      };\n    }\n  }\n  /** @internal */\n  _applySetAck(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const delta = [];\n    const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n    if (deletedDelta) {\n      delta.push(deletedDelta);\n    }\n    const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);\n    if (unacknowledgedOpId !== void 0) {\n      if (unacknowledgedOpId !== op.opId) {\n        return delta.length === 0 ? { modified: false } : { modified: makeUpdate(this, delta), reverse: [] };\n      } else {\n        this._unacknowledgedSets.delete(op.parentKey);\n      }\n    }\n    const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey);\n    const existingItem = this._items.find((item) => item._id === op.id);\n    if (existingItem !== void 0) {\n      if (existingItem._parentKey === op.parentKey) {\n        return {\n          modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n          reverse: []\n        };\n      }\n      if (indexOfItemWithSamePosition !== -1) {\n        this._implicitlyDeletedItems.add(\n          this._items[indexOfItemWithSamePosition]\n        );\n        this._items.splice(indexOfItemWithSamePosition, 1);\n        delta.push(deleteDelta(indexOfItemWithSamePosition));\n      }\n      const previousIndex = this._items.indexOf(existingItem);\n      existingItem._setParentLink(this, op.parentKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(existingItem);\n      if (newIndex !== previousIndex) {\n        delta.push(moveDelta(previousIndex, newIndex, existingItem));\n      }\n      return {\n        modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n        reverse: []\n      };\n    } else {\n      const orphan = this._pool.getNode(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, op.parentKey);\n        this._implicitlyDeletedItems.delete(orphan);\n        this._insertAndSort(orphan);\n        const recreatedItemIndex = this._items.indexOf(orphan);\n        return {\n          modified: makeUpdate(this, [\n            // If there is an item at this position, update is a set, else it's an insert\n            indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),\n            ...delta\n          ]),\n          reverse: []\n        };\n      } else {\n        if (indexOfItemWithSamePosition !== -1) {\n          this._items.splice(indexOfItemWithSamePosition, 1);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(\n          op,\n          op.parentKey\n        );\n        return {\n          modified: makeUpdate(this, [\n            // If there is an item at this position, update is a set, else it's an insert\n            indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),\n            ...delta\n          ]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /**\n   * Returns the update delta of the deletion or null\n   * @internal\n   */\n  _detachItemAssociatedToSetOperation(deletedId) {\n    if (deletedId === void 0 || this._pool === void 0) {\n      return null;\n    }\n    const deletedItem = this._pool.getNode(deletedId);\n    if (deletedItem === void 0) {\n      return null;\n    }\n    const result = this._detachChild(deletedItem);\n    if (result.modified === false) {\n      return null;\n    }\n    return result.modified.updates[0];\n  }\n  /** @internal */\n  _applyRemoteInsert(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const key = asPos(op.parentKey);\n    const existingItemIndex = this._indexOfPosition(key);\n    if (existingItemIndex !== -1) {\n      this._shiftItemPosition(existingItemIndex, key);\n    }\n    const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n    return {\n      modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n      reverse: []\n    };\n  }\n  /** @internal */\n  _applyInsertAck(op) {\n    const existingItem = this._items.find((item) => item._id === op.id);\n    const key = asPos(op.parentKey);\n    const itemIndexAtPosition = this._indexOfPosition(key);\n    if (existingItem) {\n      if (existingItem._parentKey === key) {\n        return {\n          modified: false\n        };\n      } else {\n        const oldPositionIndex = this._items.indexOf(existingItem);\n        if (itemIndexAtPosition !== -1) {\n          this._shiftItemPosition(itemIndexAtPosition, key);\n        }\n        existingItem._setParentLink(this, key);\n        this._sortItems();\n        const newIndex = this._indexOfPosition(key);\n        if (newIndex === oldPositionIndex) {\n          return { modified: false };\n        }\n        return {\n          modified: makeUpdate(this, [\n            moveDelta(oldPositionIndex, newIndex, existingItem)\n          ]),\n          reverse: []\n        };\n      }\n    } else {\n      const orphan = nn(this._pool).getNode(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, key);\n        this._implicitlyDeletedItems.delete(orphan);\n        this._insertAndSort(orphan);\n        const newIndex = this._indexOfPosition(key);\n        return {\n          modified: makeUpdate(this, [insertDelta(newIndex, orphan)]),\n          reverse: []\n        };\n      } else {\n        if (itemIndexAtPosition !== -1) {\n          this._shiftItemPosition(itemIndexAtPosition, key);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n        return {\n          modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /** @internal */\n  _applyInsertUndoRedo(op) {\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    if (this._pool?.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    child._attach(id, nn(this._pool));\n    child._setParentLink(this, key);\n    const existingItemIndex = this._indexOfPosition(key);\n    let newKey = key;\n    if (existingItemIndex !== -1) {\n      const before2 = this._items[existingItemIndex]?._parentPos;\n      const after2 = this._items[existingItemIndex + 1]?._parentPos;\n      newKey = makePosition(before2, after2);\n      child._setParentLink(this, newKey);\n    }\n    this._insertAndSort(child);\n    const newIndex = this._indexOfPosition(newKey);\n    return {\n      modified: makeUpdate(this, [insertDelta(newIndex, child)]),\n      reverse: [{ type: 5 /* DELETE_CRDT */, id }]\n    };\n  }\n  /** @internal */\n  _applySetUndoRedo(op) {\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    if (this._pool?.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    this._unacknowledgedSets.set(key, nn(op.opId));\n    const indexOfItemWithSameKey = this._indexOfPosition(key);\n    child._attach(id, nn(this._pool));\n    child._setParentLink(this, key);\n    const newKey = key;\n    if (indexOfItemWithSameKey !== -1) {\n      const existingItem = this._items[indexOfItemWithSameKey];\n      existingItem._detach();\n      this._items[indexOfItemWithSameKey] = child;\n      const reverse = HACK_addIntentAndDeletedIdToOperation(\n        existingItem._toOps(nn(this._id), key, this._pool),\n        op.id\n      );\n      const delta = [setDelta(indexOfItemWithSameKey, child)];\n      const deletedDelta = this._detachItemAssociatedToSetOperation(\n        op.deletedId\n      );\n      if (deletedDelta) {\n        delta.push(deletedDelta);\n      }\n      return {\n        modified: makeUpdate(this, delta),\n        reverse\n      };\n    } else {\n      this._insertAndSort(child);\n      this._detachItemAssociatedToSetOperation(op.deletedId);\n      const newIndex = this._indexOfPosition(newKey);\n      return {\n        reverse: [{ type: 5 /* DELETE_CRDT */, id }],\n        modified: makeUpdate(this, [insertDelta(newIndex, child)])\n      };\n    }\n  }\n  /** @internal */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    let result;\n    if (op.intent === \"set\") {\n      if (source === 1 /* REMOTE */) {\n        result = this._applySetRemote(op);\n      } else if (source === 2 /* ACK */) {\n        result = this._applySetAck(op);\n      } else {\n        result = this._applySetUndoRedo(op);\n      }\n    } else {\n      if (source === 1 /* REMOTE */) {\n        result = this._applyRemoteInsert(op);\n      } else if (source === 2 /* ACK */) {\n        result = this._applyInsertAck(op);\n      } else {\n        result = this._applyInsertUndoRedo(op);\n      }\n    }\n    if (result.modified !== false) {\n      this.invalidate();\n    }\n    return result;\n  }\n  /** @internal */\n  _detachChild(child) {\n    if (child) {\n      const parentKey = nn(child._parentKey);\n      const reverse = child._toOps(nn(this._id), parentKey, this._pool);\n      const indexToDelete = this._items.indexOf(child);\n      if (indexToDelete === -1) {\n        return {\n          modified: false\n        };\n      }\n      this._items.splice(indexToDelete, 1);\n      this.invalidate();\n      child._detach();\n      return {\n        modified: makeUpdate(this, [deleteDelta(indexToDelete)]),\n        reverse\n      };\n    }\n    return { modified: false };\n  }\n  /** @internal */\n  _applySetChildKeyRemote(newKey, child) {\n    if (this._implicitlyDeletedItems.has(child)) {\n      this._implicitlyDeletedItems.delete(child);\n      child._setParentLink(this, newKey);\n      this._insertAndSort(child);\n      const newIndex = this._items.indexOf(child);\n      return {\n        modified: makeUpdate(this, [insertDelta(newIndex, child)]),\n        reverse: []\n      };\n    }\n    const previousKey = child._parentKey;\n    if (newKey === previousKey) {\n      return {\n        modified: false\n      };\n    }\n    const existingItemIndex = this._indexOfPosition(newKey);\n    if (existingItemIndex === -1) {\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (newIndex === previousIndex) {\n        return {\n          modified: false\n        };\n      }\n      return {\n        modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n        reverse: []\n      };\n    } else {\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n      );\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (newIndex === previousIndex) {\n        return {\n          modified: false\n        };\n      }\n      return {\n        modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n        reverse: []\n      };\n    }\n  }\n  /** @internal */\n  _applySetChildKeyAck(newKey, child) {\n    const previousKey = nn(child._parentKey);\n    if (this._implicitlyDeletedItems.has(child)) {\n      const existingItemIndex = this._indexOfPosition(newKey);\n      this._implicitlyDeletedItems.delete(child);\n      if (existingItemIndex !== -1) {\n        this._items[existingItemIndex]._setParentLink(\n          this,\n          makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n        );\n      }\n      child._setParentLink(this, newKey);\n      this._insertAndSort(child);\n      return {\n        modified: false\n      };\n    } else {\n      if (newKey === previousKey) {\n        return {\n          modified: false\n        };\n      }\n      const previousIndex = this._items.indexOf(child);\n      const existingItemIndex = this._indexOfPosition(newKey);\n      if (existingItemIndex !== -1) {\n        this._items[existingItemIndex]._setParentLink(\n          this,\n          makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n        );\n      }\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (previousIndex === newIndex) {\n        return {\n          modified: false\n        };\n      } else {\n        return {\n          modified: makeUpdate(this, [\n            moveDelta(previousIndex, newIndex, child)\n          ]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /** @internal */\n  _applySetChildKeyUndoRedo(newKey, child) {\n    const previousKey = nn(child._parentKey);\n    const previousIndex = this._items.indexOf(child);\n    const existingItemIndex = this._indexOfPosition(newKey);\n    if (existingItemIndex !== -1) {\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n      );\n    }\n    child._setParentLink(this, newKey);\n    this._sortItems();\n    const newIndex = this._items.indexOf(child);\n    if (previousIndex === newIndex) {\n      return {\n        modified: false\n      };\n    }\n    return {\n      modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n      reverse: [\n        {\n          type: 1 /* SET_PARENT_KEY */,\n          id: nn(child._id),\n          parentKey: previousKey\n        }\n      ]\n    };\n  }\n  /** @internal */\n  _setChildKey(newKey, child, source) {\n    if (source === 1 /* REMOTE */) {\n      return this._applySetChildKeyRemote(newKey, child);\n    } else if (source === 2 /* ACK */) {\n      return this._applySetChildKeyAck(newKey, child);\n    } else {\n      return this._applySetChildKeyUndoRedo(newKey, child);\n    }\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n  /** @internal */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveList if parent is missing\");\n    }\n    return {\n      type: 1 /* LIST */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key\n    };\n  }\n  /**\n   * Returns the number of elements.\n   */\n  get length() {\n    return this._items.length;\n  }\n  /**\n   * Adds one element to the end of the LiveList.\n   * @param element The element to add to the end of the LiveList.\n   */\n  push(element) {\n    this._pool?.assertStorageIsWritable();\n    return this.insert(element, this.length);\n  }\n  /**\n   * Inserts one element at a specified index.\n   * @param element The element to insert.\n   * @param index The index at which you want to insert the element.\n   */\n  insert(element, index) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index > this._items.length) {\n      throw new Error(\n        `Cannot insert list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length}`\n      );\n    }\n    const before2 = this._items[index - 1] ? this._items[index - 1]._parentPos : void 0;\n    const after2 = this._items[index] ? this._items[index]._parentPos : void 0;\n    const position = makePosition(before2, after2);\n    const value = lsonToLiveNode(element);\n    value._setParentLink(this, position);\n    this._insertAndSort(value);\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      value._attach(id, this._pool);\n      this._pool.dispatch(\n        value._toOps(this._id, position, this._pool),\n        [{ type: 5 /* DELETE_CRDT */, id }],\n        /* @__PURE__ */ new Map([\n          [this._id, makeUpdate(this, [insertDelta(index, value)])]\n        ])\n      );\n    }\n  }\n  /**\n   * Move one element from one index to another.\n   * @param index The index of the element to move\n   * @param targetIndex The index where the element should be after moving.\n   */\n  move(index, targetIndex) {\n    this._pool?.assertStorageIsWritable();\n    if (targetIndex < 0) {\n      throw new Error(\"targetIndex cannot be less than 0\");\n    }\n    if (targetIndex >= this._items.length) {\n      throw new Error(\n        \"targetIndex cannot be greater or equal than the list length\"\n      );\n    }\n    if (index < 0) {\n      throw new Error(\"index cannot be less than 0\");\n    }\n    if (index >= this._items.length) {\n      throw new Error(\"index cannot be greater or equal than the list length\");\n    }\n    let beforePosition = null;\n    let afterPosition = null;\n    if (index < targetIndex) {\n      afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._parentPos;\n      beforePosition = this._items[targetIndex]._parentPos;\n    } else {\n      afterPosition = this._items[targetIndex]._parentPos;\n      beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._parentPos;\n    }\n    const position = makePosition(beforePosition, afterPosition);\n    const item = this._items[index];\n    const previousPosition = item._getParentKeyOrThrow();\n    item._setParentLink(this, position);\n    this._sortItems();\n    if (this._pool && this._id) {\n      const storageUpdates = /* @__PURE__ */ new Map([\n        [this._id, makeUpdate(this, [moveDelta(index, targetIndex, item)])]\n      ]);\n      this._pool.dispatch(\n        [\n          {\n            type: 1 /* SET_PARENT_KEY */,\n            id: nn(item._id),\n            opId: this._pool.generateOpId(),\n            parentKey: position\n          }\n        ],\n        [\n          {\n            type: 1 /* SET_PARENT_KEY */,\n            id: nn(item._id),\n            parentKey: previousPosition\n          }\n        ],\n        storageUpdates\n      );\n    }\n  }\n  /**\n   * Deletes an element at the specified index\n   * @param index The index of the element to delete\n   */\n  delete(index) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index >= this._items.length) {\n      throw new Error(\n        `Cannot delete list item at index \"${index}\". index should be between 0 and ${this._items.length - 1}`\n      );\n    }\n    const item = this._items[index];\n    item._detach();\n    this._items.splice(index, 1);\n    this.invalidate();\n    if (this._pool) {\n      const childRecordId = item._id;\n      if (childRecordId) {\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(\n          nn(this._id),\n          makeUpdate(this, [deleteDelta(index)])\n        );\n        this._pool.dispatch(\n          [\n            {\n              id: childRecordId,\n              opId: this._pool.generateOpId(),\n              type: 5 /* DELETE_CRDT */\n            }\n          ],\n          item._toOps(nn(this._id), item._getParentKeyOrThrow()),\n          storageUpdates\n        );\n      }\n    }\n  }\n  clear() {\n    this._pool?.assertStorageIsWritable();\n    if (this._pool) {\n      const ops = [];\n      const reverseOps = [];\n      const updateDelta = [];\n      for (const item of this._items) {\n        item._detach();\n        const childId = item._id;\n        if (childId) {\n          ops.push({\n            type: 5 /* DELETE_CRDT */,\n            id: childId,\n            opId: this._pool.generateOpId()\n          });\n          reverseOps.push(\n            ...item._toOps(nn(this._id), item._getParentKeyOrThrow())\n          );\n          updateDelta.push(deleteDelta(0));\n        }\n      }\n      this._items = [];\n      this.invalidate();\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta));\n      this._pool.dispatch(ops, reverseOps, storageUpdates);\n    } else {\n      for (const item of this._items) {\n        item._detach();\n      }\n      this._items = [];\n      this.invalidate();\n    }\n  }\n  set(index, item) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index >= this._items.length) {\n      throw new Error(\n        `Cannot set list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length - 1}`\n      );\n    }\n    const existingItem = this._items[index];\n    const position = existingItem._getParentKeyOrThrow();\n    const existingId = existingItem._id;\n    existingItem._detach();\n    const value = lsonToLiveNode(item);\n    value._setParentLink(this, position);\n    this._items[index] = value;\n    this.invalidate();\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      value._attach(id, this._pool);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(this._id, makeUpdate(this, [setDelta(index, value)]));\n      const ops = HACK_addIntentAndDeletedIdToOperation(\n        value._toOps(this._id, position, this._pool),\n        existingId\n      );\n      this._unacknowledgedSets.set(position, nn(ops[0].opId));\n      const reverseOps = HACK_addIntentAndDeletedIdToOperation(\n        existingItem._toOps(this._id, position, void 0),\n        id\n      );\n      this._pool.dispatch(ops, reverseOps, storageUpdates);\n    }\n  }\n  /**\n   * Returns an Array of all the elements in the LiveList.\n   */\n  toArray() {\n    return this._items.map(\n      (entry) => liveNodeToLson(entry)\n      //                               ^^^^^^^^\n      //                               FIXME! This isn't safe.\n    );\n  }\n  /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   * @param predicate Function to test for each element, taking two arguments (the element and its index).\n   * @returns true if the predicate function returns a truthy value for every element. Otherwise, false.\n   */\n  every(predicate) {\n    return this.toArray().every(predicate);\n  }\n  /**\n   * Creates an array with all elements that pass the test implemented by the provided function.\n   * @param predicate Function to test each element of the LiveList. Return a value that coerces to true to keep the element, or to false otherwise.\n   * @returns An array with the elements that pass the test.\n   */\n  filter(predicate) {\n    return this.toArray().filter(predicate);\n  }\n  /**\n   * Returns the first element that satisfies the provided testing function.\n   * @param predicate Function to execute on each value.\n   * @returns The value of the first element in the LiveList that satisfies the provided testing function. Otherwise, undefined is returned.\n   */\n  find(predicate) {\n    return this.toArray().find(predicate);\n  }\n  /**\n   * Returns the index of the first element in the LiveList that satisfies the provided testing function.\n   * @param predicate Function to execute on each value until the function returns true, indicating that the satisfying element was found.\n   * @returns The index of the first element in the LiveList that passes the test. Otherwise, -1.\n   */\n  findIndex(predicate) {\n    return this.toArray().findIndex(predicate);\n  }\n  /**\n   * Executes a provided function once for each element.\n   * @param callbackfn Function to execute on each element.\n   */\n  forEach(callbackfn) {\n    return this.toArray().forEach(callbackfn);\n  }\n  /**\n   * Get the element at the specified index.\n   * @param index The index on the element to get.\n   * @returns The element at the specified index or undefined.\n   */\n  get(index) {\n    if (index < 0 || index >= this._items.length) {\n      return void 0;\n    }\n    return liveNodeToLson(this._items[index]);\n  }\n  /**\n   * Returns the first index at which a given element can be found in the LiveList, or -1 if it is not present.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index to start the search at.\n   * @returns The first index of the element in the LiveList; -1 if not found.\n   */\n  indexOf(searchElement, fromIndex) {\n    return this.toArray().indexOf(searchElement, fromIndex);\n  }\n  /**\n   * Returns the last index at which a given element can be found in the LiveList, or -1 if it is not present. The LiveLsit is searched backwards, starting at fromIndex.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index at which to start searching backwards.\n   * @returns\n   */\n  lastIndexOf(searchElement, fromIndex) {\n    return this.toArray().lastIndexOf(searchElement, fromIndex);\n  }\n  /**\n   * Creates an array populated with the results of calling a provided function on every element.\n   * @param callback Function that is called for every element.\n   * @returns An array with each element being the result of the callback function.\n   */\n  map(callback) {\n    return this._items.map(\n      (entry, i) => callback(\n        liveNodeToLson(entry),\n        //                    ^^^^^^^^\n        //                    FIXME! This isn't safe.\n        i\n      )\n    );\n  }\n  /**\n   * Tests whether at least one element in the LiveList passes the test implemented by the provided function.\n   * @param predicate Function to test for each element.\n   * @returns true if the callback function returns a truthy value for at least one element. Otherwise, false.\n   */\n  some(predicate) {\n    return this.toArray().some(predicate);\n  }\n  [Symbol.iterator]() {\n    return new LiveListIterator(this._items);\n  }\n  /** @internal */\n  _createAttachItemAndSort(op, key) {\n    const newItem = creationOpToLiveNode(op);\n    newItem._attach(op.id, nn(this._pool));\n    newItem._setParentLink(this, key);\n    this._insertAndSort(newItem);\n    const newIndex = this._indexOfPosition(key);\n    return { newItem, newIndex };\n  }\n  /** @internal */\n  _shiftItemPosition(index, key) {\n    const shiftedPosition = makePosition(\n      key,\n      this._items.length > index + 1 ? this._items[index + 1]?._parentPos : void 0\n    );\n    this._items[index]._setParentLink(this, shiftedPosition);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"LiveList\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: this._items.map(\n        (item, index) => item.toTreeNode(index.toString())\n      )\n    };\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = this._items.map((node) => node.toImmutable());\n    return  false ? 0 : Object.freeze(result);\n  }\n  clone() {\n    return new _LiveList(this._items.map((item) => item.clone()));\n  }\n};\nvar LiveListIterator = class {\n  constructor(items) {\n    this._innerIterator = items[Symbol.iterator]();\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n  next() {\n    const result = this._innerIterator.next();\n    if (result.done) {\n      return {\n        done: true,\n        value: void 0\n      };\n    }\n    const value = liveNodeToLson(result.value);\n    return { value };\n  }\n};\nfunction makeUpdate(liveList, deltaUpdates) {\n  return {\n    node: liveList,\n    type: \"LiveList\",\n    updates: deltaUpdates\n  };\n}\nfunction setDelta(index, item) {\n  return {\n    index,\n    type: \"set\",\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction deleteDelta(index) {\n  return {\n    index,\n    type: \"delete\"\n  };\n}\nfunction insertDelta(index, item) {\n  return {\n    index,\n    type: \"insert\",\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction moveDelta(previousIndex, index, item) {\n  return {\n    index,\n    type: \"move\",\n    previousIndex,\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction HACK_addIntentAndDeletedIdToOperation(ops, deletedId) {\n  return ops.map((op, index) => {\n    if (index === 0) {\n      const firstOp = op;\n      return {\n        ...firstOp,\n        intent: \"set\",\n        deletedId\n      };\n    } else {\n      return op;\n    }\n  });\n}\n\n// src/lib/freeze.ts\nvar freeze =  false ? (\n  /* istanbul ignore next */\n  0\n) : Object.freeze;\n\n// src/crdts/LiveMap.ts\nvar LiveMap = class _LiveMap extends AbstractCrdt {\n  constructor(entries2) {\n    super();\n    this.unacknowledgedSet = /* @__PURE__ */ new Map();\n    if (entries2) {\n      const mappedEntries = [];\n      for (const [key, value] of entries2) {\n        const node = lsonToLiveNode(value);\n        node._setParentLink(this, key);\n        mappedEntries.push([key, node]);\n      }\n      this._map = new Map(mappedEntries);\n    } else {\n      this._map = /* @__PURE__ */ new Map();\n    }\n  }\n  /**\n   * @internal\n   */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const ops = [];\n    const op = {\n      id: this._id,\n      opId: pool?.generateOpId(),\n      type: 7 /* CREATE_MAP */,\n      parentId,\n      parentKey\n    };\n    ops.push(op);\n    for (const [key, value] of this._map) {\n      ops.push(...value._toOps(this._id, key, pool));\n    }\n    return ops;\n  }\n  /**\n   * @internal\n   */\n  static _deserialize([id, _item], parentToChildren, pool) {\n    const map = new _LiveMap();\n    map._attach(id, pool);\n    const children = parentToChildren.get(id);\n    if (children === void 0) {\n      return map;\n    }\n    for (const [id2, crdt] of children) {\n      const child = deserialize([id2, crdt], parentToChildren, pool);\n      child._setParentLink(map, crdt.parentKey);\n      map._map.set(crdt.parentKey, child);\n      map.invalidate();\n    }\n    return map;\n  }\n  /**\n   * @internal\n   */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const [_key, value] of this._map) {\n      if (isLiveNode(value)) {\n        value._attach(pool.generateId(), pool);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, parentKey, opId } = op;\n    const key = parentKey;\n    const child = creationOpToLiveNode(op);\n    if (this._pool.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    if (source === 2 /* ACK */) {\n      const lastUpdateOpId = this.unacknowledgedSet.get(key);\n      if (lastUpdateOpId === opId) {\n        this.unacknowledgedSet.delete(key);\n        return { modified: false };\n      } else if (lastUpdateOpId !== void 0) {\n        return { modified: false };\n      }\n    } else if (source === 1 /* REMOTE */) {\n      this.unacknowledgedSet.delete(key);\n    }\n    const previousValue = this._map.get(key);\n    let reverse;\n    if (previousValue) {\n      const thisId = nn(this._id);\n      reverse = previousValue._toOps(thisId, key);\n      previousValue._detach();\n    } else {\n      reverse = [{ type: 5 /* DELETE_CRDT */, id }];\n    }\n    child._setParentLink(this, key);\n    child._attach(id, this._pool);\n    this._map.set(key, child);\n    this.invalidate();\n    return {\n      modified: {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"update\" } }\n      },\n      reverse\n    };\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    super._detach();\n    for (const item of this._map.values()) {\n      item._detach();\n    }\n  }\n  /**\n   * @internal\n   */\n  _detachChild(child) {\n    const id = nn(this._id);\n    const parentKey = nn(child._parentKey);\n    const reverse = child._toOps(id, parentKey, this._pool);\n    for (const [key, value] of this._map) {\n      if (value === child) {\n        this._map.delete(key);\n        this.invalidate();\n      }\n    }\n    child._detach();\n    const storageUpdate = {\n      node: this,\n      type: \"LiveMap\",\n      updates: { [parentKey]: { type: \"delete\" } }\n    };\n    return { modified: storageUpdate, reverse };\n  }\n  /**\n   * @internal\n   */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveMap if parent is missing\");\n    }\n    return {\n      type: 2 /* MAP */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key\n    };\n  }\n  /**\n   * Returns a specified element from the LiveMap.\n   * @param key The key of the element to return.\n   * @returns The element associated with the specified key, or undefined if the key can't be found in the LiveMap.\n   */\n  get(key) {\n    const value = this._map.get(key);\n    if (value === void 0) {\n      return void 0;\n    }\n    return liveNodeToLson(value);\n  }\n  /**\n   * Adds or updates an element with a specified key and a value.\n   * @param key The key of the element to add. Should be a string.\n   * @param value The value of the element to add. Should be serializable to JSON.\n   */\n  set(key, value) {\n    this._pool?.assertStorageIsWritable();\n    const oldValue = this._map.get(key);\n    if (oldValue) {\n      oldValue._detach();\n    }\n    const item = lsonToLiveNode(value);\n    item._setParentLink(this, key);\n    this._map.set(key, item);\n    this.invalidate();\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      item._attach(id, this._pool);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(this._id, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"update\" } }\n      });\n      const ops = item._toOps(this._id, key, this._pool);\n      this.unacknowledgedSet.set(key, nn(ops[0].opId));\n      this._pool.dispatch(\n        item._toOps(this._id, key, this._pool),\n        oldValue ? oldValue._toOps(this._id, key) : [{ type: 5 /* DELETE_CRDT */, id }],\n        storageUpdates\n      );\n    }\n  }\n  /**\n   * Returns the number of elements in the LiveMap.\n   */\n  get size() {\n    return this._map.size;\n  }\n  /**\n   * Returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key The key of the element to test for presence.\n   */\n  has(key) {\n    return this._map.has(key);\n  }\n  /**\n   * Removes the specified element by key.\n   * @param key The key of the element to remove.\n   * @returns true if an element existed and has been removed, or false if the element does not exist.\n   */\n  delete(key) {\n    this._pool?.assertStorageIsWritable();\n    const item = this._map.get(key);\n    if (item === void 0) {\n      return false;\n    }\n    item._detach();\n    this._map.delete(key);\n    this.invalidate();\n    if (this._pool && item._id) {\n      const thisId = nn(this._id);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(thisId, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"delete\" } }\n      });\n      this._pool.dispatch(\n        [\n          {\n            type: 5 /* DELETE_CRDT */,\n            id: item._id,\n            opId: this._pool.generateOpId()\n          }\n        ],\n        item._toOps(thisId, key),\n        storageUpdates\n      );\n    }\n    return true;\n  }\n  /**\n   * Returns a new Iterator object that contains the [key, value] pairs for each element.\n   */\n  entries() {\n    const innerIterator = this._map.entries();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) {\n          return {\n            done: true,\n            value: void 0\n          };\n        }\n        const entry = iteratorValue.value;\n        const key = entry[0];\n        const value = liveNodeToLson(iteratorValue.value[1]);\n        return {\n          value: [key, value]\n        };\n      }\n    };\n  }\n  /**\n   * Same function object as the initial value of the entries method.\n   */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Returns a new Iterator object that contains the keys for each element.\n   */\n  keys() {\n    return this._map.keys();\n  }\n  /**\n   * Returns a new Iterator object that contains the values for each element.\n   */\n  values() {\n    const innerIterator = this._map.values();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) {\n          return {\n            done: true,\n            value: void 0\n          };\n        }\n        const value = liveNodeToLson(iteratorValue.value);\n        return { value };\n      }\n    };\n  }\n  /**\n   * Executes a provided function once per each key/value pair in the Map object, in insertion order.\n   * @param callback Function to execute for each entry in the map.\n   */\n  forEach(callback) {\n    for (const entry of this) {\n      callback(entry[1], entry[0], this);\n    }\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"LiveMap\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: Array.from(this._map.entries()).map(\n        ([key2, val]) => val.toTreeNode(key2)\n      )\n    };\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = /* @__PURE__ */ new Map();\n    for (const [key, value] of this._map) {\n      result.set(key, value.toImmutable());\n    }\n    return freeze(result);\n  }\n  clone() {\n    return new _LiveMap(\n      Array.from(this._map).map(([key, node]) => [key, node.clone()])\n    );\n  }\n};\n\n// src/crdts/LiveObject.ts\nvar LiveObject = class _LiveObject extends AbstractCrdt {\n  /** @internal */\n  static _buildRootAndParentToChildren(items) {\n    const parentToChildren = /* @__PURE__ */ new Map();\n    let root = null;\n    for (const [id, crdt] of items) {\n      if (isRootCrdt(crdt)) {\n        root = [id, crdt];\n      } else {\n        const tuple = [id, crdt];\n        const children = parentToChildren.get(crdt.parentId);\n        if (children !== void 0) {\n          children.push(tuple);\n        } else {\n          parentToChildren.set(crdt.parentId, [tuple]);\n        }\n      }\n    }\n    if (root === null) {\n      throw new Error(\"Root can't be null\");\n    }\n    return [root, parentToChildren];\n  }\n  /** @internal */\n  static _fromItems(items, pool) {\n    const [root, parentToChildren] = _LiveObject._buildRootAndParentToChildren(items);\n    return _LiveObject._deserialize(\n      root,\n      parentToChildren,\n      pool\n    );\n  }\n  constructor(obj = {}) {\n    super();\n    this._propToLastUpdate = /* @__PURE__ */ new Map();\n    const o = compactObject(obj);\n    for (const key of Object.keys(o)) {\n      const value = o[key];\n      if (isLiveNode(value)) {\n        value._setParentLink(this, key);\n      }\n    }\n    this._map = new Map(Object.entries(o));\n  }\n  /** @internal */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const opId = pool?.generateOpId();\n    const ops = [];\n    const op = {\n      type: 4 /* CREATE_OBJECT */,\n      id: this._id,\n      opId,\n      parentId,\n      parentKey,\n      data: {}\n    };\n    ops.push(op);\n    for (const [key, value] of this._map) {\n      if (isLiveNode(value)) {\n        ops.push(...value._toOps(this._id, key, pool));\n      } else {\n        op.data[key] = value;\n      }\n    }\n    return ops;\n  }\n  /** @internal */\n  static _deserialize([id, item], parentToChildren, pool) {\n    const liveObj = new _LiveObject(item.data);\n    liveObj._attach(id, pool);\n    return this._deserializeChildren(liveObj, parentToChildren, pool);\n  }\n  /** @internal */\n  static _deserializeChildren(liveObj, parentToChildren, pool) {\n    const children = parentToChildren.get(nn(liveObj._id));\n    if (children === void 0) {\n      return liveObj;\n    }\n    for (const [id, crdt] of children) {\n      const child = deserializeToLson([id, crdt], parentToChildren, pool);\n      if (isLiveStructure(child)) {\n        child._setParentLink(liveObj, crdt.parentKey);\n      }\n      liveObj._map.set(crdt.parentKey, child);\n      liveObj.invalidate();\n    }\n    return liveObj;\n  }\n  /** @internal */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const [_key, value] of this._map) {\n      if (isLiveNode(value)) {\n        value._attach(pool.generateId(), pool);\n      }\n    }\n  }\n  /** @internal */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, opId, parentKey: key } = op;\n    const child = creationOpToLson(op);\n    if (this._pool.getNode(id) !== void 0) {\n      if (this._propToLastUpdate.get(key) === opId) {\n        this._propToLastUpdate.delete(key);\n      }\n      return { modified: false };\n    }\n    if (source === 0 /* UNDOREDO_RECONNECT */) {\n      this._propToLastUpdate.set(key, nn(opId));\n    } else if (this._propToLastUpdate.get(key) === void 0) {\n    } else if (this._propToLastUpdate.get(key) === opId) {\n      this._propToLastUpdate.delete(key);\n      return { modified: false };\n    } else {\n      return { modified: false };\n    }\n    const thisId = nn(this._id);\n    const previousValue = this._map.get(key);\n    let reverse;\n    if (isLiveNode(previousValue)) {\n      reverse = previousValue._toOps(thisId, key);\n      previousValue._detach();\n    } else if (previousValue === void 0) {\n      reverse = [{ type: 6 /* DELETE_OBJECT_KEY */, id: thisId, key }];\n    } else {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          id: thisId,\n          data: { [key]: previousValue }\n        }\n      ];\n    }\n    this._map.set(key, child);\n    this.invalidate();\n    if (isLiveStructure(child)) {\n      child._setParentLink(this, key);\n      child._attach(id, this._pool);\n    }\n    return {\n      reverse,\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: { [key]: { type: \"update\" } }\n      }\n    };\n  }\n  /** @internal */\n  _detachChild(child) {\n    if (child) {\n      const id = nn(this._id);\n      const parentKey = nn(child._parentKey);\n      const reverse = child._toOps(id, parentKey, this._pool);\n      for (const [key, value] of this._map) {\n        if (value === child) {\n          this._map.delete(key);\n          this.invalidate();\n        }\n      }\n      child._detach();\n      const storageUpdate = {\n        node: this,\n        type: \"LiveObject\",\n        updates: {\n          [parentKey]: { type: \"delete\" }\n        }\n      };\n      return { modified: storageUpdate, reverse };\n    }\n    return { modified: false };\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    super._detach();\n    for (const value of this._map.values()) {\n      if (isLiveNode(value)) {\n        value._detach();\n      }\n    }\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    if (op.type === 3 /* UPDATE_OBJECT */) {\n      return this._applyUpdate(op, isLocal);\n    } else if (op.type === 6 /* DELETE_OBJECT_KEY */) {\n      return this._applyDeleteObjectKey(op, isLocal);\n    }\n    return super._apply(op, isLocal);\n  }\n  /**\n   * @internal\n   */\n  _serialize() {\n    const data = {};\n    for (const [key, value] of this._map) {\n      if (!isLiveNode(value)) {\n        data[key] = value;\n      }\n    }\n    if (this.parent.type === \"HasParent\" && this.parent.node._id) {\n      return {\n        type: 0 /* OBJECT */,\n        parentId: this.parent.node._id,\n        parentKey: this.parent.key,\n        data\n      };\n    } else {\n      return {\n        type: 0 /* OBJECT */,\n        data\n      };\n    }\n  }\n  /** @internal */\n  _applyUpdate(op, isLocal) {\n    let isModified = false;\n    const id = nn(this._id);\n    const reverse = [];\n    const reverseUpdate = {\n      type: 3 /* UPDATE_OBJECT */,\n      id,\n      data: {}\n    };\n    for (const key in op.data) {\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        reverse.push(...oldValue._toOps(id, key));\n        oldValue._detach();\n      } else if (oldValue !== void 0) {\n        reverseUpdate.data[key] = oldValue;\n      } else if (oldValue === void 0) {\n        reverse.push({ type: 6 /* DELETE_OBJECT_KEY */, id, key });\n      }\n    }\n    const updateDelta = {};\n    for (const key in op.data) {\n      const value = op.data[key];\n      if (value === void 0) {\n        continue;\n      }\n      if (isLocal) {\n        this._propToLastUpdate.set(key, nn(op.opId));\n      } else if (this._propToLastUpdate.get(key) === void 0) {\n        isModified = true;\n      } else if (this._propToLastUpdate.get(key) === op.opId) {\n        this._propToLastUpdate.delete(key);\n        continue;\n      } else {\n        continue;\n      }\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        oldValue._detach();\n      }\n      isModified = true;\n      updateDelta[key] = { type: \"update\" };\n      this._map.set(key, value);\n      this.invalidate();\n    }\n    if (Object.keys(reverseUpdate.data).length !== 0) {\n      reverse.unshift(reverseUpdate);\n    }\n    return isModified ? {\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: updateDelta\n      },\n      reverse\n    } : { modified: false };\n  }\n  /** @internal */\n  _applyDeleteObjectKey(op, isLocal) {\n    const key = op.key;\n    if (this._map.has(key) === false) {\n      return { modified: false };\n    }\n    if (!isLocal && this._propToLastUpdate.get(key) !== void 0) {\n      return { modified: false };\n    }\n    const oldValue = this._map.get(key);\n    const id = nn(this._id);\n    let reverse = [];\n    if (isLiveNode(oldValue)) {\n      reverse = oldValue._toOps(id, op.key);\n      oldValue._detach();\n    } else if (oldValue !== void 0) {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          id,\n          data: { [key]: oldValue }\n        }\n      ];\n    }\n    this._map.delete(key);\n    this.invalidate();\n    return {\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: { [op.key]: { type: \"delete\" } }\n      },\n      reverse\n    };\n  }\n  /**\n   * Transform the LiveObject into a javascript object\n   */\n  toObject() {\n    return Object.fromEntries(this._map);\n  }\n  /**\n   * Adds or updates a property with a specified key and a value.\n   * @param key The key of the property to add\n   * @param value The value of the property to add\n   */\n  set(key, value) {\n    this._pool?.assertStorageIsWritable();\n    this.update({ [key]: value });\n  }\n  /**\n   * Returns a specified property from the LiveObject.\n   * @param key The key of the property to get\n   */\n  get(key) {\n    return this._map.get(key);\n  }\n  /**\n   * Deletes a key from the LiveObject\n   * @param key The key of the property to delete\n   */\n  delete(key) {\n    this._pool?.assertStorageIsWritable();\n    const keyAsString = key;\n    const oldValue = this._map.get(keyAsString);\n    if (oldValue === void 0) {\n      return;\n    }\n    if (this._pool === void 0 || this._id === void 0) {\n      if (isLiveNode(oldValue)) {\n        oldValue._detach();\n      }\n      this._map.delete(keyAsString);\n      this.invalidate();\n      return;\n    }\n    let reverse;\n    if (isLiveNode(oldValue)) {\n      oldValue._detach();\n      reverse = oldValue._toOps(this._id, keyAsString);\n    } else {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          data: { [keyAsString]: oldValue },\n          id: this._id\n        }\n      ];\n    }\n    this._map.delete(keyAsString);\n    this.invalidate();\n    const storageUpdates = /* @__PURE__ */ new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: { [key]: { type: \"delete\" } }\n    });\n    this._pool.dispatch(\n      [\n        {\n          type: 6 /* DELETE_OBJECT_KEY */,\n          key: keyAsString,\n          id: this._id,\n          opId: this._pool.generateOpId()\n        }\n      ],\n      reverse,\n      storageUpdates\n    );\n  }\n  /**\n   * Adds or updates multiple properties at once with an object.\n   * @param patch The object used to overrides properties\n   */\n  update(patch) {\n    this._pool?.assertStorageIsWritable();\n    if (this._pool === void 0 || this._id === void 0) {\n      for (const key in patch) {\n        const newValue = patch[key];\n        if (newValue === void 0) {\n          continue;\n        }\n        const oldValue = this._map.get(key);\n        if (isLiveNode(oldValue)) {\n          oldValue._detach();\n        }\n        if (isLiveNode(newValue)) {\n          newValue._setParentLink(this, key);\n        }\n        this._map.set(key, newValue);\n        this.invalidate();\n      }\n      return;\n    }\n    const ops = [];\n    const reverseOps = [];\n    const opId = this._pool.generateOpId();\n    const updatedProps = {};\n    const reverseUpdateOp = {\n      id: this._id,\n      type: 3 /* UPDATE_OBJECT */,\n      data: {}\n    };\n    const updateDelta = {};\n    for (const key in patch) {\n      const newValue = patch[key];\n      if (newValue === void 0) {\n        continue;\n      }\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        reverseOps.push(...oldValue._toOps(this._id, key));\n        oldValue._detach();\n      } else if (oldValue === void 0) {\n        reverseOps.push({ type: 6 /* DELETE_OBJECT_KEY */, id: this._id, key });\n      } else {\n        reverseUpdateOp.data[key] = oldValue;\n      }\n      if (isLiveNode(newValue)) {\n        newValue._setParentLink(this, key);\n        newValue._attach(this._pool.generateId(), this._pool);\n        const newAttachChildOps = newValue._toOps(this._id, key, this._pool);\n        const createCrdtOp = newAttachChildOps.find(\n          (op) => op.parentId === this._id\n        );\n        if (createCrdtOp) {\n          this._propToLastUpdate.set(key, nn(createCrdtOp.opId));\n        }\n        ops.push(...newAttachChildOps);\n      } else {\n        updatedProps[key] = newValue;\n        this._propToLastUpdate.set(key, opId);\n      }\n      this._map.set(key, newValue);\n      this.invalidate();\n      updateDelta[key] = { type: \"update\" };\n    }\n    if (Object.keys(reverseUpdateOp.data).length !== 0) {\n      reverseOps.unshift(reverseUpdateOp);\n    }\n    if (Object.keys(updatedProps).length !== 0) {\n      ops.unshift({\n        opId,\n        id: this._id,\n        type: 3 /* UPDATE_OBJECT */,\n        data: updatedProps\n      });\n    }\n    const storageUpdates = /* @__PURE__ */ new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: updateDelta\n    });\n    this._pool.dispatch(ops, reverseOps, storageUpdates);\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  toTreeNode(key) {\n    return super.toTreeNode(key);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    const nodeId = this._id ?? nanoid();\n    return {\n      type: \"LiveObject\",\n      id: nodeId,\n      key,\n      payload: Array.from(this._map.entries()).map(\n        ([key2, value]) => isLiveNode(value) ? value.toTreeNode(key2) : { type: \"Json\", id: `${nodeId}:${key2}`, key: key2, payload: value }\n      )\n    };\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = {};\n    for (const [key, val] of this._map) {\n      result[key] = isLiveStructure(val) ? val.toImmutable() : val;\n    }\n    return  false ? 0 : Object.freeze(result);\n  }\n  clone() {\n    return new _LiveObject(\n      Object.fromEntries(\n        Array.from(this._map).map(([key, value]) => [\n          key,\n          isLiveStructure(value) ? value.clone() : deepClone(value)\n        ])\n      )\n    );\n  }\n};\n\n// src/crdts/liveblocks-helpers.ts\nfunction creationOpToLiveNode(op) {\n  return lsonToLiveNode(creationOpToLson(op));\n}\nfunction creationOpToLson(op) {\n  switch (op.type) {\n    case 8 /* CREATE_REGISTER */:\n      return op.data;\n    case 4 /* CREATE_OBJECT */:\n      return new LiveObject(op.data);\n    case 7 /* CREATE_MAP */:\n      return new LiveMap();\n    case 2 /* CREATE_LIST */:\n      return new LiveList([]);\n    default:\n      return assertNever(op, \"Unknown creation Op\");\n  }\n}\nfunction isSameNodeOrChildOf(node, parent) {\n  if (node === parent) {\n    return true;\n  }\n  if (node.parent.type === \"HasParent\") {\n    return isSameNodeOrChildOf(node.parent.node, parent);\n  }\n  return false;\n}\nfunction deserialize([id, crdt], parentToChildren, pool) {\n  switch (crdt.type) {\n    case 0 /* OBJECT */: {\n      return LiveObject._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 1 /* LIST */: {\n      return LiveList._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 2 /* MAP */: {\n      return LiveMap._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 3 /* REGISTER */: {\n      return LiveRegister._deserialize([id, crdt], parentToChildren, pool);\n    }\n    default: {\n      throw new Error(\"Unexpected CRDT type\");\n    }\n  }\n}\nfunction deserializeToLson([id, crdt], parentToChildren, pool) {\n  switch (crdt.type) {\n    case 0 /* OBJECT */: {\n      return LiveObject._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 1 /* LIST */: {\n      return LiveList._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 2 /* MAP */: {\n      return LiveMap._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 3 /* REGISTER */: {\n      return crdt.data;\n    }\n    default: {\n      throw new Error(\"Unexpected CRDT type\");\n    }\n  }\n}\nfunction isLiveStructure(value) {\n  return isLiveList(value) || isLiveMap(value) || isLiveObject(value);\n}\nfunction isLiveNode(value) {\n  return isLiveStructure(value) || isLiveRegister(value);\n}\nfunction isLiveList(value) {\n  return value instanceof LiveList;\n}\nfunction isLiveMap(value) {\n  return value instanceof LiveMap;\n}\nfunction isLiveObject(value) {\n  return value instanceof LiveObject;\n}\nfunction isLiveRegister(value) {\n  return value instanceof LiveRegister;\n}\nfunction cloneLson(value) {\n  return value === void 0 ? void 0 : isLiveStructure(value) ? value.clone() : deepClone(value);\n}\nfunction liveNodeToLson(obj) {\n  if (obj instanceof LiveRegister) {\n    return obj.data;\n  } else if (obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject) {\n    return obj;\n  } else {\n    return assertNever(obj, \"Unknown AbstractCrdt\");\n  }\n}\nfunction lsonToLiveNode(value) {\n  if (value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList) {\n    return value;\n  } else {\n    return new LiveRegister(value);\n  }\n}\nfunction getTreesDiffOperations(currentItems, newItems) {\n  const ops = [];\n  currentItems.forEach((_, id) => {\n    if (!newItems.get(id)) {\n      ops.push({\n        type: 5 /* DELETE_CRDT */,\n        id\n      });\n    }\n  });\n  newItems.forEach((crdt, id) => {\n    const currentCrdt = currentItems.get(id);\n    if (currentCrdt) {\n      if (crdt.type === 0 /* OBJECT */) {\n        if (currentCrdt.type !== 0 /* OBJECT */ || JSON.stringify(crdt.data) !== JSON.stringify(currentCrdt.data)) {\n          ops.push({\n            type: 3 /* UPDATE_OBJECT */,\n            id,\n            data: crdt.data\n          });\n        }\n      }\n      if (crdt.parentKey !== currentCrdt.parentKey) {\n        ops.push({\n          type: 1 /* SET_PARENT_KEY */,\n          id,\n          parentKey: nn(crdt.parentKey, \"Parent key must not be missing\")\n        });\n      }\n    } else {\n      switch (crdt.type) {\n        case 3 /* REGISTER */:\n          ops.push({\n            type: 8 /* CREATE_REGISTER */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey,\n            data: crdt.data\n          });\n          break;\n        case 1 /* LIST */:\n          ops.push({\n            type: 2 /* CREATE_LIST */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey\n          });\n          break;\n        case 0 /* OBJECT */:\n          if (crdt.parentId === void 0 || crdt.parentKey === void 0) {\n            throw new Error(\n              \"Internal error. Cannot serialize storage root into an operation\"\n            );\n          }\n          ops.push({\n            type: 4 /* CREATE_OBJECT */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey,\n            data: crdt.data\n          });\n          break;\n        case 2 /* MAP */:\n          ops.push({\n            type: 7 /* CREATE_MAP */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey\n          });\n          break;\n      }\n    }\n  });\n  return ops;\n}\nfunction mergeObjectStorageUpdates(first, second) {\n  const updates = first.updates;\n  for (const [key, value] of entries(second.updates)) {\n    updates[key] = value;\n  }\n  return {\n    ...second,\n    updates\n  };\n}\nfunction mergeMapStorageUpdates(first, second) {\n  const updates = first.updates;\n  for (const [key, value] of entries(second.updates)) {\n    updates[key] = value;\n  }\n  return {\n    ...second,\n    updates\n  };\n}\nfunction mergeListStorageUpdates(first, second) {\n  const updates = first.updates;\n  return {\n    ...second,\n    updates: updates.concat(second.updates)\n  };\n}\nfunction mergeStorageUpdates(first, second) {\n  if (first === void 0) {\n    return second;\n  }\n  if (first.type === \"LiveObject\" && second.type === \"LiveObject\") {\n    return mergeObjectStorageUpdates(first, second);\n  } else if (first.type === \"LiveMap\" && second.type === \"LiveMap\") {\n    return mergeMapStorageUpdates(first, second);\n  } else if (first.type === \"LiveList\" && second.type === \"LiveList\") {\n    return mergeListStorageUpdates(first, second);\n  } else {\n  }\n  return second;\n}\nfunction isPlain(value) {\n  const type = typeof value;\n  return value === void 0 || value === null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(value) || isPlainObject(value);\n}\nfunction findNonSerializableValue(value, path = \"\") {\n  if (!isPlain) {\n    return {\n      path: path || \"root\",\n      value\n    };\n  }\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  for (const [key, nestedValue] of Object.entries(value)) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (!isPlain(nestedValue)) {\n      return {\n        path: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === \"object\") {\n      const nonSerializableNestedValue = findNonSerializableValue(\n        nestedValue,\n        nestedPath\n      );\n      if (nonSerializableNestedValue) {\n        return nonSerializableNestedValue;\n      }\n    }\n  }\n  return false;\n}\n\n// src/lib/debug.ts\nfunction captureStackTrace(msg, traceRoot) {\n  const errorLike = { name: msg };\n  if (typeof Error.captureStackTrace !== \"function\") {\n    return void 0;\n  }\n  Error.captureStackTrace(errorLike, traceRoot);\n  return errorLike.stack;\n}\n\n// src/lib/Json.ts\nfunction isJsonScalar(data) {\n  return data === null || typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\";\n}\nfunction isJsonArray(data) {\n  return Array.isArray(data);\n}\nfunction isJsonObject(data) {\n  return !isJsonScalar(data) && !isJsonArray(data);\n}\n\n// src/lib/objectToQuery.ts\nvar identifierRegex = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\nfunction objectToQuery(obj) {\n  let filterList = [];\n  const entries2 = Object.entries(obj);\n  const keyValuePairs = [];\n  const keyValuePairsWithOperator = [];\n  const indexedKeys = [];\n  entries2.forEach(([key, value]) => {\n    if (!identifierRegex.test(key)) {\n      throw new Error(\"Key must only contain letters, numbers, _\");\n    }\n    if (isSimpleValue(value)) {\n      keyValuePairs.push([key, value]);\n    } else if (isValueWithOperator(value)) {\n      keyValuePairsWithOperator.push([key, value]);\n    } else if (typeof value === \"object\" && !(\"startsWith\" in value)) {\n      indexedKeys.push([key, value]);\n    }\n  });\n  filterList = [\n    ...getFiltersFromKeyValuePairs(keyValuePairs),\n    ...getFiltersFromKeyValuePairsWithOperator(keyValuePairsWithOperator)\n  ];\n  indexedKeys.forEach(([key, value]) => {\n    const nestedEntries = Object.entries(value);\n    const nKeyValuePairs = [];\n    const nKeyValuePairsWithOperator = [];\n    nestedEntries.forEach(([nestedKey, nestedValue]) => {\n      if (isStringEmpty(nestedKey)) {\n        throw new Error(\"Key cannot be empty\");\n      }\n      if (isSimpleValue(nestedValue)) {\n        nKeyValuePairs.push([formatFilterKey(key, nestedKey), nestedValue]);\n      } else if (isValueWithOperator(nestedValue)) {\n        nKeyValuePairsWithOperator.push([\n          formatFilterKey(key, nestedKey),\n          nestedValue\n        ]);\n      }\n    });\n    filterList = [\n      ...filterList,\n      ...getFiltersFromKeyValuePairs(nKeyValuePairs),\n      ...getFiltersFromKeyValuePairsWithOperator(nKeyValuePairsWithOperator)\n    ];\n  });\n  return filterList.map(\n    ({ key, operator, value }) => formatFilter(key, operator, formatFilterValue(value))\n  ).join(\" AND \");\n}\nvar getFiltersFromKeyValuePairs = (keyValuePairs) => {\n  const filters = [];\n  keyValuePairs.forEach(([key, value]) => {\n    filters.push({\n      key,\n      operator: \":\",\n      value\n    });\n  });\n  return filters;\n};\nvar getFiltersFromKeyValuePairsWithOperator = (keyValuePairsWithOperator) => {\n  const filters = [];\n  keyValuePairsWithOperator.forEach(([key, value]) => {\n    if (\"startsWith\" in value && typeof value.startsWith === \"string\") {\n      filters.push({\n        key,\n        operator: \"^\",\n        value: value.startsWith\n      });\n    }\n  });\n  return filters;\n};\nvar isSimpleValue = (value) => {\n  if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n    return true;\n  }\n  return false;\n};\nvar isValueWithOperator = (value) => {\n  if (typeof value === \"object\" && value !== null && \"startsWith\" in value) {\n    return true;\n  }\n  return false;\n};\nvar formatFilter = (key, operator, value) => {\n  return `${key}${operator}${value}`;\n};\nvar formatFilterKey = (key, nestedKey) => {\n  if (nestedKey) {\n    return `${key}[${JSON.stringify(nestedKey)}]`;\n  }\n  return key;\n};\nvar formatFilterValue = (value) => {\n  if (typeof value === \"string\") {\n    if (isStringEmpty(value)) {\n      throw new Error(\"Value cannot be empty\");\n    }\n    return JSON.stringify(value);\n  }\n  return value.toString();\n};\nvar isStringEmpty = (value) => {\n  return !value || value.toString().trim() === \"\";\n};\n\n// src/protocol/ClientMsg.ts\nvar ClientMsgCode = /* @__PURE__ */ ((ClientMsgCode2) => {\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n  ClientMsgCode2[ClientMsgCode2[\"BROADCAST_EVENT\"] = 103] = \"BROADCAST_EVENT\";\n  ClientMsgCode2[ClientMsgCode2[\"FETCH_STORAGE\"] = 200] = \"FETCH_STORAGE\";\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n  ClientMsgCode2[ClientMsgCode2[\"FETCH_YDOC\"] = 300] = \"FETCH_YDOC\";\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_YDOC\"] = 301] = \"UPDATE_YDOC\";\n  return ClientMsgCode2;\n})(ClientMsgCode || {});\n\n// src/refs/ImmutableRef.ts\nfunction merge(target, patch) {\n  let updated = false;\n  const newValue = { ...target };\n  Object.keys(patch).forEach((k) => {\n    const key = k;\n    const val = patch[key];\n    if (newValue[key] !== val) {\n      if (val === void 0) {\n        delete newValue[key];\n      } else {\n        newValue[key] = val;\n      }\n      updated = true;\n    }\n  });\n  return updated ? newValue : target;\n}\nvar ImmutableRef = class {\n  constructor() {\n    this._ev = makeEventSource();\n  }\n  get didInvalidate() {\n    return this._ev.observable;\n  }\n  invalidate() {\n    if (this._cache !== void 0) {\n      this._cache = void 0;\n      this._ev.notify();\n    }\n  }\n  get current() {\n    return this._cache ?? (this._cache = this._toImmutable());\n  }\n};\n\n// src/refs/OthersRef.ts\nfunction makeUser(conn, presence) {\n  const { connectionId, id, info } = conn;\n  const canWrite = canWriteStorage(conn.scopes);\n  return freeze(\n    compactObject({\n      connectionId,\n      id,\n      info,\n      canWrite,\n      canComment: canComment(conn.scopes),\n      isReadOnly: !canWrite,\n      // Deprecated, kept for backward-compatibility\n      presence\n    })\n  );\n}\nvar OthersRef = class extends ImmutableRef {\n  //\n  // --------------------------------------------------------------\n  //\n  constructor() {\n    super();\n    this._connections = /* @__PURE__ */ new Map();\n    this._presences = /* @__PURE__ */ new Map();\n    this._users = /* @__PURE__ */ new Map();\n  }\n  connectionIds() {\n    return this._connections.keys();\n  }\n  /** @internal */\n  _toImmutable() {\n    const users = compact(\n      Array.from(this._presences.keys()).map(\n        (connectionId) => this.getUser(Number(connectionId))\n      )\n    );\n    return users;\n  }\n  clearOthers() {\n    this._connections = /* @__PURE__ */ new Map();\n    this._presences = /* @__PURE__ */ new Map();\n    this._users = /* @__PURE__ */ new Map();\n    this.invalidate();\n  }\n  /** @internal */\n  _getUser(connectionId) {\n    const conn = this._connections.get(connectionId);\n    const presence = this._presences.get(connectionId);\n    if (conn !== void 0 && presence !== void 0) {\n      return makeUser(conn, presence);\n    }\n    return void 0;\n  }\n  getUser(connectionId) {\n    const cachedUser = this._users.get(connectionId);\n    if (cachedUser) {\n      return cachedUser;\n    }\n    const computedUser = this._getUser(connectionId);\n    if (computedUser) {\n      this._users.set(connectionId, computedUser);\n      return computedUser;\n    }\n    return void 0;\n  }\n  /** @internal */\n  _invalidateUser(connectionId) {\n    if (this._users.has(connectionId)) {\n      this._users.delete(connectionId);\n    }\n    this.invalidate();\n  }\n  /**\n   * Records a known connection. This records the connection ID and the\n   * associated metadata.\n   */\n  setConnection(connectionId, metaUserId, metaUserInfo, scopes) {\n    this._connections.set(\n      connectionId,\n      freeze({\n        connectionId,\n        id: metaUserId,\n        info: metaUserInfo,\n        scopes\n      })\n    );\n    if (this._presences.has(connectionId)) {\n      this._invalidateUser(connectionId);\n    }\n  }\n  /**\n   * Removes a known connectionId. Removes both the connection's metadata and\n   * the presence information.\n   */\n  removeConnection(connectionId) {\n    this._connections.delete(connectionId);\n    this._presences.delete(connectionId);\n    this._invalidateUser(connectionId);\n  }\n  /**\n   * Stores a new user from a full presence update. If the user already exists,\n   * its known presence data is overwritten.\n   */\n  setOther(connectionId, presence) {\n    this._presences.set(connectionId, freeze(compactObject(presence)));\n    if (this._connections.has(connectionId)) {\n      this._invalidateUser(connectionId);\n    }\n  }\n  /**\n   * Patches the presence data for an existing \"other\". If we don't know the\n   * initial presence data for this user yet, discard this patch and await the\n   * full .setOther() call first.\n   */\n  patchOther(connectionId, patch) {\n    const oldPresence = this._presences.get(connectionId);\n    if (oldPresence === void 0) {\n      return;\n    }\n    const newPresence = merge(oldPresence, patch);\n    if (oldPresence !== newPresence) {\n      this._presences.set(connectionId, freeze(newPresence));\n      this._invalidateUser(connectionId);\n    }\n  }\n};\n\n// src/refs/PatchableRef.ts\nvar PatchableRef = class extends ImmutableRef {\n  constructor(data) {\n    super();\n    this._data = freeze(compactObject(data));\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._data;\n  }\n  /**\n   * Patches the current object.\n   */\n  patch(patch) {\n    const oldData = this._data;\n    const newData = merge(oldData, patch);\n    if (oldData !== newData) {\n      this._data = freeze(newData);\n      this.invalidate();\n    }\n  }\n};\n\n// src/refs/ValueRef.ts\nvar ValueRef = class extends ImmutableRef {\n  constructor(initialValue) {\n    super();\n    this._value = freeze(initialValue);\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._value;\n  }\n  set(newValue) {\n    this._value = freeze(newValue);\n    this.invalidate();\n  }\n};\nvar DerivedRef = class extends ImmutableRef {\n  constructor(...args) {\n    super();\n    const transformFn = args.pop();\n    const otherRefs = args;\n    this._refs = otherRefs;\n    this._refs.forEach((ref) => {\n      ref.didInvalidate.subscribe(() => this.invalidate());\n    });\n    this._transform = transformFn;\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._transform(\n      ...this._refs.map((ref) => ref.current)\n    );\n  }\n};\n\n// src/room.ts\nvar MAX_SOCKET_MESSAGE_SIZE = 1024 * 1024 - 1024;\nfunction makeIdFactory(connectionId) {\n  let count = 0;\n  return () => `${connectionId}:${count++}`;\n}\nfunction userToTreeNode(key, user) {\n  return {\n    type: \"User\",\n    id: `${user.connectionId}`,\n    key,\n    payload: {\n      connectionId: user.connectionId,\n      id: user.id,\n      info: user.info,\n      presence: user.presence,\n      isReadOnly: !user.canWrite\n    }\n  };\n}\nfunction installBackgroundTabSpy() {\n  const doc = typeof document !== \"undefined\" ? document : void 0;\n  const inBackgroundSince = { current: null };\n  function onVisibilityChange() {\n    if (doc?.visibilityState === \"hidden\") {\n      inBackgroundSince.current = inBackgroundSince.current ?? Date.now();\n    } else {\n      inBackgroundSince.current = null;\n    }\n  }\n  doc?.addEventListener(\"visibilitychange\", onVisibilityChange);\n  const unsub = () => {\n    doc?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n  };\n  return [inBackgroundSince, unsub];\n}\nvar CommentsApiError = class extends Error {\n  constructor(message, status, details) {\n    super(message);\n    this.message = message;\n    this.status = status;\n    this.details = details;\n  }\n};\nfunction createCommentsApi(roomId, getAuthValue, fetchClientApi) {\n  async function fetchCommentsApi(endpoint, params, options) {\n    const authValue = await getAuthValue();\n    return fetchClientApi(roomId, endpoint, authValue, options, params);\n  }\n  async function fetchJson(endpoint, options, params) {\n    const response = await fetchCommentsApi(endpoint, params, options);\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new CommentsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new CommentsApiError(response.statusText, response.status);\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  async function getThreads(options) {\n    let query;\n    if (options?.query) {\n      query = objectToQuery(options.query);\n    }\n    const response = await fetchCommentsApi(\n      \"/threads\",\n      {\n        since: options?.since?.toISOString(),\n        query\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return {\n        threads: json.data.map((thread) => convertToThreadData(thread)),\n        inboxNotifications: json.inboxNotifications.map(\n          (notification) => convertToInboxNotificationData(notification)\n        ),\n        deletedThreads: json.deletedThreads.map(\n          (info) => convertToThreadDeleteInfo(info)\n        ),\n        deletedInboxNotifications: json.deletedInboxNotifications.map(\n          (info) => convertToInboxNotificationDeleteInfo(info)\n        ),\n        meta: {\n          requestedAt: new Date(json.meta.requestedAt)\n        }\n      };\n    } else if (response.status === 404) {\n      return {\n        threads: [],\n        inboxNotifications: [],\n        deletedThreads: [],\n        deletedInboxNotifications: [],\n        meta: {\n          requestedAt: /* @__PURE__ */ new Date()\n        }\n      };\n    } else {\n      throw new Error(\"There was an error while getting threads.\");\n    }\n  }\n  async function getThread({ threadId }) {\n    const response = await fetchCommentsApi(\n      `/thread-with-notification/${threadId}`\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return {\n        thread: convertToThreadData(json.thread),\n        inboxNotification: json.inboxNotification ? convertToInboxNotificationData(json.inboxNotification) : void 0\n      };\n    } else if (response.status === 404) {\n      return;\n    } else {\n      throw new Error(`There was an error while getting thread ${threadId}.`);\n    }\n  }\n  async function createThread({\n    metadata,\n    body,\n    commentId,\n    threadId\n  }) {\n    const thread = await fetchJson(\"/threads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: threadId,\n        comment: {\n          id: commentId,\n          body\n        },\n        metadata\n      })\n    });\n    return convertToThreadData(thread);\n  }\n  async function deleteThread({ threadId }) {\n    await fetchJson(`/threads/${encodeURIComponent(threadId)}`, {\n      method: \"DELETE\"\n    });\n  }\n  async function editThreadMetadata({\n    metadata,\n    threadId\n  }) {\n    return await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/metadata`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(metadata)\n      }\n    );\n  }\n  async function markThreadAsResolved({ threadId }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/mark-as-resolved`,\n      {\n        method: \"POST\"\n      }\n    );\n  }\n  async function markThreadAsUnresolved({ threadId }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/mark-as-unresolved`,\n      {\n        method: \"POST\"\n      }\n    );\n  }\n  async function createComment({\n    threadId,\n    commentId,\n    body\n  }) {\n    const comment = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          id: commentId,\n          body\n        })\n      }\n    );\n    return convertToCommentData(comment);\n  }\n  async function editComment({\n    threadId,\n    commentId,\n    body\n  }) {\n    const comment = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          body\n        })\n      }\n    );\n    return convertToCommentData(comment);\n  }\n  async function deleteComment2({\n    threadId,\n    commentId\n  }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  async function addReaction2({\n    threadId,\n    commentId,\n    emoji\n  }) {\n    const reaction = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}/reactions`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ emoji })\n      }\n    );\n    return convertToCommentUserReaction(reaction);\n  }\n  async function removeReaction2({\n    threadId,\n    commentId,\n    emoji\n  }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}/reactions/${encodeURIComponent(emoji)}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  return {\n    getThreads,\n    getThread,\n    createThread,\n    deleteThread,\n    editThreadMetadata,\n    markThreadAsResolved,\n    markThreadAsUnresolved,\n    createComment,\n    editComment,\n    deleteComment: deleteComment2,\n    addReaction: addReaction2,\n    removeReaction: removeReaction2\n  };\n}\nvar MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY2 = 50;\nfunction createRoom(options, config) {\n  const initialPresence = options.initialPresence;\n  const initialStorage = options.initialStorage;\n  const [inBackgroundSince, uninstallBgTabSpy] = installBackgroundTabSpy();\n  const delegates = {\n    ...config.delegates,\n    // A connection is allowed to go into \"zombie state\" only if all of the\n    // following conditions apply:\n    //\n    // - The `backgroundKeepAliveTimeout` client option is configured\n    // - The browser window has been in the background for at least\n    //   `backgroundKeepAliveTimeout` milliseconds\n    // - There are no pending changes\n    //\n    canZombie() {\n      return config.backgroundKeepAliveTimeout !== void 0 && inBackgroundSince.current !== null && Date.now() > inBackgroundSince.current + config.backgroundKeepAliveTimeout && getStorageStatus() !== \"synchronizing\";\n    }\n  };\n  const managedSocket = new ManagedSocket(\n    delegates,\n    config.enableDebugLogging\n  );\n  const context = {\n    buffer: {\n      flushTimerID: void 0,\n      lastFlushedAt: 0,\n      presenceUpdates: (\n        // Queue up the initial presence message as a Full Presence™ update\n        {\n          type: \"full\",\n          data: initialPresence\n        }\n      ),\n      messages: [],\n      storageOperations: []\n    },\n    staticSessionInfo: new ValueRef(null),\n    dynamicSessionInfo: new ValueRef(null),\n    myPresence: new PatchableRef(initialPresence),\n    others: new OthersRef(),\n    initialStorage,\n    idFactory: null,\n    // Storage\n    clock: 0,\n    opClock: 0,\n    nodes: /* @__PURE__ */ new Map(),\n    root: void 0,\n    undoStack: [],\n    redoStack: [],\n    pausedHistory: null,\n    activeBatch: null,\n    unacknowledgedOps: /* @__PURE__ */ new Map(),\n    // Debug\n    opStackTraces:  true ? /* @__PURE__ */ new Map() : 0\n  };\n  const doNotBatchUpdates = (cb) => cb();\n  const batchUpdates = config.unstable_batchedUpdates ?? doNotBatchUpdates;\n  let lastTokenKey;\n  function onStatusDidChange(newStatus) {\n    const authValue = managedSocket.authValue;\n    if (authValue !== null) {\n      const tokenKey = getAuthBearerHeaderFromAuthValue(authValue);\n      if (tokenKey !== lastTokenKey) {\n        lastTokenKey = tokenKey;\n        if (authValue.type === \"secret\") {\n          const token = authValue.token.parsed;\n          context.staticSessionInfo.set({\n            userId: token.k === \"sec-legacy\" /* SECRET_LEGACY */ ? token.id : token.uid,\n            userInfo: token.k === \"sec-legacy\" /* SECRET_LEGACY */ ? token.info : token.ui\n          });\n        } else {\n          context.staticSessionInfo.set({\n            userId: void 0,\n            userInfo: void 0\n          });\n        }\n      }\n    }\n    batchUpdates(() => {\n      eventHub.status.notify(newStatus);\n      notifySelfChanged(doNotBatchUpdates);\n    });\n  }\n  let _connectionLossTimerId;\n  let _hasLostConnection = false;\n  function handleConnectionLossEvent(newStatus) {\n    if (newStatus === \"reconnecting\") {\n      _connectionLossTimerId = setTimeout(() => {\n        batchUpdates(() => {\n          eventHub.lostConnection.notify(\"lost\");\n          _hasLostConnection = true;\n          context.others.clearOthers();\n          notify({ others: [{ type: \"reset\" }] }, doNotBatchUpdates);\n        });\n      }, config.lostConnectionTimeout);\n    } else {\n      clearTimeout(_connectionLossTimerId);\n      if (_hasLostConnection) {\n        if (newStatus === \"disconnected\") {\n          batchUpdates(() => {\n            eventHub.lostConnection.notify(\"failed\");\n          });\n        } else {\n          batchUpdates(() => {\n            eventHub.lostConnection.notify(\"restored\");\n          });\n        }\n        _hasLostConnection = false;\n      }\n    }\n  }\n  function onDidConnect() {\n    context.buffer.presenceUpdates = {\n      type: \"full\",\n      data: (\n        // Because context.me.current is a readonly object, we'll have to\n        // make a copy here. Otherwise, type errors happen later when\n        // \"patching\" my presence.\n        { ...context.myPresence.current }\n      )\n    };\n    if (_getStorage$ !== null) {\n      refreshStorage({ flush: false });\n    }\n    flushNowOrSoon();\n  }\n  function onDidDisconnect() {\n    clearTimeout(context.buffer.flushTimerID);\n  }\n  managedSocket.events.onMessage.subscribe(handleServerMessage);\n  managedSocket.events.statusDidChange.subscribe(onStatusDidChange);\n  managedSocket.events.statusDidChange.subscribe(handleConnectionLossEvent);\n  managedSocket.events.didConnect.subscribe(onDidConnect);\n  managedSocket.events.didDisconnect.subscribe(onDidDisconnect);\n  managedSocket.events.onLiveblocksError.subscribe((err) => {\n    batchUpdates(() => {\n      if (true) {\n        error2(\n          `Connection to websocket server closed. Reason: ${err.message} (code: ${err.code}).`\n        );\n      }\n      eventHub.error.notify(err);\n    });\n  });\n  const pool = {\n    roomId: config.roomId,\n    getNode: (id) => context.nodes.get(id),\n    addNode: (id, node) => void context.nodes.set(id, node),\n    deleteNode: (id) => void context.nodes.delete(id),\n    generateId: () => `${getConnectionId()}:${context.clock++}`,\n    generateOpId: () => `${getConnectionId()}:${context.opClock++}`,\n    dispatch(ops, reverse, storageUpdates) {\n      const activeBatch = context.activeBatch;\n      if (true) {\n        const stackTrace = captureStackTrace(\"Storage mutation\", this.dispatch);\n        if (stackTrace) {\n          for (const op of ops) {\n            if (op.opId) {\n              nn(context.opStackTraces).set(op.opId, stackTrace);\n            }\n          }\n        }\n      }\n      if (activeBatch) {\n        for (const op of ops) {\n          activeBatch.ops.push(op);\n        }\n        for (const [key, value] of storageUpdates) {\n          activeBatch.updates.storageUpdates.set(\n            key,\n            mergeStorageUpdates(\n              activeBatch.updates.storageUpdates.get(key),\n              value\n            )\n          );\n        }\n        activeBatch.reverseOps.unshift(...reverse);\n      } else {\n        batchUpdates(() => {\n          addToUndoStack(reverse, doNotBatchUpdates);\n          context.redoStack.length = 0;\n          dispatchOps(ops);\n          notify({ storageUpdates }, doNotBatchUpdates);\n        });\n      }\n    },\n    assertStorageIsWritable: () => {\n      const scopes = context.dynamicSessionInfo.current?.scopes;\n      if (scopes === void 0) {\n        return;\n      }\n      const canWrite = canWriteStorage(scopes);\n      if (!canWrite) {\n        throw new Error(\n          \"Cannot write to storage with a read only user, please ensure the user has write permissions\"\n        );\n      }\n    }\n  };\n  const eventHub = {\n    status: makeEventSource(),\n    // New/recommended API\n    lostConnection: makeEventSource(),\n    customEvent: makeEventSource(),\n    self: makeEventSource(),\n    myPresence: makeEventSource(),\n    others: makeEventSource(),\n    error: makeEventSource(),\n    storageBatch: makeEventSource(),\n    history: makeEventSource(),\n    storageDidLoad: makeEventSource(),\n    storageStatus: makeEventSource(),\n    ydoc: makeEventSource(),\n    comments: makeEventSource()\n  };\n  async function fetchClientApi(roomId, endpoint, authValue, options2, params) {\n    const url = urljoin(\n      config.baseUrl,\n      `/v2/c/rooms/${encodeURIComponent(roomId)}${endpoint}`,\n      params\n    );\n    const fetcher = config.polyfills?.fetch || /* istanbul ignore next */\n    fetch;\n    return await fetcher(url, {\n      ...options2,\n      headers: {\n        ...options2?.headers,\n        Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n      }\n    });\n  }\n  async function streamFetch(authValue, roomId) {\n    return fetchClientApi(roomId, \"/storage\", authValue, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  async function httpPostToRoom(endpoint, body) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(config.roomId, endpoint, managedSocket.authValue, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n  }\n  async function createTextMention(userId, mentionId) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(\n      config.roomId,\n      \"/text-mentions\",\n      managedSocket.authValue,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          mentionId\n        })\n      }\n    );\n  }\n  async function deleteTextMention(mentionId) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(\n      config.roomId,\n      `/text-mentions/${mentionId}`,\n      managedSocket.authValue,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  async function reportTextEditor(type, rootKey) {\n    const authValue = await delegates.authenticate();\n    return fetchClientApi(config.roomId, \"/text-metadata\", authValue, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        type,\n        rootKey\n      })\n    });\n  }\n  function sendMessages(messages) {\n    const serializedPayload = JSON.stringify(messages);\n    const nonce = context.dynamicSessionInfo.current?.nonce;\n    if (config.unstable_fallbackToHTTP && nonce) {\n      const size = new TextEncoder().encode(serializedPayload).length;\n      if (size > MAX_SOCKET_MESSAGE_SIZE) {\n        void httpPostToRoom(\"/send-message\", { nonce, messages }).then(\n          (resp) => {\n            if (!resp.ok && resp.status === 403) {\n              managedSocket.reconnect();\n            }\n          }\n        );\n        warn(\n          \"Message was too large for websockets and sent over HTTP instead\"\n        );\n        return;\n      }\n    }\n    managedSocket.send(serializedPayload);\n  }\n  const self = new DerivedRef(\n    context.staticSessionInfo,\n    context.dynamicSessionInfo,\n    context.myPresence,\n    (staticSession, dynamicSession, myPresence) => {\n      if (staticSession === null || dynamicSession === null) {\n        return null;\n      } else {\n        const canWrite = canWriteStorage(dynamicSession.scopes);\n        return {\n          connectionId: dynamicSession.actor,\n          id: staticSession.userId,\n          info: staticSession.userInfo,\n          presence: myPresence,\n          canWrite,\n          canComment: canComment(dynamicSession.scopes)\n        };\n      }\n    }\n  );\n  let _lastSelf;\n  function notifySelfChanged(batchedUpdatesWrapper) {\n    const currSelf = self.current;\n    if (currSelf !== null && currSelf !== _lastSelf) {\n      batchedUpdatesWrapper(() => {\n        eventHub.self.notify(currSelf);\n      });\n      _lastSelf = currSelf;\n    }\n  }\n  const selfAsTreeNode = new DerivedRef(\n    self,\n    (me) => me !== null ? userToTreeNode(\"Me\", me) : null\n  );\n  function createOrUpdateRootFromMessage(message, batchedUpdatesWrapper) {\n    if (message.items.length === 0) {\n      throw new Error(\"Internal error: cannot load storage without items\");\n    }\n    if (context.root !== void 0) {\n      updateRoot(message.items, batchedUpdatesWrapper);\n    } else {\n      context.root = LiveObject._fromItems(message.items, pool);\n    }\n    const canWrite = self.current?.canWrite ?? true;\n    const stackSizeBefore = context.undoStack.length;\n    for (const key in context.initialStorage) {\n      if (context.root.get(key) === void 0) {\n        if (canWrite) {\n          context.root.set(key, cloneLson(context.initialStorage[key]));\n        } else {\n          warn(\n            `Attempted to populate missing storage key '${key}', but current user has no write access`\n          );\n        }\n      }\n    }\n    context.undoStack.length = stackSizeBefore;\n  }\n  function updateRoot(items, batchedUpdatesWrapper) {\n    if (context.root === void 0) {\n      return;\n    }\n    const currentItems = /* @__PURE__ */ new Map();\n    for (const [id, node] of context.nodes) {\n      currentItems.set(id, node._serialize());\n    }\n    const ops = getTreesDiffOperations(currentItems, new Map(items));\n    const result = applyOps(ops, false);\n    notify(result.updates, batchedUpdatesWrapper);\n  }\n  function _addToRealUndoStack(historyOps, batchedUpdatesWrapper) {\n    if (context.undoStack.length >= 50) {\n      context.undoStack.shift();\n    }\n    context.undoStack.push(historyOps);\n    onHistoryChange(batchedUpdatesWrapper);\n  }\n  function addToUndoStack(historyOps, batchedUpdatesWrapper) {\n    if (context.pausedHistory !== null) {\n      context.pausedHistory.unshift(...historyOps);\n    } else {\n      _addToRealUndoStack(historyOps, batchedUpdatesWrapper);\n    }\n  }\n  function notify(updates, batchedUpdatesWrapper) {\n    const storageUpdates = updates.storageUpdates;\n    const othersUpdates = updates.others;\n    batchedUpdatesWrapper(() => {\n      if (othersUpdates !== void 0 && othersUpdates.length > 0) {\n        const others = context.others.current;\n        for (const event of othersUpdates) {\n          eventHub.others.notify({ ...event, others });\n        }\n      }\n      if (updates.presence ?? false) {\n        notifySelfChanged(doNotBatchUpdates);\n        eventHub.myPresence.notify(context.myPresence.current);\n      }\n      if (storageUpdates !== void 0 && storageUpdates.size > 0) {\n        const updates2 = Array.from(storageUpdates.values());\n        eventHub.storageBatch.notify(updates2);\n      }\n      notifyStorageStatus();\n    });\n  }\n  function getConnectionId() {\n    const info = context.dynamicSessionInfo.current;\n    if (info) {\n      return info.actor;\n    }\n    throw new Error(\n      \"Internal. Tried to get connection id but connection was never open\"\n    );\n  }\n  function applyOps(rawOps, isLocal) {\n    const output = {\n      reverse: [],\n      storageUpdates: /* @__PURE__ */ new Map(),\n      presence: false\n    };\n    const createdNodeIds = /* @__PURE__ */ new Set();\n    const ops = rawOps.map((op) => {\n      if (op.type !== \"presence\" && !op.opId) {\n        return { ...op, opId: pool.generateOpId() };\n      } else {\n        return op;\n      }\n    });\n    for (const op of ops) {\n      if (op.type === \"presence\") {\n        const reverse = {\n          type: \"presence\",\n          data: {}\n        };\n        for (const key in op.data) {\n          reverse.data[key] = context.myPresence.current[key];\n        }\n        context.myPresence.patch(op.data);\n        if (context.buffer.presenceUpdates === null) {\n          context.buffer.presenceUpdates = { type: \"partial\", data: op.data };\n        } else {\n          for (const key in op.data) {\n            context.buffer.presenceUpdates.data[key] = op.data[key];\n          }\n        }\n        output.reverse.unshift(reverse);\n        output.presence = true;\n      } else {\n        let source;\n        if (isLocal) {\n          source = 0 /* UNDOREDO_RECONNECT */;\n        } else {\n          const opId = nn(op.opId);\n          if (true) {\n            nn(context.opStackTraces).delete(opId);\n          }\n          const deleted = context.unacknowledgedOps.delete(opId);\n          source = deleted ? 2 /* ACK */ : 1 /* REMOTE */;\n        }\n        const applyOpResult = applyOp(op, source);\n        if (applyOpResult.modified) {\n          const nodeId = applyOpResult.modified.node._id;\n          if (!(nodeId && createdNodeIds.has(nodeId))) {\n            output.storageUpdates.set(\n              nn(applyOpResult.modified.node._id),\n              mergeStorageUpdates(\n                output.storageUpdates.get(nn(applyOpResult.modified.node._id)),\n                applyOpResult.modified\n              )\n            );\n            output.reverse.unshift(...applyOpResult.reverse);\n          }\n          if (op.type === 2 /* CREATE_LIST */ || op.type === 7 /* CREATE_MAP */ || op.type === 4 /* CREATE_OBJECT */) {\n            createdNodeIds.add(nn(op.id));\n          }\n        }\n      }\n    }\n    return {\n      ops,\n      reverse: output.reverse,\n      updates: {\n        storageUpdates: output.storageUpdates,\n        presence: output.presence\n      }\n    };\n  }\n  function applyOp(op, source) {\n    if (isAckOp(op)) {\n      return { modified: false };\n    }\n    switch (op.type) {\n      case 6 /* DELETE_OBJECT_KEY */:\n      case 3 /* UPDATE_OBJECT */:\n      case 5 /* DELETE_CRDT */: {\n        const node = context.nodes.get(op.id);\n        if (node === void 0) {\n          return { modified: false };\n        }\n        return node._apply(op, source === 0 /* UNDOREDO_RECONNECT */);\n      }\n      case 1 /* SET_PARENT_KEY */: {\n        const node = context.nodes.get(op.id);\n        if (node === void 0) {\n          return { modified: false };\n        }\n        if (node.parent.type === \"HasParent\" && isLiveList(node.parent.node)) {\n          return node.parent.node._setChildKey(\n            asPos(op.parentKey),\n            node,\n            source\n          );\n        }\n        return { modified: false };\n      }\n      case 4 /* CREATE_OBJECT */:\n      case 2 /* CREATE_LIST */:\n      case 7 /* CREATE_MAP */:\n      case 8 /* CREATE_REGISTER */: {\n        if (op.parentId === void 0) {\n          return { modified: false };\n        }\n        const parentNode = context.nodes.get(op.parentId);\n        if (parentNode === void 0) {\n          return { modified: false };\n        }\n        return parentNode._attachChild(op, source);\n      }\n    }\n  }\n  function updatePresence(patch, options2) {\n    const oldValues = {};\n    if (context.buffer.presenceUpdates === null) {\n      context.buffer.presenceUpdates = {\n        type: \"partial\",\n        data: {}\n      };\n    }\n    for (const key in patch) {\n      const overrideValue = patch[key];\n      if (overrideValue === void 0) {\n        continue;\n      }\n      context.buffer.presenceUpdates.data[key] = overrideValue;\n      oldValues[key] = context.myPresence.current[key];\n    }\n    context.myPresence.patch(patch);\n    if (context.activeBatch) {\n      if (options2?.addToHistory) {\n        context.activeBatch.reverseOps.unshift({\n          type: \"presence\",\n          data: oldValues\n        });\n      }\n      context.activeBatch.updates.presence = true;\n    } else {\n      flushNowOrSoon();\n      batchUpdates(() => {\n        if (options2?.addToHistory) {\n          addToUndoStack(\n            [{ type: \"presence\", data: oldValues }],\n            doNotBatchUpdates\n          );\n        }\n        notify({ presence: true }, doNotBatchUpdates);\n      });\n    }\n  }\n  function onUpdatePresenceMessage(message) {\n    if (message.targetActor !== void 0) {\n      const oldUser = context.others.getUser(message.actor);\n      context.others.setOther(message.actor, message.data);\n      const newUser = context.others.getUser(message.actor);\n      if (oldUser === void 0 && newUser !== void 0) {\n        return { type: \"enter\", user: newUser };\n      }\n    } else {\n      context.others.patchOther(message.actor, message.data), message;\n    }\n    const user = context.others.getUser(message.actor);\n    if (user) {\n      return {\n        type: \"update\",\n        updates: message.data,\n        user\n      };\n    } else {\n      return void 0;\n    }\n  }\n  function onUserLeftMessage(message) {\n    const user = context.others.getUser(message.actor);\n    if (user) {\n      context.others.removeConnection(message.actor);\n      return { type: \"leave\", user };\n    }\n    return null;\n  }\n  function onRoomStateMessage(message, batchedUpdatesWrapper) {\n    context.dynamicSessionInfo.set({\n      actor: message.actor,\n      nonce: message.nonce,\n      scopes: message.scopes\n    });\n    context.idFactory = makeIdFactory(message.actor);\n    notifySelfChanged(batchedUpdatesWrapper);\n    for (const connectionId of context.others.connectionIds()) {\n      const user = message.users[connectionId];\n      if (user === void 0) {\n        context.others.removeConnection(connectionId);\n      }\n    }\n    for (const key in message.users) {\n      const user = message.users[key];\n      const connectionId = Number(key);\n      context.others.setConnection(\n        connectionId,\n        user.id,\n        user.info,\n        user.scopes\n      );\n    }\n    return { type: \"reset\" };\n  }\n  function canUndo() {\n    return context.undoStack.length > 0;\n  }\n  function canRedo() {\n    return context.redoStack.length > 0;\n  }\n  function onHistoryChange(batchedUpdatesWrapper) {\n    batchedUpdatesWrapper(() => {\n      eventHub.history.notify({ canUndo: canUndo(), canRedo: canRedo() });\n    });\n  }\n  function onUserJoinedMessage(message) {\n    context.others.setConnection(\n      message.actor,\n      message.id,\n      message.info,\n      message.scopes\n    );\n    context.buffer.messages.push({\n      type: 100 /* UPDATE_PRESENCE */,\n      data: context.myPresence.current,\n      targetActor: message.actor\n    });\n    flushNowOrSoon();\n    const user = context.others.getUser(message.actor);\n    return user ? { type: \"enter\", user } : void 0;\n  }\n  function parseServerMessage(data) {\n    if (!isJsonObject(data)) {\n      return null;\n    }\n    return data;\n  }\n  function parseServerMessages(text) {\n    const data = tryParseJson(text);\n    if (data === void 0) {\n      return null;\n    } else if (isJsonArray(data)) {\n      return compact(data.map((item) => parseServerMessage(item)));\n    } else {\n      return compact([parseServerMessage(data)]);\n    }\n  }\n  function applyAndSendOps(offlineOps, batchedUpdatesWrapper) {\n    if (offlineOps.size === 0) {\n      return;\n    }\n    const messages = [];\n    const ops = Array.from(offlineOps.values());\n    const result = applyOps(ops, true);\n    messages.push({\n      type: 201 /* UPDATE_STORAGE */,\n      ops: result.ops\n    });\n    notify(result.updates, batchedUpdatesWrapper);\n    sendMessages(messages);\n  }\n  function handleServerMessage(event) {\n    if (typeof event.data !== \"string\") {\n      return;\n    }\n    const messages = parseServerMessages(event.data);\n    if (messages === null || messages.length === 0) {\n      return;\n    }\n    const updates = {\n      storageUpdates: /* @__PURE__ */ new Map(),\n      others: []\n    };\n    batchUpdates(() => {\n      for (const message of messages) {\n        switch (message.type) {\n          case 101 /* USER_JOINED */: {\n            const userJoinedUpdate = onUserJoinedMessage(message);\n            if (userJoinedUpdate) {\n              updates.others.push(userJoinedUpdate);\n            }\n            break;\n          }\n          case 100 /* UPDATE_PRESENCE */: {\n            const othersPresenceUpdate = onUpdatePresenceMessage(message);\n            if (othersPresenceUpdate) {\n              updates.others.push(othersPresenceUpdate);\n            }\n            break;\n          }\n          case 103 /* BROADCASTED_EVENT */: {\n            const others = context.others.current;\n            eventHub.customEvent.notify({\n              connectionId: message.actor,\n              user: message.actor < 0 ? null : others.find((u) => u.connectionId === message.actor) ?? null,\n              event: message.event\n            });\n            break;\n          }\n          case 102 /* USER_LEFT */: {\n            const event2 = onUserLeftMessage(message);\n            if (event2) {\n              updates.others.push(event2);\n            }\n            break;\n          }\n          case 300 /* UPDATE_YDOC */: {\n            eventHub.ydoc.notify(message);\n            break;\n          }\n          case 104 /* ROOM_STATE */: {\n            updates.others.push(onRoomStateMessage(message, doNotBatchUpdates));\n            break;\n          }\n          case 200 /* INITIAL_STORAGE_STATE */: {\n            processInitialStorage(message);\n            break;\n          }\n          case 201 /* UPDATE_STORAGE */: {\n            const applyResult = applyOps(message.ops, false);\n            for (const [key, value] of applyResult.updates.storageUpdates) {\n              updates.storageUpdates.set(\n                key,\n                mergeStorageUpdates(updates.storageUpdates.get(key), value)\n              );\n            }\n            break;\n          }\n          case 299 /* REJECT_STORAGE_OP */: {\n            errorWithTitle(\n              \"Storage mutation rejection error\",\n              message.reason\n            );\n            if (true) {\n              const traces = /* @__PURE__ */ new Set();\n              for (const opId of message.opIds) {\n                const trace = context.opStackTraces?.get(opId);\n                if (trace) {\n                  traces.add(trace);\n                }\n              }\n              if (traces.size > 0) {\n                warnWithTitle(\n                  \"The following function calls caused the rejected storage mutations:\",\n                  `\n\n${Array.from(traces).join(\"\\n\\n\")}`\n                );\n              }\n              throw new Error(\n                `Storage mutations rejected by server: ${message.reason}`\n              );\n            }\n            break;\n          }\n          case 400 /* THREAD_CREATED */:\n          case 407 /* THREAD_DELETED */:\n          case 401 /* THREAD_METADATA_UPDATED */:\n          case 408 /* THREAD_UPDATED */:\n          case 405 /* COMMENT_REACTION_ADDED */:\n          case 406 /* COMMENT_REACTION_REMOVED */:\n          case 402 /* COMMENT_CREATED */:\n          case 403 /* COMMENT_EDITED */:\n          case 404 /* COMMENT_DELETED */: {\n            eventHub.comments.notify(message);\n            break;\n          }\n        }\n      }\n      notify(updates, doNotBatchUpdates);\n    });\n  }\n  function flushNowOrSoon() {\n    const storageOps = context.buffer.storageOperations;\n    if (storageOps.length > 0) {\n      for (const op of storageOps) {\n        context.unacknowledgedOps.set(nn(op.opId), op);\n      }\n      notifyStorageStatus();\n    }\n    if (managedSocket.getStatus() !== \"connected\") {\n      context.buffer.storageOperations = [];\n      return;\n    }\n    const now = Date.now();\n    const elapsedMillis = now - context.buffer.lastFlushedAt;\n    if (elapsedMillis >= config.throttleDelay) {\n      const messagesToFlush = serializeBuffer();\n      if (messagesToFlush.length === 0) {\n        return;\n      }\n      sendMessages(messagesToFlush);\n      context.buffer = {\n        flushTimerID: void 0,\n        lastFlushedAt: now,\n        messages: [],\n        storageOperations: [],\n        presenceUpdates: null\n      };\n    } else {\n      clearTimeout(context.buffer.flushTimerID);\n      context.buffer.flushTimerID = setTimeout(\n        flushNowOrSoon,\n        config.throttleDelay - elapsedMillis\n      );\n    }\n  }\n  function serializeBuffer() {\n    const messages = [];\n    if (context.buffer.presenceUpdates) {\n      messages.push(\n        context.buffer.presenceUpdates.type === \"full\" ? {\n          type: 100 /* UPDATE_PRESENCE */,\n          // Populating the `targetActor` field turns this message into\n          // a Full Presence™ update message (not a patch), which will get\n          // interpreted by other clients as such.\n          targetActor: -1,\n          data: context.buffer.presenceUpdates.data\n        } : {\n          type: 100 /* UPDATE_PRESENCE */,\n          data: context.buffer.presenceUpdates.data\n        }\n      );\n    }\n    for (const event of context.buffer.messages) {\n      messages.push(event);\n    }\n    if (context.buffer.storageOperations.length > 0) {\n      messages.push({\n        type: 201 /* UPDATE_STORAGE */,\n        ops: context.buffer.storageOperations\n      });\n    }\n    return messages;\n  }\n  function updateYDoc(update, guid) {\n    const clientMsg = {\n      type: 301 /* UPDATE_YDOC */,\n      update,\n      guid\n    };\n    context.buffer.messages.push(clientMsg);\n    eventHub.ydoc.notify(clientMsg);\n    flushNowOrSoon();\n  }\n  function broadcastEvent(event, options2 = {\n    shouldQueueEventIfNotReady: false\n  }) {\n    if (managedSocket.getStatus() !== \"connected\" && !options2.shouldQueueEventIfNotReady) {\n      return;\n    }\n    context.buffer.messages.push({\n      type: 103 /* BROADCAST_EVENT */,\n      event\n    });\n    flushNowOrSoon();\n  }\n  function dispatchOps(ops) {\n    const { storageOperations } = context.buffer;\n    for (const op of ops) {\n      storageOperations.push(op);\n    }\n    flushNowOrSoon();\n  }\n  let _getStorage$ = null;\n  let _resolveStoragePromise = null;\n  function processInitialStorage(message) {\n    const unacknowledgedOps = new Map(context.unacknowledgedOps);\n    createOrUpdateRootFromMessage(message, doNotBatchUpdates);\n    applyAndSendOps(unacknowledgedOps, doNotBatchUpdates);\n    _resolveStoragePromise?.();\n    notifyStorageStatus();\n    eventHub.storageDidLoad.notify();\n  }\n  async function streamStorage() {\n    if (!managedSocket.authValue) {\n      return;\n    }\n    const result = await streamFetch(managedSocket.authValue, config.roomId);\n    const items = await result.json();\n    processInitialStorage({ type: 200 /* INITIAL_STORAGE_STATE */, items });\n  }\n  function refreshStorage(options2) {\n    const messages = context.buffer.messages;\n    if (config.unstable_streamData) {\n      void streamStorage();\n    } else if (!messages.some((msg) => msg.type === 200 /* FETCH_STORAGE */)) {\n      messages.push({ type: 200 /* FETCH_STORAGE */ });\n    }\n    if (options2.flush) {\n      flushNowOrSoon();\n    }\n  }\n  function startLoadingStorage() {\n    if (_getStorage$ === null) {\n      refreshStorage({ flush: true });\n      _getStorage$ = new Promise((resolve) => {\n        _resolveStoragePromise = resolve;\n      });\n      notifyStorageStatus();\n    }\n    return _getStorage$;\n  }\n  function getStorageSnapshot() {\n    const root = context.root;\n    if (root !== void 0) {\n      return root;\n    } else {\n      void startLoadingStorage();\n      return null;\n    }\n  }\n  async function getStorage() {\n    if (context.root !== void 0) {\n      return Promise.resolve({\n        root: context.root\n      });\n    }\n    await startLoadingStorage();\n    return {\n      root: nn(context.root)\n    };\n  }\n  function fetchYDoc(vector, guid) {\n    if (!context.buffer.messages.find((m) => {\n      return m.type === 300 /* FETCH_YDOC */ && m.vector === vector && m.guid === guid;\n    })) {\n      context.buffer.messages.push({\n        type: 300 /* FETCH_YDOC */,\n        vector,\n        guid\n      });\n    }\n    flushNowOrSoon();\n  }\n  function undo() {\n    if (context.activeBatch) {\n      throw new Error(\"undo is not allowed during a batch\");\n    }\n    const historyOps = context.undoStack.pop();\n    if (historyOps === void 0) {\n      return;\n    }\n    context.pausedHistory = null;\n    const result = applyOps(historyOps, true);\n    batchUpdates(() => {\n      notify(result.updates, doNotBatchUpdates);\n      context.redoStack.push(result.reverse);\n      onHistoryChange(doNotBatchUpdates);\n    });\n    for (const op of result.ops) {\n      if (op.type !== \"presence\") {\n        context.buffer.storageOperations.push(op);\n      }\n    }\n    flushNowOrSoon();\n  }\n  function redo() {\n    if (context.activeBatch) {\n      throw new Error(\"redo is not allowed during a batch\");\n    }\n    const historyOps = context.redoStack.pop();\n    if (historyOps === void 0) {\n      return;\n    }\n    context.pausedHistory = null;\n    const result = applyOps(historyOps, true);\n    batchUpdates(() => {\n      notify(result.updates, doNotBatchUpdates);\n      context.undoStack.push(result.reverse);\n      onHistoryChange(doNotBatchUpdates);\n    });\n    for (const op of result.ops) {\n      if (op.type !== \"presence\") {\n        context.buffer.storageOperations.push(op);\n      }\n    }\n    flushNowOrSoon();\n  }\n  function clear() {\n    context.undoStack.length = 0;\n    context.redoStack.length = 0;\n  }\n  function batch(callback) {\n    if (context.activeBatch) {\n      return callback();\n    }\n    let returnValue = void 0;\n    batchUpdates(() => {\n      context.activeBatch = {\n        ops: [],\n        updates: {\n          storageUpdates: /* @__PURE__ */ new Map(),\n          presence: false,\n          others: []\n        },\n        reverseOps: []\n      };\n      try {\n        returnValue = callback();\n      } finally {\n        const currentBatch = context.activeBatch;\n        context.activeBatch = null;\n        if (currentBatch.reverseOps.length > 0) {\n          addToUndoStack(currentBatch.reverseOps, doNotBatchUpdates);\n        }\n        if (currentBatch.ops.length > 0) {\n          context.redoStack.length = 0;\n        }\n        if (currentBatch.ops.length > 0) {\n          dispatchOps(currentBatch.ops);\n        }\n        notify(currentBatch.updates, doNotBatchUpdates);\n        flushNowOrSoon();\n      }\n    });\n    return returnValue;\n  }\n  function pauseHistory() {\n    if (context.pausedHistory === null) {\n      context.pausedHistory = [];\n    }\n  }\n  function resumeHistory() {\n    const historyOps = context.pausedHistory;\n    context.pausedHistory = null;\n    if (historyOps !== null && historyOps.length > 0) {\n      _addToRealUndoStack(historyOps, batchUpdates);\n    }\n  }\n  function getStorageStatus() {\n    if (context.root === void 0) {\n      return _getStorage$ === null ? \"not-loaded\" : \"loading\";\n    } else {\n      return context.unacknowledgedOps.size === 0 ? \"synchronized\" : \"synchronizing\";\n    }\n  }\n  let _lastStorageStatus = getStorageStatus();\n  function notifyStorageStatus() {\n    const storageStatus = getStorageStatus();\n    if (_lastStorageStatus !== storageStatus) {\n      _lastStorageStatus = storageStatus;\n      eventHub.storageStatus.notify(storageStatus);\n    }\n  }\n  function isPresenceReady() {\n    return self.current !== null;\n  }\n  async function waitUntilPresenceReady() {\n    while (!isPresenceReady()) {\n      const { promise, resolve } = Promise_withResolvers();\n      const unsub1 = events.self.subscribeOnce(resolve);\n      const unsub2 = events.status.subscribeOnce(resolve);\n      await promise;\n      unsub1();\n      unsub2();\n    }\n  }\n  function isStorageReady() {\n    return getStorageSnapshot() !== null;\n  }\n  async function waitUntilStorageReady() {\n    while (!isStorageReady()) {\n      await getStorage();\n    }\n  }\n  const others_forDevTools = new DerivedRef(\n    context.others,\n    (others) => others.map((other, index) => userToTreeNode(`Other ${index}`, other))\n  );\n  const events = {\n    status: eventHub.status.observable,\n    lostConnection: eventHub.lostConnection.observable,\n    customEvent: eventHub.customEvent.observable,\n    others: eventHub.others.observable,\n    self: eventHub.self.observable,\n    myPresence: eventHub.myPresence.observable,\n    error: eventHub.error.observable,\n    /** @deprecated */\n    storage: eventHub.storageBatch.observable,\n    storageBatch: eventHub.storageBatch.observable,\n    history: eventHub.history.observable,\n    storageDidLoad: eventHub.storageDidLoad.observable,\n    storageStatus: eventHub.storageStatus.observable,\n    ydoc: eventHub.ydoc.observable,\n    comments: eventHub.comments.observable\n  };\n  const commentsApi = createCommentsApi(\n    config.roomId,\n    delegates.authenticate,\n    fetchClientApi\n  );\n  async function fetchNotificationsJson(endpoint, options2) {\n    const authValue = await delegates.authenticate();\n    const response = await fetchClientApi(\n      config.roomId,\n      endpoint,\n      authValue,\n      options2\n    );\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new NotificationsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new NotificationsApiError(\n            response.statusText,\n            response.status\n          );\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  function getRoomNotificationSettings() {\n    return fetchNotificationsJson(\n      \"/notification-settings\"\n    );\n  }\n  function updateRoomNotificationSettings(settings) {\n    return fetchNotificationsJson(\n      \"/notification-settings\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(settings),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n  }\n  async function markInboxNotificationsAsRead(inboxNotificationIds) {\n    await fetchNotificationsJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds })\n    });\n  }\n  const batchedMarkInboxNotificationsAsRead = new Batch(\n    async (batchedInboxNotificationIds) => {\n      const inboxNotificationIds = batchedInboxNotificationIds.flat();\n      await markInboxNotificationsAsRead(inboxNotificationIds);\n      return inboxNotificationIds;\n    },\n    { delay: MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY2 }\n  );\n  async function markInboxNotificationAsRead(inboxNotificationId) {\n    await batchedMarkInboxNotificationsAsRead.get(inboxNotificationId);\n  }\n  return Object.defineProperty(\n    {\n      [kInternal]: {\n        get presenceBuffer() {\n          return deepClone(context.buffer.presenceUpdates?.data ?? null);\n        },\n        // prettier-ignore\n        get undoStack() {\n          return deepClone(context.undoStack);\n        },\n        // prettier-ignore\n        get nodeCount() {\n          return context.nodes.size;\n        },\n        // prettier-ignore\n        // send metadata when using a text editor\n        reportTextEditor,\n        // create a text mention when using a text editor\n        createTextMention,\n        // delete a text mention when using a text editor\n        deleteTextMention,\n        // Support for the Liveblocks browser extension\n        getSelf_forDevTools: () => selfAsTreeNode.current,\n        getOthers_forDevTools: () => others_forDevTools.current,\n        // prettier-ignore\n        simulate: {\n          // These exist only for our E2E testing app\n          explicitClose: (event) => managedSocket._privateSendMachineEvent({ type: \"EXPLICIT_SOCKET_CLOSE\", event }),\n          rawSend: (data) => managedSocket.send(data)\n        },\n        comments: {\n          ...commentsApi\n        },\n        notifications: {\n          getRoomNotificationSettings,\n          updateRoomNotificationSettings,\n          markInboxNotificationAsRead\n        }\n      },\n      id: config.roomId,\n      subscribe: makeClassicSubscribeFn(events),\n      connect: () => managedSocket.connect(),\n      reconnect: () => managedSocket.reconnect(),\n      disconnect: () => managedSocket.disconnect(),\n      destroy: () => {\n        uninstallBgTabSpy();\n        managedSocket.destroy();\n      },\n      // Presence\n      updatePresence,\n      updateYDoc,\n      broadcastEvent,\n      // Storage\n      batch,\n      history: {\n        undo,\n        redo,\n        canUndo,\n        canRedo,\n        clear,\n        pause: pauseHistory,\n        resume: resumeHistory\n      },\n      fetchYDoc,\n      getStorage,\n      getStorageSnapshot,\n      getStorageStatus,\n      isPresenceReady,\n      isStorageReady,\n      waitUntilPresenceReady: memoizeOnSuccess(waitUntilPresenceReady),\n      waitUntilStorageReady: memoizeOnSuccess(waitUntilStorageReady),\n      events,\n      // Core\n      getStatus: () => managedSocket.getStatus(),\n      getSelf: () => self.current,\n      // Presence\n      getPresence: () => context.myPresence.current,\n      getOthers: () => context.others.current\n    },\n    // Explictly make the internal field non-enumerable, to avoid aggressive\n    // freezing when used with Immer\n    kInternal,\n    { enumerable: false }\n  );\n}\nfunction makeClassicSubscribeFn(events) {\n  function subscribeToLiveStructureDeeply(node, callback) {\n    return events.storageBatch.subscribe((updates) => {\n      const relatedUpdates = updates.filter(\n        (update) => isSameNodeOrChildOf(update.node, node)\n      );\n      if (relatedUpdates.length > 0) {\n        callback(relatedUpdates);\n      }\n    });\n  }\n  function subscribeToLiveStructureShallowly(node, callback) {\n    return events.storageBatch.subscribe((updates) => {\n      for (const update of updates) {\n        if (update.node._id === node._id) {\n          callback(update.node);\n        }\n      }\n    });\n  }\n  function subscribe(first, second, options) {\n    if (typeof first === \"string\" && isRoomEventName(first)) {\n      if (typeof second !== \"function\") {\n        throw new Error(\"Second argument must be a callback function\");\n      }\n      const callback = second;\n      switch (first) {\n        case \"event\":\n          return events.customEvent.subscribe(\n            callback\n          );\n        case \"my-presence\":\n          return events.myPresence.subscribe(callback);\n        case \"others\": {\n          const cb = callback;\n          return events.others.subscribe((event) => {\n            const { others, ...internalEvent } = event;\n            return cb(others, internalEvent);\n          });\n        }\n        case \"error\":\n          return events.error.subscribe(callback);\n        case \"status\":\n          return events.status.subscribe(callback);\n        case \"lost-connection\":\n          return events.lostConnection.subscribe(\n            callback\n          );\n        case \"history\":\n          return events.history.subscribe(callback);\n        case \"storage-status\":\n          return events.storageStatus.subscribe(\n            callback\n          );\n        default:\n          return assertNever(\n            first,\n            `\"${String(first)}\" is not a valid event name`\n          );\n      }\n    }\n    if (second === void 0 || typeof first === \"function\") {\n      if (typeof first === \"function\") {\n        const storageCallback = first;\n        return events.storageBatch.subscribe(storageCallback);\n      } else {\n        throw new Error(\"Please specify a listener callback\");\n      }\n    }\n    if (isLiveNode(first)) {\n      const node = first;\n      if (options?.isDeep) {\n        const storageCallback = second;\n        return subscribeToLiveStructureDeeply(node, storageCallback);\n      } else {\n        const nodeCallback = second;\n        return subscribeToLiveStructureShallowly(node, nodeCallback);\n      }\n    }\n    throw new Error(\n      `${String(first)} is not a value that can be subscribed to.`\n    );\n  }\n  return subscribe;\n}\nfunction isRoomEventName(value) {\n  return value === \"my-presence\" || value === \"others\" || value === \"event\" || value === \"error\" || value === \"history\" || value === \"status\" || value === \"storage-status\" || value === \"lost-connection\" || value === \"connection\";\n}\nfunction makeAuthDelegateForRoom(roomId, authManager) {\n  return async () => {\n    return authManager.getAuthValue({ requestedScope: \"room:read\", roomId });\n  };\n}\nfunction makeCreateSocketDelegateForRoom(roomId, baseUrl, WebSocketPolyfill) {\n  return (authValue) => {\n    const ws = WebSocketPolyfill ?? (typeof WebSocket === \"undefined\" ? void 0 : WebSocket);\n    if (ws === void 0) {\n      throw new StopRetrying(\n        \"To use Liveblocks client in a non-DOM environment, you need to provide a WebSocket polyfill.\"\n      );\n    }\n    const url = new URL(baseUrl);\n    url.protocol = url.protocol === \"http:\" ? \"ws\" : \"wss\";\n    url.pathname = \"/v7\";\n    url.searchParams.set(\"roomId\", roomId);\n    if (authValue.type === \"secret\") {\n      url.searchParams.set(\"tok\", authValue.token.raw);\n    } else if (authValue.type === \"public\") {\n      url.searchParams.set(\"pubkey\", authValue.publicApiKey);\n    } else {\n      return assertNever(authValue, \"Unhandled case\");\n    }\n    url.searchParams.set(\"version\", PKG_VERSION || \"dev\");\n    return new ws(url.toString());\n  };\n}\n\n// src/store.ts\nfunction createClientStore() {\n  const store = createStore({\n    threads: {},\n    queries: {},\n    optimisticUpdates: [],\n    inboxNotifications: {},\n    notificationSettings: {}\n  });\n  const optimisticUpdatesEventSource = makeEventSource();\n  return {\n    ...store,\n    deleteThread(threadId) {\n      store.set((state) => {\n        return {\n          ...state,\n          threads: deleteKeyImmutable(state.threads, threadId),\n          inboxNotifications: Object.fromEntries(\n            Object.entries(state.inboxNotifications).filter(\n              ([_id, notification]) => notification.kind === \"thread\" && notification.threadId === threadId\n            )\n          )\n        };\n      });\n    },\n    updateThreadAndNotification(thread, inboxNotification) {\n      store.set((state) => {\n        const existingThread = state.threads[thread.id];\n        return {\n          ...state,\n          threads: existingThread === void 0 || compareThreads(thread, existingThread) === 1 ? { ...state.threads, [thread.id]: thread } : state.threads,\n          inboxNotifications: inboxNotification === void 0 ? state.inboxNotifications : {\n            ...state.inboxNotifications,\n            [inboxNotification.id]: inboxNotification\n          }\n        };\n      });\n    },\n    updateThreadsAndNotifications(threads, inboxNotifications, deletedThreads, deletedInboxNotifications, queryKey) {\n      store.set((state) => ({\n        ...state,\n        threads: applyThreadUpdates(state.threads, {\n          newThreads: threads,\n          deletedThreads\n        }),\n        inboxNotifications: applyNotificationsUpdates(\n          state.inboxNotifications,\n          {\n            newInboxNotifications: inboxNotifications,\n            deletedNotifications: deletedInboxNotifications\n          }\n        ),\n        queries: queryKey !== void 0 ? {\n          ...state.queries,\n          [queryKey]: { isLoading: false, data: void 0 }\n        } : state.queries\n      }));\n    },\n    updateRoomInboxNotificationSettings(roomId, settings, queryKey) {\n      store.set((state) => ({\n        ...state,\n        notificationSettings: {\n          ...state.notificationSettings,\n          [roomId]: settings\n        },\n        queries: {\n          ...state.queries,\n          [queryKey]: { isLoading: false, data: void 0 }\n        }\n      }));\n    },\n    pushOptimisticUpdate(optimisticUpdate) {\n      optimisticUpdatesEventSource.notify(optimisticUpdate);\n      store.set((state) => ({\n        ...state,\n        optimisticUpdates: [...state.optimisticUpdates, optimisticUpdate]\n      }));\n    },\n    setQueryState(queryKey, queryState) {\n      store.set((state) => ({\n        ...state,\n        queries: {\n          ...state.queries,\n          [queryKey]: queryState\n        }\n      }));\n    },\n    optimisticUpdatesEventSource\n  };\n}\nfunction deleteKeyImmutable(record, key) {\n  if (Object.prototype.hasOwnProperty.call(record, key)) {\n    const { [key]: _toDelete, ...rest } = record;\n    return rest;\n  }\n  return record;\n}\nfunction compareThreads(thread1, thread2) {\n  if (thread1.updatedAt && thread2.updatedAt) {\n    return thread1.updatedAt > thread2.updatedAt ? 1 : thread1.updatedAt < thread2.updatedAt ? -1 : 0;\n  } else if (thread1.updatedAt || thread2.updatedAt) {\n    return thread1.updatedAt ? 1 : -1;\n  }\n  if (thread1.createdAt > thread2.createdAt) {\n    return 1;\n  } else if (thread1.createdAt < thread2.createdAt) {\n    return -1;\n  }\n  return 0;\n}\nfunction applyOptimisticUpdates(state) {\n  const result = {\n    threads: {\n      ...state.threads\n    },\n    inboxNotifications: {\n      ...state.inboxNotifications\n    },\n    notificationSettings: {\n      ...state.notificationSettings\n    }\n  };\n  for (const optimisticUpdate of state.optimisticUpdates) {\n    switch (optimisticUpdate.type) {\n      case \"create-thread\": {\n        result.threads[optimisticUpdate.thread.id] = optimisticUpdate.thread;\n        break;\n      }\n      case \"edit-thread-metadata\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        if (thread.updatedAt !== void 0 && thread.updatedAt > optimisticUpdate.updatedAt) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          updatedAt: optimisticUpdate.updatedAt,\n          metadata: {\n            ...thread.metadata,\n            ...optimisticUpdate.metadata\n          }\n        };\n        break;\n      }\n      case \"mark-thread-as-resolved\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          resolved: true\n        };\n        break;\n      }\n      case \"mark-thread-as-unresolved\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          resolved: false\n        };\n        break;\n      }\n      case \"create-comment\": {\n        const thread = result.threads[optimisticUpdate.comment.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = upsertComment(\n          thread,\n          optimisticUpdate.comment\n        );\n        const inboxNotification = Object.values(result.inboxNotifications).find(\n          (notification) => notification.kind === \"thread\" && notification.threadId === thread.id\n        );\n        if (inboxNotification === void 0) {\n          break;\n        }\n        result.inboxNotifications[inboxNotification.id] = {\n          ...inboxNotification,\n          notifiedAt: optimisticUpdate.comment.createdAt,\n          readAt: optimisticUpdate.comment.createdAt\n        };\n        break;\n      }\n      case \"edit-comment\": {\n        const thread = result.threads[optimisticUpdate.comment.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = upsertComment(\n          thread,\n          optimisticUpdate.comment\n        );\n        break;\n      }\n      case \"delete-comment\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = deleteComment(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.deletedAt\n        );\n        break;\n      }\n      case \"delete-thread\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[optimisticUpdate.threadId] = {\n          ...result.threads[optimisticUpdate.threadId],\n          deletedAt: optimisticUpdate.deletedAt,\n          updatedAt: optimisticUpdate.deletedAt,\n          comments: []\n        };\n        break;\n      }\n      case \"add-reaction\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = addReaction(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.reaction\n        );\n        break;\n      }\n      case \"remove-reaction\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = removeReaction(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.emoji,\n          optimisticUpdate.userId,\n          optimisticUpdate.removedAt\n        );\n        break;\n      }\n      case \"mark-inbox-notification-as-read\": {\n        result.inboxNotifications[optimisticUpdate.inboxNotificationId] = {\n          ...state.inboxNotifications[optimisticUpdate.inboxNotificationId],\n          readAt: optimisticUpdate.readAt\n        };\n        break;\n      }\n      case \"mark-all-inbox-notifications-as-read\": {\n        for (const id in result.inboxNotifications) {\n          result.inboxNotifications[id] = {\n            ...result.inboxNotifications[id],\n            readAt: optimisticUpdate.readAt\n          };\n        }\n        break;\n      }\n      case \"delete-inbox-notification\": {\n        const {\n          [optimisticUpdate.inboxNotificationId]: _,\n          ...inboxNotifications\n        } = result.inboxNotifications;\n        result.inboxNotifications = inboxNotifications;\n        break;\n      }\n      case \"delete-all-inbox-notifications\": {\n        result.inboxNotifications = {};\n        break;\n      }\n      case \"update-notification-settings\": {\n        result.notificationSettings[optimisticUpdate.roomId] = {\n          ...result.notificationSettings[optimisticUpdate.roomId],\n          ...optimisticUpdate.settings\n        };\n      }\n    }\n  }\n  return result;\n}\nfunction applyThreadUpdates(existingThreads, updates) {\n  const updatedThreads = { ...existingThreads };\n  updates.newThreads.forEach((thread) => {\n    const existingThread = updatedThreads[thread.id];\n    if (existingThread) {\n      const result = compareThreads(existingThread, thread);\n      if (result === 1) return;\n    }\n    updatedThreads[thread.id] = thread;\n  });\n  updates.deletedThreads.forEach(({ id, deletedAt }) => {\n    const existingThread = updatedThreads[id];\n    if (existingThread === void 0) return;\n    existingThread.deletedAt = deletedAt;\n    existingThread.updatedAt = deletedAt;\n    existingThread.comments = [];\n  });\n  return updatedThreads;\n}\nfunction applyNotificationsUpdates(existingInboxNotifications, updates) {\n  const updatedInboxNotifications = { ...existingInboxNotifications };\n  updates.newInboxNotifications.forEach((notification) => {\n    const existingNotification = updatedInboxNotifications[notification.id];\n    if (existingNotification) {\n      const result = compareInboxNotifications(\n        existingNotification,\n        notification\n      );\n      if (result === 1) return;\n    }\n    updatedInboxNotifications[notification.id] = notification;\n  });\n  updates.deletedNotifications.forEach(\n    ({ id }) => delete updatedInboxNotifications[id]\n  );\n  return updatedInboxNotifications;\n}\nfunction compareInboxNotifications(inboxNotificationA, inboxNotificationB) {\n  if (inboxNotificationA.notifiedAt > inboxNotificationB.notifiedAt) {\n    return 1;\n  } else if (inboxNotificationA.notifiedAt < inboxNotificationB.notifiedAt) {\n    return -1;\n  }\n  if (inboxNotificationA.readAt && inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt > inboxNotificationB.readAt ? 1 : inboxNotificationA.readAt < inboxNotificationB.readAt ? -1 : 0;\n  } else if (inboxNotificationA.readAt || inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt ? 1 : -1;\n  }\n  return 0;\n}\nfunction upsertComment(thread, comment) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  if (comment.threadId !== thread.id) {\n    warn(\n      `Comment ${comment.id} does not belong to thread ${thread.id}`\n    );\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (existingComment2) => existingComment2.id === comment.id\n  );\n  if (existingComment === void 0) {\n    const updatedAt = new Date(\n      Math.max(thread.updatedAt?.getTime() || 0, comment.createdAt.getTime())\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt,\n      comments: [...thread.comments, comment]\n    };\n    return updatedThread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  if (existingComment.editedAt === void 0 || comment.editedAt === void 0 || existingComment.editedAt <= comment.editedAt) {\n    const updatedComments = thread.comments.map(\n      (existingComment2) => existingComment2.id === comment.id ? comment : existingComment2\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt: new Date(\n        Math.max(\n          thread.updatedAt?.getTime() || 0,\n          comment.editedAt?.getTime() || comment.createdAt.getTime()\n        )\n      ),\n      comments: updatedComments\n    };\n    return updatedThread;\n  }\n  return thread;\n}\nfunction deleteComment(thread, commentId, deletedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      deletedAt,\n      body: void 0\n    } : comment\n  );\n  if (!updatedComments.some((comment) => comment.deletedAt === void 0)) {\n    return {\n      ...thread,\n      deletedAt,\n      updatedAt: deletedAt,\n      comments: []\n    };\n  }\n  return {\n    ...thread,\n    updatedAt: deletedAt,\n    comments: updatedComments\n  };\n}\nfunction addReaction(thread, commentId, reaction) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: upsertReaction(comment.reactions, reaction)\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(reaction.createdAt.getTime(), thread.updatedAt?.getTime() || 0)\n    ),\n    comments: updatedComments\n  };\n}\nfunction removeReaction(thread, commentId, emoji, userId, removedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: comment.reactions.map(\n        (reaction) => reaction.emoji === emoji ? {\n          ...reaction,\n          users: reaction.users.filter((user) => user.id !== userId)\n        } : reaction\n      ).filter((reaction) => reaction.users.length > 0)\n      // Remove reactions with no users left\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(removedAt.getTime(), thread.updatedAt?.getTime() || 0)\n    ),\n    comments: updatedComments\n  };\n}\nfunction upsertReaction(reactions, reaction) {\n  const existingReaction = reactions.find(\n    (existingReaction2) => existingReaction2.emoji === reaction.emoji\n  );\n  if (existingReaction === void 0) {\n    return [\n      ...reactions,\n      {\n        emoji: reaction.emoji,\n        createdAt: reaction.createdAt,\n        users: [{ id: reaction.userId }]\n      }\n    ];\n  }\n  if (existingReaction.users.some((user) => user.id === reaction.userId) === false) {\n    return reactions.map(\n      (existingReaction2) => existingReaction2.emoji === reaction.emoji ? {\n        ...existingReaction2,\n        users: [...existingReaction2.users, { id: reaction.userId }]\n      } : existingReaction2\n    );\n  }\n  return reactions;\n}\n\n// src/client.ts\nvar MIN_THROTTLE = 16;\nvar MAX_THROTTLE = 1e3;\nvar DEFAULT_THROTTLE = 100;\nvar MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT = 15e3;\nvar MIN_LOST_CONNECTION_TIMEOUT = 200;\nvar RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT = 1e3;\nvar MAX_LOST_CONNECTION_TIMEOUT = 3e4;\nvar DEFAULT_LOST_CONNECTION_TIMEOUT = 5e3;\nvar RESOLVE_USERS_BATCH_DELAY = 50;\nvar RESOLVE_ROOMS_INFO_BATCH_DELAY = 50;\nfunction getBaseUrl(baseUrl) {\n  if (typeof baseUrl === \"string\" && baseUrl.startsWith(\"http\")) {\n    return baseUrl;\n  } else {\n    return DEFAULT_BASE_URL;\n  }\n}\nfunction getAuthBearerHeaderFromAuthValue(authValue) {\n  if (authValue.type === \"public\") {\n    return authValue.publicApiKey;\n  } else {\n    return authValue.token.raw;\n  }\n}\nfunction createClient(options) {\n  const clientOptions = options;\n  const throttleDelay = getThrottle(clientOptions.throttle ?? DEFAULT_THROTTLE);\n  const lostConnectionTimeout = getLostConnectionTimeout(\n    clientOptions.lostConnectionTimeout ?? DEFAULT_LOST_CONNECTION_TIMEOUT\n  );\n  const backgroundKeepAliveTimeout = getBackgroundKeepAliveTimeout(\n    clientOptions.backgroundKeepAliveTimeout\n  );\n  const baseUrl = getBaseUrl(clientOptions.baseUrl);\n  const authManager = createAuthManager(options);\n  const roomsById = /* @__PURE__ */ new Map();\n  function teardownRoom(room) {\n    unlinkDevTools(room.id);\n    roomsById.delete(room.id);\n    room.destroy();\n  }\n  function leaseRoom(details) {\n    const leave = () => {\n      const self = leave;\n      if (!details.unsubs.delete(self)) {\n        warn(\n          \"This leave function was already called. Calling it more than once has no effect.\"\n        );\n      } else {\n        if (details.unsubs.size === 0) {\n          teardownRoom(details.room);\n        }\n      }\n    };\n    details.unsubs.add(leave);\n    return {\n      room: details.room,\n      leave\n    };\n  }\n  function enterRoom(roomId, ...args) {\n    const existing = roomsById.get(roomId);\n    if (existing !== void 0) {\n      return leaseRoom(existing);\n    }\n    const options2 = args[0] ?? {};\n    const initialPresence = (typeof options2.initialPresence === \"function\" ? options2.initialPresence(roomId) : options2.initialPresence) ?? {};\n    const initialStorage = (typeof options2.initialStorage === \"function\" ? options2.initialStorage(roomId) : options2.initialStorage) ?? {};\n    const newRoom = createRoom(\n      { initialPresence, initialStorage },\n      {\n        roomId,\n        throttleDelay,\n        lostConnectionTimeout,\n        backgroundKeepAliveTimeout,\n        polyfills: clientOptions.polyfills,\n        delegates: clientOptions.mockedDelegates ?? {\n          createSocket: makeCreateSocketDelegateForRoom(\n            roomId,\n            baseUrl,\n            clientOptions.polyfills?.WebSocket\n          ),\n          authenticate: makeAuthDelegateForRoom(roomId, authManager)\n        },\n        enableDebugLogging: clientOptions.enableDebugLogging,\n        unstable_batchedUpdates: options2?.unstable_batchedUpdates,\n        baseUrl,\n        unstable_fallbackToHTTP: !!clientOptions.unstable_fallbackToHTTP,\n        unstable_streamData: !!clientOptions.unstable_streamData\n      }\n    );\n    const newRoomDetails = {\n      room: newRoom,\n      unsubs: /* @__PURE__ */ new Set()\n    };\n    roomsById.set(roomId, newRoomDetails);\n    setupDevTools(() => Array.from(roomsById.keys()));\n    linkDevTools(roomId, newRoom);\n    const shouldConnect = options2.autoConnect ?? true;\n    if (shouldConnect) {\n      if (typeof atob === \"undefined\") {\n        if (clientOptions.polyfills?.atob === void 0) {\n          throw new Error(\n            \"You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill\"\n          );\n        }\n        global.atob = clientOptions.polyfills.atob;\n      }\n      newRoom.connect();\n    }\n    return leaseRoom(newRoomDetails);\n  }\n  function getRoom(roomId) {\n    const room = roomsById.get(roomId)?.room;\n    return room ? room : null;\n  }\n  function logout() {\n    authManager.reset();\n    for (const { room } of roomsById.values()) {\n      if (!isIdle(room.getStatus())) {\n        room.reconnect();\n      }\n    }\n  }\n  const currentUserIdStore = createStore(null);\n  const {\n    getInboxNotifications,\n    getUnreadInboxNotificationsCount,\n    markAllInboxNotificationsAsRead,\n    markInboxNotificationAsRead,\n    deleteAllInboxNotifications,\n    deleteInboxNotification\n  } = createNotificationsApi({\n    baseUrl,\n    fetcher: clientOptions.polyfills?.fetch || /* istanbul ignore next */\n    fetch,\n    authManager,\n    currentUserIdStore\n  });\n  const cacheStore = createClientStore();\n  const resolveUsers = clientOptions.resolveUsers;\n  const warnIfNoResolveUsers = createDevelopmentWarning(\n    () => !resolveUsers,\n    \"Set the resolveUsers option in createClient to specify user info.\"\n  );\n  const usersStore = createBatchStore(\n    async (batchedUserIds) => {\n      const userIds = batchedUserIds.flat();\n      const users = await resolveUsers?.({ userIds });\n      warnIfNoResolveUsers();\n      return users ?? userIds.map(() => void 0);\n    },\n    { delay: RESOLVE_USERS_BATCH_DELAY }\n  );\n  const resolveRoomsInfo = clientOptions.resolveRoomsInfo;\n  const warnIfNoResolveRoomsInfo = createDevelopmentWarning(\n    () => !resolveRoomsInfo,\n    \"Set the resolveRoomsInfo option in createClient to specify room info.\"\n  );\n  const roomsInfoStore = createBatchStore(\n    async (batchedRoomIds) => {\n      const roomIds = batchedRoomIds.flat();\n      const roomsInfo = await resolveRoomsInfo?.({ roomIds });\n      warnIfNoResolveRoomsInfo();\n      return roomsInfo ?? roomIds.map(() => void 0);\n    },\n    { delay: RESOLVE_ROOMS_INFO_BATCH_DELAY }\n  );\n  return Object.defineProperty(\n    {\n      enterRoom,\n      getRoom,\n      logout,\n      // Internal\n      [kInternal]: {\n        notifications: {\n          getInboxNotifications,\n          getUnreadInboxNotificationsCount,\n          markAllInboxNotificationsAsRead,\n          markInboxNotificationAsRead,\n          deleteAllInboxNotifications,\n          deleteInboxNotification\n        },\n        currentUserIdStore,\n        resolveMentionSuggestions: clientOptions.resolveMentionSuggestions,\n        cacheStore,\n        usersStore,\n        roomsInfoStore,\n        getRoomIds() {\n          return Array.from(roomsById.keys());\n        }\n      }\n    },\n    kInternal,\n    {\n      enumerable: false\n    }\n  );\n}\nvar NotificationsApiError = class extends Error {\n  constructor(message, status, details) {\n    super(message);\n    this.message = message;\n    this.status = status;\n    this.details = details;\n  }\n};\nfunction checkBounds(option, value, min, max, recommendedMin) {\n  if (typeof value !== \"number\" || value < min || max !== void 0 && value > max) {\n    throw new Error(\n      max !== void 0 ? `${option} should be between ${recommendedMin ?? min} and ${max}.` : `${option} should be at least ${recommendedMin ?? min}.`\n    );\n  }\n  return value;\n}\nfunction getBackgroundKeepAliveTimeout(value) {\n  if (value === void 0) return void 0;\n  return checkBounds(\n    \"backgroundKeepAliveTimeout\",\n    value,\n    MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT\n  );\n}\nfunction getThrottle(value) {\n  return checkBounds(\"throttle\", value, MIN_THROTTLE, MAX_THROTTLE);\n}\nfunction getLostConnectionTimeout(value) {\n  return checkBounds(\n    \"lostConnectionTimeout\",\n    value,\n    MIN_LOST_CONNECTION_TIMEOUT,\n    MAX_LOST_CONNECTION_TIMEOUT,\n    RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT\n  );\n}\nfunction createDevelopmentWarning(condition, ...args) {\n  let hasWarned = false;\n  if (true) {\n    return () => {\n      if (!hasWarned && (typeof condition === \"function\" ? condition() : condition)) {\n        warn(...args);\n        hasWarned = true;\n      }\n    };\n  } else {}\n}\n\n// src/comments/comment-body.ts\nfunction isCommentBodyParagraph(element) {\n  return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyText(element) {\n  return !(\"type\" in element) && \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n  return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n  return \"type\" in element && element.type === \"link\";\n}\nvar commentBodyElementsGuards = {\n  paragraph: isCommentBodyParagraph,\n  text: isCommentBodyText,\n  link: isCommentBodyLink,\n  mention: isCommentBodyMention\n};\nvar commentBodyElementsTypes = {\n  paragraph: \"block\",\n  text: \"inline\",\n  link: \"inline\",\n  mention: \"inline\"\n};\nfunction traverseCommentBody(body, elementOrVisitor, possiblyVisitor) {\n  if (!body || !body?.content) {\n    return;\n  }\n  const element = typeof elementOrVisitor === \"string\" ? elementOrVisitor : void 0;\n  const type = element ? commentBodyElementsTypes[element] : \"all\";\n  const guard = element ? commentBodyElementsGuards[element] : () => true;\n  const visitor = typeof elementOrVisitor === \"function\" ? elementOrVisitor : possiblyVisitor;\n  for (const block of body.content) {\n    if (type === \"all\" || type === \"block\") {\n      if (guard(block)) {\n        visitor?.(block);\n      }\n    }\n    if (type === \"all\" || type === \"inline\") {\n      for (const inline of block.children) {\n        if (guard(inline)) {\n          visitor?.(inline);\n        }\n      }\n    }\n  }\n}\nfunction getMentionedIdsFromCommentBody(body) {\n  const mentionedIds = /* @__PURE__ */ new Set();\n  traverseCommentBody(\n    body,\n    \"mention\",\n    (mention) => mentionedIds.add(mention.id)\n  );\n  return Array.from(mentionedIds);\n}\nasync function resolveUsersInCommentBody(body, resolveUsers) {\n  const resolvedUsers = /* @__PURE__ */ new Map();\n  if (!resolveUsers) {\n    return resolvedUsers;\n  }\n  const userIds = getMentionedIdsFromCommentBody(body);\n  const users = await resolveUsers({\n    userIds\n  });\n  for (const [index, userId] of userIds.entries()) {\n    const user = users?.[index];\n    if (user) {\n      resolvedUsers.set(userId, user);\n    }\n  }\n  return resolvedUsers;\n}\nvar htmlEscapables = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar htmlEscapablesRegex = new RegExp(\n  Object.keys(htmlEscapables).map((entity) => `\\\\${entity}`).join(\"|\"),\n  \"g\"\n);\nfunction htmlSafe(value) {\n  return new HtmlSafeString([String(value)], []);\n}\nfunction joinHtml(strings) {\n  if (strings.length <= 0) {\n    return new HtmlSafeString([\"\"], []);\n  }\n  return new HtmlSafeString(\n    [\"\", ...Array(strings.length - 1).fill(\"\"), \"\"],\n    strings\n  );\n}\nfunction escapeHtml(value) {\n  if (value instanceof HtmlSafeString) {\n    return value.toString();\n  }\n  if (Array.isArray(value)) {\n    return joinHtml(value).toString();\n  }\n  return String(value).replace(\n    htmlEscapablesRegex,\n    (character) => htmlEscapables[character]\n  );\n}\nvar HtmlSafeString = class {\n  constructor(strings, values) {\n    this._strings = strings;\n    this._values = values;\n  }\n  toString() {\n    return this._strings.reduce((result, str, i) => {\n      return result + escapeHtml(nn(this._values[i - 1])) + str;\n    });\n  }\n};\nfunction html(strings, ...values) {\n  return new HtmlSafeString(strings, values);\n}\nvar markdownEscapables = {\n  _: \"\\\\_\",\n  \"*\": \"\\\\*\",\n  \"#\": \"\\\\#\",\n  \"`\": \"\\\\`\",\n  \"~\": \"\\\\~\",\n  \"!\": \"\\\\!\",\n  \"|\": \"\\\\|\",\n  \"(\": \"\\\\(\",\n  \")\": \"\\\\)\",\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"[\": \"\\\\[\",\n  \"]\": \"\\\\]\"\n};\nvar markdownEscapablesRegex = new RegExp(\n  Object.keys(markdownEscapables).map((entity) => `\\\\${entity}`).join(\"|\"),\n  \"g\"\n);\nfunction joinMarkdown(strings) {\n  if (strings.length <= 0) {\n    return new MarkdownSafeString([\"\"], []);\n  }\n  return new MarkdownSafeString(\n    [\"\", ...Array(strings.length - 1).fill(\"\"), \"\"],\n    strings\n  );\n}\nfunction escapeMarkdown(value) {\n  if (value instanceof MarkdownSafeString) {\n    return value.toString();\n  }\n  if (Array.isArray(value)) {\n    return joinMarkdown(value).toString();\n  }\n  return String(value).replace(\n    markdownEscapablesRegex,\n    (character) => markdownEscapables[character]\n  );\n}\nvar MarkdownSafeString = class {\n  constructor(strings, values) {\n    this._strings = strings;\n    this._values = values;\n  }\n  toString() {\n    return this._strings.reduce((result, str, i) => {\n      return result + escapeMarkdown(nn(this._values[i - 1])) + str;\n    });\n  }\n};\nfunction markdown(strings, ...values) {\n  return new MarkdownSafeString(strings, values);\n}\nfunction toAbsoluteUrl(url) {\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n    return url;\n  } else if (url.startsWith(\"www.\")) {\n    return \"https://\" + url;\n  }\n  return;\n}\nvar stringifyCommentBodyPlainElements = {\n  paragraph: ({ children }) => children,\n  text: ({ element }) => element.text,\n  link: ({ element }) => element.text ?? element.url,\n  mention: ({ element, user }) => {\n    return `@${user?.name ?? element.id}`;\n  }\n};\nvar stringifyCommentBodyHtmlElements = {\n  paragraph: ({ children }) => {\n    return children ? html`<p>${htmlSafe(children)}</p>` : children;\n  },\n  text: ({ element }) => {\n    let children = element.text;\n    if (!children) {\n      return children;\n    }\n    if (element.bold) {\n      children = html`<strong>${children}</strong>`;\n    }\n    if (element.italic) {\n      children = html`<em>${children}</em>`;\n    }\n    if (element.strikethrough) {\n      children = html`<s>${children}</s>`;\n    }\n    if (element.code) {\n      children = html`<code>${children}</code>`;\n    }\n    return children;\n  },\n  link: ({ element, href }) => {\n    return html`<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\">${element.text ?? element.url}</a>`;\n  },\n  mention: ({ element, user }) => {\n    return html`<span data-mention>@${user?.name ?? element.id}</span>`;\n  }\n};\nvar stringifyCommentBodyMarkdownElements = {\n  paragraph: ({ children }) => {\n    return children;\n  },\n  text: ({ element }) => {\n    let children = element.text;\n    if (!children) {\n      return children;\n    }\n    if (element.bold) {\n      children = markdown`**${children}**`;\n    }\n    if (element.italic) {\n      children = markdown`_${children}_`;\n    }\n    if (element.strikethrough) {\n      children = markdown`~~${children}~~`;\n    }\n    if (element.code) {\n      children = markdown`\\`${children}\\``;\n    }\n    return children;\n  },\n  link: ({ element, href }) => {\n    return markdown`[${element.text ?? element.url}](${href})`;\n  },\n  mention: ({ element, user }) => {\n    return markdown`@${user?.name ?? element.id}`;\n  }\n};\nasync function stringifyCommentBody(body, options) {\n  const format = options?.format ?? \"plain\";\n  const separator = options?.separator ?? (format === \"markdown\" ? \"\\n\\n\" : \"\\n\");\n  const elements = {\n    ...format === \"html\" ? stringifyCommentBodyHtmlElements : format === \"markdown\" ? stringifyCommentBodyMarkdownElements : stringifyCommentBodyPlainElements,\n    ...options?.elements\n  };\n  const resolvedUsers = await resolveUsersInCommentBody(\n    body,\n    options?.resolveUsers\n  );\n  const blocks = body.content.flatMap((block, blockIndex) => {\n    switch (block.type) {\n      case \"paragraph\": {\n        const inlines = block.children.flatMap((inline, inlineIndex) => {\n          if (isCommentBodyMention(inline)) {\n            return inline.id ? [\n              elements.mention(\n                {\n                  element: inline,\n                  user: resolvedUsers.get(inline.id)\n                },\n                inlineIndex\n              )\n            ] : [];\n          }\n          if (isCommentBodyLink(inline)) {\n            return [\n              elements.link(\n                {\n                  element: inline,\n                  href: toAbsoluteUrl(inline.url) ?? inline.url\n                },\n                inlineIndex\n              )\n            ];\n          }\n          if (isCommentBodyText(inline)) {\n            return [elements.text({ element: inline }, inlineIndex)];\n          }\n          return [];\n        });\n        return [\n          elements.paragraph(\n            { element: block, children: inlines.join(\"\") },\n            blockIndex\n          )\n        ];\n      }\n      default:\n        return [];\n    }\n  });\n  return blocks.join(separator);\n}\n\n// src/crdts/utils.ts\nfunction toPlainLson(lson) {\n  if (lson instanceof LiveObject) {\n    return {\n      liveblocksType: \"LiveObject\",\n      data: Object.fromEntries(\n        Object.entries(lson.toObject()).flatMap(\n          ([key, value]) => value !== void 0 ? [[key, toPlainLson(value)]] : []\n        )\n      )\n    };\n  } else if (lson instanceof LiveMap) {\n    return {\n      liveblocksType: \"LiveMap\",\n      data: Object.fromEntries(\n        [...lson].map(([key, value]) => [key, toPlainLson(value)])\n      )\n    };\n  } else if (lson instanceof LiveList) {\n    return {\n      liveblocksType: \"LiveList\",\n      data: [...lson].map((item) => toPlainLson(item))\n    };\n  } else {\n    return lson;\n  }\n}\n\n// src/immutable.ts\nfunction lsonObjectToJson(obj) {\n  const result = {};\n  for (const key in obj) {\n    const val = obj[key];\n    if (val !== void 0) {\n      result[key] = lsonToJson(val);\n    }\n  }\n  return result;\n}\nfunction liveObjectToJson(liveObject) {\n  return lsonObjectToJson(liveObject.toObject());\n}\nfunction liveMapToJson(map) {\n  const result = {};\n  for (const [key, value] of map.entries()) {\n    result[key] = lsonToJson(value);\n  }\n  return result;\n}\nfunction lsonListToJson(value) {\n  return value.map(lsonToJson);\n}\nfunction liveListToJson(value) {\n  return lsonListToJson(value.toArray());\n}\nfunction lsonToJson(value) {\n  if (value instanceof LiveObject) {\n    return liveObjectToJson(value);\n  } else if (value instanceof LiveList) {\n    return liveListToJson(value);\n  } else if (value instanceof LiveMap) {\n    return liveMapToJson(value);\n  } else if (value instanceof LiveRegister) {\n    return value.data;\n  }\n  if (Array.isArray(value)) {\n    return lsonListToJson(value);\n  } else if (isPlainObject(value)) {\n    return lsonObjectToJson(value);\n  }\n  return value;\n}\nfunction deepLiveify(value) {\n  if (Array.isArray(value)) {\n    return new LiveList(value.map(deepLiveify));\n  } else if (isPlainObject(value)) {\n    const init = {};\n    for (const key in value) {\n      const val = value[key];\n      if (val === void 0) {\n        continue;\n      }\n      init[key] = deepLiveify(val);\n    }\n    return new LiveObject(init);\n  } else {\n    return value;\n  }\n}\nfunction patchLiveList(liveList, prev, next) {\n  let i = 0;\n  let prevEnd = prev.length - 1;\n  let nextEnd = next.length - 1;\n  let prevNode = prev[0];\n  let nextNode = next[0];\n  outer: {\n    while (prevNode === nextNode) {\n      ++i;\n      if (i > prevEnd || i > nextEnd) {\n        break outer;\n      }\n      prevNode = prev[i];\n      nextNode = next[i];\n    }\n    prevNode = prev[prevEnd];\n    nextNode = next[nextEnd];\n    while (prevNode === nextNode) {\n      prevEnd--;\n      nextEnd--;\n      if (i > prevEnd || i > nextEnd) {\n        break outer;\n      }\n      prevNode = prev[prevEnd];\n      nextNode = next[nextEnd];\n    }\n  }\n  if (i > prevEnd) {\n    if (i <= nextEnd) {\n      while (i <= nextEnd) {\n        liveList.insert(deepLiveify(next[i]), i);\n        i++;\n      }\n    }\n  } else if (i > nextEnd) {\n    let localI = i;\n    while (localI <= prevEnd) {\n      liveList.delete(i);\n      localI++;\n    }\n  } else {\n    while (i <= prevEnd && i <= nextEnd) {\n      prevNode = prev[i];\n      nextNode = next[i];\n      const liveListNode = liveList.get(i);\n      if (isLiveObject(liveListNode) && isPlainObject(prevNode) && isPlainObject(nextNode)) {\n        patchLiveObject(liveListNode, prevNode, nextNode);\n      } else {\n        liveList.set(i, deepLiveify(nextNode));\n      }\n      i++;\n    }\n    while (i <= nextEnd) {\n      liveList.insert(deepLiveify(next[i]), i);\n      i++;\n    }\n    let localI = i;\n    while (localI <= prevEnd) {\n      liveList.delete(i);\n      localI++;\n    }\n  }\n}\nfunction patchLiveObjectKey(liveObject, key, prev, next) {\n  if (true) {\n    const nonSerializableValue = findNonSerializableValue(next);\n    if (nonSerializableValue) {\n      error2(\n        `New state path: '${nonSerializableValue.path}' value: '${String(\n          nonSerializableValue.value\n        )}' is not serializable.\nOnly serializable value can be synced with Liveblocks.`\n      );\n      return;\n    }\n  }\n  const value = liveObject.get(key);\n  if (next === void 0) {\n    liveObject.delete(key);\n  } else if (value === void 0) {\n    liveObject.set(key, deepLiveify(next));\n  } else if (prev === next) {\n    return;\n  } else if (isLiveList(value) && Array.isArray(prev) && Array.isArray(next)) {\n    patchLiveList(value, prev, next);\n  } else if (isLiveObject(value) && isPlainObject(prev) && isPlainObject(next)) {\n    patchLiveObject(value, prev, next);\n  } else {\n    liveObject.set(key, deepLiveify(next));\n  }\n}\nfunction patchLiveObject(root, prev, next) {\n  const updates = {};\n  for (const key in next) {\n    patchLiveObjectKey(root, key, prev[key], next[key]);\n  }\n  for (const key in prev) {\n    if (next[key] === void 0) {\n      root.delete(key);\n    }\n  }\n  if (Object.keys(updates).length > 0) {\n    root.update(updates);\n  }\n}\nfunction getParentsPath(node) {\n  const path = [];\n  while (node.parent.type === \"HasParent\") {\n    if (isLiveList(node.parent.node)) {\n      path.push(node.parent.node._indexOfPosition(node.parent.key));\n    } else {\n      path.push(node.parent.key);\n    }\n    node = node.parent.node;\n  }\n  return path;\n}\nfunction legacy_patchImmutableObject(state, updates) {\n  return updates.reduce(\n    (state2, update) => legacy_patchImmutableObjectWithUpdate(state2, update),\n    state\n  );\n}\nfunction legacy_patchImmutableObjectWithUpdate(state, update) {\n  const path = getParentsPath(update.node);\n  return legacy_patchImmutableNode(state, path, update);\n}\nfunction legacy_patchImmutableNode(state, path, update) {\n  const pathItem = path.pop();\n  if (pathItem === void 0) {\n    switch (update.type) {\n      case \"LiveObject\": {\n        if (!isJsonObject(state)) {\n          throw new Error(\n            \"Internal: received update on LiveObject but state was not an object\"\n          );\n        }\n        const newState = Object.assign({}, state);\n        for (const key in update.updates) {\n          if (update.updates[key]?.type === \"update\") {\n            const val = update.node.get(key);\n            if (val !== void 0) {\n              newState[key] = lsonToJson(val);\n            }\n          } else if (update.updates[key]?.type === \"delete\") {\n            delete newState[key];\n          }\n        }\n        return newState;\n      }\n      case \"LiveList\": {\n        if (!Array.isArray(state)) {\n          throw new Error(\n            \"Internal: received update on LiveList but state was not an array\"\n          );\n        }\n        let newState = state.map((x) => x);\n        for (const listUpdate of update.updates) {\n          if (listUpdate.type === \"set\") {\n            newState = newState.map(\n              (item, index) => index === listUpdate.index ? lsonToJson(listUpdate.item) : item\n            );\n          } else if (listUpdate.type === \"insert\") {\n            if (listUpdate.index === newState.length) {\n              newState.push(lsonToJson(listUpdate.item));\n            } else {\n              newState = [\n                ...newState.slice(0, listUpdate.index),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index)\n              ];\n            }\n          } else if (listUpdate.type === \"delete\") {\n            newState.splice(listUpdate.index, 1);\n          } else if (listUpdate.type === \"move\") {\n            if (listUpdate.previousIndex > listUpdate.index) {\n              newState = [\n                ...newState.slice(0, listUpdate.index),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index, listUpdate.previousIndex),\n                ...newState.slice(listUpdate.previousIndex + 1)\n              ];\n            } else {\n              newState = [\n                ...newState.slice(0, listUpdate.previousIndex),\n                ...newState.slice(\n                  listUpdate.previousIndex + 1,\n                  listUpdate.index + 1\n                ),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index + 1)\n              ];\n            }\n          }\n        }\n        return newState;\n      }\n      case \"LiveMap\": {\n        if (!isJsonObject(state)) {\n          throw new Error(\n            \"Internal: received update on LiveMap but state was not an object\"\n          );\n        }\n        const newState = Object.assign({}, state);\n        for (const key in update.updates) {\n          if (update.updates[key]?.type === \"update\") {\n            const value = update.node.get(key);\n            if (value !== void 0) {\n              newState[key] = lsonToJson(value);\n            }\n          } else if (update.updates[key]?.type === \"delete\") {\n            delete newState[key];\n          }\n        }\n        return newState;\n      }\n    }\n  }\n  if (Array.isArray(state)) {\n    const newArray = [...state];\n    newArray[pathItem] = legacy_patchImmutableNode(\n      state[pathItem],\n      path,\n      update\n    );\n    return newArray;\n  } else if (isJsonObject(state)) {\n    const node = state[pathItem];\n    if (node === void 0) {\n      return state;\n    } else {\n      const stateAsObj = state;\n      return {\n        ...stateAsObj,\n        [pathItem]: legacy_patchImmutableNode(node, path, update)\n      };\n    }\n  } else {\n    return state;\n  }\n}\n\n// src/lib/deprecation.ts\nvar _emittedDeprecationWarnings = /* @__PURE__ */ new Set();\nfunction deprecate(message, key = message) {\n  if (true) {\n    if (!_emittedDeprecationWarnings.has(key)) {\n      _emittedDeprecationWarnings.add(key);\n      errorWithTitle(\"Deprecation warning\", message);\n    }\n  }\n}\nfunction deprecateIf(condition, message, key = message) {\n  if (true) {\n    if (condition) {\n      deprecate(message, key);\n    }\n  }\n}\nfunction throwUsageError(message) {\n  if (true) {\n    const usageError = new Error(message);\n    usageError.name = \"Usage error\";\n    errorWithTitle(\"Usage error\", message);\n    throw usageError;\n  }\n}\nfunction errorIf(condition, message) {\n  if (true) {\n    if (condition) {\n      throwUsageError(message);\n    }\n  }\n}\n\n// src/lib/Poller.ts\nfunction makePoller(callback) {\n  let context = {\n    state: \"stopped\",\n    timeoutHandle: null,\n    interval: null,\n    lastScheduledAt: null,\n    remainingInterval: null\n  };\n  function poll() {\n    if (context.state === \"running\") {\n      schedule(context.interval);\n    }\n    void callback();\n  }\n  function schedule(interval) {\n    context = {\n      state: \"running\",\n      interval: context.state !== \"stopped\" ? context.interval : interval,\n      lastScheduledAt: performance.now(),\n      timeoutHandle: setTimeout(poll, interval),\n      remainingInterval: null\n    };\n  }\n  function scheduleRemaining(remaining) {\n    if (context.state !== \"paused\") {\n      return;\n    }\n    context = {\n      state: \"running\",\n      interval: context.interval,\n      lastScheduledAt: context.lastScheduledAt,\n      timeoutHandle: setTimeout(poll, remaining),\n      remainingInterval: null\n    };\n  }\n  function start(interval) {\n    if (context.state === \"running\") {\n      return;\n    }\n    schedule(interval);\n  }\n  function restart(interval) {\n    stop();\n    start(interval);\n  }\n  function pause() {\n    if (context.state !== \"running\") {\n      return;\n    }\n    clearTimeout(context.timeoutHandle);\n    context = {\n      state: \"paused\",\n      interval: context.interval,\n      lastScheduledAt: context.lastScheduledAt,\n      timeoutHandle: null,\n      remainingInterval: context.interval - (performance.now() - context.lastScheduledAt)\n    };\n  }\n  function resume() {\n    if (context.state !== \"paused\") {\n      return;\n    }\n    scheduleRemaining(context.remainingInterval);\n  }\n  function stop() {\n    if (context.state === \"stopped\") {\n      return;\n    }\n    if (context.timeoutHandle) {\n      clearTimeout(context.timeoutHandle);\n    }\n    context = {\n      state: \"stopped\",\n      interval: null,\n      lastScheduledAt: null,\n      timeoutHandle: null,\n      remainingInterval: null\n    };\n  }\n  return {\n    start,\n    restart,\n    pause,\n    resume,\n    stop\n  };\n}\n\n// src/lib/shallow.ts\nfunction shallowArray(xs, ys) {\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (!Object.is(xs[i], ys[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction shallowObj(objA, objB) {\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null || Object.prototype.toString.call(objA) !== \"[object Object]\" || Object.prototype.toString.call(objB) !== \"[object Object]\") {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n  return keysA.every(\n    (key) => Object.prototype.hasOwnProperty.call(objB, key) && Object.is(objA[key], objB[key])\n  );\n}\nfunction shallow(a, b) {\n  if (Object.is(a, b)) {\n    return true;\n  }\n  const isArrayA = Array.isArray(a);\n  const isArrayB = Array.isArray(b);\n  if (isArrayA || isArrayB) {\n    if (!isArrayA || !isArrayB) {\n      return false;\n    }\n    return shallowArray(a, b);\n  }\n  return shallowObj(a, b);\n}\n\n// src/index.ts\ndetectDupes(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComponentsContext: () => (/* binding */ ComponentsContext),\n/* harmony export */   ComponentsProvider: () => (/* binding */ ComponentsProvider),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   useComponents: () => (/* binding */ useComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ ComponentsContext,ComponentsProvider,defaultComponents,useComponents auto */ \n\nconst defaultComponents = {\n    Anchor: \"a\"\n};\nconst ComponentsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useComponents(components) {\n    const contextComponents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComponentsContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultComponents,\n            ...contextComponents,\n            ...components\n        }), [\n        contextComponents,\n        components\n    ]);\n}\nfunction ComponentsProvider({ children, components: providerComponents }) {\n    const contextComponents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComponentsContext);\n    const components = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultComponents,\n            ...contextComponents,\n            ...providerComponents\n        }), [\n        contextComponents,\n        providerComponents\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComponentsContext.Provider, {\n        value: components\n    }, children);\n}\n //# sourceMappingURL=components.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBb0JPLE1BQUFBLG9CQUFBO0lBQXNDQyxRQUFBO0FBRTdDO0FBRU8sTUFBQUMsa0NBQUFDLG9EQUFBQSxDQUEwQjtBQUkxQixTQUFBQyxjQUFBQyxVQUFBO0lBQ0wsTUFBQUMsb0JBQUFDLGlEQUFBQSxDQUFBTDtJQUVBLE9BQUFNLDhDQUFBQSxDQUFPO1lBQ0UsR0FBQVIsaUJBQUE7WUFDRixHQUFBTSxpQkFBQTtZQUNBLEdBQUFELFVBQUE7UUFDQSxJQUNMO1FBQUFDO1FBQUFEO0tBQUE7QUFHSjtBQUVPLFNBQUFJLG1CQUFBLEVBQTRCQyxRQUFBLEVBQ2pDTCxZQUFBTSxrQkFBQSxFQUVGO0lBQ0UsTUFBQUwsb0JBQUFDLGlEQUFBQSxDQUFBTDtJQUNBLE1BQUFHLGFBQUFHLDhDQUFBQSxDQUFtQjtZQUNWLEdBQUFSLGlCQUFBO1lBQ0YsR0FBQU0saUJBQUE7WUFDQSxHQUFBSyxrQkFBQTtRQUNBLElBQ0w7UUFBQUw7UUFBQUs7S0FBQTtJQUlGLHFDQUFBQyxnREFBQSxDQUFBVixrQkFBQVksUUFBQTtRQUNHQyxPQUFBVjtJQUFrQyxHQUFBSztBQUl2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi9zcmMvY29tcG9uZW50cy50c3g/NzE0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHR5cGUge1xuICBDb21wb25lbnRQcm9wc1dpdGhvdXRSZWYsXG4gIENvbXBvbmVudFR5cGUsXG4gIFByb3BzV2l0aENoaWxkcmVuLFxufSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdsb2JhbENvbXBvbmVudHMge1xuICBBbmNob3I6IENvbXBvbmVudFR5cGU8Q29tcG9uZW50UHJvcHNXaXRob3V0UmVmPFwiYVwiPj4gfCBcImFcIjtcbn1cblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50cyA9IEdsb2JhbENvbXBvbmVudHM7XG5cbnR5cGUgQ29tcG9uZW50c1Byb3ZpZGVyUHJvcHMgPSBQcm9wc1dpdGhDaGlsZHJlbjx7XG4gIGNvbXBvbmVudHM/OiBQYXJ0aWFsPENvbXBvbmVudHM+O1xufT47XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29tcG9uZW50czogQ29tcG9uZW50cyA9IHtcbiAgQW5jaG9yOiBcImFcIixcbn07XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnRzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8Q29tcG9uZW50cyB8IHVuZGVmaW5lZD4oXG4gIHVuZGVmaW5lZFxuKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbXBvbmVudHMoY29tcG9uZW50cz86IFBhcnRpYWw8Q29tcG9uZW50cz4pOiBDb21wb25lbnRzIHtcbiAgY29uc3QgY29udGV4dENvbXBvbmVudHMgPSB1c2VDb250ZXh0KENvbXBvbmVudHNDb250ZXh0KTtcblxuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgLi4uZGVmYXVsdENvbXBvbmVudHMsXG4gICAgICAuLi5jb250ZXh0Q29tcG9uZW50cyxcbiAgICAgIC4uLmNvbXBvbmVudHMsXG4gICAgfSksXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50c1Byb3ZpZGVyKHtcbiAgY2hpbGRyZW4sXG4gIGNvbXBvbmVudHM6IHByb3ZpZGVyQ29tcG9uZW50cyxcbn06IENvbXBvbmVudHNQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gdXNlQ29udGV4dChDb21wb25lbnRzQ29udGV4dCk7XG4gIGNvbnN0IGNvbXBvbmVudHMgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICAuLi5kZWZhdWx0Q29tcG9uZW50cyxcbiAgICAgIC4uLmNvbnRleHRDb21wb25lbnRzLFxuICAgICAgLi4ucHJvdmlkZXJDb21wb25lbnRzLFxuICAgIH0pLFxuICAgIFtjb250ZXh0Q29tcG9uZW50cywgcHJvdmlkZXJDb21wb25lbnRzXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPENvbXBvbmVudHNDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb21wb25lbnRzfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0NvbXBvbmVudHNDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuIl0sIm5hbWVzIjpbImRlZmF1bHRDb21wb25lbnRzIiwiQW5jaG9yIiwiQ29tcG9uZW50c0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJjb250ZXh0Q29tcG9uZW50cyIsInVzZUNvbnRleHQiLCJ1c2VNZW1vIiwiQ29tcG9uZW50c1Byb3ZpZGVyIiwiY2hpbGRyZW4iLCJwcm92aWRlckNvbXBvbmVudHMiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/Comment.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/Comment.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   CommentLink: () => (/* binding */ CommentLink),\n/* harmony export */   CommentMention: () => (/* binding */ CommentMention),\n/* harmony export */   CommentNonInteractiveLink: () => (/* binding */ CommentNonInteractiveLink),\n/* harmony export */   CommentNonInteractiveReaction: () => (/* binding */ CommentNonInteractiveReaction),\n/* harmony export */   CommentReaction: () => (/* binding */ CommentReaction)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var _radix_ui_react_toggle__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @radix-ui/react-toggle */ \"(ssr)/./node_modules/@radix-ui/react-toggle/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _icons_Check_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../icons/Check.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Check.mjs\");\n/* harmony import */ var _icons_Cross_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../icons/Cross.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Cross.mjs\");\n/* harmony import */ var _icons_Delete_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../icons/Delete.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Delete.mjs\");\n/* harmony import */ var _icons_Edit_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../icons/Edit.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Edit.mjs\");\n/* harmony import */ var _icons_Ellipsis_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../icons/Ellipsis.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Ellipsis.mjs\");\n/* harmony import */ var _icons_EmojiAdd_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../icons/EmojiAdd.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/EmojiAdd.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../primitives/Comment/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/index.mjs\");\n/* harmony import */ var _primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../primitives/Composer/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/index.mjs\");\n/* harmony import */ var _primitives_Timestamp_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../primitives/Timestamp.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Timestamp.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/shared.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/use-refs.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-refs.mjs\");\n/* harmony import */ var _utils_use_visible_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/use-visible.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-visible.mjs\");\n/* harmony import */ var _utils_use_window_focus_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/use-window-focus.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-window-focus.mjs\");\n/* harmony import */ var _Composer_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Composer.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/Composer.mjs\");\n/* harmony import */ var _internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./internal/Avatar.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Avatar.mjs\");\n/* harmony import */ var _internal_Button_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/Button.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Button.mjs\");\n/* harmony import */ var _internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./internal/Dropdown.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Dropdown.mjs\");\n/* harmony import */ var _internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Emoji.mjs\");\n/* harmony import */ var _internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./internal/EmojiPicker.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/EmojiPicker.mjs\");\n/* harmony import */ var _internal_List_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./internal/List.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/List.mjs\");\n/* harmony import */ var _internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/Tooltip.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Tooltip.mjs\");\n/* harmony import */ var _internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/User.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/User.mjs\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @radix-ui/react-dropdown-menu */ \"(ssr)/./node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ Comment,CommentLink,CommentMention,CommentNonInteractiveLink,CommentNonInteractiveReaction,CommentReaction auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst REACTIONS_TRUNCATE = 5;\nfunction CommentMention({ userId, className, ...props }) {\n    const currentId = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_1__.useCurrentUserId)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Mention, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-mention\", className),\n        \"data-self\": userId === currentId ? \"\" : void 0,\n        ...props\n    }, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_4__.MENTION_CHARACTER, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__.User, {\n        userId\n    }));\n}\nfunction CommentLink({ href, children, className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Link, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-link\", className),\n        href,\n        ...props\n    }, children);\n}\nfunction CommentNonInteractiveLink({ href: _href, children, className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-link\", className),\n        ...props\n    }, children);\n}\nconst CommentReactionButton = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ reaction, overrides, className, ...props }, forwardedRef)=>{\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_6__.useOverrides)(overrides);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_7__.Button, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-reaction\", className),\n        variant: \"outline\",\n        \"aria-label\": $.COMMENT_REACTION_DESCRIPTION(reaction.emoji, reaction.users.length),\n        ...props,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_8__.Emoji, {\n        className: \"lb-comment-reaction-emoji\",\n        emoji: reaction.emoji\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-reaction-count\"\n    }, reaction.users.length));\n});\nconst CommentReaction = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ comment, reaction, overrides, disabled, ...props }, forwardedRef)=>{\n    const addReaction = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__._useAddReaction)();\n    const removeReaction = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__.useRemoveReaction)();\n    const currentId = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_1__.useCurrentUserId)();\n    const isActive = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return reaction.users.some((users)=>users.id === currentId);\n    }, [\n        currentId,\n        reaction\n    ]);\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_6__.useOverrides)(overrides);\n    const tooltipContent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, $.COMMENT_REACTION_LIST(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_List_mjs__WEBPACK_IMPORTED_MODULE_10__.List, {\n            values: reaction.users.map((users, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__.User, {\n                    key: users.id,\n                    userId: users.id,\n                    capitalize: index === 0,\n                    replaceSelf: true\n                })),\n            formatRemaining: $.LIST_REMAINING_USERS,\n            truncate: REACTIONS_TRUNCATE\n        }), reaction.emoji, reaction.users.length)), [\n        $,\n        reaction\n    ]);\n    const handlePressedChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((isPressed)=>{\n        if (isPressed) {\n            addReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji: reaction.emoji\n            });\n        } else {\n            removeReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji: reaction.emoji\n            });\n        }\n    }, [\n        addReaction,\n        comment.threadId,\n        comment.id,\n        reaction.emoji,\n        removeReaction\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {\n        content: tooltipContent,\n        multiline: true,\n        className: \"lb-comment-reaction-tooltip\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_toggle__WEBPACK_IMPORTED_MODULE_12__.Root, {\n        asChild: true,\n        pressed: isActive,\n        onPressedChange: handlePressedChange,\n        disabled,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentReactionButton, {\n        \"data-self\": isActive ? \"\" : void 0,\n        reaction,\n        overrides,\n        ...props\n    })));\n});\nconst CommentNonInteractiveReaction = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ reaction, overrides, ...props }, forwardedRef)=>{\n    const currentId = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_1__.useCurrentUserId)();\n    const isActive = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return reaction.users.some((users)=>users.id === currentId);\n    }, [\n        currentId,\n        reaction\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentReactionButton, {\n        disableable: false,\n        \"data-self\": isActive ? \"\" : void 0,\n        reaction,\n        overrides,\n        ...props,\n        ref: forwardedRef\n    });\n});\nfunction AutoMarkReadThreadIdHandler({ threadId, commentRef }) {\n    const markThreadAsRead = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__.useMarkThreadAsRead)();\n    const isWindowFocused = (0,_utils_use_window_focus_mjs__WEBPACK_IMPORTED_MODULE_13__.useWindowFocus)();\n    (0,_utils_use_visible_mjs__WEBPACK_IMPORTED_MODULE_14__.useVisibleCallback)(commentRef, ()=>{\n        markThreadAsRead(threadId);\n    }, {\n        enabled: isWindowFocused\n    });\n    return null;\n}\nconst Comment = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ comment, indentContent = true, showDeleted, showActions = \"hover\", showReactions = true, onAuthorClick, onMentionClick, onCommentEdit, onCommentDelete, overrides, className, additionalActions, additionalActionsClassName, autoMarkReadThreadId, ...props }, forwardedRef)=>{\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const mergedRefs = (0,_utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_15__.useRefs)(forwardedRef, ref);\n    const self = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__._useSelf)();\n    const deleteComment = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__.useDeleteComment)();\n    const editComment = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__.useEditComment)();\n    const addReaction = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__._useAddReaction)();\n    const removeReaction = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_9__.useRemoveReaction)();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_6__.useOverrides)(overrides);\n    const [isEditing, setEditing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isTarget, setTarget] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isMoreActionOpen, setMoreActionOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isReactionActionOpen, setReactionActionOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const stopPropagation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n    }, []);\n    const handleEdit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setEditing(true);\n    }, []);\n    const handleEditCancel = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n        setEditing(false);\n    }, []);\n    const handleEditSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ body }, event)=>{\n        onCommentEdit?.(comment);\n        event.preventDefault();\n        setEditing(false);\n        editComment({\n            commentId: comment.id,\n            threadId: comment.threadId,\n            body\n        });\n    }, [\n        comment,\n        editComment,\n        onCommentEdit\n    ]);\n    const handleDelete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        onCommentDelete?.(comment);\n        deleteComment({\n            commentId: comment.id,\n            threadId: comment.threadId\n        });\n    }, [\n        comment,\n        deleteComment,\n        onCommentDelete\n    ]);\n    const handleAuthorClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onAuthorClick?.(comment.userId, event);\n    }, [\n        comment.userId,\n        onAuthorClick\n    ]);\n    const handleReactionSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((emoji)=>{\n        const reactionIndex = comment.reactions.findIndex((reaction)=>reaction.emoji === emoji);\n        if (reactionIndex >= 0 && self?.id && comment.reactions[reactionIndex].users.some((user)=>user.id === self?.id)) {\n            removeReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji\n            });\n        } else {\n            addReaction({\n                threadId: comment.threadId,\n                commentId: comment.id,\n                emoji\n            });\n        }\n    }, [\n        addReaction,\n        comment.id,\n        comment.reactions,\n        comment.threadId,\n        removeReaction,\n        self?.id\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const isWindowDefined = \"undefined\" !== \"undefined\";\n        if (!isWindowDefined) return;\n        const hash = window.location.hash;\n        const commentId = hash.slice(1);\n        if (commentId === comment.id) {\n            setTarget(true);\n        }\n    }, []);\n    if (!showDeleted && !comment.body) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_16__.TooltipProvider, null, autoMarkReadThreadId && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AutoMarkReadThreadIdHandler, {\n        commentRef: ref,\n        threadId: autoMarkReadThreadId\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        id: comment.id,\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-root lb-comment\", indentContent && \"lb-comment:indent-content\", showActions === \"hover\" && \"lb-comment:show-actions-hover\", (isMoreActionOpen || isReactionActionOpen) && \"lb-comment:action-open\", className),\n        \"data-deleted\": !comment.body ? \"\" : void 0,\n        \"data-editing\": isEditing ? \"\" : void 0,\n        \"data-target\": isTarget ? \"\" : void 0,\n        dir: $.dir,\n        ...props,\n        ref: mergedRefs\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-header\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-details\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_17__.Avatar, {\n        className: \"lb-comment-avatar\",\n        userId: comment.userId,\n        onClick: handleAuthorClick\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-details-labels\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_5__.User, {\n        className: \"lb-comment-author\",\n        userId: comment.userId,\n        onClick: handleAuthorClick\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-date\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Timestamp_mjs__WEBPACK_IMPORTED_MODULE_18__.Timestamp, {\n        locale: $.locale,\n        date: comment.createdAt,\n        className: \"lb-comment-date-created\"\n    }), comment.editedAt && comment.body && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-comment-date-edited\"\n    }, $.COMMENT_EDITED))))), showActions && !isEditing && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-comment-actions\", additionalActionsClassName)\n    }, additionalActions ?? null, showReactions && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_19__.EmojiPicker, {\n        onEmojiSelect: handleReactionSelect,\n        onOpenChange: setReactionActionOpen\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {\n        content: $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_20__.PopoverTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_7__.Button, {\n        className: \"lb-comment-action\",\n        onClick: stopPropagation,\n        \"aria-label\": $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_EmojiAdd_mjs__WEBPACK_IMPORTED_MODULE_21__.EmojiAddIcon, {\n        className: \"lb-button-icon\"\n    }))))), comment.userId === self?.id && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_22__.Dropdown, {\n        open: isMoreActionOpen,\n        onOpenChange: setMoreActionOpen,\n        align: \"end\",\n        content: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_22__.DropdownItem, {\n            onSelect: handleEdit,\n            onClick: stopPropagation\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Edit_mjs__WEBPACK_IMPORTED_MODULE_23__.EditIcon, {\n            className: \"lb-dropdown-item-icon\"\n        }), $.COMMENT_EDIT), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_22__.DropdownItem, {\n            onSelect: handleDelete,\n            onClick: stopPropagation\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Delete_mjs__WEBPACK_IMPORTED_MODULE_24__.DeleteIcon, {\n            className: \"lb-dropdown-item-icon\"\n        }), $.COMMENT_DELETE))\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {\n        content: $.COMMENT_MORE\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_25__.DropdownMenuTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_7__.Button, {\n        className: \"lb-comment-action\",\n        disabled: !comment.body,\n        onClick: stopPropagation,\n        \"aria-label\": $.COMMENT_MORE\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Ellipsis_mjs__WEBPACK_IMPORTED_MODULE_26__.EllipsisIcon, {\n        className: \"lb-button-icon\"\n    }))))))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-content\"\n    }, isEditing ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Composer_mjs__WEBPACK_IMPORTED_MODULE_27__.Composer, {\n        className: \"lb-comment-composer\",\n        onComposerSubmit: handleEditSubmit,\n        defaultValue: comment.body,\n        autoFocus: true,\n        showAttribution: false,\n        actions: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {\n            content: $.COMMENT_EDIT_COMPOSER_CANCEL,\n            \"aria-label\": $.COMMENT_EDIT_COMPOSER_CANCEL\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_7__.Button, {\n            className: \"lb-composer-action\",\n            onClick: handleEditCancel\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Cross_mjs__WEBPACK_IMPORTED_MODULE_28__.CrossIcon, {\n            className: \"lb-button-icon\"\n        }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.ShortcutTooltip, {\n            content: $.COMMENT_EDIT_COMPOSER_SAVE,\n            shortcut: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.ShortcutTooltipKey, {\n                name: \"enter\"\n            })\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_29__.Submit, {\n            asChild: true\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_7__.Button, {\n            variant: \"primary\",\n            className: \"lb-composer-action\",\n            onClick: stopPropagation,\n            \"aria-label\": $.COMMENT_EDIT_COMPOSER_SAVE\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Check_mjs__WEBPACK_IMPORTED_MODULE_30__.CheckIcon, {\n            className: \"lb-button-icon\"\n        }))))),\n        overrides: {\n            COMPOSER_PLACEHOLDER: $.COMMENT_EDIT_COMPOSER_PLACEHOLDER\n        }\n    }) : comment.body ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Body, {\n        className: \"lb-comment-body\",\n        body: comment.body,\n        components: {\n            Mention: ({ userId })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentMention, {\n                    userId,\n                    onClick: (event)=>onMentionClick?.(userId, event)\n                }),\n            Link: CommentLink\n        }\n    }), showReactions && comment.reactions.length > 0 && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-reactions\"\n    }, comment.reactions.map((reaction)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentReaction, {\n            key: reaction.emoji,\n            comment,\n            reaction,\n            overrides\n        })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_19__.EmojiPicker, {\n        onEmojiSelect: handleReactionSelect\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {\n        content: $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_20__.PopoverTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_7__.Button, {\n        className: \"lb-comment-reaction lb-comment-reaction-add\",\n        variant: \"outline\",\n        onClick: stopPropagation,\n        \"aria-label\": $.COMMENT_ADD_REACTION\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_EmojiAdd_mjs__WEBPACK_IMPORTED_MODULE_21__.EmojiAddIcon, {\n        className: \"lb-button-icon\"\n    }))))))) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-comment-body\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        className: \"lb-comment-deleted\"\n    }, $.COMMENT_DELETED)))));\n});\n //# sourceMappingURL=Comment.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/Comment.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/Composer.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/Composer.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composer: () => (/* binding */ Composer)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _icons_Emoji_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../icons/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Emoji.mjs\");\n/* harmony import */ var _icons_Mention_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../icons/Mention.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Mention.mjs\");\n/* harmony import */ var _icons_Send_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../icons/Send.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Send.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../primitives/Composer/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/index.mjs\");\n/* harmony import */ var _primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../primitives/Composer/contexts.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/contexts.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_use_controllable_state_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utils/use-controllable-state.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-controllable-state.mjs\");\n/* harmony import */ var _internal_Attribution_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./internal/Attribution.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Attribution.mjs\");\n/* harmony import */ var _internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/Avatar.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Avatar.mjs\");\n/* harmony import */ var _internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/Button.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Button.mjs\");\n/* harmony import */ var _internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/EmojiPicker.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/EmojiPicker.mjs\");\n/* harmony import */ var _internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/Tooltip.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Tooltip.mjs\");\n/* harmony import */ var _internal_User_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/User.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/User.mjs\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ Composer auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction ComposerInsertMentionEditorAction({ label, className, onClick, ...props }) {\n    const { createMention } = (0,_primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__.useComposer)();\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onClick?.(event);\n        if (!event.isDefaultPrevented()) {\n            event.stopPropagation();\n            createMention();\n        }\n    }, [\n        createMention,\n        onClick\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {\n        content: label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-composer-editor-action\", className),\n        onMouseDown: preventDefault,\n        onClick: handleClick,\n        \"aria-label\": label,\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Mention_mjs__WEBPACK_IMPORTED_MODULE_5__.MentionIcon, {\n        className: \"lb-button-icon\"\n    })));\n}\nfunction ComposerInsertEmojiEditorAction({ label, onPickerOpenChange, className, ...props }) {\n    const { insertText } = (0,_primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__.useComposer)();\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_EmojiPicker_mjs__WEBPACK_IMPORTED_MODULE_6__.EmojiPicker, {\n        onEmojiSelect: insertText,\n        onOpenChange: onPickerOpenChange\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {\n        content: label\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_7__.PopoverTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-composer-editor-action\", className),\n        onMouseDown: preventDefault,\n        \"aria-label\": label,\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Emoji_mjs__WEBPACK_IMPORTED_MODULE_8__.EmojiIcon, {\n        className: \"lb-button-icon\"\n    })))));\n}\nfunction ComposerMention({ userId }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Mention, {\n        className: \"lb-composer-mention\"\n    }, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_10__.MENTION_CHARACTER, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_11__.User, {\n        userId\n    }));\n}\nfunction ComposerMentionSuggestions({ userIds }) {\n    return userIds.length > 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Suggestions, {\n        className: \"lb-root lb-portal lb-elevation lb-composer-suggestions lb-composer-mention-suggestions\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.SuggestionsList, {\n        className: \"lb-composer-suggestions-list lb-composer-mention-suggestions-list\"\n    }, userIds.map((userId)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.SuggestionsListItem, {\n            key: userId,\n            className: \"lb-composer-suggestions-list-item lb-composer-mention-suggestion\",\n            value: userId\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_12__.Avatar, {\n            userId,\n            className: \"lb-composer-mention-suggestion-avatar\"\n        }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_11__.User, {\n            userId,\n            className: \"lb-composer-mention-suggestion-user\"\n        }))))) : null;\n}\nfunction ComposerLink({ href, children }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Link, {\n        href,\n        className: \"lb-composer-link\"\n    }, children);\n}\nconst editorComponents = {\n    Mention: ComposerMention,\n    MentionSuggestions: ComposerMentionSuggestions,\n    Link: ComposerLink\n};\nconst ComposerWithContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ defaultValue, disabled, autoFocus, collapsed: controlledCollapsed, defaultCollapsed, onCollapsedChange: controlledOnCollapsedChange, actions, overrides, showAttribution, onFocus, onBlur, className, ...props }, forwardedRef)=>{\n    const client = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_13__.useClient)();\n    const hasResolveMentionSuggestions = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_14__.kInternal].resolveMentionSuggestions !== void 0;\n    const self = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_13__._useSelf)();\n    const isDisabled = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>disabled || !self?.canComment, [\n        disabled,\n        self?.canComment\n    ]);\n    const { isEmpty } = (0,_primitives_Composer_contexts_mjs__WEBPACK_IMPORTED_MODULE_1__.useComposer)();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_15__.useOverrides)(overrides);\n    const [isEmojiPickerOpen, setEmojiPickerOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [collapsed, onCollapsedChange] = (0,_utils_use_controllable_state_mjs__WEBPACK_IMPORTED_MODULE_16__.useControllableState)(controlledCollapsed === void 0 && defaultCollapsed === void 0 ? false : controlledCollapsed, controlledOnCollapsedChange, defaultCollapsed);\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    const stopPropagation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n    }, []);\n    const handleEditorClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n        if (isEmpty) {\n            onCollapsedChange?.(false);\n        }\n    }, [\n        isEmpty,\n        onCollapsedChange\n    ]);\n    const handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onFocus?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if (isEmpty) {\n            onCollapsedChange?.(false);\n        }\n    }, [\n        isEmpty,\n        onCollapsedChange,\n        onFocus\n    ]);\n    const handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onBlur?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        const isOutside = !event.currentTarget.contains(event.relatedTarget);\n        if (isOutside && isEmpty && !isEmojiPickerOpen) {\n            onCollapsedChange?.(true);\n        }\n    }, [\n        isEmojiPickerOpen,\n        isEmpty,\n        onBlur,\n        onCollapsedChange\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-root lb-composer lb-composer-form\", className),\n        dir: $.dir,\n        ...props,\n        ref: forwardedRef,\n        \"data-collapsed\": collapsed ? \"\" : void 0,\n        onFocus: handleFocus,\n        onBlur: handleBlur\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Editor, {\n        className: \"lb-composer-editor\",\n        onClick: handleEditorClick,\n        placeholder: $.COMPOSER_PLACEHOLDER,\n        defaultValue,\n        disabled: isDisabled,\n        autoFocus,\n        components: editorComponents,\n        dir: $.dir\n    }), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-composer-footer\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-composer-editor-actions\"\n    }, hasResolveMentionSuggestions && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerInsertMentionEditorAction, {\n        label: $.COMPOSER_INSERT_MENTION,\n        disabled: isDisabled\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerInsertEmojiEditorAction, {\n        label: $.COMPOSER_INSERT_EMOJI,\n        onPickerOpenChange: setEmojiPickerOpen,\n        disabled: isDisabled\n    })), showAttribution && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Attribution_mjs__WEBPACK_IMPORTED_MODULE_17__.Attribution, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-composer-actions\"\n    }, actions ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.ShortcutTooltip, {\n        content: $.COMPOSER_SEND,\n        shortcut: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_2__.ShortcutTooltipKey, {\n            name: \"enter\"\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Submit, {\n        disabled: isDisabled,\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        onMouseDown: preventDefault,\n        onClick: stopPropagation,\n        className: \"lb-composer-action\",\n        variant: \"primary\",\n        \"aria-label\": $.COMPOSER_SEND\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Send_mjs__WEBPACK_IMPORTED_MODULE_18__.SendIcon, null))))))));\n});\nconst Composer = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ threadId, commentId, metadata, onComposerSubmit, onFocus, ...props }, forwardedRef)=>{\n    const createThread = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_13__._useCreateThread)();\n    const createComment = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_13__.useCreateComment)();\n    const editComment = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_13__.useEditComment)();\n    const handleCommentSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((comment, event)=>{\n        onComposerSubmit?.(comment, event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if (commentId && threadId) {\n            editComment({\n                commentId,\n                threadId,\n                body: comment.body\n            });\n        } else if (threadId) {\n            createComment({\n                threadId,\n                body: comment.body\n            });\n        } else {\n            createThread({\n                body: comment.body,\n                metadata: metadata ?? {}\n            });\n        }\n    }, [\n        commentId,\n        createComment,\n        createThread,\n        editComment,\n        metadata,\n        onComposerSubmit,\n        threadId\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_19__.TooltipProvider, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Composer_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Form, {\n        onComposerSubmit: handleCommentSubmit,\n        onFocus,\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerWithContext, {\n        ...props,\n        ref: forwardedRef\n    })));\n});\n //# sourceMappingURL=Composer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL0NvbXBvc2VyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZKQSxTQUFBQSxrQ0FBQSxFQUEyQ0MsS0FBQSxFQUN6Q0MsU0FBQSxFQUNBQyxPQUFBLEVBQ0EsR0FBQUMsT0FFRjtJQUNFLFFBQUFDLGFBQUEsS0FBQUMsOEVBQUFBO0lBRUEsTUFBQUMsaUJBQUFDLGtEQUFBQSxDQUFBLENBQUFDO1FBQ0VBLE1BQUFGLGNBQUE7SUFBcUI7SUFHdkIsTUFBQUcsY0FBQUYsa0RBQUFBLENBQW9CLENBQUFDO1FBRWhCTixVQUFBTTtRQUVBLEtBQUFBLE1BQUFFLGtCQUFBO1lBQ0VGLE1BQUFHLGVBQUE7WUFDQVA7UUFBYztJQUNoQixHQUNGO1FBQUFBO1FBQUFGO0tBQUE7SUFJRixxQ0FBQVUsZ0RBQUEsQ0FBQUUsMERBQUFBLEVBQUE7UUFDR0MsU0FBQWY7SUFBaUIsaUNBQUFZLGdEQUFBLENBQUFJLHdEQUFBQSxFQUFBO1FBQ2ZmLFdBQUFnQixrRUFBQUEsQ0FBQSw2QkFBQWhCO1FBQzZEaUIsYUFBQVo7UUFDL0NKLFNBQUFPO1FBQ0osY0FBQVQ7UUFDRyxHQUFBRyxLQUFBO0lBQ1IsaUNBQUFTLGdEQUFBLENBQUFPLDJEQUFBQSxFQUFBO1FBRUhsQixXQUFBO0lBQXNCO0FBSS9CO0FBRUEsU0FBQW1CLGdDQUFBLEVBQXlDcEIsS0FBQSxFQUN2Q3FCLGtCQUFBLEVBQ0FwQixTQUFBLEVBQ0EsR0FBQUUsT0FFRjtJQUNFLFFBQUFtQixVQUFBLEtBQUFqQiw4RUFBQUE7SUFFQSxNQUFBQyxpQkFBQUMsa0RBQUFBLENBQUEsQ0FBQUM7UUFDRUEsTUFBQUYsY0FBQTtJQUFxQjtJQUd2QixxQ0FBQU0sZ0RBQUEsQ0FBQVcsa0VBQUFBLEVBQUE7UUFDR0MsZUFBQUY7UUFBMkJHLGNBQUFKO0lBQTBCLGlDQUFBVCxnREFBQSxDQUFBRSwwREFBQUEsRUFBQTtRQUNuREMsU0FBQWY7SUFBaUIsaUNBQUFZLGdEQUFBLENBQUFjLG1FQUFBQSxFQUFBO1FBQ2ZDLFNBQUE7SUFBMEIsaUNBQUFmLGdEQUFBLENBQUFJLHdEQUFBQSxFQUFBO1FBQ3hCZixXQUFBZ0Isa0VBQUFBLENBQUEsNkJBQUFoQjtRQUM2RGlCLGFBQUFaO1FBQy9DLGNBQUFOO1FBQ0QsR0FBQUcsS0FBQTtJQUNSLGlDQUFBUyxnREFBQSxDQUFBZ0IsdURBQUFBLEVBQUE7UUFFSDNCLFdBQUE7SUFBb0I7QUFNakM7QUFFQSxTQUFBNEIsZ0JBQUEsRUFBQUMsTUFBQTtJQUNFLHFDQUFBbEIsZ0RBQUEsQ0FBQW1CLG1FQUFBQSxFQUFBO1FBQ0c5QixXQUFBO0lBQW9DLEdBQUErQiwyRUFBQUEsRUFBQSw4QkFBQXBCLGdEQUFBLENBQUFxQixxREFBQUEsRUFBQTtRQUVsQ0g7SUFBSztBQUdaO0FBRUEsU0FBQUksMkJBQUEsRUFBb0NDLE9BQUEsRUFFcEM7SUFDRSxPQUFBQSxRQUFBQyxNQUFBLHFDQUFBeEIsZ0RBQUEsQ0FBQXlCLHVFQUFBQSxFQUFBO1FBQ0dwQyxXQUFBO0lBQXdDLGlDQUFBVyxnREFBQSxDQUFBMEIsMkVBQUFBLEVBQUE7UUFDdENyQyxXQUFBO0lBQTRDLEdBQUFrQyxRQUFBSSxHQUFBLEVBQUFULFNBQUEsOEJBQUFsQixnREFBQSxDQUFBNEIsK0VBQUFBLEVBQUE7WUFFeENDLEtBQUFYO1lBQ003QixXQUFBO1lBQ0t5QyxPQUFBWjtRQUNILGlDQUFBbEIsZ0RBQUEsQ0FBQStCLHlEQUFBQSxFQUFBO1lBRU5iO1lBQ0M3QixXQUFBO1FBQ1Usa0NBQUFXLGdEQUFBLENBQUFxQixxREFBQUEsRUFBQTtZQUVYSDtZQUNDN0IsV0FBQTtRQUNVO0FBT3hCO0FBRUEsU0FBQTJDLGFBQUEsRUFBQUMsSUFBQSxFQUFBQyxRQUFBO0lBQ0UscUNBQUFsQyxnREFBQSxDQUFBbUMsZ0VBQUFBLEVBQUE7UUFDR0Y7UUFBdUI1QyxXQUFBO0lBQXNCLEdBQUE2QztBQUlsRDtBQUVBLE1BQUFFLG1CQUFBO0lBQW1EQyxTQUFBcEI7SUFDeENxQixvQkFBQWhCO0lBQ1dpQixNQUFBUDtBQUV0QjtBQUVBLE1BQUFRLG9DQUFBQyxpREFBQUEsQ0FBNEIsR0FLeEJDLFlBQUEsRUFDRUMsUUFBQSxFQUNBQyxTQUFBLEVBQ0FDLFdBQUFDLG1CQUFBLEVBQ1dDLGdCQUFBLEVBQ1hDLG1CQUFBQywyQkFBQSxFQUNtQkMsT0FBQSxFQUNuQkMsU0FBQSxFQUNBQyxlQUFBLEVBQ0FDLE9BQUEsRUFDQUMsTUFBQSxFQUNBakUsU0FBQSxFQUNBLEdBQUFFLE9BQ0csRUFBQWdFO0lBSUwsTUFBQUMsU0FBQUMsNkRBQUFBO0lBQ0EsTUFBQUMsK0JBQUFGLE1BQUEsQ0FBQUcsd0RBQUFBLENBQUEsQ0FBQUMseUJBQUE7SUFFQSxNQUFBQyxPQUFBQyw0REFBQUE7SUFDQSxNQUFBQyxhQUFBQyw4Q0FBQUEsQ0FBbUIsSUFBQXJCLFlBQUEsQ0FBQWtCLE1BQUFJLFlBQ1E7UUFBQXRCO1FBQUFrQixNQUFBSTtLQUFBO0lBRzNCLFFBQUFDLE9BQUEsS0FBQXpFLDhFQUFBQTtJQUNBLE1BQUEwRSxJQUFBQyw2REFBQUEsQ0FBQWpCO0lBQ0EsT0FBQWtCLG1CQUFBQyxtQkFBQSxHQUFBQywrQ0FBQUEsQ0FBQTtJQUNBLE9BQUExQixXQUFBRyxrQkFBQSxHQUFBd0Isd0ZBQUFBLENBQXVDMUIsd0JBQUEsVUFBQUMscUJBQUEsaUJBQUFELHFCQUlqQ0csNkJBQ0pGO0lBSUYsTUFBQXJELGlCQUFBQyxrREFBQUEsQ0FBQSxDQUFBQztRQUNFQSxNQUFBRixjQUFBO0lBQXFCO0lBR3ZCLE1BQUFLLGtCQUFBSixrREFBQUEsQ0FBQSxDQUFBQztRQUNFQSxNQUFBRyxlQUFBO0lBQXNCO0lBR3hCLE1BQUEwRSxvQkFBQTlFLGtEQUFBQSxDQUEwQixDQUFBQztRQUV0QkEsTUFBQUcsZUFBQTtRQUVBLElBQUFtRSxTQUFBO1lBQ0VsQixvQkFBQTtRQUF5QjtJQUMzQixHQUNGO1FBQUFrQjtRQUFBbEI7S0FBQTtJQUlGLE1BQUEwQixjQUFBL0Usa0RBQUFBLENBQW9CLENBQUFDO1FBRWhCeUQsVUFBQXpEO1FBRUEsSUFBQUEsTUFBQUUsa0JBQUE7WUFDRTtRQUFBO1FBR0YsSUFBQW9FLFNBQUE7WUFDRWxCLG9CQUFBO1FBQXlCO0lBQzNCLEdBQ0Y7UUFBQWtCO1FBQUFsQjtRQUFBSztLQUFBO0lBSUYsTUFBQXNCLGFBQUFoRixrREFBQUEsQ0FBbUIsQ0FBQUM7UUFFZjBELFNBQUExRDtRQUVBLElBQUFBLE1BQUFFLGtCQUFBO1lBQ0U7UUFBQTtRQUdGLE1BQUE4RSxZQUFBLENBQUFoRixNQUFBaUYsYUFBQSxDQUFBQyxRQUFBLENBQUFsRixNQUFBbUYsYUFBQTtRQUVBLElBQUFILGFBQUFWLFdBQUEsQ0FBQUcsbUJBQUE7WUFDRXJCLG9CQUFBO1FBQXdCO0lBQzFCLEdBQ0Y7UUFBQXFCO1FBQUFIO1FBQUFaO1FBQUFOO0tBQUE7SUFJRixxQ0FBQWhELGdEQUFBO1FBQ0dYLFdBQUFnQixrRUFBQUEsQ0FDWSx3Q0FDVGhCO1FBRUYyRixLQUFBYixFQUFBYSxHQUFBO1FBQ08sR0FBQXpGLEtBQUE7UUFDSDBGLEtBQUExQjtRQUNDLGtCQUFBVixZQUFBO1FBQzRCUSxTQUFBcUI7UUFDeEJwQixRQUFBcUI7SUFDRCxpQ0FBQTNFLGdEQUFBLENBQUFrRixrRUFBQUEsRUFBQTtRQUVQN0YsV0FBQTtRQUNXQyxTQUFBbUY7UUFDRFUsYUFBQWhCLEVBQUFpQixvQkFBQTtRQUNNMUM7UUFDZkMsVUFBQW9CO1FBQ1VuQjtRQUNWeUMsWUFBQWpEO1FBQ1k0QyxLQUFBYixFQUFBYSxHQUFBO0lBQ0wsS0FBQW5DLGFBQUEsOEJBQUE3QyxnREFBQTtRQUdOWCxXQUFBO0lBQWMsaUNBQUFXLGdEQUFBO1FBQ1pYLFdBQUE7SUFBYyxHQUFBcUUsZ0NBQUEsOEJBQUExRCxnREFBQSxDQUFBYixtQ0FBQTtRQUVWQyxPQUFBK0UsRUFBQW1CLHVCQUFBO1FBQ1UzQyxVQUFBb0I7SUFDQyxrQ0FBQS9ELGdEQUFBLENBQUFRLGlDQUFBO1FBR2JwQixPQUFBK0UsRUFBQW9CLHFCQUFBO1FBQ1U5RSxvQkFBQTZEO1FBQ1czQixVQUFBb0I7SUFDVixLQUFBWCxtQkFBQSw4QkFBQXBELGdEQUFBLENBQUF3RixtRUFBQUEsRUFBQSxxQ0FBQXhGLGdEQUFBO1FBSWJYLFdBQUE7SUFBYyxHQUFBNkQsV0FBQSw4QkFBQWxELGdEQUFBLENBQUFBLDJDQUFBLHNDQUFBQSxnREFBQSxDQUFBMEYsa0VBQUFBLEVBQUE7UUFHUnZGLFNBQUFnRSxFQUFBd0IsYUFBQTtRQUNZQyxVQUFBLDhCQUFBNUYsZ0RBQUEsQ0FBQTZGLHFFQUFBQSxFQUFBO1lBQ0FDLE1BQUE7UUFBd0I7SUFBUSxpQ0FBQTlGLGdEQUFBLENBQUErRixrRUFBQUEsRUFBQTtRQUUxQ3BELFVBQUFvQjtRQUFtQ2hELFNBQUE7SUFBbUIsaUNBQUFmLGdEQUFBLENBQUFJLHdEQUFBQSxFQUFBO1FBQ3BERSxhQUFBWjtRQUNjSixTQUFBUztRQUNKVixXQUFBO1FBQ0MyRyxTQUFBO1FBQ0YsY0FBQTdCLEVBQUF3QixhQUFBO0lBQ00saUNBQUEzRixnREFBQSxDQUFBaUcsc0RBQUFBLEVBQUE7QUFXaEM7QUFXQyxNQUFBQyx5QkFBQXpELGlEQUFBQSxDQUFpQixHQUVwQjBELFFBQUEsRUFDRUMsU0FBQSxFQUNBQyxRQUFBLEVBQ0FDLGdCQUFBLEVBQ0FqRCxPQUFBLEVBQ0EsR0FBQTlELE9BQ0csRUFBQWdFO0lBSUwsTUFBQWdELGVBQUFDLG9FQUFBQTtJQUNBLE1BQUFDLGdCQUFBQyxvRUFBQUE7SUFDQSxNQUFBQyxjQUFBQyxrRUFBQUE7SUFFQSxNQUFBQyxzQkFBQWxILGtEQUFBQSxDQUE0QixDQUFBbUgsU0FBQWxIO1FBRXhCMEcsbUJBQUFRLFNBQUFsSDtRQUVBLElBQUFBLE1BQUFFLGtCQUFBO1lBQ0U7UUFBQTtRQUdGLElBQUFzRyxhQUFBRCxVQUFBO1lBQ0VRLFlBQUE7Z0JBQVlQO2dCQUNWRDtnQkFDQVksTUFBQUQsUUFBQUMsSUFBQTtZQUNjO1FBQ2YsV0FBQVosVUFBQTtZQUVETSxjQUFBO2dCQUFjTjtnQkFDWlksTUFBQUQsUUFBQUMsSUFBQTtZQUNjO1FBQ2Y7WUFFRFIsYUFBQTtnQkFBYVEsTUFBQUQsUUFBQUMsSUFBQTtnQkFDR1YsVUFBQUEsWUFBQTtZQUNTO1FBQ3hCO0lBQ0gsR0FDRjtRQUNBRDtRQUNFSztRQUNBRjtRQUNBSTtRQUNBTjtRQUNBQztRQUNBSDtLQUNBO0lBSUoscUNBQUFuRyxnREFBQSxDQUFBZ0gscUVBQUFBLEVBQUEsb0NBQUFoSCxnREFBQSxDQUFBaUgsZ0VBQUFBLEVBQUE7UUFFS1gsa0JBQUFPO1FBQ21CeEQ7UUFDbEJ0QyxTQUFBO0lBQ08saUNBQUFmLGdEQUFBLENBQUF3QyxxQkFBQTtRQUVOLEdBQUFqRCxLQUFBO1FBQXdCMEYsS0FBQTFCO0lBQVk7QUFFekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29tcG9zZXIudHN4P2YxMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB0eXBlIHsgQmFzZU1ldGFkYXRhLCBETSB9IGZyb20gXCJAbGl2ZWJsb2Nrcy9jb3JlXCI7XG5pbXBvcnQgeyBrSW50ZXJuYWwgfSBmcm9tIFwiQGxpdmVibG9ja3MvY29yZVwiO1xuaW1wb3J0IHtcbiAgdXNlQ2xpZW50LFxuICB1c2VDcmVhdGVDb21tZW50LFxuICB1c2VDcmVhdGVUaHJlYWQsXG4gIHVzZUVkaXRDb21tZW50LFxuICB1c2VTZWxmLFxufSBmcm9tIFwiQGxpdmVibG9ja3MvcmVhY3RcIjtcbmltcG9ydCB0eXBlIHtcbiAgQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmLFxuICBGb2N1c0V2ZW50LFxuICBGb3JtRXZlbnQsXG4gIEZvcndhcmRlZFJlZixcbiAgTW91c2VFdmVudCxcbiAgUmVhY3ROb2RlLFxuICBSZWZBdHRyaWJ1dGVzLFxuICBTeW50aGV0aWNFdmVudCxcbn0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IEVtb2ppSWNvbiB9IGZyb20gXCIuLi9pY29ucy9FbW9qaVwiO1xuaW1wb3J0IHsgTWVudGlvbkljb24gfSBmcm9tIFwiLi4vaWNvbnMvTWVudGlvblwiO1xuaW1wb3J0IHsgU2VuZEljb24gfSBmcm9tIFwiLi4vaWNvbnMvU2VuZFwiO1xuaW1wb3J0IHR5cGUgeyBDb21wb3Nlck92ZXJyaWRlcywgR2xvYmFsT3ZlcnJpZGVzIH0gZnJvbSBcIi4uL292ZXJyaWRlc1wiO1xuaW1wb3J0IHsgdXNlT3ZlcnJpZGVzIH0gZnJvbSBcIi4uL292ZXJyaWRlc1wiO1xuaW1wb3J0ICogYXMgQ29tcG9zZXJQcmltaXRpdmUgZnJvbSBcIi4uL3ByaW1pdGl2ZXMvQ29tcG9zZXJcIjtcbmltcG9ydCB7IHVzZUNvbXBvc2VyIH0gZnJvbSBcIi4uL3ByaW1pdGl2ZXMvQ29tcG9zZXIvY29udGV4dHNcIjtcbmltcG9ydCB0eXBlIHtcbiAgQ29tcG9zZXJFZGl0b3JDb21wb25lbnRzLFxuICBDb21wb3NlckVkaXRvckxpbmtQcm9wcyxcbiAgQ29tcG9zZXJFZGl0b3JNZW50aW9uUHJvcHMsXG4gIENvbXBvc2VyRWRpdG9yTWVudGlvblN1Z2dlc3Rpb25zUHJvcHMsXG4gIENvbXBvc2VyRWRpdG9yUHJvcHMsXG4gIENvbXBvc2VyU3VibWl0Q29tbWVudCxcbn0gZnJvbSBcIi4uL3ByaW1pdGl2ZXMvQ29tcG9zZXIvdHlwZXNcIjtcbmltcG9ydCB7IE1FTlRJT05fQ0hBUkFDVEVSIH0gZnJvbSBcIi4uL3NsYXRlL3BsdWdpbnMvbWVudGlvbnNcIjtcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwiLi4vdXRpbHMvY2xhc3MtbmFtZXNcIjtcbmltcG9ydCB7IHVzZUNvbnRyb2xsYWJsZVN0YXRlIH0gZnJvbSBcIi4uL3V0aWxzL3VzZS1jb250cm9sbGFibGUtc3RhdGVcIjtcbmltcG9ydCB7IEF0dHJpYnV0aW9uIH0gZnJvbSBcIi4vaW50ZXJuYWwvQXR0cmlidXRpb25cIjtcbmltcG9ydCB7IEF2YXRhciB9IGZyb20gXCIuL2ludGVybmFsL0F2YXRhclwiO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4vaW50ZXJuYWwvQnV0dG9uXCI7XG5pbXBvcnQgdHlwZSB7IEVtb2ppUGlja2VyUHJvcHMgfSBmcm9tIFwiLi9pbnRlcm5hbC9FbW9qaVBpY2tlclwiO1xuaW1wb3J0IHsgRW1vamlQaWNrZXIsIEVtb2ppUGlja2VyVHJpZ2dlciB9IGZyb20gXCIuL2ludGVybmFsL0Vtb2ppUGlja2VyXCI7XG5pbXBvcnQge1xuICBTaG9ydGN1dFRvb2x0aXAsXG4gIFNob3J0Y3V0VG9vbHRpcEtleSxcbiAgVG9vbHRpcCxcbiAgVG9vbHRpcFByb3ZpZGVyLFxufSBmcm9tIFwiLi9pbnRlcm5hbC9Ub29sdGlwXCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4vaW50ZXJuYWwvVXNlclwiO1xuXG5pbnRlcmZhY2UgRWRpdG9yQWN0aW9uUHJvcHMgZXh0ZW5kcyBDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8XCJidXR0b25cIj4ge1xuICBsYWJlbDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRW1vamlFZGl0b3JBY3Rpb25Qcm9wcyBleHRlbmRzIEVkaXRvckFjdGlvblByb3BzIHtcbiAgb25QaWNrZXJPcGVuQ2hhbmdlPzogRW1vamlQaWNrZXJQcm9wc1tcIm9uT3BlbkNoYW5nZVwiXTtcbn1cblxudHlwZSBDb21wb3NlckNyZWF0ZVRocmVhZFByb3BzPE0gZXh0ZW5kcyBCYXNlTWV0YWRhdGE+ID0ge1xuICB0aHJlYWRJZD86IG5ldmVyO1xuICBjb21tZW50SWQ/OiBuZXZlcjtcblxuICAvKipcbiAgICogVGhlIG1ldGFkYXRhIG9mIHRoZSB0aHJlYWQgdG8gY3JlYXRlLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBNO1xufTtcblxudHlwZSBDb21wb3NlckNyZWF0ZUNvbW1lbnRQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdGhyZWFkIHRvIHJlcGx5IHRvLlxuICAgKi9cbiAgdGhyZWFkSWQ6IHN0cmluZztcbiAgY29tbWVudElkPzogbmV2ZXI7XG4gIG1ldGFkYXRhPzogbmV2ZXI7XG59O1xuXG50eXBlIENvbXBvc2VyRWRpdENvbW1lbnRQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdGhyZWFkIHRvIGVkaXQgYSBjb21tZW50IGluLlxuICAgKi9cbiAgdGhyZWFkSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBjb21tZW50IHRvIGVkaXQuXG4gICAqL1xuICBjb21tZW50SWQ6IHN0cmluZztcbiAgbWV0YWRhdGE/OiBuZXZlcjtcbn07XG5cbmV4cG9ydCB0eXBlIENvbXBvc2VyUHJvcHM8TSBleHRlbmRzIEJhc2VNZXRhZGF0YSA9IERNPiA9IE9taXQ8XG4gIENvbXBvbmVudFByb3BzV2l0aG91dFJlZjxcImZvcm1cIj4sXG4gIFwiZGVmYXVsdFZhbHVlXCJcbj4gJlxuICAoXG4gICAgfCBDb21wb3NlckNyZWF0ZVRocmVhZFByb3BzPE0+XG4gICAgfCBDb21wb3NlckNyZWF0ZUNvbW1lbnRQcm9wc1xuICAgIHwgQ29tcG9zZXJFZGl0Q29tbWVudFByb3BzXG4gICkgJiB7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IGhhbmRsZXIgY2FsbGVkIHdoZW4gdGhlIGNvbXBvc2VyIGlzIHN1Ym1pdHRlZC5cbiAgICAgKi9cbiAgICBvbkNvbXBvc2VyU3VibWl0PzogKFxuICAgICAgY29tbWVudDogQ29tcG9zZXJTdWJtaXRDb21tZW50LFxuICAgICAgZXZlbnQ6IEZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+XG4gICAgKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb3NlcidzIGluaXRpYWwgdmFsdWUuXG4gICAgICovXG4gICAgZGVmYXVsdFZhbHVlPzogQ29tcG9zZXJFZGl0b3JQcm9wc1tcImRlZmF1bHRWYWx1ZVwiXTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNvbXBvc2VyIGlzIGNvbGxhcHNlZC4gU2V0dGluZyBhIHZhbHVlIHdpbGwgbWFrZSB0aGUgY29tcG9zZXIgY29udHJvbGxlZC5cbiAgICAgKi9cbiAgICBjb2xsYXBzZWQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IGhhbmRsZXIgY2FsbGVkIHdoZW4gdGhlIGNvbGxhcHNlZCBzdGF0ZSBvZiB0aGUgY29tcG9zZXIgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBvbkNvbGxhcHNlZENoYW5nZT86IChjb2xsYXBzZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjb21wb3NlciBpcyBpbml0aWFsbHkgY29sbGFwc2VkLiBTZXR0aW5nIGEgdmFsdWUgd2lsbCBtYWtlIHRoZSBjb21wb3NlciB1bmNvbnRyb2xsZWQuXG4gICAgICovXG4gICAgZGVmYXVsdENvbGxhcHNlZD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjb21wb3NlciBpcyBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZD86IENvbXBvc2VyRWRpdG9yUHJvcHNbXCJkaXNhYmxlZFwiXTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gZm9jdXMgdGhlIGNvbXBvc2VyIG9uIG1vdW50LlxuICAgICAqL1xuICAgIGF1dG9Gb2N1cz86IENvbXBvc2VyRWRpdG9yUHJvcHNbXCJhdXRvRm9jdXNcIl07XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGUgY29tcG9uZW50J3Mgc3RyaW5ncy5cbiAgICAgKi9cbiAgICBvdmVycmlkZXM/OiBQYXJ0aWFsPEdsb2JhbE92ZXJyaWRlcyAmIENvbXBvc2VyT3ZlcnJpZGVzPjtcblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGFjdGlvbnM/OiBSZWFjdE5vZGU7XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBzaG93QXR0cmlidXRpb24/OiBib29sZWFuO1xuICB9O1xuXG5mdW5jdGlvbiBDb21wb3Nlckluc2VydE1lbnRpb25FZGl0b3JBY3Rpb24oe1xuICBsYWJlbCxcbiAgY2xhc3NOYW1lLFxuICBvbkNsaWNrLFxuICAuLi5wcm9wc1xufTogRWRpdG9yQWN0aW9uUHJvcHMpIHtcbiAgY29uc3QgeyBjcmVhdGVNZW50aW9uIH0gPSB1c2VDb21wb3NlcigpO1xuXG4gIGNvbnN0IHByZXZlbnREZWZhdWx0ID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBTeW50aGV0aWNFdmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudDogTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHtcbiAgICAgIG9uQ2xpY2s/LihldmVudCk7XG5cbiAgICAgIGlmICghZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGNyZWF0ZU1lbnRpb24oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtjcmVhdGVNZW50aW9uLCBvbkNsaWNrXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPFRvb2x0aXAgY29udGVudD17bGFiZWx9PlxuICAgICAgPEJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJsYi1jb21wb3Nlci1lZGl0b3ItYWN0aW9uXCIsIGNsYXNzTmFtZSl9XG4gICAgICAgIG9uTW91c2VEb3duPXtwcmV2ZW50RGVmYXVsdH1cbiAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxNZW50aW9uSWNvbiBjbGFzc05hbWU9XCJsYi1idXR0b24taWNvblwiIC8+XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L1Rvb2x0aXA+XG4gICk7XG59XG5cbmZ1bmN0aW9uIENvbXBvc2VySW5zZXJ0RW1vamlFZGl0b3JBY3Rpb24oe1xuICBsYWJlbCxcbiAgb25QaWNrZXJPcGVuQ2hhbmdlLFxuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBFbW9qaUVkaXRvckFjdGlvblByb3BzKSB7XG4gIGNvbnN0IHsgaW5zZXJ0VGV4dCB9ID0gdXNlQ29tcG9zZXIoKTtcblxuICBjb25zdCBwcmV2ZW50RGVmYXVsdCA9IHVzZUNhbGxiYWNrKChldmVudDogU3ludGhldGljRXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RW1vamlQaWNrZXIgb25FbW9qaVNlbGVjdD17aW5zZXJ0VGV4dH0gb25PcGVuQ2hhbmdlPXtvblBpY2tlck9wZW5DaGFuZ2V9PlxuICAgICAgPFRvb2x0aXAgY29udGVudD17bGFiZWx9PlxuICAgICAgICA8RW1vamlQaWNrZXJUcmlnZ2VyIGFzQ2hpbGQ+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibGItY29tcG9zZXItZWRpdG9yLWFjdGlvblwiLCBjbGFzc05hbWUpfVxuICAgICAgICAgICAgb25Nb3VzZURvd249e3ByZXZlbnREZWZhdWx0fVxuICAgICAgICAgICAgYXJpYS1sYWJlbD17bGFiZWx9XG4gICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEVtb2ppSWNvbiBjbGFzc05hbWU9XCJsYi1idXR0b24taWNvblwiIC8+XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvRW1vamlQaWNrZXJUcmlnZ2VyPlxuICAgICAgPC9Ub29sdGlwPlxuICAgIDwvRW1vamlQaWNrZXI+XG4gICk7XG59XG5cbmZ1bmN0aW9uIENvbXBvc2VyTWVudGlvbih7IHVzZXJJZCB9OiBDb21wb3NlckVkaXRvck1lbnRpb25Qcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxDb21wb3NlclByaW1pdGl2ZS5NZW50aW9uIGNsYXNzTmFtZT1cImxiLWNvbXBvc2VyLW1lbnRpb25cIj5cbiAgICAgIHtNRU5USU9OX0NIQVJBQ1RFUn1cbiAgICAgIDxVc2VyIHVzZXJJZD17dXNlcklkfSAvPlxuICAgIDwvQ29tcG9zZXJQcmltaXRpdmUuTWVudGlvbj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gQ29tcG9zZXJNZW50aW9uU3VnZ2VzdGlvbnMoe1xuICB1c2VySWRzLFxufTogQ29tcG9zZXJFZGl0b3JNZW50aW9uU3VnZ2VzdGlvbnNQcm9wcykge1xuICByZXR1cm4gdXNlcklkcy5sZW5ndGggPiAwID8gKFxuICAgIDxDb21wb3NlclByaW1pdGl2ZS5TdWdnZXN0aW9ucyBjbGFzc05hbWU9XCJsYi1yb290IGxiLXBvcnRhbCBsYi1lbGV2YXRpb24gbGItY29tcG9zZXItc3VnZ2VzdGlvbnMgbGItY29tcG9zZXItbWVudGlvbi1zdWdnZXN0aW9uc1wiPlxuICAgICAgPENvbXBvc2VyUHJpbWl0aXZlLlN1Z2dlc3Rpb25zTGlzdCBjbGFzc05hbWU9XCJsYi1jb21wb3Nlci1zdWdnZXN0aW9ucy1saXN0IGxiLWNvbXBvc2VyLW1lbnRpb24tc3VnZ2VzdGlvbnMtbGlzdFwiPlxuICAgICAgICB7dXNlcklkcy5tYXAoKHVzZXJJZCkgPT4gKFxuICAgICAgICAgIDxDb21wb3NlclByaW1pdGl2ZS5TdWdnZXN0aW9uc0xpc3RJdGVtXG4gICAgICAgICAgICBrZXk9e3VzZXJJZH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImxiLWNvbXBvc2VyLXN1Z2dlc3Rpb25zLWxpc3QtaXRlbSBsYi1jb21wb3Nlci1tZW50aW9uLXN1Z2dlc3Rpb25cIlxuICAgICAgICAgICAgdmFsdWU9e3VzZXJJZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8QXZhdGFyXG4gICAgICAgICAgICAgIHVzZXJJZD17dXNlcklkfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsYi1jb21wb3Nlci1tZW50aW9uLXN1Z2dlc3Rpb24tYXZhdGFyXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VXNlclxuICAgICAgICAgICAgICB1c2VySWQ9e3VzZXJJZH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibGItY29tcG9zZXItbWVudGlvbi1zdWdnZXN0aW9uLXVzZXJcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0NvbXBvc2VyUHJpbWl0aXZlLlN1Z2dlc3Rpb25zTGlzdEl0ZW0+XG4gICAgICAgICkpfVxuICAgICAgPC9Db21wb3NlclByaW1pdGl2ZS5TdWdnZXN0aW9uc0xpc3Q+XG4gICAgPC9Db21wb3NlclByaW1pdGl2ZS5TdWdnZXN0aW9ucz5cbiAgKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIENvbXBvc2VyTGluayh7IGhyZWYsIGNoaWxkcmVuIH06IENvbXBvc2VyRWRpdG9yTGlua1Byb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPENvbXBvc2VyUHJpbWl0aXZlLkxpbmsgaHJlZj17aHJlZn0gY2xhc3NOYW1lPVwibGItY29tcG9zZXItbGlua1wiPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQ29tcG9zZXJQcmltaXRpdmUuTGluaz5cbiAgKTtcbn1cblxuY29uc3QgZWRpdG9yQ29tcG9uZW50czogQ29tcG9zZXJFZGl0b3JDb21wb25lbnRzID0ge1xuICBNZW50aW9uOiBDb21wb3Nlck1lbnRpb24sXG4gIE1lbnRpb25TdWdnZXN0aW9uczogQ29tcG9zZXJNZW50aW9uU3VnZ2VzdGlvbnMsXG4gIExpbms6IENvbXBvc2VyTGluayxcbn07XG5cbmNvbnN0IENvbXBvc2VyV2l0aENvbnRleHQgPSBmb3J3YXJkUmVmPFxuICBIVE1MRm9ybUVsZW1lbnQsXG4gIE9taXQ8Q29tcG9zZXJQcm9wcywgXCJ0aHJlYWRJZFwiIHwgXCJjb21tZW50SWRcIiB8IFwib25Db21wb3NlclN1Ym1pdFwiPlxuPihcbiAgKFxuICAgIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgY29sbGFwc2VkOiBjb250cm9sbGVkQ29sbGFwc2VkLFxuICAgICAgZGVmYXVsdENvbGxhcHNlZCxcbiAgICAgIG9uQ29sbGFwc2VkQ2hhbmdlOiBjb250cm9sbGVkT25Db2xsYXBzZWRDaGFuZ2UsXG4gICAgICBhY3Rpb25zLFxuICAgICAgb3ZlcnJpZGVzLFxuICAgICAgc2hvd0F0dHJpYnV0aW9uLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uQmx1cixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIC4uLnByb3BzXG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gdXNlQ2xpZW50KCk7XG4gICAgY29uc3QgaGFzUmVzb2x2ZU1lbnRpb25TdWdnZXN0aW9ucyA9XG4gICAgICBjbGllbnRba0ludGVybmFsXS5yZXNvbHZlTWVudGlvblN1Z2dlc3Rpb25zICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgc2VsZiA9IHVzZVNlbGYoKTtcbiAgICBjb25zdCBpc0Rpc2FibGVkID0gdXNlTWVtbyhcbiAgICAgICgpID0+IGRpc2FibGVkIHx8ICFzZWxmPy5jYW5Db21tZW50LFxuICAgICAgW2Rpc2FibGVkLCBzZWxmPy5jYW5Db21tZW50XVxuICAgICk7XG4gICAgY29uc3QgeyBpc0VtcHR5IH0gPSB1c2VDb21wb3NlcigpO1xuICAgIGNvbnN0ICQgPSB1c2VPdmVycmlkZXMob3ZlcnJpZGVzKTtcbiAgICBjb25zdCBbaXNFbW9qaVBpY2tlck9wZW4sIHNldEVtb2ppUGlja2VyT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2NvbGxhcHNlZCwgb25Db2xsYXBzZWRDaGFuZ2VdID0gdXNlQ29udHJvbGxhYmxlU3RhdGUoXG4gICAgICAvLyBJZiB0aGUgY29tcG9zZXIgaXMgbmVpdGhlciBjb250cm9sbGVkIG5vciB1bmNvbnRyb2xsZWQsIGl0IGRlZmF1bHRzIHRvIGNvbnRyb2xsZWQgYXMgdW5jb2xsYXBzZWQuXG4gICAgICBjb250cm9sbGVkQ29sbGFwc2VkID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdENvbGxhcHNlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gZmFsc2VcbiAgICAgICAgOiBjb250cm9sbGVkQ29sbGFwc2VkLFxuICAgICAgY29udHJvbGxlZE9uQ29sbGFwc2VkQ2hhbmdlLFxuICAgICAgZGVmYXVsdENvbGxhcHNlZFxuICAgICk7XG5cbiAgICBjb25zdCBwcmV2ZW50RGVmYXVsdCA9IHVzZUNhbGxiYWNrKChldmVudDogU3ludGhldGljRXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3Qgc3RvcFByb3BhZ2F0aW9uID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBTeW50aGV0aWNFdmVudCkgPT4ge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgaGFuZGxlRWRpdG9yQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgIChldmVudDogTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgaWYgKGlzRW1wdHkpIHtcbiAgICAgICAgICBvbkNvbGxhcHNlZENoYW5nZT8uKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtpc0VtcHR5LCBvbkNvbGxhcHNlZENoYW5nZV1cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlRm9jdXMgPSB1c2VDYWxsYmFjayhcbiAgICAgIChldmVudDogRm9jdXNFdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiB7XG4gICAgICAgIG9uRm9jdXM/LihldmVudCk7XG5cbiAgICAgICAgaWYgKGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRW1wdHkpIHtcbiAgICAgICAgICBvbkNvbGxhcHNlZENoYW5nZT8uKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtpc0VtcHR5LCBvbkNvbGxhcHNlZENoYW5nZSwgb25Gb2N1c11cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZUNhbGxiYWNrKFxuICAgICAgKGV2ZW50OiBGb2N1c0V2ZW50PEhUTUxGb3JtRWxlbWVudD4pID0+IHtcbiAgICAgICAgb25CbHVyPy4oZXZlbnQpO1xuXG4gICAgICAgIGlmIChldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzT3V0c2lkZSA9ICFldmVudC5jdXJyZW50VGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICAgIGlmIChpc091dHNpZGUgJiYgaXNFbXB0eSAmJiAhaXNFbW9qaVBpY2tlck9wZW4pIHtcbiAgICAgICAgICBvbkNvbGxhcHNlZENoYW5nZT8uKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2lzRW1vamlQaWNrZXJPcGVuLCBpc0VtcHR5LCBvbkJsdXIsIG9uQ29sbGFwc2VkQ2hhbmdlXVxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgIFwibGItcm9vdCBsYi1jb21wb3NlciBsYi1jb21wb3Nlci1mb3JtXCIsXG4gICAgICAgICAgY2xhc3NOYW1lXG4gICAgICAgICl9XG4gICAgICAgIGRpcj17JC5kaXJ9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICAgIGRhdGEtY29sbGFwc2VkPXtjb2xsYXBzZWQgPyBcIlwiIDogdW5kZWZpbmVkfVxuICAgICAgICBvbkZvY3VzPXtoYW5kbGVGb2N1c31cbiAgICAgICAgb25CbHVyPXtoYW5kbGVCbHVyfVxuICAgICAgPlxuICAgICAgICA8Q29tcG9zZXJQcmltaXRpdmUuRWRpdG9yXG4gICAgICAgICAgY2xhc3NOYW1lPVwibGItY29tcG9zZXItZWRpdG9yXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVFZGl0b3JDbGlja31cbiAgICAgICAgICBwbGFjZWhvbGRlcj17JC5DT01QT1NFUl9QTEFDRUhPTERFUn1cbiAgICAgICAgICBkZWZhdWx0VmFsdWU9e2RlZmF1bHRWYWx1ZX1cbiAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgICBhdXRvRm9jdXM9e2F1dG9Gb2N1c31cbiAgICAgICAgICBjb21wb25lbnRzPXtlZGl0b3JDb21wb25lbnRzfVxuICAgICAgICAgIGRpcj17JC5kaXJ9XG4gICAgICAgIC8+XG4gICAgICAgIHshY29sbGFwc2VkICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxiLWNvbXBvc2VyLWZvb3RlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsYi1jb21wb3Nlci1lZGl0b3ItYWN0aW9uc1wiPlxuICAgICAgICAgICAgICB7aGFzUmVzb2x2ZU1lbnRpb25TdWdnZXN0aW9ucyAmJiAoXG4gICAgICAgICAgICAgICAgPENvbXBvc2VySW5zZXJ0TWVudGlvbkVkaXRvckFjdGlvblxuICAgICAgICAgICAgICAgICAgbGFiZWw9eyQuQ09NUE9TRVJfSU5TRVJUX01FTlRJT059XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8Q29tcG9zZXJJbnNlcnRFbW9qaUVkaXRvckFjdGlvblxuICAgICAgICAgICAgICAgIGxhYmVsPXskLkNPTVBPU0VSX0lOU0VSVF9FTU9KSX1cbiAgICAgICAgICAgICAgICBvblBpY2tlck9wZW5DaGFuZ2U9e3NldEVtb2ppUGlja2VyT3Blbn1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge3Nob3dBdHRyaWJ1dGlvbiAmJiA8QXR0cmlidXRpb24gLz59XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxiLWNvbXBvc2VyLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAge2FjdGlvbnMgPz8gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8U2hvcnRjdXRUb29sdGlwXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9eyQuQ09NUE9TRVJfU0VORH1cbiAgICAgICAgICAgICAgICAgICAgc2hvcnRjdXQ9ezxTaG9ydGN1dFRvb2x0aXBLZXkgbmFtZT1cImVudGVyXCIgLz59XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxDb21wb3NlclByaW1pdGl2ZS5TdWJtaXQgZGlzYWJsZWQ9e2lzRGlzYWJsZWR9IGFzQ2hpbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZURvd249e3ByZXZlbnREZWZhdWx0fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17c3RvcFByb3BhZ2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibGItY29tcG9zZXItYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9eyQuQ09NUE9TRVJfU0VORH1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VuZEljb24gLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9Db21wb3NlclByaW1pdGl2ZS5TdWJtaXQ+XG4gICAgICAgICAgICAgICAgICA8L1Nob3J0Y3V0VG9vbHRpcD5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbik7XG5cbi8qKlxuICogRGlzcGxheXMgYSBjb21wb3NlciB0byBjcmVhdGUgY29tbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxDb21wb3NlciAvPlxuICovXG5leHBvcnQgY29uc3QgQ29tcG9zZXIgPSBmb3J3YXJkUmVmKFxuICA8TSBleHRlbmRzIEJhc2VNZXRhZGF0YSA9IERNPihcbiAgICB7XG4gICAgICB0aHJlYWRJZCxcbiAgICAgIGNvbW1lbnRJZCxcbiAgICAgIG1ldGFkYXRhLFxuICAgICAgb25Db21wb3NlclN1Ym1pdCxcbiAgICAgIG9uRm9jdXMsXG4gICAgICAuLi5wcm9wc1xuICAgIH06IENvbXBvc2VyUHJvcHM8TT4sXG4gICAgZm9yd2FyZGVkUmVmOiBGb3J3YXJkZWRSZWY8SFRNTEZvcm1FbGVtZW50PlxuICApID0+IHtcbiAgICBjb25zdCBjcmVhdGVUaHJlYWQgPSB1c2VDcmVhdGVUaHJlYWQoKTtcbiAgICBjb25zdCBjcmVhdGVDb21tZW50ID0gdXNlQ3JlYXRlQ29tbWVudCgpO1xuICAgIGNvbnN0IGVkaXRDb21tZW50ID0gdXNlRWRpdENvbW1lbnQoKTtcblxuICAgIGNvbnN0IGhhbmRsZUNvbW1lbnRTdWJtaXQgPSB1c2VDYWxsYmFjayhcbiAgICAgIChjb21tZW50OiBDb21wb3NlclN1Ym1pdENvbW1lbnQsIGV2ZW50OiBGb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4ge1xuICAgICAgICBvbkNvbXBvc2VyU3VibWl0Py4oY29tbWVudCwgZXZlbnQpO1xuXG4gICAgICAgIGlmIChldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb21tZW50SWQgJiYgdGhyZWFkSWQpIHtcbiAgICAgICAgICBlZGl0Q29tbWVudCh7XG4gICAgICAgICAgICBjb21tZW50SWQsXG4gICAgICAgICAgICB0aHJlYWRJZCxcbiAgICAgICAgICAgIGJvZHk6IGNvbW1lbnQuYm9keSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aHJlYWRJZCkge1xuICAgICAgICAgIGNyZWF0ZUNvbW1lbnQoe1xuICAgICAgICAgICAgdGhyZWFkSWQsXG4gICAgICAgICAgICBib2R5OiBjb21tZW50LmJvZHksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3JlYXRlVGhyZWFkKHtcbiAgICAgICAgICAgIGJvZHk6IGNvbW1lbnQuYm9keSxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YSA/PyB7fSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgY29tbWVudElkLFxuICAgICAgICBjcmVhdGVDb21tZW50LFxuICAgICAgICBjcmVhdGVUaHJlYWQsXG4gICAgICAgIGVkaXRDb21tZW50LFxuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgb25Db21wb3NlclN1Ym1pdCxcbiAgICAgICAgdGhyZWFkSWQsXG4gICAgICBdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcFByb3ZpZGVyPlxuICAgICAgICA8Q29tcG9zZXJQcmltaXRpdmUuRm9ybVxuICAgICAgICAgIG9uQ29tcG9zZXJTdWJtaXQ9e2hhbmRsZUNvbW1lbnRTdWJtaXR9XG4gICAgICAgICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICAgICAgICBhc0NoaWxkXG4gICAgICAgID5cbiAgICAgICAgICA8Q29tcG9zZXJXaXRoQ29udGV4dCB7Li4ucHJvcHN9IHJlZj17Zm9yd2FyZGVkUmVmfSAvPlxuICAgICAgICA8L0NvbXBvc2VyUHJpbWl0aXZlLkZvcm0+XG4gICAgICA8L1Rvb2x0aXBQcm92aWRlcj5cbiAgICApO1xuICB9XG4pIGFzIDxNIGV4dGVuZHMgQmFzZU1ldGFkYXRhID0gRE0+KFxuICBwcm9wczogQ29tcG9zZXJQcm9wczxNPiAmIFJlZkF0dHJpYnV0ZXM8SFRNTEZvcm1FbGVtZW50PlxuKSA9PiBKU1guRWxlbWVudDtcbiJdLCJuYW1lcyI6WyJDb21wb3Nlckluc2VydE1lbnRpb25FZGl0b3JBY3Rpb24iLCJsYWJlbCIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJwcm9wcyIsImNyZWF0ZU1lbnRpb24iLCJ1c2VDb21wb3NlciIsInByZXZlbnREZWZhdWx0IiwidXNlQ2FsbGJhY2siLCJldmVudCIsImhhbmRsZUNsaWNrIiwiaXNEZWZhdWx0UHJldmVudGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiUmVhY3RfX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiVG9vbHRpcCIsImNvbnRlbnQiLCJCdXR0b24iLCJjbGFzc05hbWVzIiwib25Nb3VzZURvd24iLCJNZW50aW9uSWNvbiIsIkNvbXBvc2VySW5zZXJ0RW1vamlFZGl0b3JBY3Rpb24iLCJvblBpY2tlck9wZW5DaGFuZ2UiLCJpbnNlcnRUZXh0IiwiRW1vamlQaWNrZXIiLCJvbkVtb2ppU2VsZWN0Iiwib25PcGVuQ2hhbmdlIiwiUG9wb3ZlclRyaWdnZXIiLCJhc0NoaWxkIiwiRW1vamlJY29uIiwiQ29tcG9zZXJNZW50aW9uIiwidXNlcklkIiwiQ29tcG9zZXJNZW50aW9uJDEiLCJNRU5USU9OX0NIQVJBQ1RFUiIsIlVzZXIiLCJDb21wb3Nlck1lbnRpb25TdWdnZXN0aW9ucyIsInVzZXJJZHMiLCJsZW5ndGgiLCJDb21wb3NlclN1Z2dlc3Rpb25zIiwiQ29tcG9zZXJTdWdnZXN0aW9uc0xpc3QiLCJtYXAiLCJDb21wb3NlclN1Z2dlc3Rpb25zTGlzdEl0ZW0iLCJrZXkiLCJ2YWx1ZSIsIkF2YXRhciIsIkNvbXBvc2VyTGluayIsImhyZWYiLCJjaGlsZHJlbiIsIkNvbXBvc2VyTGluayQxIiwiZWRpdG9yQ29tcG9uZW50cyIsIk1lbnRpb24iLCJNZW50aW9uU3VnZ2VzdGlvbnMiLCJMaW5rIiwiQ29tcG9zZXJXaXRoQ29udGV4dCIsImZvcndhcmRSZWYiLCJkZWZhdWx0VmFsdWUiLCJkaXNhYmxlZCIsImF1dG9Gb2N1cyIsImNvbGxhcHNlZCIsImNvbnRyb2xsZWRDb2xsYXBzZWQiLCJkZWZhdWx0Q29sbGFwc2VkIiwib25Db2xsYXBzZWRDaGFuZ2UiLCJjb250cm9sbGVkT25Db2xsYXBzZWRDaGFuZ2UiLCJhY3Rpb25zIiwib3ZlcnJpZGVzIiwic2hvd0F0dHJpYnV0aW9uIiwib25Gb2N1cyIsIm9uQmx1ciIsImZvcndhcmRlZFJlZiIsImNsaWVudCIsInVzZUNsaWVudCIsImhhc1Jlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnMiLCJrSW50ZXJuYWwiLCJyZXNvbHZlTWVudGlvblN1Z2dlc3Rpb25zIiwic2VsZiIsInVzZVNlbGYiLCJpc0Rpc2FibGVkIiwidXNlTWVtbyIsImNhbkNvbW1lbnQiLCJpc0VtcHR5IiwiJCIsInVzZU92ZXJyaWRlcyIsImlzRW1vamlQaWNrZXJPcGVuIiwic2V0RW1vamlQaWNrZXJPcGVuIiwidXNlU3RhdGUiLCJ1c2VDb250cm9sbGFibGVTdGF0ZSIsImhhbmRsZUVkaXRvckNsaWNrIiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVCbHVyIiwiaXNPdXRzaWRlIiwiY3VycmVudFRhcmdldCIsImNvbnRhaW5zIiwicmVsYXRlZFRhcmdldCIsImRpciIsInJlZiIsIkNvbXBvc2VyRWRpdG9yIiwicGxhY2Vob2xkZXIiLCJDT01QT1NFUl9QTEFDRUhPTERFUiIsImNvbXBvbmVudHMiLCJDT01QT1NFUl9JTlNFUlRfTUVOVElPTiIsIkNPTVBPU0VSX0lOU0VSVF9FTU9KSSIsIkF0dHJpYnV0aW9uIiwiRnJhZ21lbnQiLCJTaG9ydGN1dFRvb2x0aXAiLCJDT01QT1NFUl9TRU5EIiwic2hvcnRjdXQiLCJTaG9ydGN1dFRvb2x0aXBLZXkiLCJuYW1lIiwiQ29tcG9zZXJTdWJtaXQiLCJ2YXJpYW50IiwiU2VuZEljb24iLCJDb21wb3NlciIsInRocmVhZElkIiwiY29tbWVudElkIiwibWV0YWRhdGEiLCJvbkNvbXBvc2VyU3VibWl0IiwiY3JlYXRlVGhyZWFkIiwidXNlQ3JlYXRlVGhyZWFkIiwiY3JlYXRlQ29tbWVudCIsInVzZUNyZWF0ZUNvbW1lbnQiLCJlZGl0Q29tbWVudCIsInVzZUVkaXRDb21tZW50IiwiaGFuZGxlQ29tbWVudFN1Ym1pdCIsImNvbW1lbnQiLCJib2R5IiwiVG9vbHRpcFByb3ZpZGVyIiwiQ29tcG9zZXJGb3JtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/Composer.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/InboxNotification.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/InboxNotification.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InboxNotification: () => (/* binding */ InboxNotification)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components.mjs\");\n/* harmony import */ var _icons_Check_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../icons/Check.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Check.mjs\");\n/* harmony import */ var _icons_Delete_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../icons/Delete.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Delete.mjs\");\n/* harmony import */ var _icons_Ellipsis_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../icons/Ellipsis.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Ellipsis.mjs\");\n/* harmony import */ var _icons_Missing_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../icons/Missing.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Missing.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _primitives_Timestamp_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../primitives/Timestamp.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Timestamp.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../shared.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/shared.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_url_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utils/url.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/url.mjs\");\n/* harmony import */ var _internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/Avatar.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Avatar.mjs\");\n/* harmony import */ var _internal_Button_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./internal/Button.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Button.mjs\");\n/* harmony import */ var _internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/Dropdown.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Dropdown.mjs\");\n/* harmony import */ var _internal_InboxNotificationThread_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./internal/InboxNotificationThread.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/InboxNotificationThread.mjs\");\n/* harmony import */ var _internal_List_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./internal/List.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/List.mjs\");\n/* harmony import */ var _internal_Room_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./internal/Room.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Room.mjs\");\n/* harmony import */ var _internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/Tooltip.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Tooltip.mjs\");\n/* harmony import */ var _internal_User_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./internal/User.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/User.mjs\");\n/* harmony import */ var _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @radix-ui/react-dropdown-menu */ \"(ssr)/./node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ InboxNotification auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst InboxNotificationLayout = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ inboxNotification, children, aside, title, date, unread, markAsReadOnClick, onClick, href, showActions, overrides, components, className, asChild, ...props }, forwardedRef)=>{\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_1__.useOverrides)(overrides);\n    const { Anchor } = (0,_components_mjs__WEBPACK_IMPORTED_MODULE_2__.useComponents)(components);\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__.Slot : Anchor;\n    const [isMoreActionOpen, setMoreActionOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const markInboxNotificationAsRead = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_4__.useMarkInboxNotificationAsRead)();\n    const deleteInboxNotification = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_4__.useDeleteInboxNotification)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onClick?.(event);\n        const shouldMarkAsReadOnClick = markAsReadOnClick ?? Boolean(href);\n        if (unread && shouldMarkAsReadOnClick) {\n            markInboxNotificationAsRead(inboxNotification.id);\n        }\n    }, [\n        href,\n        inboxNotification.id,\n        markAsReadOnClick,\n        markInboxNotificationAsRead,\n        onClick,\n        unread\n    ]);\n    const stopPropagation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.stopPropagation();\n    }, []);\n    const preventDefaultAndStopPropagation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n        event.stopPropagation();\n    }, []);\n    const handleMoreClick = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n        event.stopPropagation();\n        setMoreActionOpen((open)=>!open);\n    }, []);\n    const handleMarkAsRead = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        markInboxNotificationAsRead(inboxNotification.id);\n    }, [\n        inboxNotification.id,\n        markInboxNotificationAsRead\n    ]);\n    const handleDelete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        deleteInboxNotification(inboxNotification.id);\n    }, [\n        inboxNotification.id,\n        deleteInboxNotification\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_5__.TooltipProvider, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_6__.classNames)(\"lb-root lb-inbox-notification\", showActions === \"hover\" && \"lb-inbox-notification:show-actions-hover\", isMoreActionOpen && \"lb-inbox-notification:action-open\", className),\n        dir: $.dir,\n        \"data-unread\": unread ? \"\" : void 0,\n        \"data-kind\": inboxNotification.kind,\n        onClick: handleClick,\n        href,\n        ...props,\n        ref: forwardedRef\n    }, aside && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-inbox-notification-aside\"\n    }, aside), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-inbox-notification-content\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-inbox-notification-header\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-inbox-notification-title\"\n    }, title), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-inbox-notification-details\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-inbox-notification-details-labels\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Timestamp_mjs__WEBPACK_IMPORTED_MODULE_7__.Timestamp, {\n        locale: $.locale,\n        date,\n        className: \"lb-inbox-notification-date\"\n    }), unread && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-inbox-notification-unread-indicator\",\n        role: \"presentation\"\n    }))), showActions && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-inbox-notification-actions\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_8__.Dropdown, {\n        open: isMoreActionOpen,\n        onOpenChange: setMoreActionOpen,\n        align: \"end\",\n        content: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, unread ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_8__.DropdownItem, {\n            onSelect: handleMarkAsRead,\n            onClick: stopPropagation\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Check_mjs__WEBPACK_IMPORTED_MODULE_9__.CheckIcon, {\n            className: \"lb-dropdown-item-icon\"\n        }), $.INBOX_NOTIFICATION_MARK_AS_READ) : null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Dropdown_mjs__WEBPACK_IMPORTED_MODULE_8__.DropdownItem, {\n            onSelect: handleDelete,\n            onClick: stopPropagation\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Delete_mjs__WEBPACK_IMPORTED_MODULE_10__.DeleteIcon, {\n            className: \"lb-dropdown-item-icon\"\n        }), $.INBOX_NOTIFICATION_DELETE))\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Tooltip_mjs__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {\n        content: $.INBOX_NOTIFICATION_MORE\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_12__.DropdownMenuTrigger, {\n        asChild: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Button_mjs__WEBPACK_IMPORTED_MODULE_13__.Button, {\n        className: \"lb-inbox-notification-action\",\n        onClick: handleMoreClick,\n        onPointerDown: preventDefaultAndStopPropagation,\n        onPointerUp: preventDefaultAndStopPropagation,\n        \"aria-label\": $.INBOX_NOTIFICATION_MORE\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Ellipsis_mjs__WEBPACK_IMPORTED_MODULE_14__.EllipsisIcon, {\n        className: \"lb-button-icon\"\n    }))))))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lb-inbox-notification-body\"\n    }, children))));\n});\nfunction InboxNotificationIcon({ className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_6__.classNames)(\"lb-inbox-notification-icon\", className),\n        ...props\n    });\n}\nfunction InboxNotificationAvatar({ className, ...props }) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Avatar_mjs__WEBPACK_IMPORTED_MODULE_15__.Avatar, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_6__.classNames)(\"lb-inbox-notification-avatar\", className),\n        ...props\n    });\n}\nconst InboxNotificationThread = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ inboxNotification, href, showRoomName = true, showActions = \"hover\", overrides, ...props }, forwardedRef)=>{\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_1__.useOverrides)(overrides);\n    const thread = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_4__._useInboxNotificationThread)(inboxNotification.id);\n    const currentUserId = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_16__.useCurrentUserId)();\n    const { info } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_4__.useRoomInfo)(inboxNotification.roomId);\n    const { unread, date, aside, title, content, commentId } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const contents = (0,_internal_InboxNotificationThread_mjs__WEBPACK_IMPORTED_MODULE_17__.generateInboxNotificationThreadContents)(inboxNotification, thread, currentUserId ?? \"\");\n        switch(contents.type){\n            case \"comments\":\n                {\n                    const reversedUserIds = [\n                        ...contents.userIds\n                    ].reverse();\n                    const firstUserId = reversedUserIds[0];\n                    const aside2 = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationAvatar, {\n                        userId: firstUserId\n                    });\n                    const title2 = $.INBOX_NOTIFICATION_THREAD_COMMENTS_LIST(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_List_mjs__WEBPACK_IMPORTED_MODULE_18__.List, {\n                        values: reversedUserIds.map((userId, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_19__.User, {\n                                key: userId,\n                                userId,\n                                capitalize: index === 0,\n                                replaceSelf: true\n                            })),\n                        formatRemaining: $.LIST_REMAINING_USERS,\n                        truncate: _internal_InboxNotificationThread_mjs__WEBPACK_IMPORTED_MODULE_17__.INBOX_NOTIFICATION_THREAD_MAX_COMMENTS - 1\n                    }), showRoomName ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Room_mjs__WEBPACK_IMPORTED_MODULE_20__.Room, {\n                        roomId: thread.roomId\n                    }) : void 0, reversedUserIds.length);\n                    const content2 = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                        className: \"lb-inbox-notification-comments\"\n                    }, contents.comments.map((comment)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_InboxNotificationThread_mjs__WEBPACK_IMPORTED_MODULE_17__.InboxNotificationComment, {\n                            key: comment.id,\n                            comment,\n                            showHeader: contents.comments.length > 1,\n                            overrides\n                        })));\n                    return {\n                        unread: contents.unread,\n                        date: contents.date,\n                        aside: aside2,\n                        title: title2,\n                        content: content2,\n                        threadId: thread.id,\n                        commentId: contents.comments[contents.comments.length - 1].id\n                    };\n                }\n            case \"mention\":\n                {\n                    const mentionUserId = contents.userIds[0];\n                    const mentionComment = contents.comments[0];\n                    const aside2 = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationAvatar, {\n                        userId: mentionUserId\n                    });\n                    const title2 = $.INBOX_NOTIFICATION_THREAD_MENTION(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_19__.User, {\n                        key: mentionUserId,\n                        userId: mentionUserId,\n                        capitalize: true\n                    }), showRoomName ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Room_mjs__WEBPACK_IMPORTED_MODULE_20__.Room, {\n                        roomId: thread.roomId\n                    }) : void 0);\n                    const content2 = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                        className: \"lb-inbox-notification-comments\"\n                    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_InboxNotificationThread_mjs__WEBPACK_IMPORTED_MODULE_17__.InboxNotificationComment, {\n                        key: mentionComment.id,\n                        comment: mentionComment,\n                        showHeader: false\n                    }));\n                    return {\n                        unread: contents.unread,\n                        date: contents.date,\n                        aside: aside2,\n                        title: title2,\n                        content: content2,\n                        threadId: thread.id,\n                        commentId: mentionComment.id\n                    };\n                }\n            default:\n                return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_21__.assertNever)(contents, \"Unexpected thread inbox notification type\");\n        }\n    }, [\n        $,\n        currentUserId,\n        inboxNotification,\n        overrides,\n        showRoomName,\n        thread\n    ]);\n    const resolvedHref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const resolvedHref2 = href ?? info?.url;\n        return resolvedHref2 ? (0,_utils_url_mjs__WEBPACK_IMPORTED_MODULE_22__.generateURL)(resolvedHref2, void 0, commentId) : void 0;\n    }, [\n        commentId,\n        href,\n        info?.url\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationLayout, {\n        inboxNotification,\n        aside,\n        title,\n        date,\n        unread,\n        overrides,\n        href: resolvedHref,\n        showActions,\n        markAsReadOnClick: false,\n        ...props,\n        ref: forwardedRef\n    }, content);\n});\nconst InboxNotificationTextMention = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ inboxNotification, showActions = \"hover\", showRoomName = true, overrides, ...props }, ref)=>{\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_1__.useOverrides)(overrides);\n    const unread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return !inboxNotification.readAt || inboxNotification.notifiedAt > inboxNotification.readAt;\n    }, [\n        inboxNotification.notifiedAt,\n        inboxNotification.readAt\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationLayout, {\n        inboxNotification,\n        aside: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationAvatar, {\n            userId: inboxNotification.createdBy\n        }),\n        title: $.INBOX_NOTIFICATION_TEXT_MENTION(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_User_mjs__WEBPACK_IMPORTED_MODULE_19__.User, {\n            key: inboxNotification.createdBy,\n            userId: inboxNotification.createdBy,\n            capitalize: true\n        }), showRoomName ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Room_mjs__WEBPACK_IMPORTED_MODULE_20__.Room, {\n            roomId: inboxNotification.roomId\n        }) : void 0),\n        date: inboxNotification.notifiedAt,\n        unread,\n        overrides,\n        showActions,\n        ...props,\n        ref\n    });\n});\nconst InboxNotificationCustom = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ inboxNotification, showActions = \"hover\", title, aside, children, overrides, ...props }, forwardedRef)=>{\n    const unread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return !inboxNotification.readAt || inboxNotification.notifiedAt > inboxNotification.readAt;\n    }, [\n        inboxNotification.notifiedAt,\n        inboxNotification.readAt\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationLayout, {\n        inboxNotification,\n        aside,\n        title,\n        date: inboxNotification.notifiedAt,\n        unread,\n        overrides,\n        showActions,\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst InboxNotificationCustomMissing = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ inboxNotification, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationCustom, {\n        inboxNotification,\n        ...props,\n        title: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"Custom notification kind \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, inboxNotification.kind), \" is not handled\"),\n        aside: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationIcon, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_icons_Missing_mjs__WEBPACK_IMPORTED_MODULE_23__.MissingIcon, null)),\n        ref: forwardedRef,\n        \"data-missing\": \"\"\n    }, \"Notifications of this kind won’t be displayed in production. Use the\", \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"kinds\"), \" prop to define how they should be rendered.\");\n});\nconst inboxNotificationKindsWarnings = /* @__PURE__ */ new Set();\nconst InboxNotification = Object.assign(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ inboxNotification, kinds, ...props }, forwardedRef)=>{\n    switch(inboxNotification.kind){\n        case \"thread\":\n            {\n                const ResolvedInboxNotificationThread = kinds?.thread ?? InboxNotificationThread;\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ResolvedInboxNotificationThread, {\n                    inboxNotification,\n                    ...props,\n                    ref: forwardedRef\n                });\n            }\n        case \"textMention\":\n            {\n                const ResolvedInboxNotificationTextMention = kinds?.textMention ?? InboxNotificationTextMention;\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ResolvedInboxNotificationTextMention, {\n                    inboxNotification,\n                    ...props,\n                    ref: forwardedRef\n                });\n            }\n        default:\n            {\n                const ResolvedInboxNotificationCustom = kinds?.[inboxNotification.kind];\n                if (!ResolvedInboxNotificationCustom) {\n                    if (true) {\n                        if (!inboxNotificationKindsWarnings.has(inboxNotification.kind)) {\n                            inboxNotificationKindsWarnings.add(inboxNotification.kind);\n                            _liveblocks_core__WEBPACK_IMPORTED_MODULE_21__.console.warn(`Custom notification kind \"${inboxNotification.kind}\" is not handled so notifications of this kind will not be displayed in production. Use the kinds prop to define how they should be rendered.`);\n                        }\n                        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(InboxNotificationCustomMissing, {\n                            inboxNotification,\n                            ...props,\n                            ref: forwardedRef\n                        });\n                    } else {}\n                }\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ResolvedInboxNotificationCustom, {\n                    inboxNotification,\n                    ...props,\n                    ref: forwardedRef\n                });\n            }\n    }\n}), {\n    Thread: InboxNotificationThread,\n    TextMention: InboxNotificationTextMention,\n    Custom: InboxNotificationCustom,\n    Icon: InboxNotificationIcon,\n    Avatar: InboxNotificationAvatar\n});\n //# sourceMappingURL=InboxNotification.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL0luYm94Tm90aWZpY2F0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNk1BLE1BQUFBLHdDQUFBQyxpREFBQUEsQ0FBZ0MsR0FLNUJDLGlCQUFBLEVBQ0VDLFFBQUEsRUFDQUMsS0FBQSxFQUNBQyxLQUFBLEVBQ0FDLElBQUEsRUFDQUMsTUFBQSxFQUNBQyxpQkFBQSxFQUNBQyxPQUFBLEVBQ0FDLElBQUEsRUFDQUMsV0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFVBQUEsRUFDQUMsU0FBQSxFQUNBQyxPQUFBLEVBQ0EsR0FBQUMsT0FDRyxFQUFBQztJQUlMLE1BQUFDLElBQUFDLDREQUFBQSxDQUFBUDtJQUNBLFFBQUFRLE1BQUEsS0FBQUMsOERBQUFBLENBQUFSO0lBQ0EsTUFBQVMsWUFBQVAsVUFBQVEsc0RBQUFBLEdBQUFIO0lBQ0EsT0FBQUksa0JBQUFDLGtCQUFBLEdBQUFDLCtDQUFBQSxDQUFBO0lBQ0EsTUFBQUMsOEJBQUFDLGlGQUFBQTtJQUNBLE1BQUFDLDBCQUFBQyw2RUFBQUE7SUFFQSxNQUFBQyxjQUFBQyxrREFBQUEsQ0FBb0IsQ0FBQUM7UUFFaEJ4QixVQUFBd0I7UUFFQSxNQUFBQywwQkFBQTFCLHFCQUFBMkIsUUFBQXpCO1FBRUEsSUFBQUgsVUFBQTJCLHlCQUFBO1lBQ0VQLDRCQUFBekIsa0JBQUFrQyxFQUFBO1FBQWdEO0lBQ2xELEdBQ0Y7UUFDQTFCO1FBQ0VSLGtCQUFBa0MsRUFBQTtRQUNrQjVCO1FBQ2xCbUI7UUFDQWxCO1FBQ0FGO0tBQ0E7SUFJSixNQUFBOEIsa0JBQUFMLGtEQUFBQSxDQUFBLENBQUFDO1FBQ0VBLE1BQUFJLGVBQUE7SUFBc0I7SUFHeEIsTUFBQUMsbUNBQUFOLGtEQUFBQSxDQUF5QyxDQUFBQztRQUVyQ0EsTUFBQU0sY0FBQTtRQUNBTixNQUFBSSxlQUFBO0lBQXNCLEdBQ3hCO0lBSUYsTUFBQUcsa0JBQUFSLGtEQUFBQSxDQUFBLENBQUFDO1FBQ0VBLE1BQUFNLGNBQUE7UUFDQU4sTUFBQUksZUFBQTtRQUNBWixrQkFBQSxDQUFBZ0IsT0FBQSxDQUFBQTtJQUFpQztJQUduQyxNQUFBQyxtQkFBQVYsa0RBQUFBLENBQUE7UUFDRUwsNEJBQUF6QixrQkFBQWtDLEVBQUE7SUFBZ0Q7UUFBQWxDLGtCQUFBa0MsRUFBQTtRQUFBVDtLQUFBO0lBR2xELE1BQUFnQixlQUFBWCxrREFBQUEsQ0FBQTtRQUNFSCx3QkFBQTNCLGtCQUFBa0MsRUFBQTtJQUE0QztRQUFBbEMsa0JBQUFrQyxFQUFBO1FBQUFQO0tBQUE7SUFHOUMscUNBQUFlLGdEQUFBLENBQUFFLG9FQUFBQSxFQUFBLG9DQUFBRixnREFBQSxDQUFBdEIsV0FBQTtRQUVLUixXQUFBaUMsa0VBQUFBLENBQ1ksaUNBQ1RwQyxnQkFBQSx1REFFRWEsb0JBQUEscUNBQ2tCVjtRQUV0QmtDLEtBQUE5QixFQUFBOEIsR0FBQTtRQUNPLGVBQUF6QyxTQUFBO1FBQ29CLGFBQUFMLGtCQUFBK0MsSUFBQTtRQUNFeEMsU0FBQXNCO1FBQ3BCckI7UUFDVCxHQUFBTSxLQUFBO1FBQ0lrQyxLQUFBakM7SUFDQyxHQUFBYixTQUFBLDhCQUFBd0MsZ0RBQUE7UUFFTTlCLFdBQUE7SUFBYyxHQUFBVixRQUFBLDhCQUFBd0MsZ0RBQUE7UUFDeEI5QixXQUFBO0lBQWMsaUNBQUE4QixnREFBQTtRQUNaOUIsV0FBQTtJQUFjLGlDQUFBOEIsZ0RBQUE7UUFDWjlCLFdBQUE7SUFBZSxHQUFBVCxRQUFBLDhCQUFBdUMsZ0RBQUE7UUFDZjlCLFdBQUE7SUFBYyxpQ0FBQThCLGdEQUFBO1FBQ1o5QixXQUFBO0lBQWUsaUNBQUE4QixnREFBQSxDQUFBTyxnRUFBQUEsRUFBQTtRQUNiQyxRQUFBbEMsRUFBQWtDLE1BQUE7UUFDVzlDO1FBQ1ZRLFdBQUE7SUFDVSxJQUFBUCxVQUFBLDhCQUFBcUMsZ0RBQUE7UUFHVDlCLFdBQUE7UUFDV3VDLE1BQUE7SUFDTCxNQUFBMUMsZUFBQSw4QkFBQWlDLGdEQUFBO1FBTVY5QixXQUFBO0lBQWMsaUNBQUE4QixnREFBQSxDQUFBVSw0REFBQUEsRUFBQTtRQUNaYixNQUFBakI7UUFDTytCLGNBQUE5QjtRQUNRK0IsT0FBQTtRQUNSQyxTQUFBLDhCQUFBYixnREFBQSxDQUFBQSwyQ0FBQSxRQUFBckMsU0FBQSw4QkFBQXFDLGdEQUFBLENBQUFlLGdFQUFBQSxFQUFBO1lBSUNDLFVBQUFsQjtZQUNXakMsU0FBQTRCO1FBQ0QsaUNBQUFPLGdEQUFBLENBQUFpQix1REFBQUEsRUFBQTtZQUVSL0MsV0FBQTtRQUFvQixJQUFBSSxFQUFBNEMsK0JBQUEsd0NBQUFsQixnREFBQSxDQUFBZSxnRUFBQUEsRUFBQTtZQUl4QkMsVUFBQWpCO1lBQ1dsQyxTQUFBNEI7UUFDRCxpQ0FBQU8sZ0RBQUEsQ0FBQW1CLDBEQUFBQSxFQUFBO1lBRVJqRCxXQUFBO1FBQXFCLElBQUFJLEVBQUE4Qyx5QkFBQTtJQUcxQixpQ0FBQXBCLGdEQUFBLENBQUFxQiwyREFBQUEsRUFBQTtRQUdEUixTQUFBdkMsRUFBQWdELHVCQUFBO0lBQW1CLGlDQUFBdEIsZ0RBQUEsQ0FBQXVCLCtFQUFBQSxFQUFBO1FBQ2pCcEQsU0FBQTtJQUF1QixpQ0FBQTZCLGdEQUFBLENBQUF3Qix5REFBQUEsRUFBQTtRQUNyQnRELFdBQUE7UUFDV0wsU0FBQStCO1FBQ0Q2QixlQUFBL0I7UUFDTWdDLGFBQUFoQztRQUNGLGNBQUFwQixFQUFBZ0QsdUJBQUE7SUFDQyxpQ0FBQXRCLGdEQUFBLENBQUEyQiw4REFBQUEsRUFBQTtRQUViekQsV0FBQTtJQUF1Qix3Q0FBQThCLGdEQUFBO1FBUXJDOUIsV0FBQTtJQUFjLEdBQUFYO0FBR3JCO0FBS04sU0FBQXFFLHNCQUFBLEVBQStCMUQsU0FBQSxFQUM3QixHQUFBRSxPQUVGO0lBQ0UscUNBQUE0QixnREFBQTtRQUNHOUIsV0FBQWlDLGtFQUFBQSxDQUFBLDhCQUFBakM7UUFDOEQsR0FBQUUsS0FBQTtJQUN6RDtBQUdWO0FBRUEsU0FBQXlELHdCQUFBLEVBQWlDM0QsU0FBQSxFQUMvQixHQUFBRSxPQUVGO0lBQ0UscUNBQUE0QixnREFBQSxDQUFBOEIseURBQUFBLEVBQUE7UUFDRzVELFdBQUFpQyxrRUFBQUEsQ0FBQSxnQ0FBQWpDO1FBQ2dFLEdBQUFFLEtBQUE7SUFDM0Q7QUFHVjtBQUtBLE1BQUEyRCx3Q0FBQTFFLGlEQUFBQSxDQUFnQyxHQUs1QkMsaUJBQUEsRUFDRVEsSUFBQSxFQUNBa0UsZUFBQSxNQUNlakUsY0FBQSxTQUNEQyxTQUFBLEVBQ2QsR0FBQUksT0FDRyxFQUFBQztJQUlMLE1BQUFDLElBQUFDLDREQUFBQSxDQUFBUDtJQUNBLE1BQUFpRSxTQUFBQyw4RUFBQUEsQ0FBQTVFLGtCQUFBa0MsRUFBQTtJQUNBLE1BQUEyQyxnQkFBQUMsOERBQUFBO0lBS0EsUUFBQUMsSUFBQSxLQUFBQyw4REFBQUEsQ0FBQWhGLGtCQUFBaUYsTUFBQTtJQUNBLFFBQUE1RSxNQUFBLEVBQUFELElBQUEsRUFBQUYsS0FBQSxFQUFBQyxLQUFBLEVBQUFvRCxPQUFBLEVBQUEyQixTQUFBLEtBQUFDLDhDQUFBQSxDQUFBO1FBQ0UsTUFBQUMsV0FBQUMsK0dBQUFBLENBQWlCckYsbUJBQ2YyRSxRQUNBRSxpQkFBQTtRQUlGLE9BQUFPLFNBQUFFLElBQUE7WUFBdUI7Z0JBQUE7b0JBRW5CLE1BQUFDLGtCQUFBOzJCQUFBSCxTQUFBSSxPQUFBO3FCQUFBLENBQUFDLE9BQUE7b0JBQ0EsTUFBQUMsY0FBQUgsZUFBQTtvQkFFQSxNQUFBSSxTQUFBLDhCQUFBakQsZ0RBQUEsQ0FBQTZCLHlCQUFBO3dCQUFlcUIsUUFBQUY7b0JBQWdDO29CQUMvQyxNQUFBRyxTQUFBN0UsRUFBQThFLHVDQUFBLENBQWdCLDhCQUFBcEQsZ0RBQUEsQ0FBQXFELHFEQUFBQSxFQUFBO3dCQUNiQyxRQUFBVCxnQkFBQVUsR0FBQSxFQUFBTCxRQUFBTSxRQUFBLDhCQUFBeEQsZ0RBQUEsQ0FBQXlELHFEQUFBQSxFQUFBO2dDQUVJQyxLQUFBUjtnQ0FDTUE7Z0NBQ0xTLFlBQUFILFVBQUE7Z0NBQ3NCSSxhQUFBOzRCQUNYO3dCQUVkQyxpQkFBQXZGLEVBQUF3RixvQkFBQTt3QkFDa0JDLFVBQUFDLDBHQUFBQSxHQUFBO29CQUNnQyxJQUNyRGhDLGVBQUEsOEJBQUFoQyxnREFBQSxDQUFBaUUscURBQUFBLEVBQUE7d0JBQ2dCMUIsUUFBQU4sT0FBQU0sTUFBQTtvQkFBb0IsYUFBYU0sZ0JBQUFxQixNQUFBO29CQUduRCxNQUFBQyxXQUFBLDhCQUFBbkUsZ0RBQUE7d0JBQ0c5QixXQUFBO29CQUFjLEdBQUF3RSxTQUFBMEIsUUFBQSxDQUFBYixHQUFBLEVBQUFjLFVBQUEsOEJBQUFyRSxnREFBQSxDQUFBc0UsNEZBQUFBLEVBQUE7NEJBRVZaLEtBQUFXLFFBQUE3RSxFQUFBOzRCQUNjNkU7NEJBQ2JFLFlBQUE3QixTQUFBMEIsUUFBQSxDQUFBRixNQUFBOzRCQUN1Q2xHO3dCQUN2QztvQkFNUjt3QkFBT0wsUUFBQStFLFNBQUEvRSxNQUFBO3dCQUNZRCxNQUFBZ0YsU0FBQWhGLElBQUE7d0JBQ0ZGLE9BQUF5Rjt3QkFDZnhGLE9BQUEwRjt3QkFDQXRDLFNBQUFzRDt3QkFDQUssVUFBQXZDLE9BQUF6QyxFQUFBO3dCQUNpQmdELFdBQUFFLFNBQUEwQixRQUFBLENBQUExQixTQUFBMEIsUUFBQSxDQUFBRixNQUFBLE1BQUExRSxFQUFBO29CQUMwQztnQkFDN0Q7WUFDRjtnQkFBQTtvQkFHRSxNQUFBaUYsZ0JBQUEvQixTQUFBSSxPQUFBO29CQUNBLE1BQUE0QixpQkFBQWhDLFNBQUEwQixRQUFBO29CQUVBLE1BQUFuQixTQUFBLDhCQUFBakQsZ0RBQUEsQ0FBQTZCLHlCQUFBO3dCQUFlcUIsUUFBQXVCO29CQUFnQztvQkFDL0MsTUFBQXRCLFNBQUE3RSxFQUFBcUcsaUNBQUEsQ0FBZ0IsOEJBQUEzRSxnREFBQSxDQUFBeUQscURBQUFBLEVBQUE7d0JBQ2JDLEtBQUFlO3dCQUFVdkIsUUFBQXVCO3dCQUF1QmQsWUFBQTtvQkFBeUIsSUFBQzNCLGVBQUEsOEJBQUFoQyxnREFBQSxDQUFBaUUscURBQUFBLEVBQUE7d0JBQzVDMUIsUUFBQU4sT0FBQU0sTUFBQTtvQkFBb0I7b0JBRXRDLE1BQUE0QixXQUFBLDhCQUFBbkUsZ0RBQUE7d0JBQ0c5QixXQUFBO29CQUFjLGlDQUFBOEIsZ0RBQUEsQ0FBQXNFLDRGQUFBQSxFQUFBO3dCQUNaWixLQUFBZ0IsZUFBQWxGLEVBQUE7d0JBQ3FCNkUsU0FBQUs7d0JBQ1hILFlBQUE7b0JBQ0c7b0JBS2xCO3dCQUFPNUcsUUFBQStFLFNBQUEvRSxNQUFBO3dCQUNZRCxNQUFBZ0YsU0FBQWhGLElBQUE7d0JBQ0ZGLE9BQUF5Rjt3QkFDZnhGLE9BQUEwRjt3QkFDQXRDLFNBQUFzRDt3QkFDQUssVUFBQXZDLE9BQUF6QyxFQUFBO3dCQUNpQmdELFdBQUFrQyxlQUFBbEYsRUFBQTtvQkFDUztnQkFDNUI7WUFDRjtnQkFHRSxPQUFBb0YsOERBQUFBLENBQU9sQyxVQUNMO1FBRUY7SUFDSjtRQUFBcEU7UUFBQTZEO1FBQUE3RTtRQUFBVTtRQUFBZ0U7UUFBQUM7S0FBQTtJQUlGLE1BQUE0QyxlQUFBcEMsOENBQUFBLENBQUE7UUFDRSxNQUFBcUMsZ0JBQUFoSCxRQUFBdUUsTUFBQTBDO1FBRUEsT0FBQUQsZ0JBQUFFLDREQUFBQSxDQUFBRixlQUFBLFFBQUF0QyxhQUFBO0lBRUk7UUFBQUE7UUFBQTFFO1FBQUF1RSxNQUFBMEM7S0FBQTtJQUdOLHFDQUFBL0UsZ0RBQUEsQ0FBQTVDLHlCQUFBO1FBQ0dFO1FBQ0NFO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FLO1FBQ0FGLE1BQUErRztRQUNNOUc7UUFDTkgsbUJBQUE7UUFDbUIsR0FBQVEsS0FBQTtRQUNma0MsS0FBQWpDO0lBQ0MsR0FBQXdDO0FBR1A7QUFRTixNQUFBb0UsNkNBQUE1SCxpREFBQUEsQ0FBcUMsR0FLakNDLGlCQUFBLEVBQ0VTLGNBQUEsU0FDY2lFLGVBQUEsTUFDQ2hFLFNBQUEsRUFDZixHQUFBSSxPQUNHLEVBQUFrQztJQUlMLE1BQUFoQyxJQUFBQyw0REFBQUEsQ0FBQVA7SUFFQSxNQUFBTCxTQUFBOEUsOENBQUFBLENBQUE7UUFDRSxRQUFBbkYsa0JBQUE0SCxNQUFBLElBQUE1SCxrQkFBQTZILFVBQUEsR0FBQTdILGtCQUFBNEgsTUFBQTtJQUVtRDtRQUFBNUgsa0JBQUE2SCxVQUFBO1FBQUE3SCxrQkFBQTRILE1BQUE7S0FBQTtJQUlyRCxxQ0FBQWxGLGdEQUFBLENBQUE1Qyx5QkFBQTtRQUNHRTtRQUNDRSxPQUFBLDhCQUFBd0MsZ0RBQUEsQ0FBQTZCLHlCQUFBO1lBQ1FxQixRQUFBNUYsa0JBQUE4SCxTQUFBO1FBQWtEO1FBQVczSCxPQUFBYSxFQUFBK0csK0JBQUEsQ0FDNUQsOEJBQUFyRixnREFBQSxDQUFBeUQscURBQUFBLEVBQUE7WUFDTkMsS0FBQXBHLGtCQUFBOEgsU0FBQTtZQUN3QmxDLFFBQUE1RixrQkFBQThILFNBQUE7WUFDR3pCLFlBQUE7UUFDaEIsSUFDWjNCLGVBQUEsOEJBQUFoQyxnREFBQSxDQUFBaUUscURBQUFBLEVBQUE7WUFDZ0IxQixRQUFBakYsa0JBQUFpRixNQUFBO1FBQStCO1FBQ2pEN0UsTUFBQUosa0JBQUE2SCxVQUFBO1FBQ3dCeEg7UUFDeEJLO1FBQ0FEO1FBQ0EsR0FBQUssS0FBQTtRQUNJa0M7SUFDSjtBQUNGO0FBUU4sTUFBQWdGLHdDQUFBakksaURBQUFBLENBQWdDLEdBSzVCQyxpQkFBQSxFQUNFUyxjQUFBLFNBQ2NOLEtBQUEsRUFDZEQsS0FBQSxFQUNBRCxRQUFBLEVBQ0FTLFNBQUEsRUFDQSxHQUFBSSxPQUNHLEVBQUFDO0lBSUwsTUFBQVYsU0FBQThFLDhDQUFBQSxDQUFBO1FBQ0UsUUFBQW5GLGtCQUFBNEgsTUFBQSxJQUFBNUgsa0JBQUE2SCxVQUFBLEdBQUE3SCxrQkFBQTRILE1BQUE7SUFFbUQ7UUFBQTVILGtCQUFBNkgsVUFBQTtRQUFBN0gsa0JBQUE0SCxNQUFBO0tBQUE7SUFJckQscUNBQUFsRixnREFBQSxDQUFBNUMseUJBQUE7UUFDR0U7UUFDQ0U7UUFDQUM7UUFDQUMsTUFBQUosa0JBQUE2SCxVQUFBO1FBQ3dCeEg7UUFDeEJLO1FBQ0FEO1FBQ0EsR0FBQUssS0FBQTtRQUNJa0MsS0FBQWpDO0lBQ0MsR0FBQWQ7QUFHUDtBQUtOLE1BQUFnSSwrQ0FBQWxJLGlEQUFBQSxDQUFBLEdBQUFDLGlCQUFBLEtBQUFjLE9BQUEsRUFBQUM7SUFJRSxxQ0FBQTJCLGdEQUFBLENBQUFzRix5QkFBQTtRQUNHaEk7UUFDQyxHQUFBYyxLQUFBO1FBQ0lYLE9BQUEsOEJBQUF1QyxnREFBQSxDQUFBQSwyQ0FBQSxtRUFBQUEsZ0RBQUEsZUFBQTFDLGtCQUFBK0MsSUFBQTtRQUtGN0MsT0FBQSw4QkFBQXdDLGdEQUFBLENBQUE0Qix1QkFBQSxvQ0FBQTVCLGdEQUFBLENBQUF3Riw0REFBQUEsRUFBQTtRQUtBbEYsS0FBQWpDO1FBRUc7SUFDUSw4R0FBQTJCLGdEQUFBO0FBT25CO0FBR0EsTUFBQXlGLGlDQUFBLG9CQUFBQztBQWdCTyxNQUFBQyxvQkFBQUMsT0FBQUMsTUFBQSxlQUFpQ3hJLGlEQUFBQSxDQUN0QyxHQUFBQyxpQkFBQSxFQUFBd0ksS0FBQSxLQUFBMUgsT0FBQSxFQUFBQztJQUVJLE9BQUFmLGtCQUFBK0MsSUFBQTtRQUFnQztZQUFBO2dCQUU1QixNQUFBMEYsa0NBQUFELE9BQUE3RCxVQUFBRjtnQkFHQSxxQ0FBQS9CLGdEQUFBLENBQUErRixpQ0FBQTtvQkFDR3pJO29CQUNDLEdBQUFjLEtBQUE7b0JBQ0lrQyxLQUFBakM7Z0JBQ0M7WUFDUDtRQUVKO1lBQUE7Z0JBR0UsTUFBQTJILHVDQUFBRixPQUFBRyxlQUFBaEI7Z0JBR0EscUNBQUFqRixnREFBQSxDQUFBZ0csc0NBQUE7b0JBQ0cxSTtvQkFDQyxHQUFBYyxLQUFBO29CQUNJa0MsS0FBQWpDO2dCQUNDO1lBQ1A7UUFFSjtZQUFBO2dCQUdFLE1BQUE2SCxrQ0FBQUosT0FBQSxDQUFBeEksa0JBQUErQyxJQUFBO2dCQUdBLEtBQUE2RixpQ0FBQTtvQkFDRSxJQUFBQyxJQUFBO3dCQUNFLEtBQUFWLCtCQUFBVyxHQUFBLENBQUE5SSxrQkFBQStDLElBQUE7NEJBQ0VvRiwrQkFBQVksR0FBQSxDQUFBL0ksa0JBQUErQyxJQUFBOzRCQUVBaUcsc0RBQU9BLENBQVBDLElBQUEsQ0FBUSw2QkFBQWpKLGtCQUFBK0MsSUFBQTt3QkFFUjt3QkFHRixxQ0FBQUwsZ0RBQUEsQ0FBQXVGLGdDQUFBOzRCQUNHakk7NEJBQ0MsR0FBQWMsS0FBQTs0QkFDSWtDLEtBQUFqQzt3QkFDQztvQkFDUCxTQUlLO2dCQUNUO2dCQUdGLHFDQUFBMkIsZ0RBQUEsQ0FBQWtHLGlDQUFBO29CQUNHNUk7b0JBQ0MsR0FBQWMsS0FBQTtvQkFDSWtDLEtBQUFqQztnQkFDQztZQUNQO0lBRUo7QUFDRixJQUVKO0lBQ0FtSSxRQUFBekU7SUFDVTBFLGFBQUF4QjtJQUNLeUIsUUFBQXBCO0lBQ0xxQixNQUFBL0U7SUFDRkUsUUFBQUQ7QUFDRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi8uLi9zcmMvY29tcG9uZW50cy9JbmJveE5vdGlmaWNhdGlvbi50c3g/OGM5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHR5cGUge1xuICBJbmJveE5vdGlmaWNhdGlvbkN1c3RvbURhdGEsXG4gIEluYm94Tm90aWZpY2F0aW9uRGF0YSxcbiAgSW5ib3hOb3RpZmljYXRpb25UZXh0TWVudGlvbkRhdGEsXG4gIEluYm94Tm90aWZpY2F0aW9uVGhyZWFkRGF0YSxcbiAgS0RBRCxcbn0gZnJvbSBcIkBsaXZlYmxvY2tzL2NvcmVcIjtcbmltcG9ydCB7IGFzc2VydE5ldmVyLCBjb25zb2xlIH0gZnJvbSBcIkBsaXZlYmxvY2tzL2NvcmVcIjtcbmltcG9ydCB7XG4gIHVzZURlbGV0ZUluYm94Tm90aWZpY2F0aW9uLFxuICB1c2VJbmJveE5vdGlmaWNhdGlvblRocmVhZCxcbiAgdXNlTWFya0luYm94Tm90aWZpY2F0aW9uQXNSZWFkLFxuICB1c2VSb29tSW5mbyxcbn0gZnJvbSBcIkBsaXZlYmxvY2tzL3JlYWN0XCI7XG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI7XG5pbXBvcnQgeyBUb29sdGlwUHJvdmlkZXIgfSBmcm9tIFwiQHJhZGl4LXVpL3JlYWN0LXRvb2x0aXBcIjtcbmltcG9ydCB0eXBlIHtcbiAgQ29tcG9uZW50UHJvcHMsXG4gIENvbXBvbmVudFByb3BzV2l0aG91dFJlZixcbiAgQ29tcG9uZW50VHlwZSxcbiAgTW91c2VFdmVudCBhcyBSZWFjdE1vdXNlRXZlbnQsXG4gIFJlYWN0Tm9kZSxcbiAgU3ludGhldGljRXZlbnQsXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYsIHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgdHlwZSB7IEdsb2JhbENvbXBvbmVudHMgfSBmcm9tIFwiLi4vY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgdXNlQ29tcG9uZW50cyB9IGZyb20gXCIuLi9jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBDaGVja0ljb24gfSBmcm9tIFwiLi4vaWNvbnMvQ2hlY2tcIjtcbmltcG9ydCB7IERlbGV0ZUljb24gfSBmcm9tIFwiLi4vaWNvbnMvRGVsZXRlXCI7XG5pbXBvcnQgeyBFbGxpcHNpc0ljb24gfSBmcm9tIFwiLi4vaWNvbnMvRWxsaXBzaXNcIjtcbmltcG9ydCB7IE1pc3NpbmdJY29uIH0gZnJvbSBcIi4uL2ljb25zL01pc3NpbmdcIjtcbmltcG9ydCB0eXBlIHtcbiAgQ29tbWVudE92ZXJyaWRlcyxcbiAgR2xvYmFsT3ZlcnJpZGVzLFxuICBJbmJveE5vdGlmaWNhdGlvbk92ZXJyaWRlcyxcbn0gZnJvbSBcIi4uL292ZXJyaWRlc1wiO1xuaW1wb3J0IHsgdXNlT3ZlcnJpZGVzIH0gZnJvbSBcIi4uL292ZXJyaWRlc1wiO1xuaW1wb3J0IHsgVGltZXN0YW1wIH0gZnJvbSBcIi4uL3ByaW1pdGl2ZXMvVGltZXN0YW1wXCI7XG5pbXBvcnQgeyB1c2VDdXJyZW50VXNlcklkIH0gZnJvbSBcIi4uL3NoYXJlZFwiO1xuaW1wb3J0IHR5cGUgeyBTbG90UHJvcCB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gXCIuLi91dGlscy9jbGFzcy1uYW1lc1wiO1xuaW1wb3J0IHsgZ2VuZXJhdGVVUkwgfSBmcm9tIFwiLi4vdXRpbHMvdXJsXCI7XG5pbXBvcnQgeyBBdmF0YXIsIHR5cGUgQXZhdGFyUHJvcHMgfSBmcm9tIFwiLi9pbnRlcm5hbC9BdmF0YXJcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuL2ludGVybmFsL0J1dHRvblwiO1xuaW1wb3J0IHsgRHJvcGRvd24sIERyb3Bkb3duSXRlbSwgRHJvcGRvd25UcmlnZ2VyIH0gZnJvbSBcIi4vaW50ZXJuYWwvRHJvcGRvd25cIjtcbmltcG9ydCB7XG4gIGdlbmVyYXRlSW5ib3hOb3RpZmljYXRpb25UaHJlYWRDb250ZW50cyxcbiAgSU5CT1hfTk9USUZJQ0FUSU9OX1RIUkVBRF9NQVhfQ09NTUVOVFMsXG4gIEluYm94Tm90aWZpY2F0aW9uQ29tbWVudCxcbn0gZnJvbSBcIi4vaW50ZXJuYWwvSW5ib3hOb3RpZmljYXRpb25UaHJlYWRcIjtcbmltcG9ydCB7IExpc3QgfSBmcm9tIFwiLi9pbnRlcm5hbC9MaXN0XCI7XG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIi4vaW50ZXJuYWwvUm9vbVwiO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gXCIuL2ludGVybmFsL1Rvb2x0aXBcIjtcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi9pbnRlcm5hbC9Vc2VyXCI7XG5cbnR5cGUgQ29tcG9uZW50VHlwZVdpdGhSZWY8XG4gIFQgZXh0ZW5kcyBrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHMsXG4gIFAsXG4+ID0gQ29tcG9uZW50VHlwZTxQICYgUGljazxDb21wb25lbnRQcm9wczxUPiwgXCJyZWZcIj4+O1xuXG50eXBlIEluYm94Tm90aWZpY2F0aW9uS2luZHM8S1MgZXh0ZW5kcyBLREFEID0gS0RBRD4gPSB7XG4gIC8vIEZvciBzb21lIHJlYXNvbiwgd2UgY2Fubm90IGRpcmVjdGx5IHVzZSBLREFEIGluIHRoZSBtYXBwZWQgdHlwZSBsaW5lXG4gIC8vIGJlbG93LCBiZWNhdXNlIGl0IHdpbGwgcmVzdWx0IGluICd7fScgcmF0aGVyIHRoYW4gcGlja2luZyB1cCB0aGVcbiAgLy8gZGVmaW5pdGlvbiBmcm9tIHRoZSB1c2VyLXByb3ZpZGVkICdBY3Rpdml0aWVzRGF0YScuIE1pZ2h0IGJlIGFuIGludGVybmFsXG4gIC8vIFRTIG9wdGltaXphdGlvbiwgc28gd2UncmUgbWFraW5nIGl0IGEgcGFyYW0gdG8gZGVmZXIgdGhlIHJlc29sdXRpb24uXG4gIFtLIGluIEtTXTogQ29tcG9uZW50VHlwZVdpdGhSZWY8XCJhXCIsIEluYm94Tm90aWZpY2F0aW9uQ3VzdG9tS2luZFByb3BzPEs+Pjtcbn0gJiB7XG4gIHRocmVhZDogQ29tcG9uZW50VHlwZVdpdGhSZWY8XCJhXCIsIEluYm94Tm90aWZpY2F0aW9uVGhyZWFkS2luZFByb3BzPjtcbiAgdGV4dE1lbnRpb246IENvbXBvbmVudFR5cGVXaXRoUmVmPFwiYVwiLCBJbmJveE5vdGlmaWNhdGlvblRleHRNZW50aW9uS2luZFByb3BzPjtcbn07XG5cbmludGVyZmFjZSBJbmJveE5vdGlmaWNhdGlvblNoYXJlZFByb3BzIHtcbiAgLyoqXG4gICAqIEhvdyB0byBzaG93IG9yIGhpZGUgdGhlIGFjdGlvbnMuXG4gICAqL1xuICBzaG93QWN0aW9ucz86IGJvb2xlYW4gfCBcImhvdmVyXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5ib3hOb3RpZmljYXRpb25Qcm9wc1xuICBleHRlbmRzIE9taXQ8Q29tcG9uZW50UHJvcHNXaXRob3V0UmVmPFwiYVwiPiwgXCJ0aXRsZVwiPixcbiAgICBJbmJveE5vdGlmaWNhdGlvblNoYXJlZFByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBpbmJveCBub3RpZmljYXRpb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGluYm94Tm90aWZpY2F0aW9uOiBJbmJveE5vdGlmaWNhdGlvbkRhdGE7XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHNwZWNpZmljIGtpbmRzIG9mIGluYm94IG5vdGlmaWNhdGlvbnMuXG4gICAqL1xuICBraW5kcz86IFBhcnRpYWw8SW5ib3hOb3RpZmljYXRpb25LaW5kcz47XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBjb21wb25lbnQncyBzdHJpbmdzLlxuICAgKi9cbiAgb3ZlcnJpZGVzPzogUGFydGlhbDxcbiAgICBHbG9iYWxPdmVycmlkZXMgJiBJbmJveE5vdGlmaWNhdGlvbk92ZXJyaWRlcyAmIENvbW1lbnRPdmVycmlkZXNcbiAgPjtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGNvbXBvbmVudCdzIGNvbXBvbmVudHMuXG4gICAqL1xuICBjb21wb25lbnRzPzogUGFydGlhbDxHbG9iYWxDb21wb25lbnRzPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmJveE5vdGlmaWNhdGlvblRocmVhZFByb3BzXG4gIGV4dGVuZHMgT21pdDxJbmJveE5vdGlmaWNhdGlvblByb3BzLCBcImtpbmRzXCIgfCBcImNoaWxkcmVuXCI+LFxuICAgIEluYm94Tm90aWZpY2F0aW9uU2hhcmVkUHJvcHMge1xuICAvKipcbiAgICogVGhlIGluYm94IG5vdGlmaWNhdGlvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgaW5ib3hOb3RpZmljYXRpb246IEluYm94Tm90aWZpY2F0aW9uVGhyZWFkRGF0YTtcblxuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHRoZSByb29tIG5hbWUgaW4gdGhlIHRpdGxlLlxuICAgKi9cbiAgc2hvd1Jvb21OYW1lPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmJveE5vdGlmaWNhdGlvblRleHRNZW50aW9uUHJvcHNcbiAgZXh0ZW5kcyBPbWl0PEluYm94Tm90aWZpY2F0aW9uUHJvcHMsIFwia2luZHNcIj4sXG4gICAgSW5ib3hOb3RpZmljYXRpb25TaGFyZWRQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgaW5ib3ggbm90aWZpY2F0aW9uIHRvIGRpc3BsYXkuXG4gICAqL1xuICBpbmJveE5vdGlmaWNhdGlvbjogSW5ib3hOb3RpZmljYXRpb25UZXh0TWVudGlvbkRhdGE7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgcm9vbSBuYW1lIGluIHRoZSB0aXRsZS5cbiAgICovXG4gIHNob3dSb29tTmFtZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5ib3hOb3RpZmljYXRpb25DdXN0b21Qcm9wc1xuICBleHRlbmRzIE9taXQ8SW5ib3hOb3RpZmljYXRpb25Qcm9wcywgXCJraW5kc1wiPixcbiAgICBJbmJveE5vdGlmaWNhdGlvblNoYXJlZFByb3BzLFxuICAgIFNsb3RQcm9wIHtcbiAgLyoqXG4gICAqIFRoZSBpbmJveCBub3RpZmljYXRpb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGluYm94Tm90aWZpY2F0aW9uOiBJbmJveE5vdGlmaWNhdGlvbkN1c3RvbURhdGE7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmJveCBub3RpZmljYXRpb24ncyBjb250ZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcblxuICAvKipcbiAgICogVGhlIGluYm94IG5vdGlmaWNhdGlvbidzIHRpdGxlLlxuICAgKi9cbiAgdGl0bGU6IFJlYWN0Tm9kZTtcblxuICAvKipcbiAgICogVGhlIGluYm94IG5vdGlmaWNhdGlvbidzIGFzaWRlIGNvbnRlbnQuXG4gICAqIENhbiBiZSBjb21iaW5lZCB3aXRoIGBJbmJveE5vdGlmaWNhdGlvbi5JY29uYCBvciBgSW5ib3hOb3RpZmljYXRpb24uQXZhdGFyYCB0byBlYXNpbHkgZm9sbG93IGRlZmF1bHQgc3R5bGVzLlxuICAgKi9cbiAgYXNpZGU/OiBSZWFjdE5vZGU7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gbWFyayB0aGUgaW5ib3ggbm90aWZpY2F0aW9uIGFzIHJlYWQgd2hlbiBjbGlja2VkLlxuICAgKi9cbiAgbWFya0FzUmVhZE9uQ2xpY2s/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBJbmJveE5vdGlmaWNhdGlvblRocmVhZEtpbmRQcm9wcyA9IE9taXQ8XG4gIEluYm94Tm90aWZpY2F0aW9uUHJvcHMsXG4gIFwia2luZHNcIlxuPiAmIHtcbiAgaW5ib3hOb3RpZmljYXRpb246IEluYm94Tm90aWZpY2F0aW9uVGhyZWFkRGF0YTtcbn07XG5cbmV4cG9ydCB0eXBlIEluYm94Tm90aWZpY2F0aW9uVGV4dE1lbnRpb25LaW5kUHJvcHMgPSBPbWl0PFxuICBJbmJveE5vdGlmaWNhdGlvblByb3BzLFxuICBcImtpbmRzXCJcbj4gJiB7XG4gIGluYm94Tm90aWZpY2F0aW9uOiBJbmJveE5vdGlmaWNhdGlvblRleHRNZW50aW9uRGF0YTtcbn07XG5cbmV4cG9ydCB0eXBlIEluYm94Tm90aWZpY2F0aW9uQ3VzdG9tS2luZFByb3BzPEsgZXh0ZW5kcyBLREFEID0gS0RBRD4gPSBPbWl0PFxuICBJbmJveE5vdGlmaWNhdGlvblByb3BzLFxuICBcImtpbmRzXCJcbj4gJiB7XG4gIGluYm94Tm90aWZpY2F0aW9uOiBJbmJveE5vdGlmaWNhdGlvbkN1c3RvbURhdGE8Sz47XG59O1xuXG5pbnRlcmZhY2UgSW5ib3hOb3RpZmljYXRpb25MYXlvdXRQcm9wc1xuICBleHRlbmRzIE9taXQ8Q29tcG9uZW50UHJvcHNXaXRob3V0UmVmPFwiYVwiPiwgXCJ0aXRsZVwiPixcbiAgICBJbmJveE5vdGlmaWNhdGlvblNoYXJlZFByb3BzLFxuICAgIFNsb3RQcm9wIHtcbiAgaW5ib3hOb3RpZmljYXRpb246IEluYm94Tm90aWZpY2F0aW9uRGF0YTtcbiAgYXNpZGU6IFJlYWN0Tm9kZTtcbiAgdGl0bGU6IFJlYWN0Tm9kZTtcbiAgZGF0ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlcjtcbiAgdW5yZWFkPzogYm9vbGVhbjtcbiAgb3ZlcnJpZGVzPzogUGFydGlhbDxHbG9iYWxPdmVycmlkZXMgJiBJbmJveE5vdGlmaWNhdGlvbk92ZXJyaWRlcz47XG4gIGNvbXBvbmVudHM/OiBQYXJ0aWFsPEdsb2JhbENvbXBvbmVudHM+O1xuICBtYXJrQXNSZWFkT25DbGljaz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIEluYm94Tm90aWZpY2F0aW9uSWNvblByb3BzID0gQ29tcG9uZW50UHJvcHM8XCJkaXZcIj47XG5cbmV4cG9ydCB0eXBlIEluYm94Tm90aWZpY2F0aW9uQXZhdGFyUHJvcHMgPSBBdmF0YXJQcm9wcztcblxuY29uc3QgSW5ib3hOb3RpZmljYXRpb25MYXlvdXQgPSBmb3J3YXJkUmVmPFxuICBIVE1MQW5jaG9yRWxlbWVudCxcbiAgSW5ib3hOb3RpZmljYXRpb25MYXlvdXRQcm9wc1xuPihcbiAgKFxuICAgIHtcbiAgICAgIGluYm94Tm90aWZpY2F0aW9uLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBhc2lkZSxcbiAgICAgIHRpdGxlLFxuICAgICAgZGF0ZSxcbiAgICAgIHVucmVhZCxcbiAgICAgIG1hcmtBc1JlYWRPbkNsaWNrLFxuICAgICAgb25DbGljayxcbiAgICAgIGhyZWYsXG4gICAgICBzaG93QWN0aW9ucyxcbiAgICAgIG92ZXJyaWRlcyxcbiAgICAgIGNvbXBvbmVudHMsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBhc0NoaWxkLFxuICAgICAgLi4ucHJvcHNcbiAgICB9LFxuICAgIGZvcndhcmRlZFJlZlxuICApID0+IHtcbiAgICBjb25zdCAkID0gdXNlT3ZlcnJpZGVzKG92ZXJyaWRlcyk7XG4gICAgY29uc3QgeyBBbmNob3IgfSA9IHVzZUNvbXBvbmVudHMoY29tcG9uZW50cyk7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gYXNDaGlsZCA/IFNsb3QgOiBBbmNob3I7XG4gICAgY29uc3QgW2lzTW9yZUFjdGlvbk9wZW4sIHNldE1vcmVBY3Rpb25PcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBtYXJrSW5ib3hOb3RpZmljYXRpb25Bc1JlYWQgPSB1c2VNYXJrSW5ib3hOb3RpZmljYXRpb25Bc1JlYWQoKTtcbiAgICBjb25zdCBkZWxldGVJbmJveE5vdGlmaWNhdGlvbiA9IHVzZURlbGV0ZUluYm94Tm90aWZpY2F0aW9uKCk7XG5cbiAgICBjb25zdCBoYW5kbGVDbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgKGV2ZW50OiBSZWFjdE1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQsIE1vdXNlRXZlbnQ+KSA9PiB7XG4gICAgICAgIG9uQ2xpY2s/LihldmVudCk7XG5cbiAgICAgICAgY29uc3Qgc2hvdWxkTWFya0FzUmVhZE9uQ2xpY2sgPSBtYXJrQXNSZWFkT25DbGljayA/PyBCb29sZWFuKGhyZWYpO1xuXG4gICAgICAgIGlmICh1bnJlYWQgJiYgc2hvdWxkTWFya0FzUmVhZE9uQ2xpY2spIHtcbiAgICAgICAgICBtYXJrSW5ib3hOb3RpZmljYXRpb25Bc1JlYWQoaW5ib3hOb3RpZmljYXRpb24uaWQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBocmVmLFxuICAgICAgICBpbmJveE5vdGlmaWNhdGlvbi5pZCxcbiAgICAgICAgbWFya0FzUmVhZE9uQ2xpY2ssXG4gICAgICAgIG1hcmtJbmJveE5vdGlmaWNhdGlvbkFzUmVhZCxcbiAgICAgICAgb25DbGljayxcbiAgICAgICAgdW5yZWFkLFxuICAgICAgXVxuICAgICk7XG5cbiAgICBjb25zdCBzdG9wUHJvcGFnYXRpb24gPSB1c2VDYWxsYmFjaygoZXZlbnQ6IFN5bnRoZXRpY0V2ZW50KSA9PiB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCBwcmV2ZW50RGVmYXVsdEFuZFN0b3BQcm9wYWdhdGlvbiA9IHVzZUNhbGxiYWNrKFxuICAgICAgKGV2ZW50OiBTeW50aGV0aWNFdmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICBbXVxuICAgICk7XG5cbiAgICBjb25zdCBoYW5kbGVNb3JlQ2xpY2sgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IFJlYWN0TW91c2VFdmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgc2V0TW9yZUFjdGlvbk9wZW4oKG9wZW4pID0+ICFvcGVuKTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCBoYW5kbGVNYXJrQXNSZWFkID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgbWFya0luYm94Tm90aWZpY2F0aW9uQXNSZWFkKGluYm94Tm90aWZpY2F0aW9uLmlkKTtcbiAgICB9LCBbaW5ib3hOb3RpZmljYXRpb24uaWQsIG1hcmtJbmJveE5vdGlmaWNhdGlvbkFzUmVhZF0pO1xuXG4gICAgY29uc3QgaGFuZGxlRGVsZXRlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgZGVsZXRlSW5ib3hOb3RpZmljYXRpb24oaW5ib3hOb3RpZmljYXRpb24uaWQpO1xuICAgIH0sIFtpbmJveE5vdGlmaWNhdGlvbi5pZCwgZGVsZXRlSW5ib3hOb3RpZmljYXRpb25dKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcFByb3ZpZGVyPlxuICAgICAgICA8Q29tcG9uZW50XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgICAgXCJsYi1yb290IGxiLWluYm94LW5vdGlmaWNhdGlvblwiLFxuICAgICAgICAgICAgc2hvd0FjdGlvbnMgPT09IFwiaG92ZXJcIiAmJlxuICAgICAgICAgICAgICBcImxiLWluYm94LW5vdGlmaWNhdGlvbjpzaG93LWFjdGlvbnMtaG92ZXJcIixcbiAgICAgICAgICAgIGlzTW9yZUFjdGlvbk9wZW4gJiYgXCJsYi1pbmJveC1ub3RpZmljYXRpb246YWN0aW9uLW9wZW5cIixcbiAgICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICAgICl9XG4gICAgICAgICAgZGlyPXskLmRpcn1cbiAgICAgICAgICBkYXRhLXVucmVhZD17dW5yZWFkID8gXCJcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICBkYXRhLWtpbmQ9e2luYm94Tm90aWZpY2F0aW9uLmtpbmR9XG4gICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgICAgaHJlZj17aHJlZn1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICAgID5cbiAgICAgICAgICB7YXNpZGUgJiYgPGRpdiBjbGFzc05hbWU9XCJsYi1pbmJveC1ub3RpZmljYXRpb24tYXNpZGVcIj57YXNpZGV9PC9kaXY+fVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGItaW5ib3gtbm90aWZpY2F0aW9uLWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGItaW5ib3gtbm90aWZpY2F0aW9uLWhlYWRlclwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsYi1pbmJveC1ub3RpZmljYXRpb24tdGl0bGVcIj57dGl0bGV9PC9zcGFuPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxiLWluYm94LW5vdGlmaWNhdGlvbi1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGItaW5ib3gtbm90aWZpY2F0aW9uLWRldGFpbHMtbGFiZWxzXCI+XG4gICAgICAgICAgICAgICAgICA8VGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZT17JC5sb2NhbGV9XG4gICAgICAgICAgICAgICAgICAgIGRhdGU9e2RhdGV9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImxiLWluYm94LW5vdGlmaWNhdGlvbi1kYXRlXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICB7dW5yZWFkICYmIChcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsYi1pbmJveC1ub3RpZmljYXRpb24tdW5yZWFkLWluZGljYXRvclwiXG4gICAgICAgICAgICAgICAgICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIHtzaG93QWN0aW9ucyAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsYi1pbmJveC1ub3RpZmljYXRpb24tYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgIG9wZW49e2lzTW9yZUFjdGlvbk9wZW59XG4gICAgICAgICAgICAgICAgICAgIG9uT3BlbkNoYW5nZT17c2V0TW9yZUFjdGlvbk9wZW59XG4gICAgICAgICAgICAgICAgICAgIGFsaWduPVwiZW5kXCJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudD17XG4gICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt1bnJlYWQgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdD17aGFuZGxlTWFya0FzUmVhZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtzdG9wUHJvcGFnYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tJY29uIGNsYXNzTmFtZT1cImxiLWRyb3Bkb3duLWl0ZW0taWNvblwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyQuSU5CT1hfTk9USUZJQ0FUSU9OX01BUktfQVNfUkVBRH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q9e2hhbmRsZURlbGV0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17c3RvcFByb3BhZ2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8RGVsZXRlSWNvbiBjbGFzc05hbWU9XCJsYi1kcm9wZG93bi1pdGVtLWljb25cIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7JC5JTkJPWF9OT1RJRklDQVRJT05fREVMRVRFfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPFRvb2x0aXAgY29udGVudD17JC5JTkJPWF9OT1RJRklDQVRJT05fTU9SRX0+XG4gICAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duVHJpZ2dlciBhc0NoaWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsYi1pbmJveC1ub3RpZmljYXRpb24tYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlTW9yZUNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBvblBvaW50ZXJEb3duPXtwcmV2ZW50RGVmYXVsdEFuZFN0b3BQcm9wYWdhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25Qb2ludGVyVXA9e3ByZXZlbnREZWZhdWx0QW5kU3RvcFByb3BhZ2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXskLklOQk9YX05PVElGSUNBVElPTl9NT1JFfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8RWxsaXBzaXNJY29uIGNsYXNzTmFtZT1cImxiLWJ1dHRvbi1pY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25UcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxiLWluYm94LW5vdGlmaWNhdGlvbi1ib2R5XCI+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0NvbXBvbmVudD5cbiAgICAgIDwvVG9vbHRpcFByb3ZpZGVyPlxuICAgICk7XG4gIH1cbik7XG5cbmZ1bmN0aW9uIEluYm94Tm90aWZpY2F0aW9uSWNvbih7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IEluYm94Tm90aWZpY2F0aW9uSWNvblByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFwibGItaW5ib3gtbm90aWZpY2F0aW9uLWljb25cIiwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBJbmJveE5vdGlmaWNhdGlvbkF2YXRhcih7XG4gIGNsYXNzTmFtZSxcbiAgLi4ucHJvcHNcbn06IEluYm94Tm90aWZpY2F0aW9uQXZhdGFyUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QXZhdGFyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJsYi1pbmJveC1ub3RpZmljYXRpb24tYXZhdGFyXCIsIGNsYXNzTmFtZSl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgLz5cbiAgKTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5cyBhIHRocmVhZCBpbmJveCBub3RpZmljYXRpb24uXG4gKi9cbmNvbnN0IEluYm94Tm90aWZpY2F0aW9uVGhyZWFkID0gZm9yd2FyZFJlZjxcbiAgSFRNTEFuY2hvckVsZW1lbnQsXG4gIEluYm94Tm90aWZpY2F0aW9uVGhyZWFkUHJvcHNcbj4oXG4gIChcbiAgICB7XG4gICAgICBpbmJveE5vdGlmaWNhdGlvbixcbiAgICAgIGhyZWYsXG4gICAgICBzaG93Um9vbU5hbWUgPSB0cnVlLFxuICAgICAgc2hvd0FjdGlvbnMgPSBcImhvdmVyXCIsXG4gICAgICBvdmVycmlkZXMsXG4gICAgICAuLi5wcm9wc1xuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIGNvbnN0ICQgPSB1c2VPdmVycmlkZXMob3ZlcnJpZGVzKTtcbiAgICBjb25zdCB0aHJlYWQgPSB1c2VJbmJveE5vdGlmaWNhdGlvblRocmVhZChpbmJveE5vdGlmaWNhdGlvbi5pZCk7XG4gICAgY29uc3QgY3VycmVudFVzZXJJZCA9IHVzZUN1cnJlbnRVc2VySWQoKTtcbiAgICAvLyBUT0RPOiBJZiB5b3UgcHJvdmlkZSBgaHJlZmAgKG9yIHBsYW4gdG8pLCB3ZSBzaG91bGRuJ3QgcnVuIHRoaXMgaG9vay4gV2Ugc2hvdWxkIGZpbmQgYSB3YXkgdG8gY29uZGl0aW9uYWxseSBydW4gaXQuXG4gICAgLy8gICAgICAgQmVjYXVzZSBvZiBiYXRjaGluZyBhbmQgdGhlIGZhY3QgdGhhdCB0aGUgc2FtZSBob29rIHdpbGwgYmUgY2FsbGVkIHdpdGhpbiA8Um9vbSAvPiBpbiB0aGUgbm90aWZpY2F0aW9uJ3MgdGl0bGUsXG4gICAgLy8gICAgICAgaXQncyBub3QgYSBiaWcgZGVhbCwgdGhlIG9ubHkgc2NlbmFyaW8gd2hlcmUgaXQgd291bGQgYmUgc3VwZXJmbHVvdXMgd291bGQgYmUgaWYgdGhlIHVzZXIgcHJvdmlkZXMgdGhlaXIgb3duXG4gICAgLy8gICAgICAgYGhyZWZgIEFORCBkaXNhYmxlcyByb29tIG5hbWVzIGluIHRoZSB0aXRsZSB2aWEgYHNob3dSb29tTmFtZT17ZmFsc2V9YC5cbiAgICBjb25zdCB7IGluZm8gfSA9IHVzZVJvb21JbmZvKGluYm94Tm90aWZpY2F0aW9uLnJvb21JZCk7XG4gICAgY29uc3QgeyB1bnJlYWQsIGRhdGUsIGFzaWRlLCB0aXRsZSwgY29udGVudCwgY29tbWVudElkIH0gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnRzID0gZ2VuZXJhdGVJbmJveE5vdGlmaWNhdGlvblRocmVhZENvbnRlbnRzKFxuICAgICAgICBpbmJveE5vdGlmaWNhdGlvbixcbiAgICAgICAgdGhyZWFkLFxuICAgICAgICBjdXJyZW50VXNlcklkID8/IFwiXCJcbiAgICAgICk7XG5cbiAgICAgIHN3aXRjaCAoY29udGVudHMudHlwZSkge1xuICAgICAgICBjYXNlIFwiY29tbWVudHNcIjoge1xuICAgICAgICAgIGNvbnN0IHJldmVyc2VkVXNlcklkcyA9IFsuLi5jb250ZW50cy51c2VySWRzXS5yZXZlcnNlKCk7XG4gICAgICAgICAgY29uc3QgZmlyc3RVc2VySWQgPSByZXZlcnNlZFVzZXJJZHNbMF07XG5cbiAgICAgICAgICBjb25zdCBhc2lkZSA9IDxJbmJveE5vdGlmaWNhdGlvbkF2YXRhciB1c2VySWQ9e2ZpcnN0VXNlcklkfSAvPjtcbiAgICAgICAgICBjb25zdCB0aXRsZSA9ICQuSU5CT1hfTk9USUZJQ0FUSU9OX1RIUkVBRF9DT01NRU5UU19MSVNUKFxuICAgICAgICAgICAgPExpc3RcbiAgICAgICAgICAgICAgdmFsdWVzPXtyZXZlcnNlZFVzZXJJZHMubWFwKCh1c2VySWQsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPFVzZXJcbiAgICAgICAgICAgICAgICAgIGtleT17dXNlcklkfVxuICAgICAgICAgICAgICAgICAgdXNlcklkPXt1c2VySWR9XG4gICAgICAgICAgICAgICAgICBjYXBpdGFsaXplPXtpbmRleCA9PT0gMH1cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2VTZWxmXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIGZvcm1hdFJlbWFpbmluZz17JC5MSVNUX1JFTUFJTklOR19VU0VSU31cbiAgICAgICAgICAgICAgdHJ1bmNhdGU9e0lOQk9YX05PVElGSUNBVElPTl9USFJFQURfTUFYX0NPTU1FTlRTIC0gMX1cbiAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgc2hvd1Jvb21OYW1lID8gPFJvb20gcm9vbUlkPXt0aHJlYWQucm9vbUlkfSAvPiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJldmVyc2VkVXNlcklkcy5sZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxiLWluYm94LW5vdGlmaWNhdGlvbi1jb21tZW50c1wiPlxuICAgICAgICAgICAgICB7Y29udGVudHMuY29tbWVudHMubWFwKChjb21tZW50KSA9PiAoXG4gICAgICAgICAgICAgICAgPEluYm94Tm90aWZpY2F0aW9uQ29tbWVudFxuICAgICAgICAgICAgICAgICAga2V5PXtjb21tZW50LmlkfVxuICAgICAgICAgICAgICAgICAgY29tbWVudD17Y29tbWVudH1cbiAgICAgICAgICAgICAgICAgIHNob3dIZWFkZXI9e2NvbnRlbnRzLmNvbW1lbnRzLmxlbmd0aCA+IDF9XG4gICAgICAgICAgICAgICAgICBvdmVycmlkZXM9e292ZXJyaWRlc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5yZWFkOiBjb250ZW50cy51bnJlYWQsXG4gICAgICAgICAgICBkYXRlOiBjb250ZW50cy5kYXRlLFxuICAgICAgICAgICAgYXNpZGUsXG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aHJlYWRJZDogdGhyZWFkLmlkLFxuICAgICAgICAgICAgY29tbWVudElkOiBjb250ZW50cy5jb21tZW50c1tjb250ZW50cy5jb21tZW50cy5sZW5ndGggLSAxXS5pZCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBcIm1lbnRpb25cIjoge1xuICAgICAgICAgIGNvbnN0IG1lbnRpb25Vc2VySWQgPSBjb250ZW50cy51c2VySWRzWzBdO1xuICAgICAgICAgIGNvbnN0IG1lbnRpb25Db21tZW50ID0gY29udGVudHMuY29tbWVudHNbMF07XG5cbiAgICAgICAgICBjb25zdCBhc2lkZSA9IDxJbmJveE5vdGlmaWNhdGlvbkF2YXRhciB1c2VySWQ9e21lbnRpb25Vc2VySWR9IC8+O1xuICAgICAgICAgIGNvbnN0IHRpdGxlID0gJC5JTkJPWF9OT1RJRklDQVRJT05fVEhSRUFEX01FTlRJT04oXG4gICAgICAgICAgICA8VXNlciBrZXk9e21lbnRpb25Vc2VySWR9IHVzZXJJZD17bWVudGlvblVzZXJJZH0gY2FwaXRhbGl6ZSAvPixcbiAgICAgICAgICAgIHNob3dSb29tTmFtZSA/IDxSb29tIHJvb21JZD17dGhyZWFkLnJvb21JZH0gLz4gOiB1bmRlZmluZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxiLWluYm94LW5vdGlmaWNhdGlvbi1jb21tZW50c1wiPlxuICAgICAgICAgICAgICA8SW5ib3hOb3RpZmljYXRpb25Db21tZW50XG4gICAgICAgICAgICAgICAga2V5PXttZW50aW9uQ29tbWVudC5pZH1cbiAgICAgICAgICAgICAgICBjb21tZW50PXttZW50aW9uQ29tbWVudH1cbiAgICAgICAgICAgICAgICBzaG93SGVhZGVyPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5yZWFkOiBjb250ZW50cy51bnJlYWQsXG4gICAgICAgICAgICBkYXRlOiBjb250ZW50cy5kYXRlLFxuICAgICAgICAgICAgYXNpZGUsXG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aHJlYWRJZDogdGhyZWFkLmlkLFxuICAgICAgICAgICAgY29tbWVudElkOiBtZW50aW9uQ29tbWVudC5pZCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gYXNzZXJ0TmV2ZXIoXG4gICAgICAgICAgICBjb250ZW50cyxcbiAgICAgICAgICAgIFwiVW5leHBlY3RlZCB0aHJlYWQgaW5ib3ggbm90aWZpY2F0aW9uIHR5cGVcIlxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfSwgWyQsIGN1cnJlbnRVc2VySWQsIGluYm94Tm90aWZpY2F0aW9uLCBvdmVycmlkZXMsIHNob3dSb29tTmFtZSwgdGhyZWFkXSk7XG4gICAgLy8gQWRkIHRoZSB0aHJlYWQgSUQgYW5kIGNvbW1lbnQgSUQgdG8gdGhlIGBocmVmYC5cbiAgICAvLyBBbmQgdXNlIFVSTCBmcm9tIGByZXNvbHZlUm9vbXNJbmZvYCBpZiBgaHJlZmAgaXNuJ3Qgc2V0LlxuICAgIGNvbnN0IHJlc29sdmVkSHJlZiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgY29uc3QgcmVzb2x2ZWRIcmVmID0gaHJlZiA/PyBpbmZvPy51cmw7XG5cbiAgICAgIHJldHVybiByZXNvbHZlZEhyZWZcbiAgICAgICAgPyBnZW5lcmF0ZVVSTChyZXNvbHZlZEhyZWYsIHVuZGVmaW5lZCwgY29tbWVudElkKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9LCBbY29tbWVudElkLCBocmVmLCBpbmZvPy51cmxdKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8SW5ib3hOb3RpZmljYXRpb25MYXlvdXRcbiAgICAgICAgaW5ib3hOb3RpZmljYXRpb249e2luYm94Tm90aWZpY2F0aW9ufVxuICAgICAgICBhc2lkZT17YXNpZGV9XG4gICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgZGF0ZT17ZGF0ZX1cbiAgICAgICAgdW5yZWFkPXt1bnJlYWR9XG4gICAgICAgIG92ZXJyaWRlcz17b3ZlcnJpZGVzfVxuICAgICAgICBocmVmPXtyZXNvbHZlZEhyZWZ9XG4gICAgICAgIHNob3dBY3Rpb25zPXtzaG93QWN0aW9uc31cbiAgICAgICAgbWFya0FzUmVhZE9uQ2xpY2s9e2ZhbHNlfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgPlxuICAgICAgICB7Y29udGVudH1cbiAgICAgIDwvSW5ib3hOb3RpZmljYXRpb25MYXlvdXQ+XG4gICAgKTtcbiAgfVxuKTtcblxuLyoqXG4gKiBEaXNwbGF5cyBhIHRleHQgbWVudGlvbiBub3RpZmljYXRpb24ga2luZC5cbiAqL1xuY29uc3QgSW5ib3hOb3RpZmljYXRpb25UZXh0TWVudGlvbiA9IGZvcndhcmRSZWY8XG4gIEhUTUxBbmNob3JFbGVtZW50LFxuICBJbmJveE5vdGlmaWNhdGlvblRleHRNZW50aW9uUHJvcHNcbj4oXG4gIChcbiAgICB7XG4gICAgICBpbmJveE5vdGlmaWNhdGlvbixcbiAgICAgIHNob3dBY3Rpb25zID0gXCJob3ZlclwiLFxuICAgICAgc2hvd1Jvb21OYW1lID0gdHJ1ZSxcbiAgICAgIG92ZXJyaWRlcyxcbiAgICAgIC4uLnByb3BzXG4gICAgfSxcbiAgICByZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgJCA9IHVzZU92ZXJyaWRlcyhvdmVycmlkZXMpO1xuXG4gICAgY29uc3QgdW5yZWFkID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAhaW5ib3hOb3RpZmljYXRpb24ucmVhZEF0IHx8XG4gICAgICAgIGluYm94Tm90aWZpY2F0aW9uLm5vdGlmaWVkQXQgPiBpbmJveE5vdGlmaWNhdGlvbi5yZWFkQXRcbiAgICAgICk7XG4gICAgfSwgW2luYm94Tm90aWZpY2F0aW9uLm5vdGlmaWVkQXQsIGluYm94Tm90aWZpY2F0aW9uLnJlYWRBdF0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxJbmJveE5vdGlmaWNhdGlvbkxheW91dFxuICAgICAgICBpbmJveE5vdGlmaWNhdGlvbj17aW5ib3hOb3RpZmljYXRpb259XG4gICAgICAgIGFzaWRlPXs8SW5ib3hOb3RpZmljYXRpb25BdmF0YXIgdXNlcklkPXtpbmJveE5vdGlmaWNhdGlvbi5jcmVhdGVkQnl9IC8+fVxuICAgICAgICB0aXRsZT17JC5JTkJPWF9OT1RJRklDQVRJT05fVEVYVF9NRU5USU9OKFxuICAgICAgICAgIDxVc2VyXG4gICAgICAgICAgICBrZXk9e2luYm94Tm90aWZpY2F0aW9uLmNyZWF0ZWRCeX1cbiAgICAgICAgICAgIHVzZXJJZD17aW5ib3hOb3RpZmljYXRpb24uY3JlYXRlZEJ5fVxuICAgICAgICAgICAgY2FwaXRhbGl6ZVxuICAgICAgICAgIC8+LFxuICAgICAgICAgIHNob3dSb29tTmFtZSA/IDxSb29tIHJvb21JZD17aW5ib3hOb3RpZmljYXRpb24ucm9vbUlkfSAvPiA6IHVuZGVmaW5lZFxuICAgICAgICApfVxuICAgICAgICBkYXRlPXtpbmJveE5vdGlmaWNhdGlvbi5ub3RpZmllZEF0fVxuICAgICAgICB1bnJlYWQ9e3VucmVhZH1cbiAgICAgICAgb3ZlcnJpZGVzPXtvdmVycmlkZXN9XG4gICAgICAgIHNob3dBY3Rpb25zPXtzaG93QWN0aW9uc31cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuKTtcblxuLyoqXG4gKiBEaXNwbGF5cyBhIGN1c3RvbSBub3RpZmljYXRpb24ga2luZC5cbiAqL1xuY29uc3QgSW5ib3hOb3RpZmljYXRpb25DdXN0b20gPSBmb3J3YXJkUmVmPFxuICBIVE1MQW5jaG9yRWxlbWVudCxcbiAgSW5ib3hOb3RpZmljYXRpb25DdXN0b21Qcm9wc1xuPihcbiAgKFxuICAgIHtcbiAgICAgIGluYm94Tm90aWZpY2F0aW9uLFxuICAgICAgc2hvd0FjdGlvbnMgPSBcImhvdmVyXCIsXG4gICAgICB0aXRsZSxcbiAgICAgIGFzaWRlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBvdmVycmlkZXMsXG4gICAgICAuLi5wcm9wc1xuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IHVucmVhZCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgIWluYm94Tm90aWZpY2F0aW9uLnJlYWRBdCB8fFxuICAgICAgICBpbmJveE5vdGlmaWNhdGlvbi5ub3RpZmllZEF0ID4gaW5ib3hOb3RpZmljYXRpb24ucmVhZEF0XG4gICAgICApO1xuICAgIH0sIFtpbmJveE5vdGlmaWNhdGlvbi5ub3RpZmllZEF0LCBpbmJveE5vdGlmaWNhdGlvbi5yZWFkQXRdKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8SW5ib3hOb3RpZmljYXRpb25MYXlvdXRcbiAgICAgICAgaW5ib3hOb3RpZmljYXRpb249e2luYm94Tm90aWZpY2F0aW9ufVxuICAgICAgICBhc2lkZT17YXNpZGV9XG4gICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgZGF0ZT17aW5ib3hOb3RpZmljYXRpb24ubm90aWZpZWRBdH1cbiAgICAgICAgdW5yZWFkPXt1bnJlYWR9XG4gICAgICAgIG92ZXJyaWRlcz17b3ZlcnJpZGVzfVxuICAgICAgICBzaG93QWN0aW9ucz17c2hvd0FjdGlvbnN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvSW5ib3hOb3RpZmljYXRpb25MYXlvdXQ+XG4gICAgKTtcbiAgfVxuKTtcblxuY29uc3QgSW5ib3hOb3RpZmljYXRpb25DdXN0b21NaXNzaW5nID0gZm9yd2FyZFJlZjxcbiAgSFRNTEFuY2hvckVsZW1lbnQsXG4gIE9taXQ8SW5ib3hOb3RpZmljYXRpb25DdXN0b21Qcm9wcywgXCJjaGlsZHJlblwiIHwgXCJ0aXRsZVwiIHwgXCJhc2lkZVwiPlxuPigoeyBpbmJveE5vdGlmaWNhdGlvbiwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEluYm94Tm90aWZpY2F0aW9uQ3VzdG9tXG4gICAgICBpbmJveE5vdGlmaWNhdGlvbj17aW5ib3hOb3RpZmljYXRpb259XG4gICAgICB7Li4ucHJvcHN9XG4gICAgICB0aXRsZT17XG4gICAgICAgIDw+XG4gICAgICAgICAgQ3VzdG9tIG5vdGlmaWNhdGlvbiBraW5kIDxjb2RlPntpbmJveE5vdGlmaWNhdGlvbi5raW5kfTwvY29kZT4gaXMgbm90XG4gICAgICAgICAgaGFuZGxlZFxuICAgICAgICA8Lz5cbiAgICAgIH1cbiAgICAgIGFzaWRlPXtcbiAgICAgICAgPEluYm94Tm90aWZpY2F0aW9uSWNvbj5cbiAgICAgICAgICA8TWlzc2luZ0ljb24gLz5cbiAgICAgICAgPC9JbmJveE5vdGlmaWNhdGlvbkljb24+XG4gICAgICB9XG4gICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgIGRhdGEtbWlzc2luZz1cIlwiXG4gICAgPlxuICAgICAgey8qIFRPRE86IEFkZCBsaW5rIHRvIHRoZSBkb2NzICovfVxuICAgICAgTm90aWZpY2F0aW9ucyBvZiB0aGlzIGtpbmQgd29u4oCZdCBiZSBkaXNwbGF5ZWQgaW4gcHJvZHVjdGlvbi4gVXNlIHRoZXtcIiBcIn1cbiAgICAgIDxjb2RlPmtpbmRzPC9jb2RlPiBwcm9wIHRvIGRlZmluZSBob3cgdGhleSBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgPC9JbmJveE5vdGlmaWNhdGlvbkN1c3RvbT5cbiAgKTtcbn0pO1xuXG4vLyBLZWVwcyB0cmFjayBvZiB3aGljaCBpbmJveCBub3RpZmljYXRpb24ga2luZHMgaXQgaGFzIHdhcm5lZCBhYm91dCBhbHJlYWR5LlxuY29uc3QgaW5ib3hOb3RpZmljYXRpb25LaW5kc1dhcm5pbmdzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBEaXNwbGF5cyBhIHNpbmdsZSBpbmJveCBub3RpZmljYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIDw+XG4gKiAgIHtpbmJveE5vdGlmaWNhdGlvbnMubWFwKChpbmJveE5vdGlmaWNhdGlvbikgPT4gKFxuICogICAgIDxJbmJveE5vdGlmaWNhdGlvblxuICogICAgICAga2V5PXtpbmJveE5vdGlmaWNhdGlvbi5pZH1cbiAqICAgICAgIGluYm94Tm90aWZpY2F0aW9uPXtpbmJveE5vdGlmaWNhdGlvbn1cbiAqICAgICAgIGhyZWY9e2Avcm9vbXMvJHtpbmJveE5vdGlmaWNhdGlvbi5yb29tSWR9YFxuICogICAgIC8+XG4gKiAgICkpfVxuICogPC8+XG4gKi9cbmV4cG9ydCBjb25zdCBJbmJveE5vdGlmaWNhdGlvbiA9IE9iamVjdC5hc3NpZ24oXG4gIGZvcndhcmRSZWY8SFRNTEFuY2hvckVsZW1lbnQsIEluYm94Tm90aWZpY2F0aW9uUHJvcHM+KFxuICAgICh7IGluYm94Tm90aWZpY2F0aW9uLCBraW5kcywgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgICBzd2l0Y2ggKGluYm94Tm90aWZpY2F0aW9uLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcInRocmVhZFwiOiB7XG4gICAgICAgICAgY29uc3QgUmVzb2x2ZWRJbmJveE5vdGlmaWNhdGlvblRocmVhZCA9XG4gICAgICAgICAgICBraW5kcz8udGhyZWFkID8/IEluYm94Tm90aWZpY2F0aW9uVGhyZWFkO1xuXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxSZXNvbHZlZEluYm94Tm90aWZpY2F0aW9uVGhyZWFkXG4gICAgICAgICAgICAgIGluYm94Tm90aWZpY2F0aW9uPXtpbmJveE5vdGlmaWNhdGlvbn1cbiAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgXCJ0ZXh0TWVudGlvblwiOiB7XG4gICAgICAgICAgY29uc3QgUmVzb2x2ZWRJbmJveE5vdGlmaWNhdGlvblRleHRNZW50aW9uID1cbiAgICAgICAgICAgIGtpbmRzPy50ZXh0TWVudGlvbiA/PyBJbmJveE5vdGlmaWNhdGlvblRleHRNZW50aW9uO1xuXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxSZXNvbHZlZEluYm94Tm90aWZpY2F0aW9uVGV4dE1lbnRpb25cbiAgICAgICAgICAgICAgaW5ib3hOb3RpZmljYXRpb249e2luYm94Tm90aWZpY2F0aW9ufVxuICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGNvbnN0IFJlc29sdmVkSW5ib3hOb3RpZmljYXRpb25DdXN0b20gPVxuICAgICAgICAgICAga2luZHM/LltpbmJveE5vdGlmaWNhdGlvbi5raW5kXTtcblxuICAgICAgICAgIGlmICghUmVzb2x2ZWRJbmJveE5vdGlmaWNhdGlvbkN1c3RvbSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgICBpZiAoIWluYm94Tm90aWZpY2F0aW9uS2luZHNXYXJuaW5ncy5oYXMoaW5ib3hOb3RpZmljYXRpb24ua2luZCkpIHtcbiAgICAgICAgICAgICAgICBpbmJveE5vdGlmaWNhdGlvbktpbmRzV2FybmluZ3MuYWRkKGluYm94Tm90aWZpY2F0aW9uLmtpbmQpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEFkZCBsaW5rIHRvIHRoZSBkb2NzXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgYEN1c3RvbSBub3RpZmljYXRpb24ga2luZCBcIiR7aW5ib3hOb3RpZmljYXRpb24ua2luZH1cIiBpcyBub3QgaGFuZGxlZCBzbyBub3RpZmljYXRpb25zIG9mIHRoaXMga2luZCB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQgaW4gcHJvZHVjdGlvbi4gVXNlIHRoZSBraW5kcyBwcm9wIHRvIGRlZmluZSBob3cgdGhleSBzaG91bGQgYmUgcmVuZGVyZWQuYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJbmJveE5vdGlmaWNhdGlvbkN1c3RvbU1pc3NpbmdcbiAgICAgICAgICAgICAgICAgIGluYm94Tm90aWZpY2F0aW9uPXtpbmJveE5vdGlmaWNhdGlvbn1cbiAgICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBEb24ndCByZW5kZXIgYW55dGhpbmcgaW4gcHJvZHVjdGlvbiBpZiB0aGlzIGluYm94IG5vdGlmaWNhdGlvbiBraW5kIGlzIG5vdCBkZWZpbmVkLlxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJlc29sdmVkSW5ib3hOb3RpZmljYXRpb25DdXN0b21cbiAgICAgICAgICAgICAgaW5ib3hOb3RpZmljYXRpb249e2luYm94Tm90aWZpY2F0aW9ufVxuICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApLFxuICB7XG4gICAgVGhyZWFkOiBJbmJveE5vdGlmaWNhdGlvblRocmVhZCxcbiAgICBUZXh0TWVudGlvbjogSW5ib3hOb3RpZmljYXRpb25UZXh0TWVudGlvbixcbiAgICBDdXN0b206IEluYm94Tm90aWZpY2F0aW9uQ3VzdG9tLFxuICAgIEljb246IEluYm94Tm90aWZpY2F0aW9uSWNvbixcbiAgICBBdmF0YXI6IEluYm94Tm90aWZpY2F0aW9uQXZhdGFyLFxuICB9XG4pO1xuIl0sIm5hbWVzIjpbIkluYm94Tm90aWZpY2F0aW9uTGF5b3V0IiwiZm9yd2FyZFJlZiIsImluYm94Tm90aWZpY2F0aW9uIiwiY2hpbGRyZW4iLCJhc2lkZSIsInRpdGxlIiwiZGF0ZSIsInVucmVhZCIsIm1hcmtBc1JlYWRPbkNsaWNrIiwib25DbGljayIsImhyZWYiLCJzaG93QWN0aW9ucyIsIm92ZXJyaWRlcyIsImNvbXBvbmVudHMiLCJjbGFzc05hbWUiLCJhc0NoaWxkIiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCIkIiwidXNlT3ZlcnJpZGVzIiwiQW5jaG9yIiwidXNlQ29tcG9uZW50cyIsIkNvbXBvbmVudCIsIlNsb3QiLCJpc01vcmVBY3Rpb25PcGVuIiwic2V0TW9yZUFjdGlvbk9wZW4iLCJ1c2VTdGF0ZSIsIm1hcmtJbmJveE5vdGlmaWNhdGlvbkFzUmVhZCIsInVzZU1hcmtJbmJveE5vdGlmaWNhdGlvbkFzUmVhZCIsImRlbGV0ZUluYm94Tm90aWZpY2F0aW9uIiwidXNlRGVsZXRlSW5ib3hOb3RpZmljYXRpb24iLCJoYW5kbGVDbGljayIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJzaG91bGRNYXJrQXNSZWFkT25DbGljayIsIkJvb2xlYW4iLCJpZCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0QW5kU3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJoYW5kbGVNb3JlQ2xpY2siLCJvcGVuIiwiaGFuZGxlTWFya0FzUmVhZCIsImhhbmRsZURlbGV0ZSIsIlJlYWN0X19kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIlRvb2x0aXBQcm92aWRlciIsImNsYXNzTmFtZXMiLCJkaXIiLCJraW5kIiwicmVmIiwiVGltZXN0YW1wIiwibG9jYWxlIiwicm9sZSIsIkRyb3Bkb3duIiwib25PcGVuQ2hhbmdlIiwiYWxpZ24iLCJjb250ZW50IiwiRnJhZ21lbnQiLCJEcm9wZG93bkl0ZW0iLCJvblNlbGVjdCIsIkNoZWNrSWNvbiIsIklOQk9YX05PVElGSUNBVElPTl9NQVJLX0FTX1JFQUQiLCJEZWxldGVJY29uIiwiSU5CT1hfTk9USUZJQ0FUSU9OX0RFTEVURSIsIlRvb2x0aXAiLCJJTkJPWF9OT1RJRklDQVRJT05fTU9SRSIsIkRyb3Bkb3duTWVudVRyaWdnZXIiLCJCdXR0b24iLCJvblBvaW50ZXJEb3duIiwib25Qb2ludGVyVXAiLCJFbGxpcHNpc0ljb24iLCJJbmJveE5vdGlmaWNhdGlvbkljb24iLCJJbmJveE5vdGlmaWNhdGlvbkF2YXRhciIsIkF2YXRhciIsIkluYm94Tm90aWZpY2F0aW9uVGhyZWFkIiwic2hvd1Jvb21OYW1lIiwidGhyZWFkIiwidXNlSW5ib3hOb3RpZmljYXRpb25UaHJlYWQiLCJjdXJyZW50VXNlcklkIiwidXNlQ3VycmVudFVzZXJJZCIsImluZm8iLCJ1c2VSb29tSW5mbyIsInJvb21JZCIsImNvbW1lbnRJZCIsInVzZU1lbW8iLCJjb250ZW50cyIsImdlbmVyYXRlSW5ib3hOb3RpZmljYXRpb25UaHJlYWRDb250ZW50cyIsInR5cGUiLCJyZXZlcnNlZFVzZXJJZHMiLCJ1c2VySWRzIiwicmV2ZXJzZSIsImZpcnN0VXNlcklkIiwiYXNpZGUyIiwidXNlcklkIiwidGl0bGUyIiwiSU5CT1hfTk9USUZJQ0FUSU9OX1RIUkVBRF9DT01NRU5UU19MSVNUIiwiTGlzdCIsInZhbHVlcyIsIm1hcCIsImluZGV4IiwiVXNlciIsImtleSIsImNhcGl0YWxpemUiLCJyZXBsYWNlU2VsZiIsImZvcm1hdFJlbWFpbmluZyIsIkxJU1RfUkVNQUlOSU5HX1VTRVJTIiwidHJ1bmNhdGUiLCJJTkJPWF9OT1RJRklDQVRJT05fVEhSRUFEX01BWF9DT01NRU5UUyIsIlJvb20iLCJsZW5ndGgiLCJjb250ZW50MiIsImNvbW1lbnRzIiwiY29tbWVudCIsIkluYm94Tm90aWZpY2F0aW9uQ29tbWVudCIsInNob3dIZWFkZXIiLCJ0aHJlYWRJZCIsIm1lbnRpb25Vc2VySWQiLCJtZW50aW9uQ29tbWVudCIsIklOQk9YX05PVElGSUNBVElPTl9USFJFQURfTUVOVElPTiIsImFzc2VydE5ldmVyIiwicmVzb2x2ZWRIcmVmIiwicmVzb2x2ZWRIcmVmMiIsInVybCIsImdlbmVyYXRlVVJMIiwiSW5ib3hOb3RpZmljYXRpb25UZXh0TWVudGlvbiIsInJlYWRBdCIsIm5vdGlmaWVkQXQiLCJjcmVhdGVkQnkiLCJJTkJPWF9OT1RJRklDQVRJT05fVEVYVF9NRU5USU9OIiwiSW5ib3hOb3RpZmljYXRpb25DdXN0b20iLCJJbmJveE5vdGlmaWNhdGlvbkN1c3RvbU1pc3NpbmciLCJNaXNzaW5nSWNvbiIsImluYm94Tm90aWZpY2F0aW9uS2luZHNXYXJuaW5ncyIsIlNldCIsIkluYm94Tm90aWZpY2F0aW9uIiwiT2JqZWN0IiwiYXNzaWduIiwia2luZHMiLCJSZXNvbHZlZEluYm94Tm90aWZpY2F0aW9uVGhyZWFkIiwiUmVzb2x2ZWRJbmJveE5vdGlmaWNhdGlvblRleHRNZW50aW9uIiwidGV4dE1lbnRpb24iLCJSZXNvbHZlZEluYm94Tm90aWZpY2F0aW9uQ3VzdG9tIiwicHJvY2VzcyIsImhhcyIsImFkZCIsImNvbnNvbGUiLCJ3YXJuIiwiVGhyZWFkIiwiVGV4dE1lbnRpb24iLCJDdXN0b20iLCJJY29uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/InboxNotification.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/InboxNotificationList.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/InboxNotificationList.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InboxNotificationList: () => (/* binding */ InboxNotificationList)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ InboxNotificationList auto */ \n\nconst InboxNotificationList = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, className, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ol\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__.classNames)(\"lb-root lb-inbox-notification-list\", className),\n        ...props,\n        ref: forwardedRef\n    }, react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (child, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", {\n            key: index,\n            className: \"lb-inbox-notification-list-item\"\n        }, child)));\n});\n //# sourceMappingURL=InboxNotificationList.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL0luYm94Tm90aWZpY2F0aW9uTGlzdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFtQmEsTUFBQUEsc0NBQUFDLGlEQUFBQSxDQUFBLEdBQUFDLFFBQUEsRUFBQUMsU0FBQSxLQUFBQyxPQUFBLEVBQUFDO0lBSVgscUNBQUFDLGdEQUFBO1FBQ0dILFdBQUFLLGtFQUFBQSxDQUFBLHNDQUFBTDtRQUNzRSxHQUFBQyxLQUFBO1FBQ2pFSyxLQUFBSjtJQUNDLEdBQUFLLDJDQUFBQSxDQUFBQyxHQUFBLENBQUFULFVBQUEsQ0FBQVUsT0FBQUMsUUFBQSw4QkFBQVAsZ0RBQUE7WUFHRlEsS0FBQUQ7WUFBUVYsV0FBQTtRQUFpQixHQUFBUztBQU1sQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi8uLi9zcmMvY29tcG9uZW50cy9JbmJveE5vdGlmaWNhdGlvbkxpc3QudHN4PzY0NTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIGZvcndhcmRSZWYgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gXCIuLi91dGlscy9jbGFzcy1uYW1lc1wiO1xuXG5leHBvcnQgdHlwZSBJbmJveE5vdGlmaWNhdGlvbkxpc3RQcm9wcyA9IENvbXBvbmVudFByb3BzV2l0aG91dFJlZjxcIm9sXCI+O1xuXG4vKipcbiAqIERpc3BsYXlzIGluYm94IG5vdGlmaWNhdGlvbnMgYXMgYSBsaXN0LlxuICpcbiAqIEBleGFtcGxlXG4gKiA8SW5ib3hOb3RpZmljYXRpb25MaXN0PlxuICogICB7aW5ib3hOb3RpZmljYXRpb25zLm1hcCgoaW5ib3hOb3RpZmljYXRpb24pID0+IChcbiAqICAgICA8SW5ib3hOb3RpZmljYXRpb24ga2V5PXtpbmJveE5vdGlmaWNhdGlvbi5pZH0gaW5ib3hOb3RpZmljYXRpb249e2luYm94Tm90aWZpY2F0aW9ufSAvPlxuICogICApKX1cbiAqIDwvSW5ib3hOb3RpZmljYXRpb25MaXN0PlxuICovXG5leHBvcnQgY29uc3QgSW5ib3hOb3RpZmljYXRpb25MaXN0ID0gZm9yd2FyZFJlZjxcbiAgSFRNTE9MaXN0RWxlbWVudCxcbiAgSW5ib3hOb3RpZmljYXRpb25MaXN0UHJvcHNcbj4oKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPG9sXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJsYi1yb290IGxiLWluYm94LW5vdGlmaWNhdGlvbi1saXN0XCIsIGNsYXNzTmFtZSl9XG4gICAgICB7Li4ucHJvcHN9XG4gICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICA+XG4gICAgICB7Q2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiAoXG4gICAgICAgIDxsaSBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJsYi1pbmJveC1ub3RpZmljYXRpb24tbGlzdC1pdGVtXCI+XG4gICAgICAgICAge2NoaWxkfVxuICAgICAgICA8L2xpPlxuICAgICAgKSl9XG4gICAgPC9vbD5cbiAgKTtcbn0pO1xuIl0sIm5hbWVzIjpbIkluYm94Tm90aWZpY2F0aW9uTGlzdCIsImZvcndhcmRSZWYiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiUmVhY3RfX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lcyIsInJlZiIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJpbmRleCIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/InboxNotificationList.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Attribution.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Attribution.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Attribution: () => (/* binding */ Attribution)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n\n\n\nfunction Attribution({ className, ...props }) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n    href: \"https://liveblocks.io\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__.classNames)(\"lb-composer-attribution\", className),\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 384 72\",\n    \"aria-label\": \"Made with Liveblocks\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M86 10h-8v50h8V10Zm16 14h-8v36h8V24Zm0-15h-8v9h8V9Zm13 15h-9l12 36h10l13-36h-9l-9 28-8-28Zm44-1c-11 0-18 8-18 19s7 19 18 19c8 0 15-4 17-13h-8c-1 4-5 6-9 6-6 0-9-3-9-10h27c0-10-6-21-18-21Zm0 7c5 0 9 3 9 8h-18c0-5 4-8 9-8Zm42-7c-4 0-8 2-11 6V10h-8v50h8v-5c3 4 7 6 11 6 11 0 16-9 16-19s-5-19-16-19Zm-2 32c-7 0-9-7-9-13s2-13 9-13 9 7 9 13-2 13-9 13Zm32-45h-8v50h8V10Zm24 51c11 0 18-8 18-19s-8-19-18-19c-11 0-19 8-19 19s7 19 19 19Zm0-6c-8 0-10-7-10-13s2-13 10-13c7 0 9 7 9 13s-2 13-9 13Zm39 6c8 0 15-4 17-12l-8-1c-2 4-4 6-9 6-7 0-9-6-9-12s2-12 9-12c5 0 8 3 8 7l9-1c-2-8-9-13-17-13-11 0-18 9-18 19 0 11 7 19 18 19Zm30-14 4-4 10 17h10l-15-23 15-13h-11l-13 13V10h-9v50h9V47Zm39 14c8 0 16-3 16-12 0-8-8-10-15-11-2-1-7-1-7-5 0-3 3-4 6-4 4 0 7 3 7 7l8-1c-1-9-8-12-15-12s-15 3-15 11 9 10 15 11c3 1 8 2 8 5 0 4-4 5-7 5-5 0-8-3-9-7l-8 1c1 8 9 12 16 12ZM41 27H0l12 12v17l29-29ZM20 60h40L48 48V32L20 60Z\",\n    fill: \"currentColor\"\n  })));\n}\n\n\n//# sourceMappingURL=Attribution.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0F0dHJpYnV0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDc0I7O0FBRXpELHVCQUF1QixxQkFBcUI7QUFDNUMseUJBQXlCLGdEQUE0QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtFQUFVO0FBQ3pCO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLEdBQUcsa0JBQWtCLGdEQUE0QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0F0dHJpYnV0aW9uLm1qcz8xNWVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcblxuZnVuY3Rpb24gQXR0cmlidXRpb24oeyBjbGFzc05hbWUsIC4uLnByb3BzIH0pIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYVwiLCB7XG4gICAgaHJlZjogXCJodHRwczovL2xpdmVibG9ja3MuaW9cIixcbiAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXJcIixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYi1jb21wb3Nlci1hdHRyaWJ1dGlvblwiLCBjbGFzc05hbWUpLFxuICAgIC4uLnByb3BzXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDM4NCA3MlwiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBcIk1hZGUgd2l0aCBMaXZlYmxvY2tzXCJcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTg2IDEwaC04djUwaDhWMTBabTE2IDE0aC04djM2aDhWMjRabTAtMTVoLTh2OWg4VjlabTEzIDE1aC05bDEyIDM2aDEwbDEzLTM2aC05bC05IDI4LTgtMjhabTQ0LTFjLTExIDAtMTggOC0xOCAxOXM3IDE5IDE4IDE5YzggMCAxNS00IDE3LTEzaC04Yy0xIDQtNSA2LTkgNi02IDAtOS0zLTktMTBoMjdjMC0xMC02LTIxLTE4LTIxWm0wIDdjNSAwIDkgMyA5IDhoLTE4YzAtNSA0LTggOS04Wm00Mi03Yy00IDAtOCAyLTExIDZWMTBoLTh2NTBoOHYtNWMzIDQgNyA2IDExIDYgMTEgMCAxNi05IDE2LTE5cy01LTE5LTE2LTE5Wm0tMiAzMmMtNyAwLTktNy05LTEzczItMTMgOS0xMyA5IDcgOSAxMy0yIDEzLTkgMTNabTMyLTQ1aC04djUwaDhWMTBabTI0IDUxYzExIDAgMTgtOCAxOC0xOXMtOC0xOS0xOC0xOWMtMTEgMC0xOSA4LTE5IDE5czcgMTkgMTkgMTlabTAtNmMtOCAwLTEwLTctMTAtMTNzMi0xMyAxMC0xM2M3IDAgOSA3IDkgMTNzLTIgMTMtOSAxM1ptMzkgNmM4IDAgMTUtNCAxNy0xMmwtOC0xYy0yIDQtNCA2LTkgNi03IDAtOS02LTktMTJzMi0xMiA5LTEyYzUgMCA4IDMgOCA3bDktMWMtMi04LTktMTMtMTctMTMtMTEgMC0xOCA5LTE4IDE5IDAgMTEgNyAxOSAxOCAxOVptMzAtMTQgNC00IDEwIDE3aDEwbC0xNS0yMyAxNS0xM2gtMTFsLTEzIDEzVjEwaC05djUwaDlWNDdabTM5IDE0YzggMCAxNi0zIDE2LTEyIDAtOC04LTEwLTE1LTExLTItMS03LTEtNy01IDAtMyAzLTQgNi00IDQgMCA3IDMgNyA3bDgtMWMtMS05LTgtMTItMTUtMTJzLTE1IDMtMTUgMTEgOSAxMCAxNSAxMWMzIDEgOCAyIDggNSAwIDQtNCA1LTcgNS01IDAtOC0zLTktN2wtOCAxYzEgOCA5IDEyIDE2IDEyWk00MSAyN0gwbDEyIDEydjE3bDI5LTI5Wk0yMCA2MGg0MEw0OCA0OFYzMkwyMCA2MFpcIixcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiXG4gIH0pKSk7XG59XG5cbmV4cG9ydCB7IEF0dHJpYnV0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGlvbi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Attribution.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Avatar.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Avatar.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Avatar: () => (/* binding */ Avatar)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_get_initials_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/get-initials.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/get-initials.mjs\");\n/* __next_internal_client_entry_do_not_use__ Avatar auto */ \n\n\n\nfunction Avatar({ userId, className, ...props }) {\n    const { user, isLoading } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__._useUser)(userId);\n    const resolvedUserName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>user?.name, [\n        user\n    ]);\n    const resolvedUserAvatar = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>user?.avatar, [\n        user\n    ]);\n    const resolvedUserInitials = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>resolvedUserName ? (0,_utils_get_initials_mjs__WEBPACK_IMPORTED_MODULE_2__.getInitials)(resolvedUserName) : void 0, [\n        resolvedUserName\n    ]);\n    const resolvedUserIdInitials = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>!isLoading && !user ? (0,_utils_get_initials_mjs__WEBPACK_IMPORTED_MODULE_2__.getInitials)(userId) : void 0, [\n        isLoading,\n        user,\n        userId\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_3__.classNames)(\"lb-avatar\", className),\n        \"data-loading\": isLoading ? \"\" : void 0,\n        ...props\n    }, resolvedUserAvatar && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        className: \"lb-avatar-image\",\n        src: resolvedUserAvatar,\n        alt: resolvedUserName\n    }), resolvedUserInitials ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-avatar-fallback\",\n        \"aria-hidden\": true\n    }, resolvedUserInitials) : resolvedUserIdInitials ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lb-avatar-fallback\",\n        \"aria-label\": userId,\n        title: userId\n    }, resolvedUserIdInitials) : null);\n}\n //# sourceMappingURL=Avatar.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0F2YXRhci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBZ0JPLFNBQUFBLE9BQUEsRUFBQUMsTUFBQSxFQUFBQyxTQUFBLEtBQUFDLE9BQUE7SUFDTCxRQUFBQyxJQUFBLEVBQUFDLFNBQUEsS0FBQUMsMkRBQUFBLENBQUFMO0lBQ0EsTUFBQU0sbUJBQUFDLDhDQUFBQSxDQUFBLElBQUFKLE1BQUFLLE1BQUE7UUFBQUw7S0FBQTtJQUNBLE1BQUFNLHFCQUFBRiw4Q0FBQUEsQ0FBQSxJQUFBSixNQUFBTyxRQUFBO1FBQUFQO0tBQUE7SUFDQSxNQUFBUSx1QkFBQUosOENBQUFBLENBQTZCLElBQUFELG1CQUFBTSxvRUFBQUEsQ0FBQU4sb0JBQUEsUUFDK0I7UUFBQUE7S0FBQTtJQUc1RCxNQUFBTyx5QkFBQU4sOENBQUFBLENBQStCLEtBQUFILGFBQUEsQ0FBQUQsT0FBQVMsb0VBQUFBLENBQUFaLFVBQUEsUUFDc0I7UUFBQUk7UUFBQUQ7UUFBQUg7S0FBQTtJQUlyRCxxQ0FBQWMsZ0RBQUE7UUFDR2IsV0FBQWUsa0VBQUFBLENBQUEsYUFBQWY7UUFDNkMsZ0JBQUFHLFlBQUE7UUFDYixHQUFBRixLQUFBO0lBQzNCLEdBQUFPLHNCQUFBLDhCQUFBSyxnREFBQTtRQUdEYixXQUFBO1FBQ1dnQixLQUFBUjtRQUNMUyxLQUFBWjtJQUNBLElBQUFLLHVCQUFBLDhCQUFBRyxnREFBQTtRQUlOYixXQUFBO1FBQWU7SUFBZ0MsR0FBQVUsd0JBQUFFLHlCQUFBLDhCQUFBQyxnREFBQTtRQUkvQ2IsV0FBQTtRQUFlLGNBQUFEO1FBQWlDbUIsT0FBQW5CO0lBQWUsR0FBQWEsMEJBQUE7QUFNeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvQXZhdGFyLnRzeD85YWJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyB1c2VVc2VyIH0gZnJvbSBcIkBsaXZlYmxvY2tzL3JlYWN0XCI7XG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudFByb3BzIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NsYXNzLW5hbWVzXCI7XG5pbXBvcnQgeyBnZXRJbml0aWFscyB9IGZyb20gXCIuLi8uLi91dGlscy9nZXQtaW5pdGlhbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBBdmF0YXJQcm9wcyBleHRlbmRzIENvbXBvbmVudFByb3BzPFwiZGl2XCI+IHtcbiAgLyoqXG4gICAqIFRoZSB1c2VyIElEIHRvIGRpc3BsYXkgdGhlIGF2YXRhciBmb3IuXG4gICAqL1xuICB1c2VySWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEF2YXRhcih7IHVzZXJJZCwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9OiBBdmF0YXJQcm9wcykge1xuICBjb25zdCB7IHVzZXIsIGlzTG9hZGluZyB9ID0gdXNlVXNlcih1c2VySWQpO1xuICBjb25zdCByZXNvbHZlZFVzZXJOYW1lID0gdXNlTWVtbygoKSA9PiB1c2VyPy5uYW1lLCBbdXNlcl0pO1xuICBjb25zdCByZXNvbHZlZFVzZXJBdmF0YXIgPSB1c2VNZW1vKCgpID0+IHVzZXI/LmF2YXRhciwgW3VzZXJdKTtcbiAgY29uc3QgcmVzb2x2ZWRVc2VySW5pdGlhbHMgPSB1c2VNZW1vKFxuICAgICgpID0+IChyZXNvbHZlZFVzZXJOYW1lID8gZ2V0SW5pdGlhbHMocmVzb2x2ZWRVc2VyTmFtZSkgOiB1bmRlZmluZWQpLFxuICAgIFtyZXNvbHZlZFVzZXJOYW1lXVxuICApO1xuICBjb25zdCByZXNvbHZlZFVzZXJJZEluaXRpYWxzID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoIWlzTG9hZGluZyAmJiAhdXNlciA/IGdldEluaXRpYWxzKHVzZXJJZCkgOiB1bmRlZmluZWQpLFxuICAgIFtpc0xvYWRpbmcsIHVzZXIsIHVzZXJJZF1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcImxiLWF2YXRhclwiLCBjbGFzc05hbWUpfVxuICAgICAgZGF0YS1sb2FkaW5nPXtpc0xvYWRpbmcgPyBcIlwiIDogdW5kZWZpbmVkfVxuICAgICAgey4uLnByb3BzfVxuICAgID5cbiAgICAgIHtyZXNvbHZlZFVzZXJBdmF0YXIgJiYgKFxuICAgICAgICA8aW1nXG4gICAgICAgICAgY2xhc3NOYW1lPVwibGItYXZhdGFyLWltYWdlXCJcbiAgICAgICAgICBzcmM9e3Jlc29sdmVkVXNlckF2YXRhcn1cbiAgICAgICAgICBhbHQ9e3Jlc29sdmVkVXNlck5hbWV9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge3Jlc29sdmVkVXNlckluaXRpYWxzID8gKFxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsYi1hdmF0YXItZmFsbGJhY2tcIiBhcmlhLWhpZGRlbj5cbiAgICAgICAgICB7cmVzb2x2ZWRVc2VySW5pdGlhbHN9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICkgOiByZXNvbHZlZFVzZXJJZEluaXRpYWxzID8gKFxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsYi1hdmF0YXItZmFsbGJhY2tcIiBhcmlhLWxhYmVsPXt1c2VySWR9IHRpdGxlPXt1c2VySWR9PlxuICAgICAgICAgIHtyZXNvbHZlZFVzZXJJZEluaXRpYWxzfVxuICAgICAgICA8L3NwYW4+XG4gICAgICApIDogbnVsbH1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJBdmF0YXIiLCJ1c2VySWQiLCJjbGFzc05hbWUiLCJwcm9wcyIsInVzZXIiLCJpc0xvYWRpbmciLCJ1c2VVc2VyIiwicmVzb2x2ZWRVc2VyTmFtZSIsInVzZU1lbW8iLCJuYW1lIiwicmVzb2x2ZWRVc2VyQXZhdGFyIiwiYXZhdGFyIiwicmVzb2x2ZWRVc2VySW5pdGlhbHMiLCJnZXRJbml0aWFscyIsInJlc29sdmVkVXNlcklkSW5pdGlhbHMiLCJSZWFjdF9fZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwic3JjIiwiYWx0IiwidGl0bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Avatar.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Button.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Button.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: () => (/* binding */ Button)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ Button auto */ \n\nconst Button = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ variant = \"default\", disableable = true, className, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        type: \"button\",\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__.classNames)(\"lb-button\", !disableable && \"lb-button:non-disableable\", className),\n        \"data-variant\": variant,\n        ...props,\n        ref: forwardedRef\n    });\n});\n //# sourceMappingURL=Button.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0J1dHRvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFZTyxNQUFBQSx1QkFBQUMsaURBQUFBLENBQWUsR0FBQUMsVUFBQSxXQUFBQyxjQUFBLE1BQUFDLFNBQUEsS0FBQUMsT0FBQSxFQUFBQztJQUtsQixxQ0FBQUMsZ0RBQUE7UUFDR0UsTUFBQTtRQUNNTCxXQUFBTSxrRUFBQUEsQ0FDTSxhQUNULENBQUFQLGVBQUEsNkJBQ2dCQztRQUVsQixnQkFBQUY7UUFDYyxHQUFBRyxLQUFBO1FBQ1ZNLEtBQUFMO0lBQ0M7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9CdXR0b24udHN4PzQ5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBCdXR0b25Qcm9wcyBleHRlbmRzIENvbXBvbmVudFByb3BzPFwiYnV0dG9uXCI+IHtcbiAgdmFyaWFudD86IFwiZGVmYXVsdFwiIHwgXCJvdXRsaW5lXCIgfCBcInByaW1hcnlcIjtcbiAgZGlzYWJsZWFibGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgQnV0dG9uID0gZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgQnV0dG9uUHJvcHM+KFxuICAoXG4gICAgeyB2YXJpYW50ID0gXCJkZWZhdWx0XCIsIGRpc2FibGVhYmxlID0gdHJ1ZSwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LFxuICAgIGZvcndhcmRlZFJlZlxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgIFwibGItYnV0dG9uXCIsXG4gICAgICAgICAgIWRpc2FibGVhYmxlICYmIFwibGItYnV0dG9uOm5vbi1kaXNhYmxlYWJsZVwiLFxuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICApfVxuICAgICAgICBkYXRhLXZhcmlhbnQ9e3ZhcmlhbnR9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG4iXSwibmFtZXMiOlsiQnV0dG9uIiwiZm9yd2FyZFJlZiIsInZhcmlhbnQiLCJkaXNhYmxlYWJsZSIsImNsYXNzTmFtZSIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiUmVhY3RfX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImNsYXNzTmFtZXMiLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Button.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Dropdown.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Dropdown.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropdown: () => (/* binding */ Dropdown),\n/* harmony export */   DropdownItem: () => (/* binding */ DropdownItem),\n/* harmony export */   DropdownTrigger: () => (/* reexport safe */ _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.DropdownMenuTrigger)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @radix-ui/react-dropdown-menu */ \"(ssr)/./node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ DropdownTrigger,Dropdown,DropdownItem auto */ \n\n\n\n\n\n\nfunction Dropdown({ children, content, defaultOpen, open, onOpenChange, className, ...props }) {\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_2__.useOverrides)();\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_3__.useLiveblocksUIConfig)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.Root, {\n        defaultOpen,\n        open,\n        onOpenChange,\n        dir: $.dir\n    }, children, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.Portal, {\n        container: portalContainer\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.Content, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-root lb-portal lb-elevation lb-dropdown\", className),\n        sideOffset: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_SIDE_OFFSET,\n        collisionPadding: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_COLLISION_PADDING,\n        ...props\n    }, content)));\n}\nconst DropdownItem = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ children, className, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_dropdown_menu__WEBPACK_IMPORTED_MODULE_0__.DropdownMenuItem, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-dropdown-item\", className),\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\n //# sourceMappingURL=Dropdown.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0Ryb3Bkb3duLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JPLFNBQUFBLFNBQUEsRUFBa0JDLFFBQUEsRUFDdkJDLE9BQUEsRUFDQUMsV0FBQSxFQUNBQyxJQUFBLEVBQ0FDLFlBQUEsRUFDQUMsU0FBQSxFQUNBLEdBQUFDLE9BRUY7SUFDRSxNQUFBQyxJQUFBQyw0REFBQUE7SUFDQSxRQUFBQyxlQUFBLEtBQUFDLGtFQUFBQTtJQUVBLHFDQUFBQyxnREFBQSxDQUFBRSwrREFBQTtRQUNHWDtRQUNDQztRQUNBQztRQUNBVyxLQUFBUixFQUFBUSxHQUFBO0lBQ08sR0FBQWYsVUFBQSw4QkFBQVcsZ0RBQUEsQ0FBQUUsaUVBQUE7UUFHTkksV0FBQVI7SUFBd0MsaUNBQUFFLGdEQUFBLENBQUFFLGtFQUFBO1FBQ3RDUixXQUFBYyxrRUFBQUEsQ0FDWSw4Q0FDVGQ7UUFFRmUsWUFBQUMsd0VBQUFBO1FBQ1lDLGtCQUFBQyw4RUFBQUE7UUFDTSxHQUFBakIsS0FBQTtJQUNkLEdBQUFMO0FBT2Q7QUFFYSxNQUFBdUIsNkJBQUFDLGlEQUFBQSxDQUFBLEdBQUF6QixRQUFBLEVBQUFLLFNBQUEsS0FBQUMsT0FBQSxFQUFBb0I7SUFJWCxxQ0FBQWYsZ0RBQUEsQ0FBQUUsMkVBQUE7UUFDR1IsV0FBQWMsa0VBQUFBLENBQUEsb0JBQUFkO1FBQ29ELEdBQUFDLEtBQUE7UUFDL0NzQixLQUFBRjtJQUNDLEdBQUExQjtBQUtYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0Ryb3Bkb3duLnRzeD8xOTI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgKiBhcyBEcm9wZG93bk1lbnVQcmltaXRpdmUgZnJvbSBcIkByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51XCI7XG5pbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlTGl2ZWJsb2Nrc1VJQ29uZmlnIH0gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuaW1wb3J0IHtcbiAgRkxPQVRJTkdfRUxFTUVOVF9DT0xMSVNJT05fUEFERElORyxcbiAgRkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVCxcbn0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgdXNlT3ZlcnJpZGVzIH0gZnJvbSBcIi4uLy4uL292ZXJyaWRlc1wiO1xuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gXCIuLi8uLi91dGlscy9jbGFzcy1uYW1lc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyb3Bkb3duUHJvcHNcbiAgZXh0ZW5kcyBQaWNrPFxuICAgICAgRHJvcGRvd25NZW51UHJpbWl0aXZlLkRyb3Bkb3duTWVudVByb3BzLFxuICAgICAgXCJkZWZhdWx0T3BlblwiIHwgXCJvcGVuXCIgfCBcIm9uT3BlbkNoYW5nZVwiXG4gICAgPixcbiAgICBQaWNrPERyb3Bkb3duTWVudVByaW1pdGl2ZS5Ecm9wZG93bk1lbnVUcmlnZ2VyUHJvcHMsIFwiY2hpbGRyZW5cIj4sXG4gICAgT21pdDxEcm9wZG93bk1lbnVQcmltaXRpdmUuRHJvcGRvd25NZW51Q29udGVudFByb3BzLCBcImNvbnRlbnRcIj4ge1xuICBjb250ZW50OiBSZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEcm9wZG93bih7XG4gIGNoaWxkcmVuLFxuICBjb250ZW50LFxuICBkZWZhdWx0T3BlbixcbiAgb3BlbixcbiAgb25PcGVuQ2hhbmdlLFxuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBEcm9wZG93blByb3BzKSB7XG4gIGNvbnN0ICQgPSB1c2VPdmVycmlkZXMoKTtcbiAgY29uc3QgeyBwb3J0YWxDb250YWluZXIgfSA9IHVzZUxpdmVibG9ja3NVSUNvbmZpZygpO1xuXG4gIHJldHVybiAoXG4gICAgPERyb3Bkb3duTWVudVByaW1pdGl2ZS5Sb290XG4gICAgICBkZWZhdWx0T3Blbj17ZGVmYXVsdE9wZW59XG4gICAgICBvcGVuPXtvcGVufVxuICAgICAgb25PcGVuQ2hhbmdlPXtvbk9wZW5DaGFuZ2V9XG4gICAgICBkaXI9eyQuZGlyfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDxEcm9wZG93bk1lbnVQcmltaXRpdmUuUG9ydGFsIGNvbnRhaW5lcj17cG9ydGFsQ29udGFpbmVyfT5cbiAgICAgICAgPERyb3Bkb3duTWVudVByaW1pdGl2ZS5Db250ZW50XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgICAgXCJsYi1yb290IGxiLXBvcnRhbCBsYi1lbGV2YXRpb24gbGItZHJvcGRvd25cIixcbiAgICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICAgICl9XG4gICAgICAgICAgc2lkZU9mZnNldD17RkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVH1cbiAgICAgICAgICBjb2xsaXNpb25QYWRkaW5nPXtGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HfVxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgPlxuICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICA8L0Ryb3Bkb3duTWVudVByaW1pdGl2ZS5Db250ZW50PlxuICAgICAgPC9Ecm9wZG93bk1lbnVQcmltaXRpdmUuUG9ydGFsPlxuICAgIDwvRHJvcGRvd25NZW51UHJpbWl0aXZlLlJvb3Q+XG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bkl0ZW0gPSBmb3J3YXJkUmVmPFxuICBIVE1MRGl2RWxlbWVudCxcbiAgRHJvcGRvd25NZW51UHJpbWl0aXZlLkRyb3Bkb3duTWVudUl0ZW1Qcm9wc1xuPigoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8RHJvcGRvd25NZW51UHJpbWl0aXZlLkRyb3Bkb3duTWVudUl0ZW1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcImxiLWRyb3Bkb3duLWl0ZW1cIiwgY2xhc3NOYW1lKX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0Ryb3Bkb3duTWVudVByaW1pdGl2ZS5Ecm9wZG93bk1lbnVJdGVtPlxuICApO1xufSk7XG5cbmV4cG9ydCB7IERyb3Bkb3duTWVudVRyaWdnZXIgYXMgRHJvcGRvd25UcmlnZ2VyIH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51XCI7XG4iXSwibmFtZXMiOlsiRHJvcGRvd24iLCJjaGlsZHJlbiIsImNvbnRlbnQiLCJkZWZhdWx0T3BlbiIsIm9wZW4iLCJvbk9wZW5DaGFuZ2UiLCJjbGFzc05hbWUiLCJwcm9wcyIsIiQiLCJ1c2VPdmVycmlkZXMiLCJwb3J0YWxDb250YWluZXIiLCJ1c2VMaXZlYmxvY2tzVUlDb25maWciLCJSZWFjdF9fZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJEcm9wZG93bk1lbnVQcmltaXRpdmUiLCJSb290IiwiZGlyIiwiUG9ydGFsIiwiY29udGFpbmVyIiwiQ29udGVudCIsImNsYXNzTmFtZXMiLCJzaWRlT2Zmc2V0IiwiRkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVCIsImNvbGxpc2lvblBhZGRpbmciLCJGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HIiwiRHJvcGRvd25JdGVtIiwiZm9yd2FyZFJlZiIsImZvcndhcmRlZFJlZiIsIkRyb3Bkb3duTWVudUl0ZW0iLCJyZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Dropdown.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Emoji.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Emoji.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emoji: () => (/* binding */ Emoji)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _primitives_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../primitives/internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/internal/Emoji.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n\n\n\n\nconst Emoji = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  ({ className, ...props }, forwardedRef) => {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_1__.Emoji, {\n      className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji\", className),\n      ...props,\n      ref: forwardedRef\n    });\n  }\n);\n\n\n//# sourceMappingURL=Emoji.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0Vtb2ppLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1EO0FBQ29CO0FBQ2Q7O0FBRXpELGNBQWMsaURBQVU7QUFDeEIsS0FBSyxxQkFBcUI7QUFDMUIsMkJBQTJCLGdEQUE0QixDQUFDLGlFQUFPO0FBQy9ELGlCQUFpQixrRUFBVTtBQUMzQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvY29tcG9uZW50cy9pbnRlcm5hbC9FbW9qaS5tanM/NTY2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVtb2ppIGFzIEVtb2ppJDEgfSBmcm9tICcuLi8uLi9wcmltaXRpdmVzL2ludGVybmFsL0Vtb2ppLm1qcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcblxuY29uc3QgRW1vamkgPSBmb3J3YXJkUmVmKFxuICAoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChFbW9qaSQxLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoXCJsYi1lbW9qaVwiLCBjbGFzc05hbWUpLFxuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgIH0pO1xuICB9XG4pO1xuXG5leHBvcnQgeyBFbW9qaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1vamkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Emoji.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/EmojiPicker.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/EmojiPicker.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiPicker: () => (/* binding */ EmojiPicker),\n/* harmony export */   EmojiPickerTrigger: () => (/* reexport safe */ _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.PopoverTrigger)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @radix-ui/react-popover */ \"(ssr)/./node_modules/@radix-ui/react-popover/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs\");\n/* harmony import */ var _icons_Search_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../icons/Search.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Search.mjs\");\n/* harmony import */ var _icons_Spinner_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../icons/Spinner.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Spinner.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../primitives/EmojiPicker/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/index.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _Emoji_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Emoji.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction EmojiPickerLoading({\n  className,\n  ...props\n}) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-loading\", className),\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_icons_Spinner_mjs__WEBPACK_IMPORTED_MODULE_3__.SpinnerIcon, null));\n}\nfunction EmojiPickerEmpty({\n  className,\n  ...props\n}) {\n  const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_4__.useOverrides)();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-empty\", className),\n    ...props\n  }, $.EMOJI_PICKER_EMPTY);\n}\nfunction EmojiPickerError({\n  error,\n  className,\n  ...props\n}) {\n  const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_4__.useOverrides)();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-error\", className),\n    ...props\n  }, $.EMOJI_PICKER_ERROR(error));\n}\nfunction EmojiPickerCategoryHeader({\n  category,\n  className,\n  ...props\n}) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-category-header\", className),\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n    className: \"lb-emoji-picker-category-header-title\"\n  }, category));\n}\nfunction EmojiPickerGrid({\n  children,\n  className,\n  ...props\n}) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-grid\", className),\n    ...props\n  }, children);\n}\nfunction EmojiPickerRow({\n  attributes,\n  children,\n  className,\n  ...props\n}) {\n  const isFirstRow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(\n    () => attributes.categoryRowIndex === 0,\n    [attributes.categoryRowIndex]\n  );\n  const isLastRow = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(\n    () => attributes.categoryRowIndex === attributes.categoryRowsCount - 1,\n    [attributes.categoryRowIndex, attributes.categoryRowsCount]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-row\", className),\n    \"data-first\": isFirstRow ? \"\" : void 0,\n    \"data-last\": isLastRow ? \"\" : void 0,\n    ...props\n  }, children);\n}\nfunction EmojiPickerEmoji({\n  emoji,\n  className,\n  ...props\n}) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"button\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-emoji-picker-emoji\", className),\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Emoji_mjs__WEBPACK_IMPORTED_MODULE_5__.Emoji, {\n    emoji\n  }));\n}\nconst EmojiPicker = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(\n  ({ onEmojiSelect, onOpenChange, children, className, ...props }, forwardedRef) => {\n    const [isOpen, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_6__.useLiveblocksUIConfig)();\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_4__.useOverrides)();\n    const handleOpenChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(\n      (isOpen2) => {\n        setOpen(isOpen2);\n        onOpenChange?.(isOpen2);\n      },\n      [onOpenChange]\n    );\n    const handleEmojiSelect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(\n      (emoji) => {\n        setOpen(false);\n        onEmojiSelect?.(emoji);\n      },\n      [onEmojiSelect]\n    );\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.Root, {\n      open: isOpen,\n      onOpenChange: handleOpenChange\n    }, children, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.Portal, {\n      container: portalContainer\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_popover__WEBPACK_IMPORTED_MODULE_0__.Content, {\n      side: \"top\",\n      align: \"center\",\n      sideOffset: _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.FLOATING_ELEMENT_SIDE_OFFSET,\n      collisionPadding: _constants_mjs__WEBPACK_IMPORTED_MODULE_7__.FLOATING_ELEMENT_COLLISION_PADDING,\n      className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\n        \"lb-root lb-portal lb-elevation lb-emoji-picker\",\n        className\n      ),\n      ...props,\n      ref: forwardedRef\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Root, {\n      onEmojiSelect: handleEmojiSelect,\n      locale: $.locale\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n      className: \"lb-emoji-picker-header\"\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n      className: \"lb-emoji-picker-search-container\"\n    }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Search, {\n      className: \"lb-emoji-picker-search\",\n      placeholder: $.EMOJI_PICKER_SEARCH_PLACEHOLDER,\n      autoFocus: true\n    }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_icons_Search_mjs__WEBPACK_IMPORTED_MODULE_9__.SearchIcon, {\n      className: \"lb-emoji-picker-search-icon\"\n    }))), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_primitives_EmojiPicker_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Content, {\n      className: \"lb-emoji-picker-content\",\n      components: {\n        Loading: EmojiPickerLoading,\n        Empty: EmojiPickerEmpty,\n        Error: EmojiPickerError,\n        CategoryHeader: EmojiPickerCategoryHeader,\n        Grid: EmojiPickerGrid,\n        Row: EmojiPickerRow,\n        Emoji: EmojiPickerEmoji\n      }\n    })))));\n  }\n);\n\n\n//# sourceMappingURL=EmojiPicker.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/EmojiPicker.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICON_HEIGHT: () => (/* binding */ ICON_HEIGHT),\n/* harmony export */   ICON_WIDTH: () => (/* binding */ ICON_WIDTH),\n/* harmony export */   Icon: () => (/* binding */ Icon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n\n\n\nconst ICON_WIDTH = 20;\nconst ICON_HEIGHT = 20;\nfunction Icon({ children, className, ...props }) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: ICON_WIDTH,\n    height: ICON_HEIGHT,\n    viewBox: `0 0 ${ICON_WIDTH} ${ICON_HEIGHT}`,\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    role: \"presentation\",\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_1__.classNames)(\"lb-icon\", className),\n    ...props\n  }, children);\n}\n\n\n//# sourceMappingURL=Icon.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1DO0FBQ3NCOztBQUV6RDtBQUNBO0FBQ0EsZ0JBQWdCLCtCQUErQjtBQUMvQyx5QkFBeUIsZ0RBQTRCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZLEVBQUUsWUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtFQUFVO0FBQ3pCO0FBQ0EsR0FBRztBQUNIOztBQUV5QztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2NvbXBvbmVudHMvaW50ZXJuYWwvSWNvbi5tanM/NzJhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL3V0aWxzL2NsYXNzLW5hbWVzLm1qcyc7XG5cbmNvbnN0IElDT05fV0lEVEggPSAyMDtcbmNvbnN0IElDT05fSEVJR0hUID0gMjA7XG5mdW5jdGlvbiBJY29uKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgd2lkdGg6IElDT05fV0lEVEgsXG4gICAgaGVpZ2h0OiBJQ09OX0hFSUdIVCxcbiAgICB2aWV3Qm94OiBgMCAwICR7SUNPTl9XSURUSH0gJHtJQ09OX0hFSUdIVH1gLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBzdHJva2VXaWR0aDogMS41LFxuICAgIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIixcbiAgICBzdHJva2VMaW5lam9pbjogXCJyb3VuZFwiLFxuICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwibGItaWNvblwiLCBjbGFzc05hbWUpLFxuICAgIC4uLnByb3BzXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZXhwb3J0IHsgSUNPTl9IRUlHSFQsIElDT05fV0lEVEgsIEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUljb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/InboxNotificationThread.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/InboxNotificationThread.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INBOX_NOTIFICATION_THREAD_MAX_COMMENTS: () => (/* binding */ INBOX_NOTIFICATION_THREAD_MAX_COMMENTS),\n/* harmony export */   InboxNotificationComment: () => (/* binding */ InboxNotificationComment),\n/* harmony export */   generateInboxNotificationThreadContents: () => (/* binding */ generateInboxNotificationThreadContents)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../primitives/Comment/index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/index.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _Comment_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Comment.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/Comment.mjs\");\n/* harmony import */ var _User_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./User.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/User.mjs\");\n\n\n\n\n\n\n\n\nconst INBOX_NOTIFICATION_THREAD_MAX_COMMENTS = 3;\nfunction InboxNotificationComment({\n  comment,\n  showHeader = true,\n  overrides,\n  className,\n  ...props\n}) {\n  const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_1__.useOverrides)(overrides);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\n      \"lb-root lb-inbox-notification-comment lb-comment\",\n      className\n    ),\n    ...props\n  }, showHeader && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"lb-comment-header\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_User_mjs__WEBPACK_IMPORTED_MODULE_3__.User, {\n    className: \"lb-comment-author\",\n    userId: comment.userId\n  })), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"lb-comment-content\"\n  }, comment.body ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_primitives_Comment_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Body, {\n    className: \"lb-comment-body\",\n    body: comment.body,\n    components: {\n      Mention: _Comment_mjs__WEBPACK_IMPORTED_MODULE_5__.CommentMention,\n      Link: _Comment_mjs__WEBPACK_IMPORTED_MODULE_5__.CommentNonInteractiveLink\n    }\n  }), comment.reactions.length > 0 && /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"lb-comment-reactions\"\n  }, comment.reactions.map((reaction) => /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Comment_mjs__WEBPACK_IMPORTED_MODULE_5__.CommentNonInteractiveReaction, {\n    key: reaction.emoji,\n    reaction,\n    overrides,\n    disabled: true\n  })))) : /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"lb-comment-body\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n    className: \"lb-comment-deleted\"\n  }, $.COMMENT_DELETED))));\n}\nfunction findLastCommentWithMentionedId(comments, mentionedId) {\n  for (let i = comments.length - 1; i >= 0; i--) {\n    const comment = comments[i];\n    if (comment.userId === mentionedId) {\n      continue;\n    }\n    if (comment.body) {\n      const mentionedIds = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_6__.getMentionedIdsFromCommentBody)(comment.body);\n      if (mentionedIds.includes(mentionedId)) {\n        return comment;\n      }\n    }\n  }\n  return;\n}\nfunction getUserIdsFromComments(comments) {\n  return Array.from(new Set(comments.map((comment) => comment.userId)));\n}\nfunction generateInboxNotificationThreadContents(inboxNotification, thread, userId) {\n  const unreadComments = thread.comments.filter((comment) => {\n    if (!comment.body) {\n      return false;\n    }\n    return inboxNotification.readAt ? comment.createdAt > inboxNotification.readAt && comment.createdAt <= inboxNotification.notifiedAt : comment.createdAt <= inboxNotification.notifiedAt;\n  });\n  if (unreadComments.length === 0) {\n    const lastComments = thread.comments.filter((comment) => comment.body).slice(-INBOX_NOTIFICATION_THREAD_MAX_COMMENTS);\n    return {\n      type: \"comments\",\n      unread: false,\n      comments: lastComments,\n      userIds: getUserIdsFromComments(lastComments),\n      date: inboxNotification.notifiedAt\n    };\n  }\n  const commentWithMention = findLastCommentWithMentionedId(\n    unreadComments,\n    userId\n  );\n  if (commentWithMention) {\n    return {\n      type: \"mention\",\n      unread: true,\n      comments: [commentWithMention],\n      userIds: [commentWithMention.userId],\n      date: commentWithMention.createdAt\n    };\n  }\n  const lastUnreadComments = unreadComments.slice(\n    -INBOX_NOTIFICATION_THREAD_MAX_COMMENTS\n  );\n  return {\n    type: \"comments\",\n    unread: true,\n    comments: lastUnreadComments,\n    userIds: getUserIdsFromComments(unreadComments),\n    date: inboxNotification.notifiedAt\n  };\n}\n\n\n//# sourceMappingURL=InboxNotificationThread.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0luYm94Tm90aWZpY2F0aW9uVGhyZWFkLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWtFO0FBQy9CO0FBQ2dCO0FBQ3NCO0FBQ2hCO0FBQ2lEO0FBQ3hFOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxZQUFZLDREQUFZO0FBQ3hCLHlCQUF5QixnREFBNEI7QUFDckQsZUFBZSxrRUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsZ0NBQWdDLGdEQUE0QjtBQUMvRDtBQUNBLEdBQUcsa0JBQWtCLGdEQUE0QixDQUFDLDJDQUFJO0FBQ3REO0FBQ0E7QUFDQSxHQUFHLG9CQUFvQixnREFBNEI7QUFDbkQ7QUFDQSxHQUFHLGlDQUFpQyxnREFBNEIsQ0FBQywyQ0FBdUIsd0JBQXdCLGdEQUE0QixDQUFDLCtEQUFXO0FBQ3hKO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQWM7QUFDN0IsWUFBWSxtRUFBeUI7QUFDckM7QUFDQSxHQUFHLG1EQUFtRCxnREFBNEI7QUFDbEY7QUFDQSxHQUFHLHNEQUFzRCxnREFBNEIsQ0FBQyx1RUFBNkI7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLHVCQUF1QixnREFBNEI7QUFDdEQ7QUFDQSxHQUFHLGtCQUFrQixnREFBNEI7QUFDakQ7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZ0ZBQThCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxSDtBQUNySCIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2NvbXBvbmVudHMvaW50ZXJuYWwvSW5ib3hOb3RpZmljYXRpb25UaHJlYWQubWpzPzFmOTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TWVudGlvbmVkSWRzRnJvbUNvbW1lbnRCb2R5IH0gZnJvbSAnQGxpdmVibG9ja3MvY29yZSc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlT3ZlcnJpZGVzIH0gZnJvbSAnLi4vLi4vb3ZlcnJpZGVzLm1qcyc7XG5pbXBvcnQgeyBCb2R5IGFzIENvbW1lbnRCb2R5IH0gZnJvbSAnLi4vLi4vcHJpbWl0aXZlcy9Db21tZW50L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXMubWpzJztcbmltcG9ydCB7IENvbW1lbnRNZW50aW9uLCBDb21tZW50Tm9uSW50ZXJhY3RpdmVMaW5rLCBDb21tZW50Tm9uSW50ZXJhY3RpdmVSZWFjdGlvbiB9IGZyb20gJy4uL0NvbW1lbnQubWpzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL1VzZXIubWpzJztcblxuY29uc3QgSU5CT1hfTk9USUZJQ0FUSU9OX1RIUkVBRF9NQVhfQ09NTUVOVFMgPSAzO1xuZnVuY3Rpb24gSW5ib3hOb3RpZmljYXRpb25Db21tZW50KHtcbiAgY29tbWVudCxcbiAgc2hvd0hlYWRlciA9IHRydWUsXG4gIG92ZXJyaWRlcyxcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufSkge1xuICBjb25zdCAkID0gdXNlT3ZlcnJpZGVzKG92ZXJyaWRlcyk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFxuICAgICAgXCJsYi1yb290IGxiLWluYm94LW5vdGlmaWNhdGlvbi1jb21tZW50IGxiLWNvbW1lbnRcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICksXG4gICAgLi4ucHJvcHNcbiAgfSwgc2hvd0hlYWRlciAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcImxiLWNvbW1lbnQtaGVhZGVyXCJcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVXNlciwge1xuICAgIGNsYXNzTmFtZTogXCJsYi1jb21tZW50LWF1dGhvclwiLFxuICAgIHVzZXJJZDogY29tbWVudC51c2VySWRcbiAgfSkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcImxiLWNvbW1lbnQtY29udGVudFwiXG4gIH0sIGNvbW1lbnQuYm9keSA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlYWN0X19kZWZhdWx0LkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChDb21tZW50Qm9keSwge1xuICAgIGNsYXNzTmFtZTogXCJsYi1jb21tZW50LWJvZHlcIixcbiAgICBib2R5OiBjb21tZW50LmJvZHksXG4gICAgY29tcG9uZW50czoge1xuICAgICAgTWVudGlvbjogQ29tbWVudE1lbnRpb24sXG4gICAgICBMaW5rOiBDb21tZW50Tm9uSW50ZXJhY3RpdmVMaW5rXG4gICAgfVxuICB9KSwgY29tbWVudC5yZWFjdGlvbnMubGVuZ3RoID4gMCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBcImxiLWNvbW1lbnQtcmVhY3Rpb25zXCJcbiAgfSwgY29tbWVudC5yZWFjdGlvbnMubWFwKChyZWFjdGlvbikgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tbWVudE5vbkludGVyYWN0aXZlUmVhY3Rpb24sIHtcbiAgICBrZXk6IHJlYWN0aW9uLmVtb2ppLFxuICAgIHJlYWN0aW9uLFxuICAgIG92ZXJyaWRlcyxcbiAgICBkaXNhYmxlZDogdHJ1ZVxuICB9KSkpKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwibGItY29tbWVudC1ib2R5XCJcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcbiAgICBjbGFzc05hbWU6IFwibGItY29tbWVudC1kZWxldGVkXCJcbiAgfSwgJC5DT01NRU5UX0RFTEVURUQpKSkpO1xufVxuZnVuY3Rpb24gZmluZExhc3RDb21tZW50V2l0aE1lbnRpb25lZElkKGNvbW1lbnRzLCBtZW50aW9uZWRJZCkge1xuICBmb3IgKGxldCBpID0gY29tbWVudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBjb21tZW50ID0gY29tbWVudHNbaV07XG4gICAgaWYgKGNvbW1lbnQudXNlcklkID09PSBtZW50aW9uZWRJZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjb21tZW50LmJvZHkpIHtcbiAgICAgIGNvbnN0IG1lbnRpb25lZElkcyA9IGdldE1lbnRpb25lZElkc0Zyb21Db21tZW50Qm9keShjb21tZW50LmJvZHkpO1xuICAgICAgaWYgKG1lbnRpb25lZElkcy5pbmNsdWRlcyhtZW50aW9uZWRJZCkpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybjtcbn1cbmZ1bmN0aW9uIGdldFVzZXJJZHNGcm9tQ29tbWVudHMoY29tbWVudHMpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChjb21tZW50cy5tYXAoKGNvbW1lbnQpID0+IGNvbW1lbnQudXNlcklkKSkpO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVJbmJveE5vdGlmaWNhdGlvblRocmVhZENvbnRlbnRzKGluYm94Tm90aWZpY2F0aW9uLCB0aHJlYWQsIHVzZXJJZCkge1xuICBjb25zdCB1bnJlYWRDb21tZW50cyA9IHRocmVhZC5jb21tZW50cy5maWx0ZXIoKGNvbW1lbnQpID0+IHtcbiAgICBpZiAoIWNvbW1lbnQuYm9keSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gaW5ib3hOb3RpZmljYXRpb24ucmVhZEF0ID8gY29tbWVudC5jcmVhdGVkQXQgPiBpbmJveE5vdGlmaWNhdGlvbi5yZWFkQXQgJiYgY29tbWVudC5jcmVhdGVkQXQgPD0gaW5ib3hOb3RpZmljYXRpb24ubm90aWZpZWRBdCA6IGNvbW1lbnQuY3JlYXRlZEF0IDw9IGluYm94Tm90aWZpY2F0aW9uLm5vdGlmaWVkQXQ7XG4gIH0pO1xuICBpZiAodW5yZWFkQ29tbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgbGFzdENvbW1lbnRzID0gdGhyZWFkLmNvbW1lbnRzLmZpbHRlcigoY29tbWVudCkgPT4gY29tbWVudC5ib2R5KS5zbGljZSgtSU5CT1hfTk9USUZJQ0FUSU9OX1RIUkVBRF9NQVhfQ09NTUVOVFMpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImNvbW1lbnRzXCIsXG4gICAgICB1bnJlYWQ6IGZhbHNlLFxuICAgICAgY29tbWVudHM6IGxhc3RDb21tZW50cyxcbiAgICAgIHVzZXJJZHM6IGdldFVzZXJJZHNGcm9tQ29tbWVudHMobGFzdENvbW1lbnRzKSxcbiAgICAgIGRhdGU6IGluYm94Tm90aWZpY2F0aW9uLm5vdGlmaWVkQXRcbiAgICB9O1xuICB9XG4gIGNvbnN0IGNvbW1lbnRXaXRoTWVudGlvbiA9IGZpbmRMYXN0Q29tbWVudFdpdGhNZW50aW9uZWRJZChcbiAgICB1bnJlYWRDb21tZW50cyxcbiAgICB1c2VySWRcbiAgKTtcbiAgaWYgKGNvbW1lbnRXaXRoTWVudGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm1lbnRpb25cIixcbiAgICAgIHVucmVhZDogdHJ1ZSxcbiAgICAgIGNvbW1lbnRzOiBbY29tbWVudFdpdGhNZW50aW9uXSxcbiAgICAgIHVzZXJJZHM6IFtjb21tZW50V2l0aE1lbnRpb24udXNlcklkXSxcbiAgICAgIGRhdGU6IGNvbW1lbnRXaXRoTWVudGlvbi5jcmVhdGVkQXRcbiAgICB9O1xuICB9XG4gIGNvbnN0IGxhc3RVbnJlYWRDb21tZW50cyA9IHVucmVhZENvbW1lbnRzLnNsaWNlKFxuICAgIC1JTkJPWF9OT1RJRklDQVRJT05fVEhSRUFEX01BWF9DT01NRU5UU1xuICApO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiY29tbWVudHNcIixcbiAgICB1bnJlYWQ6IHRydWUsXG4gICAgY29tbWVudHM6IGxhc3RVbnJlYWRDb21tZW50cyxcbiAgICB1c2VySWRzOiBnZXRVc2VySWRzRnJvbUNvbW1lbnRzKHVucmVhZENvbW1lbnRzKSxcbiAgICBkYXRlOiBpbmJveE5vdGlmaWNhdGlvbi5ub3RpZmllZEF0XG4gIH07XG59XG5cbmV4cG9ydCB7IElOQk9YX05PVElGSUNBVElPTl9USFJFQURfTUFYX0NPTU1FTlRTLCBJbmJveE5vdGlmaWNhdGlvbkNvbW1lbnQsIGdlbmVyYXRlSW5ib3hOb3RpZmljYXRpb25UaHJlYWRDb250ZW50cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5ib3hOb3RpZmljYXRpb25UaHJlYWQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/InboxNotificationThread.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/List.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/List.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   List: () => (/* binding */ List)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_intl_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/intl.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/intl.mjs\");\n\n\n\n\n\n\nconst List = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  ({ values, formatRemaining, truncate, locale, className, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"span\";\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_2__.useOverrides)();\n    const formatRemainingWithDefault = formatRemaining ?? $.LIST_REMAINING;\n    const formattedList = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n      const elements = truncate && truncate < values.length - 1 ? [\n        ...values.slice(0, truncate),\n        formatRemainingWithDefault(values.length - truncate)\n      ] : [...values];\n      const placeholders = Array(elements.length).fill(\".\");\n      const parts = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_3__.listFormat)(locale).formatToParts(placeholders);\n      return parts.map(\n        (part) => part.type === \"element\" ? elements.shift() : part.value\n      );\n    }, [formatRemainingWithDefault, locale, truncate, values]);\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n      className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-list\", className),\n      ...props,\n      ref: forwardedRef\n    }, formattedList);\n  }\n);\n\n\n//# sourceMappingURL=List.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL0xpc3QubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE0QztBQUNnQjtBQUNUO0FBQ007QUFDUDs7QUFFbEQsYUFBYSxpREFBVTtBQUN2QixLQUFLLHlFQUF5RTtBQUM5RSxnQ0FBZ0Msc0RBQUk7QUFDcEMsY0FBYyw0REFBWTtBQUMxQjtBQUNBLDBCQUEwQiw4Q0FBTztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJEQUFVO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwyQkFBMkIsZ0RBQTRCO0FBQ3ZELGlCQUFpQixrRUFBVTtBQUMzQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvY29tcG9uZW50cy9pbnRlcm5hbC9MaXN0Lm1qcz80MGM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNsb3QgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3Qtc2xvdCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgZm9yd2FyZFJlZiwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZU92ZXJyaWRlcyB9IGZyb20gJy4uLy4uL292ZXJyaWRlcy5tanMnO1xuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gJy4uLy4uL3V0aWxzL2NsYXNzLW5hbWVzLm1qcyc7XG5pbXBvcnQgeyBsaXN0Rm9ybWF0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaW50bC5tanMnO1xuXG5jb25zdCBMaXN0ID0gZm9yd2FyZFJlZihcbiAgKHsgdmFsdWVzLCBmb3JtYXRSZW1haW5pbmcsIHRydW5jYXRlLCBsb2NhbGUsIGNsYXNzTmFtZSwgYXNDaGlsZCwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gYXNDaGlsZCA/IFNsb3QgOiBcInNwYW5cIjtcbiAgICBjb25zdCAkID0gdXNlT3ZlcnJpZGVzKCk7XG4gICAgY29uc3QgZm9ybWF0UmVtYWluaW5nV2l0aERlZmF1bHQgPSBmb3JtYXRSZW1haW5pbmcgPz8gJC5MSVNUX1JFTUFJTklORztcbiAgICBjb25zdCBmb3JtYXR0ZWRMaXN0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IHRydW5jYXRlICYmIHRydW5jYXRlIDwgdmFsdWVzLmxlbmd0aCAtIDEgPyBbXG4gICAgICAgIC4uLnZhbHVlcy5zbGljZSgwLCB0cnVuY2F0ZSksXG4gICAgICAgIGZvcm1hdFJlbWFpbmluZ1dpdGhEZWZhdWx0KHZhbHVlcy5sZW5ndGggLSB0cnVuY2F0ZSlcbiAgICAgIF0gOiBbLi4udmFsdWVzXTtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IEFycmF5KGVsZW1lbnRzLmxlbmd0aCkuZmlsbChcIi5cIik7XG4gICAgICBjb25zdCBwYXJ0cyA9IGxpc3RGb3JtYXQobG9jYWxlKS5mb3JtYXRUb1BhcnRzKHBsYWNlaG9sZGVycyk7XG4gICAgICByZXR1cm4gcGFydHMubWFwKFxuICAgICAgICAocGFydCkgPT4gcGFydC50eXBlID09PSBcImVsZW1lbnRcIiA/IGVsZW1lbnRzLnNoaWZ0KCkgOiBwYXJ0LnZhbHVlXG4gICAgICApO1xuICAgIH0sIFtmb3JtYXRSZW1haW5pbmdXaXRoRGVmYXVsdCwgbG9jYWxlLCB0cnVuY2F0ZSwgdmFsdWVzXSk7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKFwibGItbGlzdFwiLCBjbGFzc05hbWUpLFxuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgIH0sIGZvcm1hdHRlZExpc3QpO1xuICB9XG4pO1xuXG5leHBvcnQgeyBMaXN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaXN0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/List.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Room.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Room.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Room: () => (/* binding */ Room)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ Room auto */ \n\n\nfunction Room({ roomId, className, ...props }) {\n    const { info, isLoading } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.useRoomInfo)(roomId);\n    const resolvedRoomName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return info?.name ?? roomId;\n    }, [\n        info?.name,\n        roomId\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_2__.classNames)(\"lb-name lb-room\", className),\n        \"data-loading\": isLoading ? \"\" : void 0,\n        ...props\n    }, isLoading ? null : resolvedRoomName);\n}\n //# sourceMappingURL=Room.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL1Jvb20ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFZTyxTQUFBQSxLQUFBLEVBQUFDLE1BQUEsRUFBQUMsU0FBQSxLQUFBQyxPQUFBO0lBQ0wsUUFBQUMsSUFBQSxFQUFBQyxTQUFBLEtBQUFDLDhEQUFBQSxDQUFBTDtJQUNBLE1BQUFNLG1CQUFBQyw4Q0FBQUEsQ0FBQTtRQUNFLE9BQUFKLE1BQUFLLFFBQUFSO0lBQXFCO1FBQUFHLE1BQUFLO1FBQUFSO0tBQUE7SUFHdkIscUNBQUFTLGdEQUFBO1FBQ0dSLFdBQUFVLGtFQUFBQSxDQUFBLG1CQUFBVjtRQUNtRCxnQkFBQUcsWUFBQTtRQUNuQixHQUFBRixLQUFBO0lBQzNCLEdBQUFFLFlBQUEsT0FBQUU7QUFLViIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9Sb29tLnRzeD9hMTNkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyB1c2VSb29tSW5mbyB9IGZyb20gXCJAbGl2ZWJsb2Nrcy9yZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRQcm9wcyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gXCIuLi8uLi91dGlscy9jbGFzcy1uYW1lc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvb21Qcm9wcyBleHRlbmRzIENvbXBvbmVudFByb3BzPFwic3BhblwiPiB7XG4gIHJvb21JZDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUm9vbSh7IHJvb21JZCwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9OiBSb29tUHJvcHMpIHtcbiAgY29uc3QgeyBpbmZvLCBpc0xvYWRpbmcgfSA9IHVzZVJvb21JbmZvKHJvb21JZCk7XG4gIGNvbnN0IHJlc29sdmVkUm9vbU5hbWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gaW5mbz8ubmFtZSA/PyByb29tSWQ7XG4gIH0sIFtpbmZvPy5uYW1lLCByb29tSWRdKTtcblxuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJsYi1uYW1lIGxiLXJvb21cIiwgY2xhc3NOYW1lKX1cbiAgICAgIGRhdGEtbG9hZGluZz17aXNMb2FkaW5nID8gXCJcIiA6IHVuZGVmaW5lZH1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICB7aXNMb2FkaW5nID8gbnVsbCA6IHJlc29sdmVkUm9vbU5hbWV9XG4gICAgPC9zcGFuPlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlJvb20iLCJyb29tSWQiLCJjbGFzc05hbWUiLCJwcm9wcyIsImluZm8iLCJpc0xvYWRpbmciLCJ1c2VSb29tSW5mbyIsInJlc29sdmVkUm9vbU5hbWUiLCJ1c2VNZW1vIiwibmFtZSIsIlJlYWN0X19kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Room.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Tooltip.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/Tooltip.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ShortcutTooltip: () => (/* binding */ ShortcutTooltip),\n/* harmony export */   ShortcutTooltipKey: () => (/* binding */ ShortcutTooltipKey),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TooltipProvider: () => (/* reexport safe */ _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.TooltipProvider)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @radix-ui/react-tooltip */ \"(ssr)/./node_modules/@radix-ui/react-tooltip/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* harmony import */ var _utils_is_apple_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is-apple.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-apple.mjs\");\n/* __next_internal_client_entry_do_not_use__ TooltipProvider,ShortcutTooltip,ShortcutTooltipKey,Tooltip auto */ \n\n\n\n\n\n\nconst KEYS = {\n    alt: ()=>({\n            title: \"Alt\",\n            key: \"⌥\"\n        }),\n    mod: ()=>(0,_utils_is_apple_mjs__WEBPACK_IMPORTED_MODULE_2__.isApple)() ? {\n            title: \"Command\",\n            key: \"⌘\"\n        } : {\n            title: \"Ctrl\",\n            key: \"⌃\"\n        },\n    shift: ()=>{\n        return {\n            title: \"Shift\",\n            key: \"⇧\"\n        };\n    },\n    enter: ()=>{\n        return {\n            title: \"Enter\",\n            key: \"⏎\"\n        };\n    }\n};\nconst Tooltip = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ children, content, multiline, className, ...props }, forwardedRef)=>{\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_3__.useLiveblocksUIConfig)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Root, {\n        disableHoverableContent: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Trigger, {\n        asChild: true,\n        ref: forwardedRef\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Portal, {\n        container: portalContainer\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_radix_ui_react_tooltip__WEBPACK_IMPORTED_MODULE_0__.Content, {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_4__.classNames)(\"lb-root lb-portal lb-tooltip\", multiline && \"lb-tooltip:multiline\", className),\n        side: \"top\",\n        align: \"center\",\n        sideOffset: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_SIDE_OFFSET,\n        collisionPadding: _constants_mjs__WEBPACK_IMPORTED_MODULE_5__.FLOATING_ELEMENT_COLLISION_PADDING,\n        ...props\n    }, content)));\n});\nconst ShortcutTooltip = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ children, content, shortcut, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Tooltip, {\n        content: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, content, shortcut && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"kbd\", {\n            className: \"lb-tooltip-shortcut\"\n        }, shortcut)),\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nfunction ShortcutTooltipKey({ name, ...props }) {\n    const { title, key } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>KEYS[name]?.(), [\n        name\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"abbr\", {\n        title,\n        ...props\n    }, key);\n}\n //# sourceMappingURL=Tooltip.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL1Rvb2x0aXAubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBY0EsTUFBQUEsT0FBQTtJQUFhQyxLQUFBO1lBQUFDLE9BQUE7WUFBQUMsS0FBQTtRQUFBO0lBQzBCQyxLQUFBLElBQUFDLDREQUFBQSxLQUFBO1lBQUFILE9BQUE7WUFBQUMsS0FBQTtRQUFBO1lBQUFELE9BQUE7WUFBQUMsS0FBQTtRQUFBO0lBRW9DRyxPQUFBO1FBRXZFO1lBQUFKLE9BQUE7WUFBQUMsS0FBQTtRQUFBO0lBQWtDO0lBQ3BDSSxPQUFBO1FBRUU7WUFBQUwsT0FBQTtZQUFBQyxLQUFBO1FBQUE7SUFBa0M7QUFFdEM7QUFpQk8sTUFBQUssd0JBQUFDLGlEQUFBQSxDQUFnQixHQUFBQyxRQUFBLEVBQUFDLE9BQUEsRUFBQUMsU0FBQSxFQUFBQyxTQUFBLEtBQUFDLE9BQUEsRUFBQUM7SUFFbkIsUUFBQUMsZUFBQSxLQUFBQyxrRUFBQUE7SUFFQSxxQ0FBQUMsZ0RBQUEsQ0FBQUUseURBQUE7UUFDR0UseUJBQUE7SUFBNkMsaUNBQUFKLGdEQUFBLENBQUFFLDREQUFBO1FBQzNDSSxTQUFBO1FBQWdDQyxLQUFBVjtJQUFNLEdBQUFMLFdBQUEsOEJBQUFRLGdEQUFBLENBQUFFLDJEQUFBO1FBR3RDTyxXQUFBWDtJQUFtQyxpQ0FBQUUsZ0RBQUEsQ0FBQUUsNERBQUE7UUFDakNQLFdBQUFnQixrRUFBQUEsQ0FDWSxnQ0FDVGpCLGFBQUEsd0JBQ2FDO1FBRWZpQixNQUFBO1FBQ0tDLE9BQUE7UUFDQ0MsWUFBQUMsd0VBQUFBO1FBQ01DLGtCQUFBQyw4RUFBQUE7UUFDTSxHQUFBckIsS0FBQTtJQUNkLEdBQUFIO0FBS1Y7QUFLTyxNQUFBeUIsZ0NBQUEzQixpREFBQUEsQ0FBQSxHQUFBQyxRQUFBLEVBQUFDLE9BQUEsRUFBQTBCLFFBQUEsS0FBQXZCLE9BQUEsRUFBQUM7SUFJWCxxQ0FBQUcsZ0RBQUEsQ0FBQVYsU0FBQTtRQUNHRyxTQUFBLDhCQUFBTyxnREFBQSxDQUFBQSwyQ0FBQSxRQUFBUCxTQUFBMEIsWUFBQSw4QkFBQW5CLGdEQUFBO1lBSW1CTCxXQUFBO1FBQWMsR0FBQXdCO1FBQzlCLEdBQUF2QixLQUFBO1FBRUVXLEtBQUFWO0lBQ0MsR0FBQUw7QUFLWDtBQUVPLFNBQUE2QixtQkFBQSxFQUE0QkMsSUFBQSxFQUNqQyxHQUFBMUIsT0FFRjtJQUNFLFFBQUFaLEtBQUEsRUFBQUMsR0FBQSxLQUFBc0MsOENBQUFBLENBQUEsSUFBQXpDLElBQUEsQ0FBQXdDLEtBQUE7UUFBQUE7S0FBQTtJQUVBLHFDQUFBdEIsZ0RBQUE7UUFDR2hCO1FBQUssR0FBQVksS0FBQTtJQUFrQixHQUFBWDtBQUk1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9pbnRlcm5hbC9Ub29sdGlwLnRzeD9mYzMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgKiBhcyBUb29sdGlwUHJpbWl0aXZlIGZyb20gXCJAcmFkaXgtdWkvcmVhY3QtdG9vbHRpcFwiO1xuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRQcm9wcywgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB1c2VMaXZlYmxvY2tzVUlDb25maWcgfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5pbXBvcnQge1xuICBGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HLFxuICBGTE9BVElOR19FTEVNRU5UX1NJREVfT0ZGU0VULFxufSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjbGFzc05hbWVzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NsYXNzLW5hbWVzXCI7XG5pbXBvcnQgeyBpc0FwcGxlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2lzLWFwcGxlXCI7XG5cbmNvbnN0IEtFWVMgPSB7XG4gIGFsdDogKCkgPT4gKHsgdGl0bGU6IFwiQWx0XCIsIGtleTogXCLijKVcIiB9KSxcbiAgbW9kOiAoKSA9PlxuICAgIGlzQXBwbGUoKSA/IHsgdGl0bGU6IFwiQ29tbWFuZFwiLCBrZXk6IFwi4oyYXCIgfSA6IHsgdGl0bGU6IFwiQ3RybFwiLCBrZXk6IFwi4oyDXCIgfSxcbiAgc2hpZnQ6ICgpID0+IHtcbiAgICByZXR1cm4geyB0aXRsZTogXCJTaGlmdFwiLCBrZXk6IFwi4oenXCIgfTtcbiAgfSxcbiAgZW50ZXI6ICgpID0+IHtcbiAgICByZXR1cm4geyB0aXRsZTogXCJFbnRlclwiLCBrZXk6IFwi4o+OXCIgfTtcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbHRpcFByb3BzXG4gIGV4dGVuZHMgUGljazxUb29sdGlwUHJpbWl0aXZlLlRvb2x0aXBUcmlnZ2VyUHJvcHMsIFwiY2hpbGRyZW5cIj4sXG4gICAgT21pdDxUb29sdGlwUHJpbWl0aXZlLlRvb2x0aXBDb250ZW50UHJvcHMsIFwiY29udGVudFwiPiB7XG4gIGNvbnRlbnQ6IFJlYWN0Tm9kZTtcbiAgbXVsdGlsaW5lPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaG9ydGN1dFRvb2x0aXBQcm9wcyBleHRlbmRzIFRvb2x0aXBQcm9wcyB7XG4gIHNob3J0Y3V0PzogUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNob3J0Y3V0VG9vbHRpcEtleVByb3BzIGV4dGVuZHMgQ29tcG9uZW50UHJvcHM8XCJhYmJyXCI+IHtcbiAgbmFtZToga2V5b2YgdHlwZW9mIEtFWVM7XG59XG5cbmV4cG9ydCBjb25zdCBUb29sdGlwID0gZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgVG9vbHRpcFByb3BzPihcbiAgKHsgY2hpbGRyZW4sIGNvbnRlbnQsIG11bHRpbGluZSwgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgICBjb25zdCB7IHBvcnRhbENvbnRhaW5lciB9ID0gdXNlTGl2ZWJsb2Nrc1VJQ29uZmlnKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2x0aXBQcmltaXRpdmUuUm9vdCBkaXNhYmxlSG92ZXJhYmxlQ29udGVudD5cbiAgICAgICAgPFRvb2x0aXBQcmltaXRpdmUuVHJpZ2dlciBhc0NoaWxkIHJlZj17Zm9yd2FyZGVkUmVmfT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvVG9vbHRpcFByaW1pdGl2ZS5UcmlnZ2VyPlxuICAgICAgICA8VG9vbHRpcFByaW1pdGl2ZS5Qb3J0YWwgY29udGFpbmVyPXtwb3J0YWxDb250YWluZXJ9PlxuICAgICAgICAgIDxUb29sdGlwUHJpbWl0aXZlLkNvbnRlbnRcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgICAgICAgXCJsYi1yb290IGxiLXBvcnRhbCBsYi10b29sdGlwXCIsXG4gICAgICAgICAgICAgIG11bHRpbGluZSAmJiBcImxiLXRvb2x0aXA6bXVsdGlsaW5lXCIsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHNpZGU9XCJ0b3BcIlxuICAgICAgICAgICAgYWxpZ249XCJjZW50ZXJcIlxuICAgICAgICAgICAgc2lkZU9mZnNldD17RkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVH1cbiAgICAgICAgICAgIGNvbGxpc2lvblBhZGRpbmc9e0ZMT0FUSU5HX0VMRU1FTlRfQ09MTElTSU9OX1BBRERJTkd9XG4gICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NvbnRlbnR9XG4gICAgICAgICAgPC9Ub29sdGlwUHJpbWl0aXZlLkNvbnRlbnQ+XG4gICAgICAgIDwvVG9vbHRpcFByaW1pdGl2ZS5Qb3J0YWw+XG4gICAgICA8L1Rvb2x0aXBQcmltaXRpdmUuUm9vdD5cbiAgICApO1xuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgU2hvcnRjdXRUb29sdGlwID0gZm9yd2FyZFJlZjxcbiAgSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIFNob3J0Y3V0VG9vbHRpcFByb3BzXG4+KCh7IGNoaWxkcmVuLCBjb250ZW50LCBzaG9ydGN1dCwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFRvb2x0aXBcbiAgICAgIGNvbnRlbnQ9e1xuICAgICAgICA8PlxuICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICAgIHtzaG9ydGN1dCAmJiA8a2JkIGNsYXNzTmFtZT1cImxiLXRvb2x0aXAtc2hvcnRjdXRcIj57c2hvcnRjdXR9PC9rYmQ+fVxuICAgICAgICA8Lz5cbiAgICAgIH1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1Rvb2x0aXA+XG4gICk7XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNob3J0Y3V0VG9vbHRpcEtleSh7XG4gIG5hbWUsXG4gIC4uLnByb3BzXG59OiBTaG9ydGN1dFRvb2x0aXBLZXlQcm9wcykge1xuICBjb25zdCB7IHRpdGxlLCBrZXkgfSA9IHVzZU1lbW8oKCkgPT4gS0VZU1tuYW1lXT8uKCksIFtuYW1lXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8YWJiciB0aXRsZT17dGl0bGV9IHsuLi5wcm9wc30+XG4gICAgICB7a2V5fVxuICAgIDwvYWJicj5cbiAgKTtcbn1cblxuZXhwb3J0IHsgVG9vbHRpcFByb3ZpZGVyIH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC10b29sdGlwXCI7XG4iXSwibmFtZXMiOlsiS0VZUyIsImFsdCIsInRpdGxlIiwia2V5IiwibW9kIiwiaXNBcHBsZSIsInNoaWZ0IiwiZW50ZXIiLCJUb29sdGlwIiwiZm9yd2FyZFJlZiIsImNoaWxkcmVuIiwiY29udGVudCIsIm11bHRpbGluZSIsImNsYXNzTmFtZSIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwicG9ydGFsQ29udGFpbmVyIiwidXNlTGl2ZWJsb2Nrc1VJQ29uZmlnIiwiUmVhY3RfX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiVG9vbHRpcFByaW1pdGl2ZSIsIlJvb3QiLCJkaXNhYmxlSG92ZXJhYmxlQ29udGVudCIsIlRyaWdnZXIiLCJhc0NoaWxkIiwicmVmIiwiUG9ydGFsIiwiY29udGFpbmVyIiwiQ29udGVudCIsImNsYXNzTmFtZXMiLCJzaWRlIiwiYWxpZ24iLCJzaWRlT2Zmc2V0IiwiRkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVCIsImNvbGxpc2lvblBhZGRpbmciLCJGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HIiwiU2hvcnRjdXRUb29sdGlwIiwic2hvcnRjdXQiLCJGcmFnbWVudCIsIlNob3J0Y3V0VG9vbHRpcEtleSIsIm5hbWUiLCJ1c2VNZW1vIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Tooltip.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/User.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/components/internal/User.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   User: () => (/* binding */ User)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/shared.mjs\");\n/* harmony import */ var _utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/capitalize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/capitalize.mjs\");\n/* harmony import */ var _utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/class-names.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\");\n/* __next_internal_client_entry_do_not_use__ User auto */ \n\n\n\n\n\nfunction User({ userId, replaceSelf, capitalize: shouldCapitalize, className, ...props }) {\n    const currentId = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_1__.useCurrentUserId)();\n    const { user, isLoading } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_2__._useUser)(userId);\n    const $ = (0,_overrides_mjs__WEBPACK_IMPORTED_MODULE_3__.useOverrides)();\n    const resolvedUserName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const name = replaceSelf && currentId === userId ? $.USER_SELF : user?.name ?? $.USER_UNKNOWN;\n        return shouldCapitalize ? (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_4__.capitalize)(name) : name;\n    }, [\n        replaceSelf,\n        currentId,\n        userId,\n        $.USER_SELF,\n        $.USER_UNKNOWN,\n        user?.name,\n        shouldCapitalize\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: (0,_utils_class_names_mjs__WEBPACK_IMPORTED_MODULE_5__.classNames)(\"lb-name lb-user\", className),\n        \"data-loading\": isLoading ? \"\" : void 0,\n        ...props\n    }, isLoading ? null : resolvedUserName);\n}\n //# sourceMappingURL=User.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb21wb25lbnRzL2ludGVybmFsL1VzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Qk8sU0FBQUEsS0FBQSxFQUFjQyxNQUFBLEVBQ25CQyxXQUFBLEVBQ0FDLFlBQUFDLGdCQUFBLEVBQ1lDLFNBQUEsRUFDWixHQUFBQyxPQUVGO0lBQ0UsTUFBQUMsWUFBQUMsNkRBQUFBO0lBQ0EsUUFBQUMsSUFBQSxFQUFBQyxTQUFBLEtBQUFDLDJEQUFBQSxDQUFBVjtJQUNBLE1BQUFXLElBQUFDLDREQUFBQTtJQUNBLE1BQUFDLG1CQUFBQyw4Q0FBQUEsQ0FBQTtRQUNFLE1BQUFDLE9BQUFkLGVBQUFLLGNBQUFOLFNBQUFXLEVBQUFLLFNBQUEsR0FBQVIsTUFBQU8sUUFBQUosRUFBQU0sWUFBQTtRQUtBLE9BQUFkLG1CQUFBRCxpRUFBQUEsQ0FBQWEsUUFBQUE7SUFBNkM7UUFDNUNkO1FBQ0RLO1FBQ0FOO1FBQ0FXLEVBQUFLLFNBQUE7UUFDRUwsRUFBQU0sWUFBQTtRQUNBVCxNQUFBTztRQUNJWjtLQUNOO0lBR0YscUNBQUFlLGdEQUFBO1FBQ0dkLFdBQUFnQixrRUFBQUEsQ0FBQSxtQkFBQWhCO1FBQ21ELGdCQUFBSyxZQUFBO1FBQ25CLEdBQUFKLEtBQUE7SUFDM0IsR0FBQUksWUFBQSxPQUFBSTtBQUtWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ludGVybmFsL1VzZXIudHN4P2U4YjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZVVzZXIgfSBmcm9tIFwiQGxpdmVibG9ja3MvcmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IHVzZU92ZXJyaWRlcyB9IGZyb20gXCIuLi8uLi9vdmVycmlkZXNcIjtcbmltcG9ydCB7IHVzZUN1cnJlbnRVc2VySWQgfSBmcm9tIFwiLi4vLi4vc2hhcmVkXCI7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NhcGl0YWxpemVcIjtcbmltcG9ydCB7IGNsYXNzTmFtZXMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY2xhc3MtbmFtZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VyUHJvcHMgZXh0ZW5kcyBDb21wb25lbnRQcm9wczxcInNwYW5cIj4ge1xuICAvKipcbiAgICogVGhlIHVzZXIgSUQgdG8gZGlzcGxheSB0aGUgdXNlciBuYW1lIGZvci5cbiAgICovXG4gIHVzZXJJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlcGxhY2UgdGhlIHVzZXIgbmFtZSB3aXRoIFwieW91XCIgKCQuVVNFUl9TRUxGKSBmb3IgdGhlIGN1cnJlbnQgdXNlci5cbiAgICovXG4gIHJlcGxhY2VTZWxmPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0byBjYXBpdGFsaXplIHRoZSB1c2VyIG5hbWUuXG4gICAqL1xuICBjYXBpdGFsaXplPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFVzZXIoe1xuICB1c2VySWQsXG4gIHJlcGxhY2VTZWxmLFxuICBjYXBpdGFsaXplOiBzaG91bGRDYXBpdGFsaXplLFxuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59OiBVc2VyUHJvcHMpIHtcbiAgY29uc3QgY3VycmVudElkID0gdXNlQ3VycmVudFVzZXJJZCgpO1xuICBjb25zdCB7IHVzZXIsIGlzTG9hZGluZyB9ID0gdXNlVXNlcih1c2VySWQpO1xuICBjb25zdCAkID0gdXNlT3ZlcnJpZGVzKCk7XG4gIGNvbnN0IHJlc29sdmVkVXNlck5hbWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBuYW1lID1cbiAgICAgIHJlcGxhY2VTZWxmICYmIGN1cnJlbnRJZCA9PT0gdXNlcklkXG4gICAgICAgID8gJC5VU0VSX1NFTEZcbiAgICAgICAgOiB1c2VyPy5uYW1lID8/ICQuVVNFUl9VTktOT1dOO1xuXG4gICAgcmV0dXJuIHNob3VsZENhcGl0YWxpemUgPyBjYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbiAgfSwgW1xuICAgIHJlcGxhY2VTZWxmLFxuICAgIGN1cnJlbnRJZCxcbiAgICB1c2VySWQsXG4gICAgJC5VU0VSX1NFTEYsXG4gICAgJC5VU0VSX1VOS05PV04sXG4gICAgdXNlcj8ubmFtZSxcbiAgICBzaG91bGRDYXBpdGFsaXplLFxuICBdKTtcblxuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXCJsYi1uYW1lIGxiLXVzZXJcIiwgY2xhc3NOYW1lKX1cbiAgICAgIGRhdGEtbG9hZGluZz17aXNMb2FkaW5nID8gXCJcIiA6IHVuZGVmaW5lZH1cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICB7aXNMb2FkaW5nID8gbnVsbCA6IHJlc29sdmVkVXNlck5hbWV9XG4gICAgPC9zcGFuPlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlVzZXIiLCJ1c2VySWQiLCJyZXBsYWNlU2VsZiIsImNhcGl0YWxpemUiLCJzaG91bGRDYXBpdGFsaXplIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJjdXJyZW50SWQiLCJ1c2VDdXJyZW50VXNlcklkIiwidXNlciIsImlzTG9hZGluZyIsInVzZVVzZXIiLCIkIiwidXNlT3ZlcnJpZGVzIiwicmVzb2x2ZWRVc2VyTmFtZSIsInVzZU1lbW8iLCJuYW1lIiwiVVNFUl9TRUxGIiwiVVNFUl9VTktOT1dOIiwiUmVhY3RfX2RlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/User.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/config.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/config.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LiveblocksUIConfig: () => (/* binding */ LiveblocksUIConfig),\n/* harmony export */   useLiveblocksUIConfig: () => (/* binding */ useLiveblocksUIConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components.mjs\");\n/* harmony import */ var _overrides_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./overrides.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\");\n/* __next_internal_client_entry_do_not_use__ LiveblocksUIConfig,useLiveblocksUIConfig auto */ \n\n\nconst LiveblocksUIConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nfunction useLiveblocksUIConfig() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(LiveblocksUIConfigContext);\n}\nfunction LiveblocksUIConfig({ overrides, components, portalContainer, children }) {\n    const liveblocksUIConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            portalContainer\n        }), [\n        portalContainer\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LiveblocksUIConfigContext.Provider, {\n        value: liveblocksUIConfig\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_overrides_mjs__WEBPACK_IMPORTED_MODULE_1__.OverridesProvider, {\n        overrides\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_mjs__WEBPACK_IMPORTED_MODULE_2__.ComponentsProvider, {\n        components\n    }, children)));\n}\n //# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb25maWcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBOEJBLE1BQUFBLDBDQUFBQyxvREFBQUEsQ0FBQTtBQUVPLFNBQUFDO0lBQ0wsT0FBQUMsaURBQUFBLENBQUFIO0FBQ0Y7QUFVTyxTQUFBSSxtQkFBQSxFQUE0QkMsU0FBQSxFQUNqQ0MsVUFBQSxFQUNBQyxlQUFBLEVBQ0FDLFFBQUEsRUFFRjtJQUNFLE1BQUFDLHFCQUFBQyw4Q0FBQUEsQ0FBMkI7WUFBQUg7UUFBQSxJQUNBO1FBQUFBO0tBQUE7SUFJM0IscUNBQUFJLGdEQUFBLENBQUFYLDBCQUFBYSxRQUFBO1FBQ0dDLE9BQUFMO0lBQTBDLGlDQUFBRSxnREFBQSxDQUFBSSw2REFBQUEsRUFBQTtRQUN4Q1Y7SUFBa0IsaUNBQUFNLGdEQUFBLENBQUFLLCtEQUFBQSxFQUFBO1FBQ2hCVjtJQUFtQixHQUFBRTtBQU01QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi9zcmMvY29uZmlnLnRzeD85ZmMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgdHlwZSB7IFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB0eXBlIENvbXBvbmVudHMsIENvbXBvbmVudHNQcm92aWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHNcIjtcbmltcG9ydCB0eXBlIHsgT3ZlcnJpZGVzIH0gZnJvbSBcIi4vb3ZlcnJpZGVzXCI7XG5pbXBvcnQgeyBPdmVycmlkZXNQcm92aWRlciB9IGZyb20gXCIuL292ZXJyaWRlc1wiO1xuXG50eXBlIExpdmVibG9ja3NVSUNvbmZpZ1Byb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e1xuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGNvbXBvbmVudHMnIHN0cmluZ3MuXG4gICAqL1xuICBvdmVycmlkZXM/OiBQYXJ0aWFsPE92ZXJyaWRlcz47XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBjb21wb25lbnRzJyBjb21wb25lbnRzLlxuICAgKi9cbiAgY29tcG9uZW50cz86IFBhcnRpYWw8Q29tcG9uZW50cz47XG5cbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgdG8gcmVuZGVyIHRoZSBwb3J0YWwgaW50by5cbiAgICovXG4gIHBvcnRhbENvbnRhaW5lcj86IEhUTUxFbGVtZW50O1xufT47XG5cbmludGVyZmFjZSBMaXZlYmxvY2tzVUlDb25maWdDb250ZXh0IHtcbiAgcG9ydGFsQ29udGFpbmVyPzogSFRNTEVsZW1lbnQ7XG59XG5cbmNvbnN0IExpdmVibG9ja3NVSUNvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0PExpdmVibG9ja3NVSUNvbmZpZ0NvbnRleHQ+KHt9KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxpdmVibG9ja3NVSUNvbmZpZygpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTGl2ZWJsb2Nrc1VJQ29uZmlnQ29udGV4dCk7XG59XG5cbi8qKlxuICogU2V0IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgYWxsIGNvbXBvbmVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxMaXZlYmxvY2tzVUlDb25maWcgb3ZlcnJpZGVzPXt7IGxvY2FsZTogXCJmclwiLCBVU0VSX1VOS05PV046IFwiQW5vbnltZVwiLCAuLi4gfX0+XG4gKiAgIDxBcHAgLz5cbiAqIDwvTGl2ZWJsb2Nrc1VJQ29uZmlnPlxuICovXG5leHBvcnQgZnVuY3Rpb24gTGl2ZWJsb2Nrc1VJQ29uZmlnKHtcbiAgb3ZlcnJpZGVzLFxuICBjb21wb25lbnRzLFxuICBwb3J0YWxDb250YWluZXIsXG4gIGNoaWxkcmVuLFxufTogTGl2ZWJsb2Nrc1VJQ29uZmlnUHJvcHMpIHtcbiAgY29uc3QgbGl2ZWJsb2Nrc1VJQ29uZmlnID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoeyBwb3J0YWxDb250YWluZXIgfSksXG4gICAgW3BvcnRhbENvbnRhaW5lcl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxMaXZlYmxvY2tzVUlDb25maWdDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtsaXZlYmxvY2tzVUlDb25maWd9PlxuICAgICAgPE92ZXJyaWRlc1Byb3ZpZGVyIG92ZXJyaWRlcz17b3ZlcnJpZGVzfT5cbiAgICAgICAgPENvbXBvbmVudHNQcm92aWRlciBjb21wb25lbnRzPXtjb21wb25lbnRzfT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvQ29tcG9uZW50c1Byb3ZpZGVyPlxuICAgICAgPC9PdmVycmlkZXNQcm92aWRlcj5cbiAgICA8L0xpdmVibG9ja3NVSUNvbmZpZ0NvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiTGl2ZWJsb2Nrc1VJQ29uZmlnQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VMaXZlYmxvY2tzVUlDb25maWciLCJ1c2VDb250ZXh0IiwiTGl2ZWJsb2Nrc1VJQ29uZmlnIiwib3ZlcnJpZGVzIiwiY29tcG9uZW50cyIsInBvcnRhbENvbnRhaW5lciIsImNoaWxkcmVuIiwibGl2ZWJsb2Nrc1VJQ29uZmlnIiwidXNlTWVtbyIsIlJlYWN0X19kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJPdmVycmlkZXNQcm92aWRlciIsIkNvbXBvbmVudHNQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/constants.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMOJI_FONT_FAMILY: () => (/* binding */ EMOJI_FONT_FAMILY),\n/* harmony export */   FLOATING_ELEMENT_COLLISION_PADDING: () => (/* binding */ FLOATING_ELEMENT_COLLISION_PADDING),\n/* harmony export */   FLOATING_ELEMENT_SIDE_OFFSET: () => (/* binding */ FLOATING_ELEMENT_SIDE_OFFSET)\n/* harmony export */ });\nconst FLOATING_ELEMENT_SIDE_OFFSET = 6;\nconst FLOATING_ELEMENT_COLLISION_PADDING = 10;\nconst EMOJI_FONT_FAMILY = \"'Apple Color Emoji', 'Noto Color Emoji', 'Twemoji Mozilla', 'Android Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', EmojiSymbols, sans-serif\";\n\n\n//# sourceMappingURL=constants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb25zdGFudHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFK0Y7QUFDL0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9jb25zdGFudHMubWpzPzg0OTYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRkxPQVRJTkdfRUxFTUVOVF9TSURFX09GRlNFVCA9IDY7XG5jb25zdCBGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HID0gMTA7XG5jb25zdCBFTU9KSV9GT05UX0ZBTUlMWSA9IFwiJ0FwcGxlIENvbG9yIEVtb2ppJywgJ05vdG8gQ29sb3IgRW1vamknLCAnVHdlbW9qaSBNb3ppbGxhJywgJ0FuZHJvaWQgRW1vamknLCAnU2Vnb2UgVUkgRW1vamknLCAnU2Vnb2UgVUkgU3ltYm9sJywgRW1vamlTeW1ib2xzLCBzYW5zLXNlcmlmXCI7XG5cbmV4cG9ydCB7IEVNT0pJX0ZPTlRfRkFNSUxZLCBGTE9BVElOR19FTEVNRU5UX0NPTExJU0lPTl9QQURESU5HLCBGTE9BVElOR19FTEVNRU5UX1NJREVfT0ZGU0VUIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Check.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Check.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckIcon: () => (/* binding */ CheckIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction CheckIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M16 6L8 14L4 10\"\n  }));\n}\n\n\n//# sourceMappingURL=Check.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9DaGVjay5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29COztBQUV2RDtBQUNBLHlCQUF5QixnREFBNEIsQ0FBQywrREFBSTtBQUMxRDtBQUNBLEdBQUcsa0JBQWtCLGdEQUE0QjtBQUNqRDtBQUNBLEdBQUc7QUFDSDs7QUFFcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9DaGVjay5tanM/NWU5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvaW50ZXJuYWwvSWNvbi5tanMnO1xuXG5mdW5jdGlvbiBDaGVja0ljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE2IDZMOCAxNEw0IDEwXCJcbiAgfSkpO1xufVxuXG5leHBvcnQgeyBDaGVja0ljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoZWNrLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Check.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Cross.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Cross.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CrossIcon: () => (/* binding */ CrossIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction CrossIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M15 5L5 15\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M5 5L15 15\"\n  }));\n}\n\n\n//# sourceMappingURL=Cross.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9Dcm9zcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29COztBQUV2RDtBQUNBLHlCQUF5QixnREFBNEIsQ0FBQywrREFBSTtBQUMxRDtBQUNBLEdBQUcsa0JBQWtCLGdEQUE0QjtBQUNqRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBLEdBQUc7QUFDSDs7QUFFcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9Dcm9zcy5tanM/ZTVhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJy4uL2NvbXBvbmVudHMvaW50ZXJuYWwvSWNvbi5tanMnO1xuXG5mdW5jdGlvbiBDcm9zc0ljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTE1IDVMNSAxNVwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTUgNUwxNSAxNVwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgQ3Jvc3NJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Dcm9zcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Cross.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Delete.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Delete.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeleteIcon: () => (/* binding */ DeleteIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction DeleteIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M4.5 6.5h11M14 6.5V14a1.5 1.5 0 0 1-1.5 1.5h-5A1.5 1.5 0 0 1 6 14V6.5M7.5 6.5V5a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v1.5\"\n  }));\n}\n\n\n//# sourceMappingURL=Delete.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9EZWxldGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNvQjs7QUFFdkQ7QUFDQSx5QkFBeUIsZ0RBQTRCLENBQUMsK0RBQUk7QUFDMUQ7QUFDQSxHQUFHLGtCQUFrQixnREFBNEI7QUFDakQ7QUFDQSxHQUFHO0FBQ0g7O0FBRXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvaWNvbnMvRGVsZXRlLm1qcz9iZTAyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIERlbGV0ZUljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTQuNSA2LjVoMTFNMTQgNi41VjE0YTEuNSAxLjUgMCAwIDEtMS41IDEuNWgtNUExLjUgMS41IDAgMCAxIDYgMTRWNi41TTcuNSA2LjVWNWExIDEgMCAwIDEgMS0xaDNhMSAxIDAgMCAxIDEgMXYxLjVcIlxuICB9KSk7XG59XG5cbmV4cG9ydCB7IERlbGV0ZUljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlbGV0ZS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Delete.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Edit.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Edit.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditIcon: () => (/* binding */ EditIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction EditIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"m11.784 5.797-6.13 6.138a4 4 0 0 0-1.03 1.775L4 16l2.285-.624a4 4 0 0 0 1.776-1.032l6.145-6.152m-2.422-2.395 1.244-1.246c.608-.608 1.826-.81 2.53-.104.7.7.499 1.893-.122 2.515l-1.23 1.23m-2.422-2.395 2.422 2.395\"\n  }));\n}\n\n\n//# sourceMappingURL=Edit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9FZGl0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7O0FBRXZEO0FBQ0EseUJBQXlCLGdEQUE0QixDQUFDLCtEQUFJO0FBQzFEO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0EsR0FBRztBQUNIOztBQUVvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2ljb25zL0VkaXQubWpzPzMxMjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzJztcblxuZnVuY3Rpb24gRWRpdEljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwibTExLjc4NCA1Ljc5Ny02LjEzIDYuMTM4YTQgNCAwIDAgMC0xLjAzIDEuNzc1TDQgMTZsMi4yODUtLjYyNGE0IDQgMCAwIDAgMS43NzYtMS4wMzJsNi4xNDUtNi4xNTJtLTIuNDIyLTIuMzk1IDEuMjQ0LTEuMjQ2Yy42MDgtLjYwOCAxLjgyNi0uODEgMi41My0uMTA0LjcuNy40OTkgMS44OTMtLjEyMiAyLjUxNWwtMS4yMyAxLjIzbS0yLjQyMi0yLjM5NSAyLjQyMiAyLjM5NVwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgRWRpdEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVkaXQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Edit.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Ellipsis.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Ellipsis.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EllipsisIcon: () => (/* binding */ EllipsisIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction EllipsisIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    fill: \"currentColor\",\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: 5,\n    cy: 10,\n    r: 0.75\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: 10,\n    cy: 10,\n    r: 0.75\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: 15,\n    cy: 10,\n    r: 0.75\n  }));\n}\n\n\n//# sourceMappingURL=Ellipsis.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9FbGxpcHNpcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29COztBQUV2RDtBQUNBLHlCQUF5QixnREFBNEIsQ0FBQywrREFBSTtBQUMxRDtBQUNBO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxHQUFHLG1CQUFtQixnREFBNEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUV3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2ljb25zL0VsbGlwc2lzLm1qcz83OTlkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIEVsbGlwc2lzSWNvbihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgLi4ucHJvcHNcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xuICAgIGN4OiA1LFxuICAgIGN5OiAxMCxcbiAgICByOiAwLjc1XG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IDEwLFxuICAgIGN5OiAxMCxcbiAgICByOiAwLjc1XG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IDE1LFxuICAgIGN5OiAxMCxcbiAgICByOiAwLjc1XG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgRWxsaXBzaXNJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbGxpcHNpcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Ellipsis.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Emoji.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Emoji.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiIcon: () => (/* binding */ EmojiIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction EmojiIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14Z\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M7.5 11.5S8.25 13 10 13s2.5-1.5 2.5-1.5M8 8h.007\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M12 8h.007\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: 8,\n    cy: 8,\n    r: 0.25\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: 12,\n    cy: 8,\n    r: 0.25\n  }));\n}\n\n\n//# sourceMappingURL=Emoji.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9FbW9qaS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29COztBQUV2RDtBQUNBLHlCQUF5QixnREFBNEIsQ0FBQywrREFBSTtBQUMxRDtBQUNBLEdBQUcsa0JBQWtCLGdEQUE0QjtBQUNqRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxHQUFHLG1CQUFtQixnREFBNEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2ljb25zL0Vtb2ppLm1qcz8xMGRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIEVtb2ppSWNvbihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIC4uLnByb3BzXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTAgMTdhNyA3IDAgMSAwIDAtMTQgNyA3IDAgMCAwIDAgMTRaXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNy41IDExLjVTOC4yNSAxMyAxMCAxM3MyLjUtMS41IDIuNS0xLjVNOCA4aC4wMDdcIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMiA4aC4wMDdcIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xuICAgIGN4OiA4LFxuICAgIGN5OiA4LFxuICAgIHI6IDAuMjVcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBjeDogMTIsXG4gICAgY3k6IDgsXG4gICAgcjogMC4yNVxuICB9KSk7XG59XG5cbmV4cG9ydCB7IEVtb2ppSWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1vamkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Emoji.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/EmojiAdd.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/EmojiAdd.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiAddIcon: () => (/* binding */ EmojiAddIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction EmojiAddIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M11 3.07A7 7 0 1 0 16.93 9\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M7.5 11.5S8.25 13 10 13s2.5-1.5 2.5-1.5M8 8h0\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M12 8h0\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M13 5h4m-2-2v4\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: \"8\",\n    cy: \"8\",\n    r: \".25\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"8\",\n    r: \".25\"\n  }));\n}\n\n\n//# sourceMappingURL=EmojiAdd.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9FbW9qaUFkZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBQ29COztBQUV2RDtBQUNBLHlCQUF5QixnREFBNEIsQ0FBQywrREFBSTtBQUMxRDtBQUNBLEdBQUcsa0JBQWtCLGdEQUE0QjtBQUNqRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBLEdBQUcsbUJBQW1CLGdEQUE0QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxHQUFHLG1CQUFtQixnREFBNEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUV3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2ljb25zL0Vtb2ppQWRkLm1qcz80MjJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIEVtb2ppQWRkSWNvbihwcm9wcykge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIC4uLnByb3BzXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTEgMy4wN0E3IDcgMCAxIDAgMTYuOTMgOVwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTcuNSAxMS41UzguMjUgMTMgMTAgMTNzMi41LTEuNSAyLjUtMS41TTggOGgwXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTIgOGgwXCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMTMgNWg0bS0yLTJ2NFwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IFwiOFwiLFxuICAgIGN5OiBcIjhcIixcbiAgICByOiBcIi4yNVwiXG4gIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY3g6IFwiMTJcIixcbiAgICBjeTogXCI4XCIsXG4gICAgcjogXCIuMjVcIlxuICB9KSk7XG59XG5cbmV4cG9ydCB7IEVtb2ppQWRkSWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW1vamlBZGQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/EmojiAdd.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Mention.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Mention.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MentionIcon: () => (/* binding */ MentionIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction MentionIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M10 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M13 7v3.7c0 1.105.855 2.1 1.9 2.1a2.12 2.12 0 0 0 2.1-2.1V10a7 7 0 1 0-2.8 5.6\"\n  }));\n}\n\n\n//# sourceMappingURL=Mention.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9NZW50aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7O0FBRXZEO0FBQ0EseUJBQXlCLGdEQUE0QixDQUFDLCtEQUFJO0FBQzFEO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0EsR0FBRyxtQkFBbUIsZ0RBQTRCO0FBQ2xEO0FBQ0EsR0FBRztBQUNIOztBQUV1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2ljb25zL01lbnRpb24ubWpzP2U2MWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzJztcblxuZnVuY3Rpb24gTWVudGlvbkljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTEwIDEzYTMgMyAwIDEgMCAwLTYgMyAzIDAgMCAwIDAgNlpcIlxuICB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0xMyA3djMuN2MwIDEuMTA1Ljg1NSAyLjEgMS45IDIuMWEyLjEyIDIuMTIgMCAwIDAgMi4xLTIuMVYxMGE3IDcgMCAxIDAtMi44IDUuNlwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgTWVudGlvbkljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lbnRpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Mention.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Missing.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Missing.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MissingIcon: () => (/* binding */ MissingIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction MissingIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"m3.794 13.526 5.326-9.89a1 1 0 0 1 1.76 0l5.326 9.89a1 1 0 0 1-.88 1.474H4.674a1 1 0 0 1-.88-1.474ZM10 7.5v2m0 2.5h.007\"\n  }), /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n    cx: 10,\n    cy: 12,\n    r: 0.25\n  }));\n}\n\n\n//# sourceMappingURL=Missing.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9NaXNzaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7O0FBRXZEO0FBQ0EseUJBQXlCLGdEQUE0QixDQUFDLCtEQUFJO0FBQzFEO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0EsR0FBRyxtQkFBbUIsZ0RBQTRCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9NaXNzaW5nLm1qcz82ZWU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIE1pc3NpbmdJY29uKHByb3BzKSB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChJY29uLCB7XG4gICAgLi4ucHJvcHNcbiAgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIm0zLjc5NCAxMy41MjYgNS4zMjYtOS44OWExIDEgMCAwIDEgMS43NiAwbDUuMzI2IDkuODlhMSAxIDAgMCAxLS44OCAxLjQ3NEg0LjY3NGExIDEgMCAwIDEtLjg4LTEuNDc0Wk0xMCA3LjV2Mm0wIDIuNWguMDA3XCJcbiAgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBjeDogMTAsXG4gICAgY3k6IDEyLFxuICAgIHI6IDAuMjVcbiAgfSkpO1xufVxuXG5leHBvcnQgeyBNaXNzaW5nSWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWlzc2luZy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Missing.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Search.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Search.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchIcon: () => (/* binding */ SearchIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction SearchIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M9 15A6 6 0 1 0 9 3a6 6 0 0 0 0 12Zm7.5 1.5-3.25-3.25\"\n  }));\n}\n\n\n//# sourceMappingURL=Search.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9TZWFyY2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNvQjs7QUFFdkQ7QUFDQSx5QkFBeUIsZ0RBQTRCLENBQUMsK0RBQUk7QUFDMUQ7QUFDQSxHQUFHLGtCQUFrQixnREFBNEI7QUFDakQ7QUFDQSxHQUFHO0FBQ0g7O0FBRXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvaWNvbnMvU2VhcmNoLm1qcz80Y2RkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbnRlcm5hbC9JY29uLm1qcyc7XG5cbmZ1bmN0aW9uIFNlYXJjaEljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTkgMTVBNiA2IDAgMSAwIDkgM2E2IDYgMCAwIDAgMCAxMlptNy41IDEuNS0zLjI1LTMuMjVcIlxuICB9KSk7XG59XG5cbmV4cG9ydCB7IFNlYXJjaEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlYXJjaC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Search.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Send.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Send.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SendIcon: () => (/* binding */ SendIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction SendIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"m5 16 12-6L5 4l2 6-2 6ZM7 10h10\"\n  }));\n}\n\n\n//# sourceMappingURL=Send.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9TZW5kLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDb0I7O0FBRXZEO0FBQ0EseUJBQXlCLGdEQUE0QixDQUFDLCtEQUFJO0FBQzFEO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0EsR0FBRztBQUNIOztBQUVvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L2ljb25zL1NlbmQubWpzPzU1MTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzJztcblxuZnVuY3Rpb24gU2VuZEljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwibTUgMTYgMTItNkw1IDRsMiA2LTIgNlpNNyAxMGgxMFwiXG4gIH0pKTtcbn1cblxuZXhwb3J0IHsgU2VuZEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlbmQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Send.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Spinner.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/icons/Spinner.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpinnerIcon: () => (/* binding */ SpinnerIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/internal/Icon.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Icon.mjs\");\n\n\n\nfunction SpinnerIcon(props) {\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n    ...props\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M3 10a7 7 0 0 1 7-7\"\n  }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"animateTransform\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    attributeName: \"transform\",\n    type: \"rotate\",\n    dur: \"0.75s\",\n    values: `0 ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_WIDTH / 2} ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_HEIGHT / 2};360 ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_WIDTH / 2} ${_components_internal_Icon_mjs__WEBPACK_IMPORTED_MODULE_1__.ICON_HEIGHT / 2}`,\n    repeatCount: \"indefinite\"\n  })));\n}\n\n\n//# sourceMappingURL=Spinner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9pY29ucy9TcGlubmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDNkM7O0FBRWhGO0FBQ0EseUJBQXlCLGdEQUE0QixDQUFDLCtEQUFJO0FBQzFEO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0EsR0FBRyxrQkFBa0IsZ0RBQTRCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHFFQUFVLE1BQU0sRUFBRSxzRUFBVyxNQUFNLE1BQU0scUVBQVUsTUFBTSxFQUFFLHNFQUFXLEtBQUs7QUFDNUY7QUFDQSxHQUFHO0FBQ0g7O0FBRXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvaWNvbnMvU3Bpbm5lci5tanM/ODJkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiwgSUNPTl9XSURUSCwgSUNPTl9IRUlHSFQgfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVybmFsL0ljb24ubWpzJztcblxuZnVuY3Rpb24gU3Bpbm5lckljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAuLi5wcm9wc1xuICB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTMgMTBhNyA3IDAgMCAxIDctN1wiXG4gIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVRyYW5zZm9ybVwiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBhdHRyaWJ1dGVOYW1lOiBcInRyYW5zZm9ybVwiLFxuICAgIHR5cGU6IFwicm90YXRlXCIsXG4gICAgZHVyOiBcIjAuNzVzXCIsXG4gICAgdmFsdWVzOiBgMCAke0lDT05fV0lEVEggLyAyfSAke0lDT05fSEVJR0hUIC8gMn07MzYwICR7SUNPTl9XSURUSCAvIDJ9ICR7SUNPTl9IRUlHSFQgLyAyfWAsXG4gICAgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiXG4gIH0pKSk7XG59XG5cbmV4cG9ydCB7IFNwaW5uZXJJY29uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGlubmVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/icons/Spinner.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/overrides.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OverridesContext: () => (/* binding */ OverridesContext),\n/* harmony export */   OverridesProvider: () => (/* binding */ OverridesProvider),\n/* harmony export */   defaultOverrides: () => (/* binding */ defaultOverrides),\n/* harmony export */   useOverrides: () => (/* binding */ useOverrides)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/components/internal/Emoji.mjs\");\n/* harmony import */ var _utils_pluralize_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/pluralize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/pluralize.mjs\");\n/* __next_internal_client_entry_do_not_use__ OverridesContext,OverridesProvider,defaultOverrides,useOverrides auto */ \n\n\n\nconst defaultOverrides = {\n    locale: \"en\",\n    dir: \"ltr\",\n    USER_SELF: \"you\",\n    USER_UNKNOWN: \"Anonymous\",\n    LIST_REMAINING: (count)=>`${count} more`,\n    LIST_REMAINING_USERS: (count)=>`${count} ${(0,_utils_pluralize_mjs__WEBPACK_IMPORTED_MODULE_1__.pluralize)(count, \"other\")}`,\n    LIST_REMAINING_COMMENTS: (count)=>`${count} more ${(0,_utils_pluralize_mjs__WEBPACK_IMPORTED_MODULE_1__.pluralize)(count, \"comment\")}`,\n    EMOJI_PICKER_SEARCH_PLACEHOLDER: \"Search…\",\n    EMOJI_PICKER_EMPTY: \"No emoji found.\",\n    EMOJI_PICKER_ERROR: ()=>\"There was an error while getting the list of emoji.\",\n    COMPOSER_INSERT_MENTION: \"Mention someone\",\n    COMPOSER_INSERT_EMOJI: \"Add emoji\",\n    COMPOSER_PLACEHOLDER: \"Write a comment…\",\n    COMPOSER_SEND: \"Send\",\n    COMMENT_EDITED: \"(edited)\",\n    COMMENT_DELETED: \"This comment has been deleted.\",\n    COMMENT_MORE: \"More\",\n    COMMENT_EDIT: \"Edit comment\",\n    COMMENT_EDIT_COMPOSER_PLACEHOLDER: \"Edit comment…\",\n    COMMENT_EDIT_COMPOSER_CANCEL: \"Cancel\",\n    COMMENT_EDIT_COMPOSER_SAVE: \"Save\",\n    COMMENT_DELETE: \"Delete comment\",\n    COMMENT_ADD_REACTION: \"Add reaction\",\n    COMMENT_REACTION_LIST: (list, emoji)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, list, \" reacted with \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_2__.Emoji, {\n            emoji\n        })),\n    COMMENT_REACTION_DESCRIPTION: (emoji, count)=>`${count} ${(0,_utils_pluralize_mjs__WEBPACK_IMPORTED_MODULE_1__.pluralize)(count, \"reaction\")}, react with ${emoji}`,\n    THREAD_RESOLVE: \"Resolve thread\",\n    THREAD_UNRESOLVE: \"Re-open thread\",\n    THREAD_NEW_INDICATOR: \"New\",\n    THREAD_NEW_INDICATOR_DESCRIPTION: \"New comments\",\n    THREAD_COMPOSER_PLACEHOLDER: \"Reply to thread…\",\n    THREAD_COMPOSER_SEND: \"Reply\",\n    INBOX_NOTIFICATION_MORE: \"More\",\n    INBOX_NOTIFICATION_MARK_AS_READ: \"Mark as read\",\n    INBOX_NOTIFICATION_DELETE: \"Delete notification\",\n    INBOX_NOTIFICATION_THREAD_COMMENTS_LIST: (list, room)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, list, \" commented\", room ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \" in \", room) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \" in a thread\")),\n    INBOX_NOTIFICATION_THREAD_MENTION: (user, room)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, user, \" mentioned you\", room ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \" in \", room) : null),\n    INBOX_NOTIFICATION_TEXT_MENTION: (user, room)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, user, \" mentioned you\", room ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \" in \", room) : null)\n};\nconst OverridesContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useOverrides(overrides) {\n    const contextOverrides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(OverridesContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultOverrides,\n            ...contextOverrides,\n            ...overrides\n        }), [\n        contextOverrides,\n        overrides\n    ]);\n}\nfunction OverridesProvider({ children, overrides: providerOverrides }) {\n    const contextOverrides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(OverridesContext);\n    const overrides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultOverrides,\n            ...contextOverrides,\n            ...providerOverrides\n        }), [\n        contextOverrides,\n        providerOverrides\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(OverridesContext.Provider, {\n        value: overrides\n    }, children);\n}\n //# sourceMappingURL=overrides.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/overrides.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/Comment/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Body: () => (/* binding */ CommentBody),\n/* harmony export */   Link: () => (/* binding */ CommentLink),\n/* harmony export */   Mention: () => (/* binding */ CommentMention)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/utils.mjs\");\n\n\n\n\n\nconst COMMENT_MENTION_NAME = \"CommentMention\";\nconst COMMENT_BODY_NAME = \"CommentBody\";\nconst COMMENT_LINK_NAME = \"CommentLink\";\nconst CommentMention = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  ({ children, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"span\";\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n      ...props,\n      ref: forwardedRef\n    }, children);\n  }\n);\nconst CommentLink = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  ({ children, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"a\";\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n      target: \"_blank\",\n      rel: \"noopener noreferrer nofollow\",\n      ...props,\n      ref: forwardedRef\n    }, children);\n  }\n);\nconst defaultBodyComponents = {\n  Mention: ({ userId }) => {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentMention, null, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_2__.MENTION_CHARACTER, userId);\n  },\n  Link: ({ href, children }) => {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentLink, {\n      href\n    }, children);\n  }\n};\nconst CommentBody = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  ({ body, components, style, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"div\";\n    const { Mention, Link } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n      () => ({ ...defaultBodyComponents, ...components }),\n      [components]\n    );\n    if (!body || !body?.content) {\n      return null;\n    }\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n      ...props,\n      style: { whiteSpace: \"break-spaces\", ...style },\n      ref: forwardedRef\n    }, body.content.map((block, index) => {\n      switch (block.type) {\n        case \"paragraph\":\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n            key: index,\n            style: { minHeight: \"1lh\" }\n          }, block.children.map((inline, index2) => {\n            if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.isCommentBodyMention)(inline)) {\n              return inline.id ? /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mention, {\n                userId: inline.id,\n                key: index2\n              }) : null;\n            }\n            if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.isCommentBodyLink)(inline)) {\n              const href = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.toAbsoluteUrl)(inline.url) ?? inline.url;\n              return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Link, {\n                href,\n                key: index2\n              }, inline.text ?? inline.url);\n            }\n            let children = inline.text;\n            if (inline.bold) {\n              children = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", {\n                key: index2\n              }, children);\n            }\n            if (inline.italic) {\n              children = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"em\", {\n                key: index2\n              }, children);\n            }\n            if (inline.strikethrough) {\n              children = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"s\", {\n                key: index2\n              }, children);\n            }\n            if (inline.code) {\n              children = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n                key: index2\n              }, children);\n            }\n            return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n              key: index2\n            }, children);\n          }));\n        default:\n          return null;\n      }\n    }));\n  }\n);\nif (true) {\n  CommentBody.displayName = COMMENT_BODY_NAME;\n  CommentMention.displayName = COMMENT_MENTION_NAME;\n  CommentLink.displayName = COMMENT_LINK_NAME;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL0NvbW1lbnQvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNEM7QUFDZ0I7QUFDUztBQUNnQjs7QUFFckY7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlEQUFVO0FBQ2pDLEtBQUssNkJBQTZCO0FBQ2xDLGdDQUFnQyxzREFBSTtBQUNwQywyQkFBMkIsZ0RBQTRCO0FBQ3ZEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG9CQUFvQixpREFBVTtBQUM5QixLQUFLLDZCQUE2QjtBQUNsQyxnQ0FBZ0Msc0RBQUk7QUFDcEMsMkJBQTJCLGdEQUE0QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsMkJBQTJCLGdEQUE0Qix1QkFBdUIsMEVBQWlCO0FBQy9GLEdBQUc7QUFDSCxXQUFXLGdCQUFnQjtBQUMzQiwyQkFBMkIsZ0RBQTRCO0FBQ3ZEO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxvQkFBb0IsaURBQVU7QUFDOUIsS0FBSyw0Q0FBNEM7QUFDakQsZ0NBQWdDLHNEQUFJO0FBQ3BDLFlBQVksZ0JBQWdCLEVBQUUsOENBQU87QUFDckMsZUFBZSx5Q0FBeUM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixnREFBNEI7QUFDdkQ7QUFDQSxlQUFlLHNDQUFzQztBQUNyRDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUNBQWlDLGdEQUE0QjtBQUM3RDtBQUNBLHFCQUFxQjtBQUNyQixXQUFXO0FBQ1gsZ0JBQWdCLGdFQUFvQjtBQUNwQyxpREFBaUQsZ0RBQTRCO0FBQzdFO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxnQkFBZ0IsNkRBQWlCO0FBQ2pDLDJCQUEyQix5REFBYTtBQUN4QyxxQ0FBcUMsZ0RBQTRCO0FBQ2pFO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGdEQUE0QjtBQUNyRTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EseUNBQXlDLGdEQUE0QjtBQUNyRTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EseUNBQXlDLGdEQUE0QjtBQUNyRTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EseUNBQXlDLGdEQUE0QjtBQUNyRTtBQUNBLGVBQWU7QUFDZjtBQUNBLG1DQUFtQyxnREFBNEI7QUFDL0Q7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSSxJQUFxQztBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFK0U7QUFDL0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL0NvbW1lbnQvaW5kZXgubWpzPzZjNzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2xvdCB9IGZyb20gJ0ByYWRpeC11aS9yZWFjdC1zbG90JztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCwgeyBmb3J3YXJkUmVmLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTUVOVElPTl9DSEFSQUNURVIgfSBmcm9tICcuLi8uLi9zbGF0ZS9wbHVnaW5zL21lbnRpb25zLm1qcyc7XG5pbXBvcnQgeyBpc0NvbW1lbnRCb2R5TWVudGlvbiwgaXNDb21tZW50Qm9keUxpbmssIHRvQWJzb2x1dGVVcmwgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IENPTU1FTlRfTUVOVElPTl9OQU1FID0gXCJDb21tZW50TWVudGlvblwiO1xuY29uc3QgQ09NTUVOVF9CT0RZX05BTUUgPSBcIkNvbW1lbnRCb2R5XCI7XG5jb25zdCBDT01NRU5UX0xJTktfTkFNRSA9IFwiQ29tbWVudExpbmtcIjtcbmNvbnN0IENvbW1lbnRNZW50aW9uID0gZm9yd2FyZFJlZihcbiAgKHsgY2hpbGRyZW4sIGFzQ2hpbGQsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGFzQ2hpbGQgPyBTbG90IDogXCJzcGFuXCI7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgIH0sIGNoaWxkcmVuKTtcbiAgfVxuKTtcbmNvbnN0IENvbW1lbnRMaW5rID0gZm9yd2FyZFJlZihcbiAgKHsgY2hpbGRyZW4sIGFzQ2hpbGQsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGFzQ2hpbGQgPyBTbG90IDogXCJhXCI7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgcmVsOiBcIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIixcbiAgICAgIC4uLnByb3BzLFxuICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICB9LCBjaGlsZHJlbik7XG4gIH1cbik7XG5jb25zdCBkZWZhdWx0Qm9keUNvbXBvbmVudHMgPSB7XG4gIE1lbnRpb246ICh7IHVzZXJJZCB9KSA9PiB7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbW1lbnRNZW50aW9uLCBudWxsLCBNRU5USU9OX0NIQVJBQ1RFUiwgdXNlcklkKTtcbiAgfSxcbiAgTGluazogKHsgaHJlZiwgY2hpbGRyZW4gfSkgPT4ge1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChDb21tZW50TGluaywge1xuICAgICAgaHJlZlxuICAgIH0sIGNoaWxkcmVuKTtcbiAgfVxufTtcbmNvbnN0IENvbW1lbnRCb2R5ID0gZm9yd2FyZFJlZihcbiAgKHsgYm9keSwgY29tcG9uZW50cywgc3R5bGUsIGFzQ2hpbGQsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGFzQ2hpbGQgPyBTbG90IDogXCJkaXZcIjtcbiAgICBjb25zdCB7IE1lbnRpb24sIExpbmsgfSA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiAoeyAuLi5kZWZhdWx0Qm9keUNvbXBvbmVudHMsIC4uLmNvbXBvbmVudHMgfSksXG4gICAgICBbY29tcG9uZW50c11cbiAgICApO1xuICAgIGlmICghYm9keSB8fCAhYm9keT8uY29udGVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgc3R5bGU6IHsgd2hpdGVTcGFjZTogXCJicmVhay1zcGFjZXNcIiwgLi4uc3R5bGUgfSxcbiAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgfSwgYm9keS5jb250ZW50Lm1hcCgoYmxvY2ssIGluZGV4KSA9PiB7XG4gICAgICBzd2l0Y2ggKGJsb2NrLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcInBhcmFncmFwaFwiOlxuICAgICAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgIHN0eWxlOiB7IG1pbkhlaWdodDogXCIxbGhcIiB9XG4gICAgICAgICAgfSwgYmxvY2suY2hpbGRyZW4ubWFwKChpbmxpbmUsIGluZGV4MikgPT4ge1xuICAgICAgICAgICAgaWYgKGlzQ29tbWVudEJvZHlNZW50aW9uKGlubGluZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlubGluZS5pZCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KE1lbnRpb24sIHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IGlubGluZS5pZCxcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4MlxuICAgICAgICAgICAgICB9KSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNDb21tZW50Qm9keUxpbmsoaW5saW5lKSkge1xuICAgICAgICAgICAgICBjb25zdCBocmVmID0gdG9BYnNvbHV0ZVVybChpbmxpbmUudXJsKSA/PyBpbmxpbmUudXJsO1xuICAgICAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGluaywge1xuICAgICAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICAgICAga2V5OiBpbmRleDJcbiAgICAgICAgICAgICAgfSwgaW5saW5lLnRleHQgPz8gaW5saW5lLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBpbmxpbmUudGV4dDtcbiAgICAgICAgICAgIGlmIChpbmxpbmUuYm9sZCkge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIsIHtcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4MlxuICAgICAgICAgICAgICB9LCBjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5saW5lLml0YWxpYykge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZW1cIiwge1xuICAgICAgICAgICAgICAgIGtleTogaW5kZXgyXG4gICAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmxpbmUuc3RyaWtldGhyb3VnaCkge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IC8qIEBfX1BVUkVfXyAqLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic1wiLCB7XG4gICAgICAgICAgICAgICAga2V5OiBpbmRleDJcbiAgICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlubGluZS5jb2RlKSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuID0gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4MlxuICAgICAgICAgICAgICB9LCBjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAga2V5OiBpbmRleDJcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG4pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBDb21tZW50Qm9keS5kaXNwbGF5TmFtZSA9IENPTU1FTlRfQk9EWV9OQU1FO1xuICBDb21tZW50TWVudGlvbi5kaXNwbGF5TmFtZSA9IENPTU1FTlRfTUVOVElPTl9OQU1FO1xuICBDb21tZW50TGluay5kaXNwbGF5TmFtZSA9IENPTU1FTlRfTElOS19OQU1FO1xufVxuXG5leHBvcnQgeyBDb21tZW50Qm9keSBhcyBCb2R5LCBDb21tZW50TGluayBhcyBMaW5rLCBDb21tZW50TWVudGlvbiBhcyBNZW50aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/utils.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/Comment/utils.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCommentBodyLink: () => (/* binding */ isCommentBodyLink),\n/* harmony export */   isCommentBodyMention: () => (/* binding */ isCommentBodyMention),\n/* harmony export */   isCommentBodyText: () => (/* binding */ isCommentBodyText),\n/* harmony export */   toAbsoluteUrl: () => (/* binding */ toAbsoluteUrl)\n/* harmony export */ });\nfunction isCommentBodyText(element) {\n  return !(\"type\" in element) && \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n  return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n  return \"type\" in element && element.type === \"link\";\n}\nfunction toAbsoluteUrl(url) {\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n    return url;\n  } else if (url.startsWith(\"www.\")) {\n    return \"https://\" + url;\n  }\n  return;\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL0NvbW1lbnQvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRXFGO0FBQ3JGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvcHJpbWl0aXZlcy9Db21tZW50L3V0aWxzLm1qcz9mMTk5Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzQ29tbWVudEJvZHlUZXh0KGVsZW1lbnQpIHtcbiAgcmV0dXJuICEoXCJ0eXBlXCIgaW4gZWxlbWVudCkgJiYgXCJ0ZXh0XCIgaW4gZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC50ZXh0ID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNDb21tZW50Qm9keU1lbnRpb24oZWxlbWVudCkge1xuICByZXR1cm4gXCJ0eXBlXCIgaW4gZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09IFwibWVudGlvblwiO1xufVxuZnVuY3Rpb24gaXNDb21tZW50Qm9keUxpbmsoZWxlbWVudCkge1xuICByZXR1cm4gXCJ0eXBlXCIgaW4gZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09IFwibGlua1wiO1xufVxuZnVuY3Rpb24gdG9BYnNvbHV0ZVVybCh1cmwpIHtcbiAgaWYgKHVybC5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCB1cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSBlbHNlIGlmICh1cmwuc3RhcnRzV2l0aChcInd3dy5cIikpIHtcbiAgICByZXR1cm4gXCJodHRwczovL1wiICsgdXJsO1xuICB9XG4gIHJldHVybjtcbn1cblxuZXhwb3J0IHsgaXNDb21tZW50Qm9keUxpbmssIGlzQ29tbWVudEJvZHlNZW50aW9uLCBpc0NvbW1lbnRCb2R5VGV4dCwgdG9BYnNvbHV0ZVVybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/contexts.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/Composer/contexts.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComposerContext: () => (/* binding */ ComposerContext),\n/* harmony export */   ComposerEditorContext: () => (/* binding */ ComposerEditorContext),\n/* harmony export */   ComposerSuggestionsContext: () => (/* binding */ ComposerSuggestionsContext),\n/* harmony export */   useComposer: () => (/* binding */ useComposer),\n/* harmony export */   useComposerEditorContext: () => (/* binding */ useComposerEditorContext),\n/* harmony export */   useComposerSuggestionsContext: () => (/* binding */ useComposerSuggestionsContext)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\nconst ComposerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst ComposerEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst ComposerSuggestionsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useComposerEditorContext() {\n  const composerEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComposerEditorContext);\n  return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(\n    composerEditorContext,\n    \"Composer.Form is missing from the React tree.\"\n  );\n}\nfunction useComposer() {\n  const composerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComposerContext);\n  return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(composerContext, \"Composer.Form is missing from the React tree.\");\n}\nfunction useComposerSuggestionsContext(source = \"useComposerSuggestionsContext\") {\n  const composerSuggestionsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ComposerSuggestionsContext);\n  return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(\n    composerSuggestionsContext,\n    `${source} can\\u2019t be used outside of Composer.Editor.`\n  );\n}\n\n\n//# sourceMappingURL=contexts.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL0NvbXBvc2VyL2NvbnRleHRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzQztBQUNZOztBQUVsRCx3QkFBd0Isb0RBQWE7QUFDckMsOEJBQThCLG9EQUFhO0FBQzNDLG1DQUFtQyxvREFBYTtBQUNoRDtBQUNBLGdDQUFnQyxpREFBVTtBQUMxQyxTQUFTLG9EQUFFO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixpREFBVTtBQUNwQyxTQUFTLG9EQUFFO0FBQ1g7QUFDQTtBQUNBLHFDQUFxQyxpREFBVTtBQUMvQyxTQUFTLG9EQUFFO0FBQ1g7QUFDQSxPQUFPLFFBQVE7QUFDZjtBQUNBOztBQUVvSjtBQUNwSiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3ByaW1pdGl2ZXMvQ29tcG9zZXIvY29udGV4dHMubWpzP2JiOGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm4gfSBmcm9tICdAbGl2ZWJsb2Nrcy9jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IENvbXBvc2VyQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCk7XG5jb25zdCBDb21wb3NlckVkaXRvckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xuY29uc3QgQ29tcG9zZXJTdWdnZXN0aW9uc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xuZnVuY3Rpb24gdXNlQ29tcG9zZXJFZGl0b3JDb250ZXh0KCkge1xuICBjb25zdCBjb21wb3NlckVkaXRvckNvbnRleHQgPSB1c2VDb250ZXh0KENvbXBvc2VyRWRpdG9yQ29udGV4dCk7XG4gIHJldHVybiBubihcbiAgICBjb21wb3NlckVkaXRvckNvbnRleHQsXG4gICAgXCJDb21wb3Nlci5Gb3JtIGlzIG1pc3NpbmcgZnJvbSB0aGUgUmVhY3QgdHJlZS5cIlxuICApO1xufVxuZnVuY3Rpb24gdXNlQ29tcG9zZXIoKSB7XG4gIGNvbnN0IGNvbXBvc2VyQ29udGV4dCA9IHVzZUNvbnRleHQoQ29tcG9zZXJDb250ZXh0KTtcbiAgcmV0dXJuIG5uKGNvbXBvc2VyQ29udGV4dCwgXCJDb21wb3Nlci5Gb3JtIGlzIG1pc3NpbmcgZnJvbSB0aGUgUmVhY3QgdHJlZS5cIik7XG59XG5mdW5jdGlvbiB1c2VDb21wb3NlclN1Z2dlc3Rpb25zQ29udGV4dChzb3VyY2UgPSBcInVzZUNvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0XCIpIHtcbiAgY29uc3QgY29tcG9zZXJTdWdnZXN0aW9uc0NvbnRleHQgPSB1c2VDb250ZXh0KENvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0KTtcbiAgcmV0dXJuIG5uKFxuICAgIGNvbXBvc2VyU3VnZ2VzdGlvbnNDb250ZXh0LFxuICAgIGAke3NvdXJjZX0gY2FuXFx1MjAxOXQgYmUgdXNlZCBvdXRzaWRlIG9mIENvbXBvc2VyLkVkaXRvci5gXG4gICk7XG59XG5cbmV4cG9ydCB7IENvbXBvc2VyQ29udGV4dCwgQ29tcG9zZXJFZGl0b3JDb250ZXh0LCBDb21wb3NlclN1Z2dlc3Rpb25zQ29udGV4dCwgdXNlQ29tcG9zZXIsIHVzZUNvbXBvc2VyRWRpdG9yQ29udGV4dCwgdXNlQ29tcG9zZXJTdWdnZXN0aW9uc0NvbnRleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHRzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/contexts.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/index.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/Composer/index.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Editor: () => (/* binding */ ComposerEditor),\n/* harmony export */   Form: () => (/* binding */ ComposerForm),\n/* harmony export */   Link: () => (/* binding */ ComposerLink),\n/* harmony export */   Mention: () => (/* binding */ ComposerMention),\n/* harmony export */   Submit: () => (/* binding */ ComposerSubmit),\n/* harmony export */   Suggestions: () => (/* binding */ ComposerSuggestions),\n/* harmony export */   SuggestionsList: () => (/* binding */ ComposerSuggestionsList),\n/* harmony export */   SuggestionsListItem: () => (/* binding */ ComposerSuggestionsListItem)\n/* harmony export */ });\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @floating-ui/react-dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_history__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate-history */ \"(ssr)/./node_modules/slate-history/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../config.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/config.mjs\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../shared.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/shared.mjs\");\n/* harmony import */ var _slate_plugins_auto_formatting_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../slate/plugins/auto-formatting.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-formatting.mjs\");\n/* harmony import */ var _slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../slate/plugins/auto-links.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-links.mjs\");\n/* harmony import */ var _slate_plugins_custom_links_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../slate/plugins/custom-links.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/custom-links.mjs\");\n/* harmony import */ var _slate_plugins_empty_clear_formatting_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../slate/plugins/empty-clear-formatting.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/empty-clear-formatting.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _slate_plugins_paste_html_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../slate/plugins/paste-html.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/paste-html.mjs\");\n/* harmony import */ var _slate_utils_get_dom_range_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../slate/utils/get-dom-range.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-dom-range.mjs\");\n/* harmony import */ var _slate_utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../slate/utils/is-empty.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty.mjs\");\n/* harmony import */ var _slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../slate/utils/marks.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/marks.mjs\");\n/* harmony import */ var _utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../utils/is-key.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-key.mjs\");\n/* harmony import */ var _utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utils/Persist.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/Persist.mjs\");\n/* harmony import */ var _utils_Portal_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utils/Portal.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/Portal.mjs\");\n/* harmony import */ var _utils_request_submit_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../utils/request-submit.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/request-submit.mjs\");\n/* harmony import */ var _utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../utils/use-id.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-id.mjs\");\n/* harmony import */ var _utils_use_index_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../utils/use-index.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-index.mjs\");\n/* harmony import */ var _utils_use_initial_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../utils/use-initial.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-initial.mjs\");\n/* harmony import */ var _utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utils/use-layout-effect.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-layout-effect.mjs\");\n/* harmony import */ var _utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../utils/use-refs.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-refs.mjs\");\n/* harmony import */ var _Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Comment/utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/utils.mjs\");\n/* harmony import */ var _contexts_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contexts.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/contexts.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/utils.mjs\");\n/* __next_internal_client_entry_do_not_use__ Editor,Form,Link,Mention,Submit,Suggestions,SuggestionsList,SuggestionsListItem auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst MENTION_SUGGESTIONS_POSITION = \"top\";\nconst COMPOSER_MENTION_NAME = \"ComposerMention\";\nconst COMPOSER_LINK_NAME = \"ComposerLink\";\nconst COMPOSER_SUGGESTIONS_NAME = \"ComposerSuggestions\";\nconst COMPOSER_SUGGESTIONS_LIST_NAME = \"ComposerSuggestionsList\";\nconst COMPOSER_SUGGESTIONS_LIST_ITEM_NAME = \"ComposerSuggestionsListItem\";\nconst COMPOSER_SUBMIT_NAME = \"ComposerSubmit\";\nconst COMPOSER_EDITOR_NAME = \"ComposerEditor\";\nconst COMPOSER_FORM_NAME = \"ComposerForm\";\nconst emptyCommentBody = {\n    version: 1,\n    content: [\n        {\n            type: \"paragraph\",\n            children: [\n                {\n                    text: \"\"\n                }\n            ]\n        }\n    ]\n};\nfunction createComposerEditor() {\n    return (0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_1__.withMentions)((0,_slate_plugins_custom_links_mjs__WEBPACK_IMPORTED_MODULE_2__.withCustomLinks)((0,_slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_3__.withAutoLinks)((0,_slate_plugins_auto_formatting_mjs__WEBPACK_IMPORTED_MODULE_4__.withAutoFormatting)((0,_slate_plugins_empty_clear_formatting_mjs__WEBPACK_IMPORTED_MODULE_5__.withEmptyClearFormatting)((0,_slate_plugins_paste_html_mjs__WEBPACK_IMPORTED_MODULE_6__.withPasteHtml)((0,slate_history__WEBPACK_IMPORTED_MODULE_7__.withHistory)((0,slate_react__WEBPACK_IMPORTED_MODULE_8__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_9__.createEditor)()))))))));\n}\nfunction ComposerEditorMentionWrapper({ Mention, attributes, children, element }) {\n    const isSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_8__.useSelected)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes\n    }, element.id ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mention, {\n        userId: element.id,\n        isSelected\n    }) : null, children);\n}\nfunction ComposerEditorLinkWrapper({ Link, attributes, element, children }) {\n    const href = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_10__.toAbsoluteUrl)(element.url) ?? element.url, [\n        element.url\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Link, {\n        href\n    }, children));\n}\nfunction ComposerEditorMentionSuggestionsWrapper({ id, itemId, userIds, selectedUserId, setSelectedUserId, mentionDraft, onItemSelect, position = MENTION_SUGGESTIONS_POSITION, dir, MentionSuggestions }) {\n    const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_8__.useSlateStatic)();\n    const { isFocused } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.useComposer)();\n    const [content, setContent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [contentZIndex, setContentZIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(setContent, [\n        setContent\n    ]);\n    const { portalContainer } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_12__.useLiveblocksUIConfig)();\n    const floatingOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const detectOverflowOptions = {\n            padding: _constants_mjs__WEBPACK_IMPORTED_MODULE_13__.FLOATING_ELEMENT_COLLISION_PADDING\n        };\n        return {\n            strategy: \"fixed\",\n            placement: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_14__.getPlacementFromPosition)(position, dir),\n            middleware: [\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_15__.flip)({\n                    ...detectOverflowOptions,\n                    crossAxis: false\n                }),\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_15__.hide)(detectOverflowOptions),\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_15__.shift)({\n                    ...detectOverflowOptions,\n                    limiter: (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_15__.limitShift)()\n                }),\n                (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_15__.size)({\n                    ...detectOverflowOptions,\n                    apply ({ availableWidth, availableHeight, elements }) {\n                        elements.floating.style.setProperty(\"--lb-composer-suggestions-available-width\", `${availableWidth}px`);\n                        elements.floating.style.setProperty(\"--lb-composer-suggestions-available-height\", `${availableHeight}px`);\n                    }\n                })\n            ],\n            whileElementsMounted: _floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_16__.autoUpdate\n        };\n    }, [\n        position,\n        dir\n    ]);\n    const { refs: { setReference, setFloating }, strategy, isPositioned, placement, x, y } = (0,_floating_ui_react_dom__WEBPACK_IMPORTED_MODULE_15__.useFloating)(floatingOptions);\n    (0,_utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_17__.useLayoutEffect)(()=>{\n        if (content) {\n            setContentZIndex(window.getComputedStyle(content).zIndex);\n        }\n    }, [\n        content\n    ]);\n    (0,_utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_17__.useLayoutEffect)(()=>{\n        if (!mentionDraft) {\n            return;\n        }\n        const domRange = (0,_slate_utils_get_dom_range_mjs__WEBPACK_IMPORTED_MODULE_18__.getDOMRange)(editor, mentionDraft.range);\n        if (domRange) {\n            setReference({\n                getBoundingClientRect: ()=>domRange.getBoundingClientRect(),\n                getClientRects: ()=>domRange.getClientRects()\n            });\n        }\n    }, [\n        setReference,\n        editor,\n        mentionDraft\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_19__.Persist, null, mentionDraft?.range && isFocused && userIds ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.ComposerSuggestionsContext.Provider, {\n        value: {\n            id,\n            itemId,\n            selectedValue: selectedUserId,\n            setSelectedValue: setSelectedUserId,\n            onItemSelect,\n            placement,\n            dir,\n            ref: contentRef\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils_Portal_mjs__WEBPACK_IMPORTED_MODULE_20__.Portal, {\n        ref: setFloating,\n        container: portalContainer,\n        style: {\n            position: strategy,\n            top: 0,\n            left: 0,\n            transform: isPositioned ? `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)` : \"translate3d(0, -200%, 0)\",\n            minWidth: \"max-content\",\n            zIndex: contentZIndex\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MentionSuggestions, {\n        userIds,\n        selectedUserId\n    }))) : null);\n}\nfunction ComposerEditorElement({ Mention, Link, ...props }) {\n    const { attributes, children, element } = props;\n    switch(element.type){\n        case \"mention\":\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorMentionWrapper, {\n                Mention,\n                ...props\n            });\n        case \"auto-link\":\n        case \"custom-link\":\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorLinkWrapper, {\n                Link,\n                ...props\n            });\n        case \"paragraph\":\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n                ...attributes,\n                style: {\n                    position: \"relative\"\n                }\n            }, children);\n        default:\n            return null;\n    }\n}\nfunction ComposerEditorLeaf({ attributes, children, leaf }) {\n    if (leaf.bold) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, children);\n    }\n    if (leaf.italic) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"em\", null, children);\n    }\n    if (leaf.strikethrough) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"s\", null, children);\n    }\n    if (leaf.code) {\n        children = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, children);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes\n    }, children);\n}\nfunction ComposerEditorPlaceholder({ attributes, children }) {\n    const { opacity: _opacity, ...style } = attributes.style;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        ...attributes,\n        style,\n        \"data-placeholder\": \"\"\n    }, children);\n}\nconst ComposerMention = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__.Slot : \"span\";\n    const isSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_8__.useSelected)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        \"data-selected\": isSelected || void 0,\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst ComposerLink = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__.Slot : \"a\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        target: \"_blank\",\n        rel: \"noopener noreferrer nofollow\",\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst ComposerSuggestions = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, style, asChild, ...props }, forwardedRef)=>{\n    const [isPresent] = (0,_utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_19__.usePersist)();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { ref: contentRef, placement, dir } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.useComposerSuggestionsContext)(COMPOSER_SUGGESTIONS_NAME);\n    const mergedRefs = (0,_utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_22__.useRefs)(forwardedRef, contentRef, ref);\n    const [side, align] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_14__.getSideAndAlignFromPlacement)(placement), [\n        placement\n    ]);\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__.Slot : \"div\";\n    (0,_utils_Persist_mjs__WEBPACK_IMPORTED_MODULE_19__.useAnimationPersist)(ref);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        dir,\n        ...props,\n        \"data-state\": isPresent ? \"open\" : \"closed\",\n        \"data-side\": side,\n        \"data-align\": align,\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            maxHeight: \"var(--lb-composer-suggestions-available-height)\",\n            overflowY: \"auto\",\n            ...style\n        },\n        ref: mergedRefs\n    }, children);\n});\nconst ComposerSuggestionsList = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, asChild, ...props }, forwardedRef)=>{\n    const { id } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.useComposerSuggestionsContext)(COMPOSER_SUGGESTIONS_LIST_NAME);\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__.Slot : \"ul\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        role: \"listbox\",\n        id,\n        \"aria-label\": \"Suggestions list\",\n        ...props,\n        ref: forwardedRef\n    }, children);\n});\nconst ComposerSuggestionsListItem = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ value, children, onPointerMove, onPointerDown, asChild, ...props }, forwardedRef)=>{\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const mergedRefs = (0,_utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_22__.useRefs)(forwardedRef, ref);\n    const { selectedValue, setSelectedValue, itemId, onItemSelect } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.useComposerSuggestionsContext)(COMPOSER_SUGGESTIONS_LIST_ITEM_NAME);\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__.Slot : \"li\";\n    const isSelected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>selectedValue === value, [\n        selectedValue,\n        value\n    ]);\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>itemId(value), [\n        itemId,\n        value\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (ref?.current && isSelected) {\n            ref.current.scrollIntoView({\n                block: \"nearest\"\n            });\n        }\n    }, [\n        isSelected\n    ]);\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onPointerMove?.(event);\n        if (!event.isDefaultPrevented()) {\n            setSelectedValue(value);\n        }\n    }, [\n        onPointerMove,\n        setSelectedValue,\n        value\n    ]);\n    const handlePointerDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onPointerDown?.(event);\n        if (!event.isDefaultPrevented()) {\n            const target = event.target;\n            if (target.hasPointerCapture(event.pointerId)) {\n                target.releasePointerCapture(event.pointerId);\n            }\n            if (event.button === 0 && event.ctrlKey === false) {\n                onItemSelect(value);\n                event.preventDefault();\n            }\n        }\n    }, [\n        onItemSelect,\n        onPointerDown,\n        value\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        role: \"option\",\n        id,\n        \"data-selected\": isSelected || void 0,\n        \"aria-selected\": isSelected || void 0,\n        onPointerMove: handlePointerMove,\n        onPointerDown: handlePointerDown,\n        ...props,\n        ref: mergedRefs\n    }, children);\n});\nconst defaultEditorComponents = {\n    Link: ({ href, children })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerLink, {\n            href\n        }, children);\n    },\n    Mention: ({ userId })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerMention, null, _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_1__.MENTION_CHARACTER, userId);\n    },\n    MentionSuggestions: ({ userIds })=>{\n        return userIds.length > 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerSuggestions, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerSuggestionsList, null, userIds.map((userId)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerSuggestionsListItem, {\n                key: userId,\n                value: userId\n            }, userId)))) : null;\n    }\n};\nconst ComposerEditor = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ defaultValue, onKeyDown, onFocus, onBlur, disabled, autoFocus, components, dir, ...props }, forwardedRef)=>{\n    const self = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_23__._useSelf)();\n    const isDisabled = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>disabled || !self?.canComment, [\n        disabled,\n        self?.canComment\n    ]);\n    const { editor, validate, setFocused } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.useComposerEditorContext)();\n    const { submit, focus, select, isEmpty, isFocused } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.useComposer)();\n    const initialBody = (0,_utils_use_initial_mjs__WEBPACK_IMPORTED_MODULE_24__.useInitial)(defaultValue ?? emptyCommentBody);\n    const initialEditorValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_14__.commentBodyToComposerBody)(initialBody);\n    }, [\n        initialBody\n    ]);\n    const { Link, Mention, MentionSuggestions } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultEditorComponents,\n            ...components\n        }), [\n        components\n    ]);\n    const [mentionDraft, setMentionDraft] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const mentionSuggestions = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_25__.useMentionSuggestions)(mentionDraft?.text);\n    const [selectedMentionSuggestionIndex, setPreviousSelectedMentionSuggestionIndex, setNextSelectedMentionSuggestionIndex, setSelectedMentionSuggestionIndex] = (0,_utils_use_index_mjs__WEBPACK_IMPORTED_MODULE_26__.useIndex)(0, mentionSuggestions?.length ?? 0);\n    const id = (0,_utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_27__.useId)();\n    const suggestionsListId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>`liveblocks-suggestions-list-${id}`, [\n        id\n    ]);\n    const suggestionsListItemId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((userId)=>userId ? `liveblocks-suggestions-list-item-${id}-${userId}` : void 0, [\n        id\n    ]);\n    const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((props2)=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorElement, {\n            Mention,\n            Link,\n            ...props2\n        });\n    }, [\n        Link,\n        Mention\n    ]);\n    const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        validate(value);\n        setMentionDraft((0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_1__.getMentionDraftAtSelection)(editor));\n    }, [\n        editor,\n        validate\n    ]);\n    const createMention = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((userId)=>{\n        if (!mentionDraft || !userId) {\n            return;\n        }\n        slate__WEBPACK_IMPORTED_MODULE_9__.Transforms.select(editor, mentionDraft.range);\n        (0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_1__.insertMention)(editor, userId);\n        setMentionDraft(void 0);\n        setSelectedMentionSuggestionIndex(0);\n    }, [\n        editor,\n        mentionDraft,\n        setSelectedMentionSuggestionIndex\n    ]);\n    const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onKeyDown?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"ArrowLeft\")) {\n            (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_29__.leaveMarkEdge)(editor, \"start\");\n        }\n        if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"ArrowRight\")) {\n            (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_29__.leaveMarkEdge)(editor, \"end\");\n        }\n        if (mentionDraft && mentionSuggestions?.length) {\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"ArrowDown\")) {\n                event.preventDefault();\n                setNextSelectedMentionSuggestionIndex();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"ArrowUp\")) {\n                event.preventDefault();\n                setPreviousSelectedMentionSuggestionIndex();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"Enter\") || (0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"Tab\")) {\n                event.preventDefault();\n                const userId = mentionSuggestions?.[selectedMentionSuggestionIndex];\n                createMention(userId);\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"Escape\")) {\n                event.preventDefault();\n                setMentionDraft(void 0);\n                setSelectedMentionSuggestionIndex(0);\n            }\n        } else {\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"Escape\")) {\n                event.preventDefault();\n                slate_react__WEBPACK_IMPORTED_MODULE_8__.ReactEditor.blur(editor);\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"Enter\", {\n                shift: false\n            }) && !isEmpty) {\n                event.preventDefault();\n                submit();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"Enter\", {\n                shift: true\n            })) {\n                event.preventDefault();\n                editor.insertBreak();\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"b\", {\n                mod: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_29__.toggleMark)(editor, \"bold\");\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"i\", {\n                mod: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_29__.toggleMark)(editor, \"italic\");\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"s\", {\n                mod: true,\n                shift: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_29__.toggleMark)(editor, \"strikethrough\");\n            }\n            if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_28__.isKey)(event, \"e\", {\n                mod: true\n            })) {\n                event.preventDefault();\n                (0,_slate_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_29__.toggleMark)(editor, \"code\");\n            }\n        }\n    }, [\n        createMention,\n        editor,\n        isEmpty,\n        mentionDraft,\n        mentionSuggestions,\n        selectedMentionSuggestionIndex,\n        onKeyDown,\n        setNextSelectedMentionSuggestionIndex,\n        setPreviousSelectedMentionSuggestionIndex,\n        setSelectedMentionSuggestionIndex,\n        submit\n    ]);\n    const handleFocus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onFocus?.(event);\n        if (!event.isDefaultPrevented()) {\n            setFocused(true);\n        }\n    }, [\n        onFocus,\n        setFocused\n    ]);\n    const handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onBlur?.(event);\n        if (!event.isDefaultPrevented()) {\n            setFocused(false);\n        }\n    }, [\n        onBlur,\n        setFocused\n    ]);\n    const selectedMentionSuggestionUserId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>mentionSuggestions?.[selectedMentionSuggestionIndex], [\n        selectedMentionSuggestionIndex,\n        mentionSuggestions\n    ]);\n    const setSelectedMentionSuggestionUserId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((userId)=>{\n        const index = mentionSuggestions?.indexOf(userId);\n        if (index !== void 0 && index >= 0) {\n            setSelectedMentionSuggestionIndex(index);\n        }\n    }, [\n        setSelectedMentionSuggestionIndex,\n        mentionSuggestions\n    ]);\n    const propsWhileSuggesting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>mentionDraft ? {\n            role: \"combobox\",\n            \"aria-autocomplete\": \"list\",\n            \"aria-expanded\": true,\n            \"aria-controls\": suggestionsListId,\n            \"aria-activedescendant\": suggestionsListItemId(selectedMentionSuggestionUserId)\n        } : {}, [\n        mentionDraft,\n        suggestionsListId,\n        suggestionsListItemId,\n        selectedMentionSuggestionUserId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(forwardedRef, ()=>{\n        return slate_react__WEBPACK_IMPORTED_MODULE_8__.ReactEditor.toDOMNode(editor, editor);\n    }, [\n        editor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoFocus) {\n            focus();\n        }\n    }, [\n        autoFocus,\n        editor,\n        focus\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isFocused && editor.selection === null) {\n            select();\n        }\n    }, [\n        editor,\n        select,\n        isFocused\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(slate_react__WEBPACK_IMPORTED_MODULE_8__.Slate, {\n        editor,\n        initialValue: initialEditorValue,\n        onChange: handleChange\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(slate_react__WEBPACK_IMPORTED_MODULE_8__.Editable, {\n        dir,\n        enterKeyHint: mentionDraft ? \"enter\" : \"send\",\n        autoCapitalize: \"sentences\",\n        \"aria-label\": \"Composer editor\",\n        \"data-focused\": isFocused || void 0,\n        \"data-disabled\": isDisabled || void 0,\n        ...propsWhileSuggesting,\n        ...props,\n        readOnly: isDisabled,\n        disabled: isDisabled,\n        onKeyDown: handleKeyDown,\n        onFocus: handleFocus,\n        onBlur: handleBlur,\n        renderElement,\n        renderLeaf: ComposerEditorLeaf,\n        renderPlaceholder: ComposerEditorPlaceholder\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComposerEditorMentionSuggestionsWrapper, {\n        dir,\n        mentionDraft,\n        selectedUserId: selectedMentionSuggestionUserId,\n        setSelectedUserId: setSelectedMentionSuggestionUserId,\n        userIds: mentionSuggestions,\n        id: suggestionsListId,\n        itemId: suggestionsListItemId,\n        onItemSelect: createMention,\n        MentionSuggestions\n    }));\n});\nconst ComposerForm = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, onSubmit, onComposerSubmit, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__.Slot : \"form\";\n    const editor = (0,_utils_use_initial_mjs__WEBPACK_IMPORTED_MODULE_24__.useInitial)(createComposerEditor);\n    const [isEmpty$1, setEmpty] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [isFocused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const mergedRefs = (0,_utils_use_refs_mjs__WEBPACK_IMPORTED_MODULE_22__.useRefs)(forwardedRef, ref);\n    const validate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        setEmpty((0,_slate_utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_30__.isEmpty)(editor, value));\n    }, [\n        editor\n    ]);\n    const submit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        requestAnimationFrame(()=>{\n            if (ref.current) {\n                (0,_utils_request_submit_mjs__WEBPACK_IMPORTED_MODULE_31__.requestSubmit)(ref.current);\n            }\n        });\n    }, []);\n    const clear = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        slate__WEBPACK_IMPORTED_MODULE_9__.Transforms.delete(editor, {\n            at: {\n                anchor: slate__WEBPACK_IMPORTED_MODULE_9__.Editor.start(editor, []),\n                focus: slate__WEBPACK_IMPORTED_MODULE_9__.Editor.end(editor, [])\n            }\n        });\n    }, [\n        editor\n    ]);\n    const select = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        slate__WEBPACK_IMPORTED_MODULE_9__.Transforms.select(editor, {\n            anchor: slate__WEBPACK_IMPORTED_MODULE_9__.Editor.end(editor, []),\n            focus: slate__WEBPACK_IMPORTED_MODULE_9__.Editor.end(editor, [])\n        });\n    }, [\n        editor\n    ]);\n    const focus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((resetSelection = true)=>{\n        if (!slate_react__WEBPACK_IMPORTED_MODULE_8__.ReactEditor.isFocused(editor)) {\n            slate__WEBPACK_IMPORTED_MODULE_9__.Transforms.select(editor, resetSelection || !editor.selection ? slate__WEBPACK_IMPORTED_MODULE_9__.Editor.end(editor, []) : editor.selection);\n            slate_react__WEBPACK_IMPORTED_MODULE_8__.ReactEditor.focus(editor);\n        }\n    }, [\n        editor\n    ]);\n    const blur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        slate_react__WEBPACK_IMPORTED_MODULE_8__.ReactEditor.blur(editor);\n    }, [\n        editor\n    ]);\n    const onSubmitEnd = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        clear();\n        blur();\n    }, [\n        blur,\n        clear\n    ]);\n    const createMention = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        focus();\n        (0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_1__.insertMentionCharacter)(editor);\n    }, [\n        editor,\n        focus\n    ]);\n    const insertText$1 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((text)=>{\n        focus(false);\n        (0,slate__WEBPACK_IMPORTED_MODULE_9__.insertText)(editor, text);\n    }, [\n        editor,\n        focus\n    ]);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        const isEmpty2 = (0,_slate_utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_30__.isEmpty)(editor, editor.children);\n        if (isEmpty2) {\n            event.preventDefault();\n            return;\n        }\n        onSubmit?.(event);\n        if (!onComposerSubmit || event.isDefaultPrevented()) {\n            event.preventDefault();\n            return;\n        }\n        const body = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_14__.composerBodyToCommentBody)(editor.children);\n        const comment = {\n            body\n        };\n        const promise = onComposerSubmit(comment, event);\n        event.preventDefault();\n        if (promise) {\n            promise.then(onSubmitEnd);\n        } else {\n            onSubmitEnd();\n        }\n    }, [\n        editor,\n        onComposerSubmit,\n        onSubmit,\n        onSubmitEnd\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.ComposerEditorContext.Provider, {\n        value: {\n            editor,\n            validate,\n            setFocused\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.ComposerContext.Provider, {\n        value: {\n            isFocused,\n            isEmpty: isEmpty$1,\n            submit,\n            clear,\n            select,\n            focus,\n            blur,\n            createMention,\n            insertText: insertText$1\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        onSubmit: handleSubmit,\n        ref: mergedRefs\n    }, children)));\n});\nconst ComposerSubmit = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, disabled, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_21__.Slot : \"button\";\n    const { isEmpty } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_11__.useComposer)();\n    const self = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_23__._useSelf)();\n    const isDisabled = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>disabled || isEmpty || !self?.canComment, [\n        disabled,\n        isEmpty,\n        self?.canComment\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        type: \"submit\",\n        ...props,\n        ref: forwardedRef,\n        disabled: isDisabled\n    }, children);\n});\nif (true) {\n    ComposerEditor.displayName = COMPOSER_EDITOR_NAME;\n    ComposerForm.displayName = COMPOSER_FORM_NAME;\n    ComposerMention.displayName = COMPOSER_MENTION_NAME;\n    ComposerLink.displayName = COMPOSER_LINK_NAME;\n    ComposerSubmit.displayName = COMPOSER_SUBMIT_NAME;\n    ComposerSuggestions.displayName = COMPOSER_SUGGESTIONS_NAME;\n    ComposerSuggestionsList.displayName = COMPOSER_SUGGESTIONS_LIST_NAME;\n    ComposerSuggestionsListItem.displayName = COMPOSER_SUGGESTIONS_LIST_ITEM_NAME;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/utils.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/Composer/utils.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commentBodyLinkToComposerBodyLink: () => (/* binding */ commentBodyLinkToComposerBodyLink),\n/* harmony export */   commentBodyMentionToComposerBodyMention: () => (/* binding */ commentBodyMentionToComposerBodyMention),\n/* harmony export */   commentBodyToComposerBody: () => (/* binding */ commentBodyToComposerBody),\n/* harmony export */   composerBodyAutoLinkToCommentBodyLink: () => (/* binding */ composerBodyAutoLinkToCommentBodyLink),\n/* harmony export */   composerBodyCustomLinkToCommentBodyLink: () => (/* binding */ composerBodyCustomLinkToCommentBodyLink),\n/* harmony export */   composerBodyMentionToCommentBodyMention: () => (/* binding */ composerBodyMentionToCommentBodyMention),\n/* harmony export */   composerBodyToCommentBody: () => (/* binding */ composerBodyToCommentBody),\n/* harmony export */   getPlacementFromPosition: () => (/* binding */ getPlacementFromPosition),\n/* harmony export */   getSideAndAlignFromPlacement: () => (/* binding */ getSideAndAlignFromPlacement)\n/* harmony export */ });\n/* harmony import */ var _slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../slate/plugins/auto-links.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-links.mjs\");\n/* harmony import */ var _slate_plugins_custom_links_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../slate/plugins/custom-links.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/custom-links.mjs\");\n/* harmony import */ var _slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../slate/plugins/mentions.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs\");\n/* harmony import */ var _slate_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../slate/utils/is-text.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-text.mjs\");\n/* harmony import */ var _utils_exists_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/exists.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/exists.mjs\");\n/* harmony import */ var _Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Comment/utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Comment/utils.mjs\");\n\n\n\n\n\n\n\nfunction composerBodyMentionToCommentBodyMention(mention) {\n  return {\n    type: \"mention\",\n    id: mention.id\n  };\n}\nfunction composerBodyAutoLinkToCommentBodyLink(link) {\n  return {\n    type: \"link\",\n    url: link.url\n  };\n}\nfunction composerBodyCustomLinkToCommentBodyLink(link) {\n  return {\n    type: \"link\",\n    url: link.url,\n    text: link.children.map((child) => child.text).join(\"\")\n  };\n}\nfunction commentBodyMentionToComposerBodyMention(mention) {\n  return {\n    type: \"mention\",\n    id: mention.id,\n    children: [{ text: \"\" }]\n  };\n}\nfunction commentBodyLinkToComposerBodyLink(link) {\n  if (link.text) {\n    return {\n      type: \"custom-link\",\n      url: link.url,\n      children: [{ text: link.text }]\n    };\n  } else {\n    return {\n      type: \"auto-link\",\n      url: link.url,\n      children: [{ text: link.url }]\n    };\n  }\n}\nfunction composerBodyToCommentBody(body) {\n  return {\n    version: 1,\n    content: body.map((block) => {\n      if (block.type !== \"paragraph\") {\n        return null;\n      }\n      const children = block.children.map((inline) => {\n        if ((0,_slate_plugins_mentions_mjs__WEBPACK_IMPORTED_MODULE_0__.isComposerBodyMention)(inline)) {\n          return composerBodyMentionToCommentBodyMention(inline);\n        }\n        if ((0,_slate_plugins_auto_links_mjs__WEBPACK_IMPORTED_MODULE_1__.isComposerBodyAutoLink)(inline)) {\n          return composerBodyAutoLinkToCommentBodyLink(inline);\n        }\n        if ((0,_slate_plugins_custom_links_mjs__WEBPACK_IMPORTED_MODULE_2__.isComposerBodyCustomLink)(inline)) {\n          return composerBodyCustomLinkToCommentBodyLink(inline);\n        }\n        if ((0,_slate_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_3__.isText)(inline)) {\n          return inline;\n        }\n        return null;\n      }).filter(_utils_exists_mjs__WEBPACK_IMPORTED_MODULE_4__.exists);\n      return {\n        ...block,\n        children\n      };\n    }).filter(_utils_exists_mjs__WEBPACK_IMPORTED_MODULE_4__.exists)\n  };\n}\nconst emptyComposerBody = [];\nfunction commentBodyToComposerBody(body) {\n  if (!body || !body?.content) {\n    return emptyComposerBody;\n  }\n  return body.content.map((block) => {\n    if (block.type !== \"paragraph\") {\n      return null;\n    }\n    const children = block.children.map((inline) => {\n      if ((0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isCommentBodyMention)(inline)) {\n        return commentBodyMentionToComposerBodyMention(inline);\n      }\n      if ((0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isCommentBodyLink)(inline)) {\n        return commentBodyLinkToComposerBodyLink(inline);\n      }\n      if ((0,_Comment_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isCommentBodyText)(inline)) {\n        return inline;\n      }\n      return null;\n    }).filter(_utils_exists_mjs__WEBPACK_IMPORTED_MODULE_4__.exists);\n    return {\n      ...block,\n      children\n    };\n  }).filter(_utils_exists_mjs__WEBPACK_IMPORTED_MODULE_4__.exists);\n}\nfunction getPlacementFromPosition(position, direction = \"ltr\") {\n  return `${position}-${direction === \"rtl\" ? \"end\" : \"start\"}`;\n}\nfunction getSideAndAlignFromPlacement(placement) {\n  const [side, align = \"center\"] = placement.split(\"-\");\n  return [side, align];\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL0NvbXBvc2VyL3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEU7QUFDSTtBQUNQO0FBQ2xCO0FBQ1A7QUFDa0Q7O0FBRWxHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsVUFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrRkFBcUI7QUFDakM7QUFDQTtBQUNBLFlBQVkscUZBQXNCO0FBQ2xDO0FBQ0E7QUFDQSxZQUFZLHlGQUF3QjtBQUNwQztBQUNBO0FBQ0EsWUFBWSxnRUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVMscURBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLFNBQVMscURBQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx3RUFBb0I7QUFDOUI7QUFDQTtBQUNBLFVBQVUscUVBQWlCO0FBQzNCO0FBQ0E7QUFDQSxVQUFVLHFFQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLLFNBQVMscURBQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFNBQVMscURBQU07QUFDbEI7QUFDQTtBQUNBLFlBQVksU0FBUyxHQUFHLHNDQUFzQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2VDtBQUM3VCIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3ByaW1pdGl2ZXMvQ29tcG9zZXIvdXRpbHMubWpzP2I2OWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNDb21wb3NlckJvZHlBdXRvTGluayB9IGZyb20gJy4uLy4uL3NsYXRlL3BsdWdpbnMvYXV0by1saW5rcy5tanMnO1xuaW1wb3J0IHsgaXNDb21wb3NlckJvZHlDdXN0b21MaW5rIH0gZnJvbSAnLi4vLi4vc2xhdGUvcGx1Z2lucy9jdXN0b20tbGlua3MubWpzJztcbmltcG9ydCB7IGlzQ29tcG9zZXJCb2R5TWVudGlvbiB9IGZyb20gJy4uLy4uL3NsYXRlL3BsdWdpbnMvbWVudGlvbnMubWpzJztcbmltcG9ydCB7IGlzVGV4dCB9IGZyb20gJy4uLy4uL3NsYXRlL3V0aWxzL2lzLXRleHQubWpzJztcbmltcG9ydCB7IGV4aXN0cyB9IGZyb20gJy4uLy4uL3V0aWxzL2V4aXN0cy5tanMnO1xuaW1wb3J0IHsgaXNDb21tZW50Qm9keU1lbnRpb24sIGlzQ29tbWVudEJvZHlMaW5rLCBpc0NvbW1lbnRCb2R5VGV4dCB9IGZyb20gJy4uL0NvbW1lbnQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY29tcG9zZXJCb2R5TWVudGlvblRvQ29tbWVudEJvZHlNZW50aW9uKG1lbnRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIm1lbnRpb25cIixcbiAgICBpZDogbWVudGlvbi5pZFxuICB9O1xufVxuZnVuY3Rpb24gY29tcG9zZXJCb2R5QXV0b0xpbmtUb0NvbW1lbnRCb2R5TGluayhsaW5rKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJsaW5rXCIsXG4gICAgdXJsOiBsaW5rLnVybFxuICB9O1xufVxuZnVuY3Rpb24gY29tcG9zZXJCb2R5Q3VzdG9tTGlua1RvQ29tbWVudEJvZHlMaW5rKGxpbmspIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcImxpbmtcIixcbiAgICB1cmw6IGxpbmsudXJsLFxuICAgIHRleHQ6IGxpbmsuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gY2hpbGQudGV4dCkuam9pbihcIlwiKVxuICB9O1xufVxuZnVuY3Rpb24gY29tbWVudEJvZHlNZW50aW9uVG9Db21wb3NlckJvZHlNZW50aW9uKG1lbnRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIm1lbnRpb25cIixcbiAgICBpZDogbWVudGlvbi5pZCxcbiAgICBjaGlsZHJlbjogW3sgdGV4dDogXCJcIiB9XVxuICB9O1xufVxuZnVuY3Rpb24gY29tbWVudEJvZHlMaW5rVG9Db21wb3NlckJvZHlMaW5rKGxpbmspIHtcbiAgaWYgKGxpbmsudGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImN1c3RvbS1saW5rXCIsXG4gICAgICB1cmw6IGxpbmsudXJsLFxuICAgICAgY2hpbGRyZW46IFt7IHRleHQ6IGxpbmsudGV4dCB9XVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiYXV0by1saW5rXCIsXG4gICAgICB1cmw6IGxpbmsudXJsLFxuICAgICAgY2hpbGRyZW46IFt7IHRleHQ6IGxpbmsudXJsIH1dXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gY29tcG9zZXJCb2R5VG9Db21tZW50Qm9keShib2R5KSB7XG4gIHJldHVybiB7XG4gICAgdmVyc2lvbjogMSxcbiAgICBjb250ZW50OiBib2R5Lm1hcCgoYmxvY2spID0+IHtcbiAgICAgIGlmIChibG9jay50eXBlICE9PSBcInBhcmFncmFwaFwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoKGlubGluZSkgPT4ge1xuICAgICAgICBpZiAoaXNDb21wb3NlckJvZHlNZW50aW9uKGlubGluZSkpIHtcbiAgICAgICAgICByZXR1cm4gY29tcG9zZXJCb2R5TWVudGlvblRvQ29tbWVudEJvZHlNZW50aW9uKGlubGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ29tcG9zZXJCb2R5QXV0b0xpbmsoaW5saW5lKSkge1xuICAgICAgICAgIHJldHVybiBjb21wb3NlckJvZHlBdXRvTGlua1RvQ29tbWVudEJvZHlMaW5rKGlubGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ29tcG9zZXJCb2R5Q3VzdG9tTGluayhpbmxpbmUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2VyQm9keUN1c3RvbUxpbmtUb0NvbW1lbnRCb2R5TGluayhpbmxpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RleHQoaW5saW5lKSkge1xuICAgICAgICAgIHJldHVybiBpbmxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoZXhpc3RzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmJsb2NrLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgfTtcbiAgICB9KS5maWx0ZXIoZXhpc3RzKVxuICB9O1xufVxuY29uc3QgZW1wdHlDb21wb3NlckJvZHkgPSBbXTtcbmZ1bmN0aW9uIGNvbW1lbnRCb2R5VG9Db21wb3NlckJvZHkoYm9keSkge1xuICBpZiAoIWJvZHkgfHwgIWJvZHk/LmNvbnRlbnQpIHtcbiAgICByZXR1cm4gZW1wdHlDb21wb3NlckJvZHk7XG4gIH1cbiAgcmV0dXJuIGJvZHkuY29udGVudC5tYXAoKGJsb2NrKSA9PiB7XG4gICAgaWYgKGJsb2NrLnR5cGUgIT09IFwicGFyYWdyYXBoXCIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZHJlbiA9IGJsb2NrLmNoaWxkcmVuLm1hcCgoaW5saW5lKSA9PiB7XG4gICAgICBpZiAoaXNDb21tZW50Qm9keU1lbnRpb24oaW5saW5lKSkge1xuICAgICAgICByZXR1cm4gY29tbWVudEJvZHlNZW50aW9uVG9Db21wb3NlckJvZHlNZW50aW9uKGlubGluZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tZW50Qm9keUxpbmsoaW5saW5lKSkge1xuICAgICAgICByZXR1cm4gY29tbWVudEJvZHlMaW5rVG9Db21wb3NlckJvZHlMaW5rKGlubGluZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tZW50Qm9keVRleHQoaW5saW5lKSkge1xuICAgICAgICByZXR1cm4gaW5saW5lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSkuZmlsdGVyKGV4aXN0cyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmJsb2NrLFxuICAgICAgY2hpbGRyZW5cbiAgICB9O1xuICB9KS5maWx0ZXIoZXhpc3RzKTtcbn1cbmZ1bmN0aW9uIGdldFBsYWNlbWVudEZyb21Qb3NpdGlvbihwb3NpdGlvbiwgZGlyZWN0aW9uID0gXCJsdHJcIikge1xuICByZXR1cm4gYCR7cG9zaXRpb259LSR7ZGlyZWN0aW9uID09PSBcInJ0bFwiID8gXCJlbmRcIiA6IFwic3RhcnRcIn1gO1xufVxuZnVuY3Rpb24gZ2V0U2lkZUFuZEFsaWduRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgY29uc3QgW3NpZGUsIGFsaWduID0gXCJjZW50ZXJcIl0gPSBwbGFjZW1lbnQuc3BsaXQoXCItXCIpO1xuICByZXR1cm4gW3NpZGUsIGFsaWduXTtcbn1cblxuZXhwb3J0IHsgY29tbWVudEJvZHlMaW5rVG9Db21wb3NlckJvZHlMaW5rLCBjb21tZW50Qm9keU1lbnRpb25Ub0NvbXBvc2VyQm9keU1lbnRpb24sIGNvbW1lbnRCb2R5VG9Db21wb3NlckJvZHksIGNvbXBvc2VyQm9keUF1dG9MaW5rVG9Db21tZW50Qm9keUxpbmssIGNvbXBvc2VyQm9keUN1c3RvbUxpbmtUb0NvbW1lbnRCb2R5TGluaywgY29tcG9zZXJCb2R5TWVudGlvblRvQ29tbWVudEJvZHlNZW50aW9uLCBjb21wb3NlckJvZHlUb0NvbW1lbnRCb2R5LCBnZXRQbGFjZW1lbnRGcm9tUG9zaXRpb24sIGdldFNpZGVBbmRBbGlnbkZyb21QbGFjZW1lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Composer/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/contexts.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/contexts.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmojiPickerContext: () => (/* binding */ EmojiPickerContext),\n/* harmony export */   useEmojiPicker: () => (/* binding */ useEmojiPicker)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\nconst EmojiPickerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(\n  null\n);\nfunction useEmojiPicker() {\n  const emojiPickerContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EmojiPickerContext);\n  return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(\n    emojiPickerContext,\n    \"EmojiPicker.Root is missing from the React tree.\"\n  );\n}\n\n\n//# sourceMappingURL=contexts.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL0Vtb2ppUGlja2VyL2NvbnRleHRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNDO0FBQ1k7O0FBRWxELDJCQUEyQixvREFBYTtBQUN4QztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsaURBQVU7QUFDdkMsU0FBUyxvREFBRTtBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUU4QztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3ByaW1pdGl2ZXMvRW1vamlQaWNrZXIvY29udGV4dHMubWpzPzBiZTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm4gfSBmcm9tICdAbGl2ZWJsb2Nrcy9jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEVtb2ppUGlja2VyQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoXG4gIG51bGxcbik7XG5mdW5jdGlvbiB1c2VFbW9qaVBpY2tlcigpIHtcbiAgY29uc3QgZW1vamlQaWNrZXJDb250ZXh0ID0gdXNlQ29udGV4dChFbW9qaVBpY2tlckNvbnRleHQpO1xuICByZXR1cm4gbm4oXG4gICAgZW1vamlQaWNrZXJDb250ZXh0LFxuICAgIFwiRW1vamlQaWNrZXIuUm9vdCBpcyBtaXNzaW5nIGZyb20gdGhlIFJlYWN0IHRyZWUuXCJcbiAgKTtcbn1cblxuZXhwb3J0IHsgRW1vamlQaWNrZXJDb250ZXh0LCB1c2VFbW9qaVBpY2tlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/contexts.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/index.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/index.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Content: () => (/* binding */ EmojiPickerContent),\n/* harmony export */   Root: () => (/* binding */ EmojiPickerRoot),\n/* harmony export */   Search: () => (/* binding */ EmojiPickerSearch)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_virtuoso__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-virtuoso */ \"(ssr)/./node_modules/react-virtuoso/dist/index.mjs\");\n/* harmony import */ var _utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/is-key.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-key.mjs\");\n/* harmony import */ var _utils_request_idle_callback_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/request-idle-callback.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/request-idle-callback.mjs\");\n/* harmony import */ var _utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/use-layout-effect.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-layout-effect.mjs\");\n/* harmony import */ var _utils_use_transition_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/use-transition.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-transition.mjs\");\n/* harmony import */ var _utils_visually_hidden_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/visually-hidden.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/visually-hidden.mjs\");\n/* harmony import */ var _internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/Emoji.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/internal/Emoji.mjs\");\n/* harmony import */ var _contexts_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contexts.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/contexts.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/utils.mjs\");\n/* __next_internal_client_entry_do_not_use__ Content,Root,Search auto */ \n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_COLUMNS = 10;\nconst DEFAULT_LOCALE = \"en\";\nconst LOADING_MINIMUM_TIMEOUT = 100;\nconst EMOJIPICKER_ROOT_NAME = \"EmojiPickerRoot\";\nconst EMOJIPICKER_CONTENT_NAME = \"EmojiPickerContent\";\nconst EMOJIPICKER_SEARCH_NAME = \"EmojiPickerSearch\";\nfunction EmojiPickerRoot({ columns = DEFAULT_COLUMNS, locale = DEFAULT_LOCALE, onEmojiSelect, children }) {\n    const emojiData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const search = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"\");\n    const [, startEmojisTransition] = (0,_utils_use_transition_mjs__WEBPACK_IMPORTED_MODULE_1__.useTransition)();\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n    const [selectedColumnIndex, setSelectedColumnIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [selectedRowIndex, setSelectedRowIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [interaction, setInteraction] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"none\");\n    const selectCurrentEmoji = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (onEmojiSelect) {\n            const emoji = data?.rows[selectedRowIndex]?.[selectedColumnIndex];\n            if (emoji) {\n                onEmojiSelect(emoji.emoji);\n            }\n        }\n    }, [\n        data?.rows,\n        onEmojiSelect,\n        selectedColumnIndex,\n        selectedRowIndex\n    ]);\n    const resetSelection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setSelectedColumnIndex(0);\n        setSelectedRowIndex(0);\n    }, []);\n    const setPointerSelection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((columnIndex, rowIndex)=>{\n        setInteraction(\"pointer\");\n        setSelectedColumnIndex(columnIndex);\n        setSelectedRowIndex(rowIndex);\n    }, []);\n    const moveSelection = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((direction, event)=>{\n        if (!data) {\n            return;\n        }\n        event.preventDefault();\n        if (interaction === \"none\") {\n            setInteraction(\"keyboard\");\n            return;\n        }\n        setInteraction(\"keyboard\");\n        switch(direction){\n            case \"left\":\n                {\n                    if (selectedColumnIndex === 0) {\n                        const previousRowIndex = selectedRowIndex - 1;\n                        const previousRow = data.rows[previousRowIndex];\n                        if (previousRow) {\n                            setSelectedRowIndex(previousRowIndex);\n                            setSelectedColumnIndex(previousRow.length - 1);\n                        }\n                    } else {\n                        setSelectedColumnIndex(selectedColumnIndex - 1);\n                    }\n                    break;\n                }\n            case \"right\":\n                {\n                    const currentRow = data.rows[selectedRowIndex];\n                    if (selectedColumnIndex === currentRow.length - 1) {\n                        const nextRowIndex = selectedRowIndex + 1;\n                        const nextRow = data.rows[nextRowIndex];\n                        if (nextRow) {\n                            setSelectedRowIndex(nextRowIndex);\n                            setSelectedColumnIndex(0);\n                        }\n                    } else {\n                        setSelectedColumnIndex(selectedColumnIndex + 1);\n                    }\n                    break;\n                }\n            case \"up\":\n                {\n                    const previousRow = data.rows[selectedRowIndex - 1];\n                    if (previousRow) {\n                        setSelectedRowIndex(selectedRowIndex - 1);\n                        if (!previousRow[selectedColumnIndex]) {\n                            setSelectedColumnIndex(previousRow.length - 1);\n                        }\n                    }\n                    break;\n                }\n            case \"down\":\n                {\n                    const nextRow = data.rows[selectedRowIndex + 1];\n                    if (nextRow) {\n                        setSelectedRowIndex(selectedRowIndex + 1);\n                        if (!nextRow[selectedColumnIndex]) {\n                            setSelectedColumnIndex(nextRow.length - 1);\n                        }\n                    }\n                    break;\n                }\n        }\n    }, [\n        data,\n        interaction,\n        selectedColumnIndex,\n        selectedRowIndex\n    ]);\n    const updateEmojis = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (!emojiData.current) {\n            return;\n        }\n        startEmojisTransition(()=>{\n            setData(()=>{\n                if (!emojiData.current) {\n                    return;\n                }\n                const filteredEmojis = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.filterEmojis)(emojiData.current.emojis, search.current);\n                return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.generateEmojiPickerData)(filteredEmojis, emojiData.current.categories, columns);\n            });\n            resetSelection();\n        });\n    }, [\n        columns,\n        resetSelection\n    ]);\n    const handleSearch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        search.current = value;\n        updateEmojis();\n    }, [\n        updateEmojis\n    ]);\n    const initializeEmojiData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (locale2)=>{\n        try {\n            emojiData.current = await (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.getEmojiData)(locale2);\n            updateEmojis();\n        } catch (error2) {\n            setError(error2);\n        }\n    }, [\n        updateEmojis\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let idleCallbackId;\n        const timeoutId = setTimeout(()=>{\n            idleCallbackId = (0,_utils_request_idle_callback_mjs__WEBPACK_IMPORTED_MODULE_3__.requestIdleCallback)(()=>{\n                initializeEmojiData(locale);\n            });\n        }, LOADING_MINIMUM_TIMEOUT);\n        return ()=>{\n            clearTimeout(timeoutId);\n            (0,_utils_request_idle_callback_mjs__WEBPACK_IMPORTED_MODULE_3__.cancelIdleCallback)(idleCallbackId);\n        };\n    }, [\n        locale\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (interaction === \"none\") {\n            resetSelection();\n        }\n    }, [\n        interaction\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_contexts_mjs__WEBPACK_IMPORTED_MODULE_4__.EmojiPickerContext.Provider, {\n        value: {\n            data,\n            error,\n            isLoading: !data && !error,\n            columns,\n            onSearch: handleSearch,\n            onEmojiSelect,\n            selectCurrentEmoji,\n            selectedRowIndex,\n            selectedColumnIndex,\n            moveSelection,\n            setPointerSelection,\n            interaction,\n            setInteraction\n        }\n    }, children);\n}\nconst EmojiPickerSearch = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ asChild, value, defaultValue, onChange, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__.Slot : \"input\";\n    const { onSearch, selectCurrentEmoji, moveSelection, interaction, setInteraction } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_4__.useEmojiPicker)();\n    const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        onChange?.(event);\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        const value2 = event.target.value;\n        setInteraction(value2 ? \"keyboard\" : \"none\");\n        onSearch(value2);\n    }, [\n        onChange,\n        onSearch,\n        setInteraction\n    ]);\n    const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        if (event.isDefaultPrevented()) {\n            return;\n        }\n        if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowLeft\")) {\n            moveSelection(\"left\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowRight\")) {\n            moveSelection(\"right\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowUp\")) {\n            moveSelection(\"up\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"ArrowDown\")) {\n            moveSelection(\"down\", event);\n        } else if ((0,_utils_is_key_mjs__WEBPACK_IMPORTED_MODULE_6__.isKey)(event, \"Enter\")) {\n            if (interaction !== \"none\") {\n                event.preventDefault();\n                selectCurrentEmoji();\n            }\n        }\n    }, [\n        interaction,\n        moveSelection,\n        selectCurrentEmoji\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        onSearch(value ? String(value) : defaultValue ? String(defaultValue) : \"\");\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        type: \"search\",\n        value,\n        defaultValue,\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        ...props,\n        ref: forwardedRef\n    });\n});\nconst defaultContentComponents = {\n    CategoryHeader: ({ category, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }, category),\n    Row: ({ children, attributes, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }, children),\n    Emoji: ({ emoji, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...props\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_Emoji_mjs__WEBPACK_IMPORTED_MODULE_7__.Emoji, {\n            emoji\n        })),\n    Loading: (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }),\n    Empty: (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }),\n    Grid: (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        }),\n    Error: ({ error, ...props })=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ...props\n        })\n};\nconst placeholderRowAttributes = {\n    rowIndex: -1,\n    categoryRowIndex: -1,\n    categoryRowsCount: 0\n};\nconst VirtuosoScroller = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...props,\n        tabIndex: -1,\n        \"data-testid\": void 0,\n        ref: forwardedRef\n    }, children);\n});\nconst VirtuosoTopList = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, ...props }, forwardedRef)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...props,\n        \"data-testid\": void 0,\n        ref: forwardedRef\n    }, children);\n});\nconst EmojiPickerContent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ components, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_5__.Slot : \"div\";\n    const virtuosoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const placeholderContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const rowScrollMarginTopRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const rowScrollMarginBottomRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const categoryHeaderHeightRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const { data, error, isLoading, columns, onEmojiSelect, selectedColumnIndex, selectedRowIndex, setPointerSelection, interaction, setInteraction } = (0,_contexts_mjs__WEBPACK_IMPORTED_MODULE_4__.useEmojiPicker)();\n    const selectedEmoji = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>data?.rows[selectedRowIndex]?.[selectedColumnIndex], [\n        data?.rows,\n        selectedColumnIndex,\n        selectedRowIndex\n    ]);\n    const { Loading, Empty, Error, CategoryHeader, Grid, Row, Emoji } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...defaultContentComponents,\n            ...components\n        }), [\n        components\n    ]);\n    const VirtuosoList = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children, ...props2 }, forwardedRef2)=>{\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                role: \"grid\",\n                \"aria-colcount\": columns,\n                ...props2,\n                \"data-testid\": void 0,\n                ref: forwardedRef2\n            }, children);\n        }), [\n        columns\n    ]);\n    const placeholderColumns = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>Array(columns).fill(\"\\uD83C\\uDF2B️\"), [\n        columns\n    ]);\n    const preventDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((event)=>{\n        event.preventDefault();\n    }, []);\n    const handleEmojiPointerLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (interaction === \"pointer\") {\n            setInteraction(\"none\");\n        }\n    }, [\n        interaction,\n        setInteraction\n    ]);\n    (0,_utils_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_8__.useLayoutEffect)(()=>{\n        if (!placeholderContainerRef.current) {\n            return;\n        }\n        const row = placeholderContainerRef.current.childNodes[0];\n        const categoryHeader = placeholderContainerRef.current.childNodes[1];\n        if (row instanceof HTMLElement) {\n            const style = window.getComputedStyle(row);\n            rowScrollMarginTopRef.current = parseFloat(style.scrollMarginTop);\n            rowScrollMarginBottomRef.current = parseFloat(style.scrollMarginBottom);\n        }\n        if (categoryHeader instanceof HTMLElement) {\n            categoryHeaderHeightRef.current = categoryHeader.offsetHeight;\n        }\n    }, []);\n    const calculateViewLocation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ itemTop, itemBottom, viewportTop, viewportBottom, locationParams: { behavior, align, ...params } })=>{\n        if (itemTop - (categoryHeaderHeightRef.current + rowScrollMarginTopRef.current) < viewportTop) {\n            return {\n                ...params,\n                behavior,\n                align: align ?? \"start\"\n            };\n        }\n        if (itemBottom > viewportBottom) {\n            return {\n                ...params,\n                behavior,\n                align: align ?? \"end\",\n                offset: rowScrollMarginBottomRef.current\n            };\n        }\n        return null;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (interaction === \"keyboard\") {\n            virtuosoRef.current?.scrollIntoView({\n                index: selectedRowIndex,\n                behavior: \"auto\",\n                calculateViewLocation\n            });\n        }\n    }, [\n        interaction,\n        selectedRowIndex,\n        calculateViewLocation\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        ref: forwardedRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            visibility: \"hidden\",\n            height: 0\n        },\n        ref: placeholderContainerRef\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Row, {\n        attributes: placeholderRowAttributes\n    }, placeholderColumns.map((placeholder, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Emoji, {\n            emoji: placeholder,\n            key: index\n        }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CategoryHeader, {\n        category: \"Category\"\n    })), isLoading ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Loading, null) : error ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Error, {\n        error\n    }) : data.count === 0 ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Empty, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Grid, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_virtuoso__WEBPACK_IMPORTED_MODULE_9__.GroupedVirtuoso, {\n        ref: virtuosoRef,\n        components: {\n            Scroller: VirtuosoScroller,\n            List: VirtuosoList,\n            TopItemList: VirtuosoTopList\n        },\n        groupCounts: data.categoriesRowCounts,\n        groupContent: (groupIndex)=>{\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CategoryHeader, {\n                category: data.categories[groupIndex]\n            });\n        },\n        itemContent: (rowIndex, groupIndex)=>{\n            const categoryRowIndex = data.categoriesRowIndices[groupIndex].indexOf(rowIndex);\n            const categoryRowsCount = data.categoriesRowCounts[groupIndex];\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Row, {\n                attributes: {\n                    rowIndex,\n                    categoryRowIndex,\n                    categoryRowsCount\n                }\n            }, data.rows[rowIndex].map((emoji, columnIndex)=>{\n                const isSelected = interaction !== \"none\" && selectedColumnIndex === columnIndex && selectedRowIndex === rowIndex;\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Emoji, {\n                    key: emoji.emoji,\n                    role: \"gridcell\",\n                    \"aria-colindex\": columnIndex,\n                    \"aria-selected\": isSelected || void 0,\n                    \"data-selected\": isSelected || void 0,\n                    onMouseDown: preventDefault,\n                    tabIndex: -1,\n                    onPointerEnter: ()=>{\n                        setPointerSelection(columnIndex, rowIndex);\n                    },\n                    onPointerLeave: handleEmojiPointerLeave,\n                    onClick: (event)=>{\n                        onEmojiSelect?.(emoji.emoji);\n                        event.stopPropagation();\n                    },\n                    emoji: emoji.emoji\n                });\n            }));\n        }\n    })), selectedEmoji && interaction !== \"none\" && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"aria-live\": \"polite\",\n        style: _utils_visually_hidden_mjs__WEBPACK_IMPORTED_MODULE_10__.visuallyHidden\n    }, selectedEmoji.name));\n});\nif (true) {\n    EmojiPickerRoot.displayName = EMOJIPICKER_ROOT_NAME;\n    EmojiPickerContent.displayName = EMOJIPICKER_CONTENT_NAME;\n    EmojiPickerSearch.displayName = EMOJIPICKER_SEARCH_NAME;\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL0Vtb2ppUGlja2VyL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNBLE1BQUFBLGtCQUFBO0FBQ0EsTUFBQUMsaUJBQUE7QUFDQSxNQUFBQywwQkFBQTtBQUVBLE1BQUFDLHdCQUFBO0FBQ0EsTUFBQUMsMkJBQUE7QUFDQSxNQUFBQywwQkFBQTtBQWtCQSxTQUFBQyxnQkFBQSxFQUF5QkMsVUFBQVAsZUFBQSxFQUNiUSxTQUFBUCxjQUFBLEVBQ0RRLGFBQUEsRUFDVEMsUUFBQSxFQUVGO0lBQ0UsTUFBQUMsWUFBQUMsNkNBQUFBO0lBQ0EsTUFBQUMsU0FBQUQsNkNBQUFBLENBQUE7SUFDQSxTQUFBRSxzQkFBQSxHQUFBQyx3RUFBQUE7SUFDQSxPQUFBQyxNQUFBQyxRQUFBLEdBQUFDLCtDQUFBQTtJQUNBLE9BQUFDLE9BQUFDLFNBQUEsR0FBQUYsK0NBQUFBO0lBQ0EsT0FBQUcscUJBQUFDLHVCQUFBLEdBQUFKLCtDQUFBQSxDQUFBO0lBQ0EsT0FBQUssa0JBQUFDLG9CQUFBLEdBQUFOLCtDQUFBQSxDQUFBO0lBQ0EsT0FBQU8sYUFBQUMsZUFBQSxHQUFBUiwrQ0FBQUEsQ0FBQTtJQUlBLE1BQUFTLHFCQUFBQyxrREFBQUEsQ0FBQTtRQUNFLElBQUFuQixlQUFBO1lBQ0UsTUFBQW9CLFFBQUFiLE1BQUFjLElBQUEsQ0FBQVAsaUJBQUEsR0FBQUYsb0JBQUE7WUFFQSxJQUFBUSxPQUFBO2dCQUNFcEIsY0FBQW9CLE1BQUFBLEtBQUE7WUFBeUI7UUFDM0I7SUFDRjtRQUFBYixNQUFBYztRQUFBckI7UUFBQVk7UUFBQUU7S0FBQTtJQUdGLE1BQUFRLGlCQUFBSCxrREFBQUEsQ0FBQTtRQUNFTix1QkFBQTtRQUNBRSxvQkFBQTtJQUFxQjtJQUd2QixNQUFBUSxzQkFBQUosa0RBQUFBLENBQTRCLENBQUFLLGFBQUFDO1FBRXhCUixlQUFBO1FBQ0FKLHVCQUFBVztRQUNBVCxvQkFBQVU7SUFBNEIsR0FDOUI7SUFJRixNQUFBQyxnQkFBQVAsa0RBQUFBLENBQXNCLENBQUFRLFdBQUFDO1FBS2xCLEtBQUFyQixNQUFBO1lBQ0U7UUFBQTtRQUdGcUIsTUFBQUMsY0FBQTtRQUVBLElBQUFiLGdCQUFBO1lBQ0VDLGVBQUE7WUFDQTtRQUFBO1FBR0ZBLGVBQUE7UUFFQSxPQUFBVTtZQUFtQjtnQkFBQTtvQkFJZixJQUFBZix3QkFBQTt3QkFDRSxNQUFBa0IsbUJBQUFoQixtQkFBQTt3QkFDQSxNQUFBaUIsY0FBQXhCLEtBQUFjLElBQUEsQ0FBQVMsaUJBQUE7d0JBRUEsSUFBQUMsYUFBQTs0QkFDRWhCLG9CQUFBZTs0QkFDQWpCLHVCQUFBa0IsWUFBQUMsTUFBQTt3QkFBNkM7b0JBQy9DO3dCQUVBbkIsdUJBQUFELHNCQUFBO29CQUE4QztvQkFHaEQ7Z0JBQUE7WUFDRjtnQkFBQTtvQkFLRSxNQUFBcUIsYUFBQTFCLEtBQUFjLElBQUEsQ0FBQVAsaUJBQUE7b0JBRUEsSUFBQUYsd0JBQUFxQixXQUFBRCxNQUFBO3dCQUNFLE1BQUFFLGVBQUFwQixtQkFBQTt3QkFDQSxNQUFBcUIsVUFBQTVCLEtBQUFjLElBQUEsQ0FBQWEsYUFBQTt3QkFFQSxJQUFBQyxTQUFBOzRCQUNFcEIsb0JBQUFtQjs0QkFDQXJCLHVCQUFBO3dCQUF3QjtvQkFDMUI7d0JBRUFBLHVCQUFBRCxzQkFBQTtvQkFBOEM7b0JBR2hEO2dCQUFBO1lBQ0Y7Z0JBQUE7b0JBS0UsTUFBQW1CLGNBQUF4QixLQUFBYyxJQUFBLENBQUFQLG1CQUFBO29CQUVBLElBQUFpQixhQUFBO3dCQUNFaEIsb0JBQUFELG1CQUFBO3dCQUVBLEtBQUFpQixXQUFBLENBQUFuQixvQkFBQTs0QkFDRUMsdUJBQUFrQixZQUFBQyxNQUFBO3dCQUE2QztvQkFDL0M7b0JBR0Y7Z0JBQUE7WUFDRjtnQkFBQTtvQkFLRSxNQUFBRyxVQUFBNUIsS0FBQWMsSUFBQSxDQUFBUCxtQkFBQTtvQkFFQSxJQUFBcUIsU0FBQTt3QkFDRXBCLG9CQUFBRCxtQkFBQTt3QkFFQSxLQUFBcUIsT0FBQSxDQUFBdkIsb0JBQUE7NEJBQ0VDLHVCQUFBc0IsUUFBQUgsTUFBQTt3QkFBeUM7b0JBQzNDO29CQUdGO2dCQUFBO1FBQ0Y7SUFDRixHQUNGO1FBQUF6QjtRQUFBUztRQUFBSjtRQUFBRTtLQUFBO0lBSUYsTUFBQXNCLGVBQUFqQixrREFBQUEsQ0FBQTtRQUNFLEtBQUFqQixVQUFBbUMsT0FBQTtZQUNFO1FBQUE7UUFHRmhDLHNCQUFBO1lBQ0VHLFFBQUE7Z0JBQ0UsS0FBQU4sVUFBQW1DLE9BQUE7b0JBQ0U7Z0JBQUE7Z0JBR0YsTUFBQUMsaUJBQUFDLHdEQUFBQSxDQUF1QnJDLFVBQUFtQyxPQUFBLENBQUFHLE1BQUEsRUFDSHBDLE9BQUFpQyxPQUFBO2dCQUlwQixPQUFBSSxtRUFBQUEsQ0FBT0gsZ0JBQ0xwQyxVQUFBbUMsT0FBQSxDQUFBSyxVQUFBLEVBQ2tCNUM7WUFFcEI7WUFFRndCO1FBQWU7SUFDaEI7UUFBQXhCO1FBQUF3QjtLQUFBO0lBR0gsTUFBQXFCLGVBQUF4QixrREFBQUEsQ0FBcUIsQ0FBQXlCO1FBRWpCeEMsT0FBQWlDLE9BQUEsR0FBQU87UUFDQVI7SUFBYSxHQUNmO1FBQUFBO0tBQUE7SUFJRixNQUFBUyxzQkFBQTFCLGtEQUFBQSxDQUE0QixPQUFBMkI7UUFFeEI7WUFDRTVDLFVBQUFtQyxPQUFBLFNBQUFVLHdEQUFBQSxDQUFBRDtZQUNBVjtRQUFhLFNBQUFZLFFBQUE7WUFFYnJDLFNBQUFxQztRQUF1QjtJQUN6QixHQUNGO1FBQUFaO0tBQUE7SUFJRmEsZ0RBQVNBLENBQVQ7UUFDRSxJQUFBQztRQUNBLE1BQUFDLFlBQUFDLFdBQUE7WUFDRUYsaUJBQUFHLHFGQUFBQSxDQUFBO2dCQUNFUixvQkFBQTlDO1lBQTBCO1FBQzNCLEdBQUFOO1FBR0g7WUFDRTZELGFBQUFIO1lBQ0FJLG9GQUFrQkEsQ0FBbEJMO1FBQWlDO0lBQ25DO1FBQUFuRDtLQUFBO0lBR0ZrRCxnREFBU0EsQ0FBVDtRQUNFLElBQUFqQyxnQkFBQTtZQUNFTTtRQUFlO0lBQ2pCO1FBQUFOO0tBQUE7SUFHRixxQ0FBQXdDLGdEQUFBLENBQUFFLDZEQUFBQSxDQUFBQyxRQUFBO1FBQ0dmLE9BQUE7WUFDUXJDO1lBQ0xHO1lBQ0FrRCxXQUFBLENBQUFyRCxRQUFBLENBQUFHO1lBQ3NCWjtZQUN0QitELFVBQUFsQjtZQUNVM0M7WUFDVmtCO1lBQ0FKO1lBQ0FGO1lBQ0FjO1lBQ0FIO1lBQ0FQO1lBQ0FDO1FBQ0E7SUFDRixHQUFBaEI7QUFLTjtBQWVBLE1BQUE2RCxrQ0FBQUMsaURBQUFBLENBQTBCLEdBQUFDLE9BQUEsRUFBQXBCLEtBQUEsRUFBQXFCLFlBQUEsRUFBQUMsUUFBQSxLQUFBQyxPQUFBLEVBQUFDO0lBRXRCLE1BQUFDLFlBQUFMLFVBQUFNLHNEQUFBQSxHQUFBO0lBQ0EsUUFBTVQsUUFBQSxFQUNKM0Msa0JBQUEsRUFDQVEsYUFBQSxFQUNBVixXQUFBLEVBQ0FDLGNBQUEsRUFDQSxHQUFBc0QsNkRBQUFBO0lBR0YsTUFBQUMsZUFBQXJELGtEQUFBQSxDQUFxQixDQUFBUztRQUVqQnNDLFdBQUF0QztRQUVBLElBQUFBLE1BQUE2QyxrQkFBQTtZQUNFO1FBQUE7UUFHRixNQUFBQyxTQUFBOUMsTUFBQStDLE1BQUEsQ0FBQS9CLEtBQUE7UUFDQTNCLGVBQUF5RCxTQUFBO1FBQ0FiLFNBQUFhO0lBQWMsR0FDaEI7UUFBQVI7UUFBQUw7UUFBQTVDO0tBQUE7SUFJRixNQUFBMkQsZ0JBQUF6RCxrREFBQUEsQ0FBc0IsQ0FBQVM7UUFFbEIsSUFBQUEsTUFBQTZDLGtCQUFBO1lBQ0U7UUFBQTtRQUdGLElBQUFJLHdEQUFBQSxDQUFBakQsT0FBQTtZQUNFRixjQUFBLFFBQUFFO1FBQTJCLFdBQUFpRCx3REFBQUEsQ0FBQWpELE9BQUE7WUFFM0JGLGNBQUEsU0FBQUU7UUFBNEIsV0FBQWlELHdEQUFBQSxDQUFBakQsT0FBQTtZQUU1QkYsY0FBQSxNQUFBRTtRQUF5QixXQUFBaUQsd0RBQUFBLENBQUFqRCxPQUFBO1lBRXpCRixjQUFBLFFBQUFFO1FBQTJCLFdBQUFpRCx3REFBQUEsQ0FBQWpELE9BQUE7WUFFM0IsSUFBQVosZ0JBQUE7Z0JBQ0VZLE1BQUFDLGNBQUE7Z0JBQ0FYO1lBQW1CO1FBQ3JCO0lBQ0YsR0FDRjtRQUFBRjtRQUFBVTtRQUFBUjtLQUFBO0lBSUYrQixnREFBU0EsQ0FBVDtRQUNFWSxTQUFBakIsUUFBQWtDLE9BQUFsQyxTQUFBcUIsZUFBQWEsT0FBQWIsZ0JBQUE7SUFFQTtJQUdGLHFDQUFBVCxnREFBQSxDQUFBYSxXQUFBO1FBQ0dVLE1BQUE7UUFDTW5DO1FBQ0xxQjtRQUNBQyxVQUFBTTtRQUNVUSxXQUFBSjtRQUNDLEdBQUFULEtBQUE7UUFDUGMsS0FBQWI7SUFDQztBQUNQO0FBS04sTUFBQWMsMkJBQUE7SUFBK0RDLGdCQUFBLEdBQUFDLFFBQUEsS0FBQWpCLE9BQUEsaUNBQUFYLGdEQUFBO1lBQ2hCLEdBQUFXLEtBQUE7UUFBUSxHQUFBaUI7SUFBaUJDLEtBQUEsR0FBQXBGLFFBQUEsRUFBQXFGLFVBQUEsS0FBQW5CLE9BQUEsaUNBQUFYLGdEQUFBO1lBRXhCLEdBQUFXLEtBQUE7UUFBUSxHQUFBbEU7SUFBaUJzRixPQUFBLEdBQUFuRSxLQUFBLEtBQUErQyxPQUFBLGlDQUFBWCxnREFBQTtZQUVwRSxHQUFBVyxLQUFBO1FBQVcsaUNBQUFYLGdEQUFBLENBQUErQixzREFBQUEsRUFBQTtZQUNUbkU7UUFBZTtJQUNsQm9FLFNBQUEsQ0FBQXJCLFFBQUEsOEJBQUFYLGdEQUFBO1lBRW1CLEdBQUFXLEtBQUE7UUFBUTtJQUFPc0IsT0FBQSxDQUFBdEIsUUFBQSw4QkFBQVgsZ0RBQUE7WUFDakIsR0FBQVcsS0FBQTtRQUFRO0lBQU91QixNQUFBLENBQUF2QixRQUFBLDhCQUFBWCxnREFBQTtZQUNoQixHQUFBVyxLQUFBO1FBQVE7SUFBT3dCLE9BQUEsR0FBQWpGLEtBQUEsS0FBQXlELE9BQUEsaUNBQUFYLGdEQUFBO1lBRUEsR0FBQVcsS0FBQTtRQUFRO0FBQzNDO0FBRUEsTUFBQXlCLDJCQUFBO0lBQXVFbkUsVUFBQTtJQUMzRG9FLGtCQUFBO0lBQ1FDLG1CQUFBO0FBRXBCO0FBS0EsTUFBQUMsaUNBQUFoQyxpREFBQUEsQ0FBeUIsR0FBQTlELFFBQUEsS0FBQWtFLE9BQUEsRUFBQUM7SUFFckIscUNBQUFaLGdEQUFBO1FBQ0csR0FBQVcsS0FBQTtRQUFRNkIsVUFBQTtRQUFpQjtRQUFpQmYsS0FBQWI7SUFBZ0IsR0FBQW5FO0FBRTNEO0FBS04sTUFBQWdHLGdDQUFBbEMsaURBQUFBLENBQXdCLEdBQUE5RCxRQUFBLEtBQUFrRSxPQUFBLEVBQUFDO0lBRXBCLHFDQUFBWixnREFBQTtRQUNHLEdBQUFXLEtBQUE7UUFBUTtRQUFvQmMsS0FBQWI7SUFBZ0IsR0FBQW5FO0FBRTdDO0FBNEJOLE1BQUFpRyxtQ0FBQW5DLGlEQUFBQSxDQUEyQixHQUFBb0MsVUFBQSxFQUFBbkMsT0FBQSxLQUFBRyxPQUFBLEVBQUFDO0lBRXZCLE1BQUFDLFlBQUFMLFVBQUFNLHNEQUFBQSxHQUFBO0lBQ0EsTUFBQThCLGNBQUFqRyw2Q0FBQUEsQ0FBQTtJQUNBLE1BQUFrRywwQkFBQWxHLDZDQUFBQSxDQUFBO0lBQ0EsTUFBQW1HLHdCQUFBbkcsNkNBQUFBLENBQUE7SUFDQSxNQUFBb0csMkJBQUFwRyw2Q0FBQUEsQ0FBQTtJQUNBLE1BQUFxRywwQkFBQXJHLDZDQUFBQSxDQUFBO0lBQ0EsUUFBTUksSUFBQSxFQUNKRyxLQUFBLEVBQ0FrRCxTQUFBLEVBQ0E5RCxPQUFBLEVBQ0FFLGFBQUEsRUFDQVksbUJBQUEsRUFDQUUsZ0JBQUEsRUFDQVMsbUJBQUEsRUFDQVAsV0FBQSxFQUNBQyxjQUFBLEVBQ0EsR0FBQXNELDZEQUFBQTtJQUVGLE1BQUFrQyxnQkFBQUMsOENBQUFBLENBQXNCLElBQUFuRyxNQUFBYyxJQUFBLENBQUFQLGlCQUFBLEdBQUFGLG9CQUFBLEVBQ2lCO1FBQUFMLE1BQUFjO1FBQUFUO1FBQUFFO0tBQUE7SUFHdkMsUUFBQTBFLE9BQUEsRUFBQUMsS0FBQSxFQUFBRSxLQUFBLEVBQUFSLGNBQUEsRUFBQU8sSUFBQSxFQUFBTCxHQUFBLEVBQUFFLEtBQUEsS0FBQW1CLDhDQUFBQSxDQUFvRTtZQUFBLEdBQUF4Qix3QkFBQTtZQUFBLEdBQUFpQixVQUFBO1FBQUEsSUFDZDtRQUFBQTtLQUFBO0lBR3RELE1BQUFRLGVBQUFELDhDQUFBQSxDQUFxQixrQkFBQTNDLGlEQUFBQSxDQUVqQixHQUFBOUQsUUFBQSxLQUFBMkcsUUFBQSxFQUFBQztZQUVJLHFDQUFBckQsZ0RBQUE7Z0JBQ0dzRCxNQUFBO2dCQUNNLGlCQUFBaEg7Z0JBQ1UsR0FBQThHLE1BQUE7Z0JBQ1g7Z0JBQ1MzQixLQUFBNEI7WUFDUixHQUFBNUc7UUFHUCxJQUdOO1FBQUFIO0tBQUE7SUFHSixNQUFBaUgscUJBQUFMLDhDQUFBQSxDQUEyQixJQUFBTSxNQUFBbEgsU0FBQW1ILElBQUEsbUJBQ2M7UUFBQW5IO0tBQUE7SUFJekMsTUFBQStCLGlCQUFBVixrREFBQUEsQ0FBQSxDQUFBUztRQUNFQSxNQUFBQyxjQUFBO0lBQXFCO0lBR3ZCLE1BQUFxRiwwQkFBQS9GLGtEQUFBQSxDQUFBO1FBQ0UsSUFBQUgsZ0JBQUE7WUFDRUMsZUFBQTtRQUFxQjtJQUN2QjtRQUFBRDtRQUFBQztLQUFBO0lBR0ZrRyw2RUFBZUEsQ0FBZjtRQUNFLEtBQUFkLHdCQUFBaEUsT0FBQTtZQUNFO1FBQUE7UUFHRixNQUFBK0UsTUFBQWYsd0JBQUFoRSxPQUFBLENBQUFnRixVQUFBO1FBQ0EsTUFBQUMsaUJBQUFqQix3QkFBQWhFLE9BQUEsQ0FBQWdGLFVBQUE7UUFFQSxJQUFBRCxlQUFBRyxhQUFBO1lBQ0UsTUFBQUMsUUFBQUMsT0FBQUMsZ0JBQUEsQ0FBQU47WUFFQWQsc0JBQUFqRSxPQUFBLEdBQUFzRixXQUFBSCxNQUFBSSxlQUFBO1lBQ0FyQix5QkFBQWxFLE9BQUEsR0FBQXNGLFdBQUFILE1BQUFLLGtCQUFBO1FBQXNFO1FBR3hFLElBQUFQLDBCQUFBQyxhQUFBO1lBQ0VmLHdCQUFBbkUsT0FBQSxHQUFBaUYsZUFBQVEsWUFBQTtRQUFpRDtJQUNuRDtJQUlGLE1BQUFDLHdCQUFBNUcsa0RBQUFBLENBQThCLEdBQzNCNkcsT0FBQSxFQUNDQyxVQUFBLEVBQ0FDLFdBQUEsRUFDQUMsY0FBQSxFQUNBQyxnQkFBQSxFQUFBQyxRQUFBLEVBQUFDLEtBQUEsS0FBQUMsUUFBQSxFQUM2QztRQUU3QyxJQUFBUCxVQUFBeEIsQ0FBQUEsd0JBQUFuRSxPQUFBLEdBQUFpRSxzQkFBQWpFLE9BQUEsSUFBQTZGLGFBQUE7WUFLRTtnQkFBTyxHQUFBSyxNQUFBO2dCQUNGRjtnQkFDSEMsT0FBQUEsU0FBQTtZQUNnQjtRQUNsQjtRQUdGLElBQUFMLGFBQUFFLGdCQUFBO1lBQ0U7Z0JBQU8sR0FBQUksTUFBQTtnQkFDRkY7Z0JBQ0hDLE9BQUFBLFNBQUE7Z0JBQ2dCRSxRQUFBakMseUJBQUFsRSxPQUFBO1lBQ2lCO1FBQ25DO1FBR0Y7SUFBTyxHQUNUO0lBSUZZLGdEQUFTQSxDQUFUO1FBQ0UsSUFBQWpDLGdCQUFBO1lBQ0VvRixZQUFBL0QsT0FBQSxFQUFBb0csZUFBQTtnQkFBb0NDLE9BQUE1SDtnQkFDM0J1SCxVQUFBO2dCQUNHTjtZQUNWO1FBQ0Q7SUFDSDtRQUFBL0c7UUFBQUY7UUFBQWlIO0tBQUE7SUFHRixxQ0FBQXZFLGdEQUFBLENBQUFhLFdBQUE7UUFDRyxHQUFBRixLQUFBO1FBQWNjLEtBQUFiO0lBQVksaUNBQUFaLGdEQUFBO1FBQ3hCZ0UsT0FBQTtZQUNRbUIsWUFBQTtZQUNPQyxRQUFBO1FBQ0o7UUFDVjNELEtBQUFvQjtJQUNLLGlDQUFBN0MsZ0RBQUEsQ0FBQTZCLEtBQUE7UUFLSkMsWUFBQU07SUFBZ0IsR0FBQW1CLG1CQUFBOEIsR0FBQSxFQUFBQyxhQUFBSixRQUFBLDhCQUFBbEYsZ0RBQUEsQ0FBQStCLE9BQUE7WUFFWm5FLE9BQUEwSDtZQUFhQyxLQUFBTDtRQUFrQixvQ0FBQWxGLGdEQUFBLENBQUEyQixnQkFBQTtRQUluQ0MsVUFBQTtJQUF3QixLQUFBeEIsWUFBQSw4QkFBQUosZ0RBQUEsQ0FBQWdDLFNBQUEsUUFBQTlFLFFBQUEsOEJBQUE4QyxnREFBQSxDQUFBbUMsT0FBQTtRQUt4QmpGO0lBQU0sS0FBQUgsS0FBQXlJLEtBQUEsdUNBQUF4RixnREFBQSxDQUFBaUMsT0FBQSxzQ0FBQWpDLGdEQUFBLENBQUFrQyxNQUFBLG9DQUFBbEMsZ0RBQUEsQ0FBQXlGLDJEQUFBQSxFQUFBO1FBS0poRSxLQUFBbUI7UUFDTUQsWUFBQTtZQUNPK0MsVUFBQW5EO1lBQ0FvRCxNQUFBeEM7WUFDSnlDLGFBQUFuRDtRQUNPO1FBQ2ZvRCxhQUFBOUksS0FBQStJLG1CQUFBO1FBQ2tCQyxjQUFBLENBQUFDO1lBRWhCLHFDQUFBaEcsZ0RBQUEsQ0FBQTJCLGdCQUFBO2dCQUNHQyxVQUFBN0UsS0FBQW1DLFVBQUEsQ0FBQThHLFdBQUE7WUFBeUM7UUFBYTtRQUUzREMsYUFBQSxDQUFBaEksVUFBQStIO1lBRUUsTUFBQTNELG1CQUFBdEYsS0FBQW1KLG9CQUFBLENBQUFGLFdBQUEsQ0FBQUcsT0FBQSxDQUFBbEk7WUFFQSxNQUFBcUUsb0JBQUF2RixLQUFBK0ksbUJBQUEsQ0FBQUUsV0FBQTtZQUVBLHFDQUFBaEcsZ0RBQUEsQ0FBQTZCLEtBQUE7Z0JBQ0dDLFlBQUE7b0JBQ2E3RDtvQkFDVm9FO29CQUNBQztnQkFDQTtZQUNGLEdBQUF2RixLQUFBYyxJQUFBLENBQUFJLFNBQUEsQ0FBQW9ILEdBQUEsRUFBQXpILE9BQUFJO2dCQUdFLE1BQUFvSSxhQUFBNUksZ0JBQUEsVUFBQUosd0JBQUFZLGVBQUFWLHFCQUFBVztnQkFLQSxxQ0FBQStCLGdEQUFBLENBQUErQixPQUFBO29CQUNHd0QsS0FBQTNILE1BQUFBLEtBQUE7b0JBQ1kwRixNQUFBO29CQUNOLGlCQUFBdEY7b0JBQ1UsaUJBQUFvSSxjQUFBO29CQUNjLGlCQUFBQSxjQUFBO29CQUNBQyxhQUFBaEk7b0JBQ2hCbUUsVUFBQTtvQkFDSDhELGdCQUFBO3dCQUVSdkksb0JBQUFDLGFBQUFDO29CQUF5QztvQkFDM0NzSSxnQkFBQTdDO29CQUNnQjhDLFNBQUEsQ0FBQXBJO3dCQUVkNUIsZ0JBQUFvQixNQUFBQSxLQUFBO3dCQUNBUSxNQUFBcUksZUFBQTtvQkFBc0I7b0JBQ3hCN0ksT0FBQUEsTUFBQUEsS0FBQTtnQkFDYTtZQUNmO1FBR047SUFFSixLQUFBcUYsaUJBQUF6RixnQkFBQSx3Q0FBQXdDLGdEQUFBO1FBS0g7UUFBY2dFLE9BQUEwQyx1RUFBQUE7SUFBZ0IsR0FBQXpELGNBQUEwRCxJQUFBO0FBSW5DO0FBS04sSUFBQUMsSUFBQTtJQUNFdkssZ0JBQUF3SyxXQUFBLEdBQUEzSztJQUNBd0csbUJBQUFtRSxXQUFBLEdBQUExSztJQUNBbUUsa0JBQUF1RyxXQUFBLEdBQUF6SztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4uLy4uLy4uL3NyYy9wcmltaXRpdmVzL0Vtb2ppUGlja2VyL2luZGV4LnRzeD80MTU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI7XG5pbXBvcnQgdHlwZSB7IENoYW5nZUV2ZW50LCBLZXlib2FyZEV2ZW50LCBTeW50aGV0aWNFdmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0LCB7XG4gIGZvcndhcmRSZWYsXG4gIHVzZUNhbGxiYWNrLFxuICB1c2VFZmZlY3QsXG4gIHVzZU1lbW8sXG4gIHVzZVJlZixcbiAgdXNlU3RhdGUsXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICBDYWxjdWxhdGVWaWV3TG9jYXRpb25QYXJhbXMsXG4gIEdyb3VwZWRWaXJ0dW9zb0hhbmRsZSxcbiAgTGlzdFByb3BzIGFzIFZpcnR1b3NvTGlzdFByb3BzLFxuICBTY3JvbGxlclByb3BzLFxuICBUb3BJdGVtTGlzdFByb3BzLFxufSBmcm9tIFwicmVhY3QtdmlydHVvc29cIjtcbmltcG9ydCB7IEdyb3VwZWRWaXJ0dW9zbyB9IGZyb20gXCJyZWFjdC12aXJ0dW9zb1wiO1xuXG5pbXBvcnQgeyBpc0tleSB9IGZyb20gXCIuLi8uLi91dGlscy9pcy1rZXlcIjtcbmltcG9ydCB7XG4gIGNhbmNlbElkbGVDYWxsYmFjayxcbiAgcmVxdWVzdElkbGVDYWxsYmFjayxcbn0gZnJvbSBcIi4uLy4uL3V0aWxzL3JlcXVlc3QtaWRsZS1jYWxsYmFja1wiO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcIi4uLy4uL3V0aWxzL3VzZS1sYXlvdXQtZWZmZWN0XCI7XG5pbXBvcnQgeyB1c2VUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3VzZS10cmFuc2l0aW9uXCI7XG5pbXBvcnQgeyB2aXN1YWxseUhpZGRlbiB9IGZyb20gXCIuLi8uLi91dGlscy92aXN1YWxseS1oaWRkZW5cIjtcbmltcG9ydCB7IEVtb2ppIGFzIEVtb2ppUHJpbWl0aXZlIH0gZnJvbSBcIi4uL2ludGVybmFsL0Vtb2ppXCI7XG5pbXBvcnQgeyBFbW9qaVBpY2tlckNvbnRleHQsIHVzZUVtb2ppUGlja2VyIH0gZnJvbSBcIi4vY29udGV4dHNcIjtcbmltcG9ydCB0eXBlIHtcbiAgRW1vamlEYXRhLFxuICBFbW9qaVBpY2tlckNvbnRlbnRDb21wb25lbnRzLFxuICBFbW9qaVBpY2tlckNvbnRlbnRFbW9qaVJvd0F0dHJpYnV0ZXMsXG4gIEVtb2ppUGlja2VyQ29udGVudFByb3BzLFxuICBFbW9qaVBpY2tlckRhdGEsXG4gIEVtb2ppUGlja2VyUm9vdFByb3BzLFxuICBFbW9qaVBpY2tlclNlYXJjaFByb3BzLFxuICBFbW9qaVBpY2tlclNlbGVjdGlvbkRpcmVjdGlvbixcbn0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGZpbHRlckVtb2ppcywgZ2VuZXJhdGVFbW9qaVBpY2tlckRhdGEsIGdldEVtb2ppRGF0YSB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IERFRkFVTFRfQ09MVU1OUyA9IDEwO1xuY29uc3QgREVGQVVMVF9MT0NBTEUgPSBcImVuXCI7XG5jb25zdCBMT0FESU5HX01JTklNVU1fVElNRU9VVCA9IDEwMDtcblxuY29uc3QgRU1PSklQSUNLRVJfUk9PVF9OQU1FID0gXCJFbW9qaVBpY2tlclJvb3RcIjtcbmNvbnN0IEVNT0pJUElDS0VSX0NPTlRFTlRfTkFNRSA9IFwiRW1vamlQaWNrZXJDb250ZW50XCI7XG5jb25zdCBFTU9KSVBJQ0tFUl9TRUFSQ0hfTkFNRSA9IFwiRW1vamlQaWNrZXJTZWFyY2hcIjtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogVGhlIEVtb2ppUGlja2VyIHByaW1pdGl2ZSBpcyB1bmRvY3VtZW50ZWQgZm9yIG5vdyBhbmQgc3ViamVjdCB0byBjaGFuZ2UsXG4gKiB1c2UgYXQgeW91ciBvd24gcmlzay4gSWYgeW91IGhhdmUgYW55IGZlZWRiYWNrIG9uIGl0LCBwbGVhc2UgbGV0IHVzIGtub3chXG4gKiBTZWUgaG93IHdlIHVzZSBpdCBpbiB0aGUgZGVmYXVsdCBjb21wb25lbnRzIHRvIGxlYXJuIGhvdyB0byB1c2UgaXQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbGl2ZWJsb2Nrcy9saXZlYmxvY2tzL2Jsb2IvbWFpbi9wYWNrYWdlcy9saXZlYmxvY2tzLXJlYWN0LXVpL3NyYy9jb21wb25lbnRzL2ludGVybmFsL0Vtb2ppUGlja2VyLnRzeC5cbiAqXG4gKiBTdXJyb3VuZHMgdGhlIGVtb2ppIHBpY2tlciwgaXQgaGFuZGxlcyBlbW9qaSBkYXRhIGFuZCBjb29yZGluYXRlc1xuICogYEVtb2ppUGlja2VyLlNlYXJjaGAgYW5kIGBFbW9qaVBpY2tlci5Db250ZW50YC5cbiAqXG4gKiBAZXhhbXBsZVxuICogPEVtb2ppUGlja2VyLlJvb3Q+XG4gKiAgIDxFbW9qaVBpY2tlci5TZWFyY2ggLz5cbiAqICAgPEVtb2ppUGlja2VyLkNvbnRlbnQgLz5cbiAqIDwvRW1vamlQaWNrZXIuUm9vdD5cbiAqL1xuZnVuY3Rpb24gRW1vamlQaWNrZXJSb290KHtcbiAgY29sdW1ucyA9IERFRkFVTFRfQ09MVU1OUyxcbiAgbG9jYWxlID0gREVGQVVMVF9MT0NBTEUsXG4gIG9uRW1vamlTZWxlY3QsXG4gIGNoaWxkcmVuLFxufTogRW1vamlQaWNrZXJSb290UHJvcHMpIHtcbiAgY29uc3QgZW1vamlEYXRhID0gdXNlUmVmPEVtb2ppRGF0YT4oKTtcbiAgY29uc3Qgc2VhcmNoID0gdXNlUmVmKFwiXCIpO1xuICBjb25zdCBbLCBzdGFydEVtb2ppc1RyYW5zaXRpb25dID0gdXNlVHJhbnNpdGlvbigpO1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZTxFbW9qaVBpY2tlckRhdGE+KCk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8RXJyb3I+KCk7XG4gIGNvbnN0IFtzZWxlY3RlZENvbHVtbkluZGV4LCBzZXRTZWxlY3RlZENvbHVtbkluZGV4XSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbc2VsZWN0ZWRSb3dJbmRleCwgc2V0U2VsZWN0ZWRSb3dJbmRleF0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW2ludGVyYWN0aW9uLCBzZXRJbnRlcmFjdGlvbl0gPSB1c2VTdGF0ZTxcbiAgICBcImtleWJvYXJkXCIgfCBcInBvaW50ZXJcIiB8IFwibm9uZVwiXG4gID4oXCJub25lXCIpO1xuXG4gIGNvbnN0IHNlbGVjdEN1cnJlbnRFbW9qaSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAob25FbW9qaVNlbGVjdCkge1xuICAgICAgY29uc3QgZW1vamkgPSBkYXRhPy5yb3dzW3NlbGVjdGVkUm93SW5kZXhdPy5bc2VsZWN0ZWRDb2x1bW5JbmRleF07XG5cbiAgICAgIGlmIChlbW9qaSkge1xuICAgICAgICBvbkVtb2ppU2VsZWN0KGVtb2ppLmVtb2ppKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtkYXRhPy5yb3dzLCBvbkVtb2ppU2VsZWN0LCBzZWxlY3RlZENvbHVtbkluZGV4LCBzZWxlY3RlZFJvd0luZGV4XSk7XG5cbiAgY29uc3QgcmVzZXRTZWxlY3Rpb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRDb2x1bW5JbmRleCgwKTtcbiAgICBzZXRTZWxlY3RlZFJvd0luZGV4KDApO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2V0UG9pbnRlclNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKFxuICAgIChjb2x1bW5JbmRleDogbnVtYmVyLCByb3dJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBzZXRJbnRlcmFjdGlvbihcInBvaW50ZXJcIik7XG4gICAgICBzZXRTZWxlY3RlZENvbHVtbkluZGV4KGNvbHVtbkluZGV4KTtcbiAgICAgIHNldFNlbGVjdGVkUm93SW5kZXgocm93SW5kZXgpO1xuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBtb3ZlU2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgKFxuICAgICAgZGlyZWN0aW9uOiBFbW9qaVBpY2tlclNlbGVjdGlvbkRpcmVjdGlvbixcbiAgICAgIGV2ZW50OiBLZXlib2FyZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+XG4gICAgKSA9PiB7XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoaW50ZXJhY3Rpb24gPT09IFwibm9uZVwiKSB7XG4gICAgICAgIHNldEludGVyYWN0aW9uKFwia2V5Ym9hcmRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0SW50ZXJhY3Rpb24oXCJrZXlib2FyZFwiKTtcblxuICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgLy8gSWYgZmlyc3QgY29sdW1uLCBtb3ZlIHRvIGxhc3QgY29sdW1uIG9mIHByZXZpb3VzIHJvdyAoaWYgYXZhaWxhYmxlKVxuICAgICAgICAvLyBPdGhlcndpc2UsIG1vdmUgdG8gcHJldmlvdXMgY29sdW1uXG4gICAgICAgIGNhc2UgXCJsZWZ0XCI6IHtcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRDb2x1bW5JbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNSb3dJbmRleCA9IHNlbGVjdGVkUm93SW5kZXggLSAxO1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNSb3cgPSBkYXRhLnJvd3NbcHJldmlvdXNSb3dJbmRleF07XG5cbiAgICAgICAgICAgIGlmIChwcmV2aW91c1Jvdykge1xuICAgICAgICAgICAgICBzZXRTZWxlY3RlZFJvd0luZGV4KHByZXZpb3VzUm93SW5kZXgpO1xuICAgICAgICAgICAgICBzZXRTZWxlY3RlZENvbHVtbkluZGV4KHByZXZpb3VzUm93Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRTZWxlY3RlZENvbHVtbkluZGV4KHNlbGVjdGVkQ29sdW1uSW5kZXggLSAxKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGxhc3QgY29sdW1uLCBtb3ZlIHRvIGZpcnN0IGNvbHVtbiBvZiBuZXh0IHJvdyAoaWYgYXZhaWxhYmxlKVxuICAgICAgICAvLyBPdGhlcndpc2UsIG1vdmUgdG8gbmV4dCBjb2x1bW5cbiAgICAgICAgY2FzZSBcInJpZ2h0XCI6IHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gZGF0YS5yb3dzW3NlbGVjdGVkUm93SW5kZXhdO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkQ29sdW1uSW5kZXggPT09IGN1cnJlbnRSb3cubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgY29uc3QgbmV4dFJvd0luZGV4ID0gc2VsZWN0ZWRSb3dJbmRleCArIDE7XG4gICAgICAgICAgICBjb25zdCBuZXh0Um93ID0gZGF0YS5yb3dzW25leHRSb3dJbmRleF07XG5cbiAgICAgICAgICAgIGlmIChuZXh0Um93KSB7XG4gICAgICAgICAgICAgIHNldFNlbGVjdGVkUm93SW5kZXgobmV4dFJvd0luZGV4KTtcbiAgICAgICAgICAgICAgc2V0U2VsZWN0ZWRDb2x1bW5JbmRleCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWRDb2x1bW5JbmRleChzZWxlY3RlZENvbHVtbkluZGV4ICsgMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlIHRvIHNhbWUgY29sdW1uIG9mIHByZXZpb3VzIHJvd1xuICAgICAgICAvLyBJZiBzYW1lIGNvbHVtbiBpcyBub3QgYXZhaWxhYmxlLCBtb3ZlIHRvIGxhc3QgY29sdW1uIG9mIHByZXZpb3VzIHJvd1xuICAgICAgICBjYXNlIFwidXBcIjoge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzUm93ID0gZGF0YS5yb3dzW3NlbGVjdGVkUm93SW5kZXggLSAxXTtcblxuICAgICAgICAgIGlmIChwcmV2aW91c1Jvdykge1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWRSb3dJbmRleChzZWxlY3RlZFJvd0luZGV4IC0gMSk7XG5cbiAgICAgICAgICAgIGlmICghcHJldmlvdXNSb3dbc2VsZWN0ZWRDb2x1bW5JbmRleF0pIHtcbiAgICAgICAgICAgICAgc2V0U2VsZWN0ZWRDb2x1bW5JbmRleChwcmV2aW91c1Jvdy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmUgdG8gc2FtZSBjb2x1bW4gb2YgbmV4dCByb3dcbiAgICAgICAgLy8gSWYgc2FtZSBjb2x1bW4gaXMgbm90IGF2YWlsYWJsZSwgbW92ZSB0byBsYXN0IGNvbHVtbiBvZiBuZXh0IHJvd1xuICAgICAgICBjYXNlIFwiZG93blwiOiB7XG4gICAgICAgICAgY29uc3QgbmV4dFJvdyA9IGRhdGEucm93c1tzZWxlY3RlZFJvd0luZGV4ICsgMV07XG5cbiAgICAgICAgICBpZiAobmV4dFJvdykge1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWRSb3dJbmRleChzZWxlY3RlZFJvd0luZGV4ICsgMSk7XG5cbiAgICAgICAgICAgIGlmICghbmV4dFJvd1tzZWxlY3RlZENvbHVtbkluZGV4XSkge1xuICAgICAgICAgICAgICBzZXRTZWxlY3RlZENvbHVtbkluZGV4KG5leHRSb3cubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtkYXRhLCBpbnRlcmFjdGlvbiwgc2VsZWN0ZWRDb2x1bW5JbmRleCwgc2VsZWN0ZWRSb3dJbmRleF1cbiAgKTtcblxuICBjb25zdCB1cGRhdGVFbW9qaXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFlbW9qaURhdGEuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0RW1vamlzVHJhbnNpdGlvbigoKSA9PiB7XG4gICAgICBzZXREYXRhKCgpID0+IHtcbiAgICAgICAgaWYgKCFlbW9qaURhdGEuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRW1vamlzID0gZmlsdGVyRW1vamlzKFxuICAgICAgICAgIGVtb2ppRGF0YS5jdXJyZW50LmVtb2ppcyxcbiAgICAgICAgICBzZWFyY2guY3VycmVudFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZUVtb2ppUGlja2VyRGF0YShcbiAgICAgICAgICBmaWx0ZXJlZEVtb2ppcyxcbiAgICAgICAgICBlbW9qaURhdGEuY3VycmVudC5jYXRlZ29yaWVzLFxuICAgICAgICAgIGNvbHVtbnNcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgcmVzZXRTZWxlY3Rpb24oKTtcbiAgICB9KTtcbiAgfSwgW2NvbHVtbnMsIHJlc2V0U2VsZWN0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlU2VhcmNoID0gdXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIHNlYXJjaC5jdXJyZW50ID0gdmFsdWU7XG4gICAgICB1cGRhdGVFbW9qaXMoKTtcbiAgICB9LFxuICAgIFt1cGRhdGVFbW9qaXNdXG4gICk7XG5cbiAgY29uc3QgaW5pdGlhbGl6ZUVtb2ppRGF0YSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChsb2NhbGU6IHN0cmluZykgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZW1vamlEYXRhLmN1cnJlbnQgPSBhd2FpdCBnZXRFbW9qaURhdGEobG9jYWxlKTtcbiAgICAgICAgdXBkYXRlRW1vamlzKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZXRFcnJvcihlcnJvciBhcyBFcnJvcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBbdXBkYXRlRW1vamlzXVxuICApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGlkbGVDYWxsYmFja0lkOiBudW1iZXI7XG4gICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZGxlQ2FsbGJhY2tJZCA9IHJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpbml0aWFsaXplRW1vamlEYXRhKGxvY2FsZSk7XG4gICAgICB9KTtcbiAgICB9LCBMT0FESU5HX01JTklNVU1fVElNRU9VVCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICBjYW5jZWxJZGxlQ2FsbGJhY2soaWRsZUNhbGxiYWNrSWQpO1xuICAgIH07XG4gIH0sIFtsb2NhbGVdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbnRlcmFjdGlvbiA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJlc2V0U2VsZWN0aW9uKCk7XG4gICAgfVxuICB9LCBbaW50ZXJhY3Rpb25dKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICByZXR1cm4gKFxuICAgIDxFbW9qaVBpY2tlckNvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7XG4gICAgICAgIGRhdGE6IGRhdGEgYXMgRW1vamlQaWNrZXJEYXRhLFxuICAgICAgICBlcnJvcjogZXJyb3IgYXMgdW5kZWZpbmVkLFxuICAgICAgICBpc0xvYWRpbmc6ICghZGF0YSAmJiAhZXJyb3IpIGFzIGZhbHNlLFxuICAgICAgICBjb2x1bW5zLFxuICAgICAgICBvblNlYXJjaDogaGFuZGxlU2VhcmNoLFxuICAgICAgICBvbkVtb2ppU2VsZWN0LFxuICAgICAgICBzZWxlY3RDdXJyZW50RW1vamksXG4gICAgICAgIHNlbGVjdGVkUm93SW5kZXgsXG4gICAgICAgIHNlbGVjdGVkQ29sdW1uSW5kZXgsXG4gICAgICAgIG1vdmVTZWxlY3Rpb24sXG4gICAgICAgIHNldFBvaW50ZXJTZWxlY3Rpb24sXG4gICAgICAgIGludGVyYWN0aW9uLFxuICAgICAgICBzZXRJbnRlcmFjdGlvbixcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRW1vamlQaWNrZXJDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBUaGUgRW1vamlQaWNrZXIgcHJpbWl0aXZlIGlzIHVuZG9jdW1lbnRlZCBmb3Igbm93IGFuZCBzdWJqZWN0IHRvIGNoYW5nZSxcbiAqIHVzZSBhdCB5b3VyIG93biByaXNrLiBJZiB5b3UgaGF2ZSBhbnkgZmVlZGJhY2sgb24gaXQsIHBsZWFzZSBsZXQgdXMga25vdyFcbiAqIFNlZSBob3cgd2UgdXNlIGl0IGluIHRoZSBkZWZhdWx0IGNvbXBvbmVudHMgdG8gbGVhcm4gaG93IHRvIHVzZSBpdDpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9saXZlYmxvY2tzL2xpdmVibG9ja3MvYmxvYi9tYWluL3BhY2thZ2VzL2xpdmVibG9ja3MtcmVhY3QtdWkvc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvRW1vamlQaWNrZXIudHN4LlxuICpcbiAqIFRoZSBzZWFyY2ggaW5wdXQgb2YgdGhlIGVtb2ppIHBpY2tlci4gSXQgYWxzbyBhZmZlY3RzIHRoZSBmb2N1cyBhbmQgc2VsZWN0aW9uXG4gKiB3aXRoaW4gYEVtb2ppUGlja2VyLkNvbnRlbnRgLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8RW1vamlQaWNrZXIuU2VhcmNoIC8+XG4gKi9cbmNvbnN0IEVtb2ppUGlja2VyU2VhcmNoID0gZm9yd2FyZFJlZjxIVE1MSW5wdXRFbGVtZW50LCBFbW9qaVBpY2tlclNlYXJjaFByb3BzPihcbiAgKHsgYXNDaGlsZCwgdmFsdWUsIGRlZmF1bHRWYWx1ZSwgb25DaGFuZ2UsIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGFzQ2hpbGQgPyBTbG90IDogXCJpbnB1dFwiO1xuICAgIGNvbnN0IHtcbiAgICAgIG9uU2VhcmNoLFxuICAgICAgc2VsZWN0Q3VycmVudEVtb2ppLFxuICAgICAgbW92ZVNlbGVjdGlvbixcbiAgICAgIGludGVyYWN0aW9uLFxuICAgICAgc2V0SW50ZXJhY3Rpb24sXG4gICAgfSA9IHVzZUVtb2ppUGlja2VyKCk7XG5cbiAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAgIChldmVudDogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgICAgb25DaGFuZ2U/LihldmVudCk7XG5cbiAgICAgICAgaWYgKGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIHNldEludGVyYWN0aW9uKHZhbHVlID8gXCJrZXlib2FyZFwiIDogXCJub25lXCIpO1xuICAgICAgICBvblNlYXJjaCh2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgW29uQ2hhbmdlLCBvblNlYXJjaCwgc2V0SW50ZXJhY3Rpb25dXG4gICAgKTtcblxuICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VDYWxsYmFjayhcbiAgICAgIChldmVudDogS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNLZXkoZXZlbnQsIFwiQXJyb3dMZWZ0XCIpKSB7XG4gICAgICAgICAgbW92ZVNlbGVjdGlvbihcImxlZnRcIiwgZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzS2V5KGV2ZW50LCBcIkFycm93UmlnaHRcIikpIHtcbiAgICAgICAgICBtb3ZlU2VsZWN0aW9uKFwicmlnaHRcIiwgZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzS2V5KGV2ZW50LCBcIkFycm93VXBcIikpIHtcbiAgICAgICAgICBtb3ZlU2VsZWN0aW9uKFwidXBcIiwgZXZlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzS2V5KGV2ZW50LCBcIkFycm93RG93blwiKSkge1xuICAgICAgICAgIG1vdmVTZWxlY3Rpb24oXCJkb3duXCIsIGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0tleShldmVudCwgXCJFbnRlclwiKSkge1xuICAgICAgICAgIGlmIChpbnRlcmFjdGlvbiAhPT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzZWxlY3RDdXJyZW50RW1vamkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbaW50ZXJhY3Rpb24sIG1vdmVTZWxlY3Rpb24sIHNlbGVjdEN1cnJlbnRFbW9qaV1cbiAgICApO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIG9uU2VhcmNoKFxuICAgICAgICB2YWx1ZSA/IFN0cmluZyh2YWx1ZSkgOiBkZWZhdWx0VmFsdWUgPyBTdHJpbmcoZGVmYXVsdFZhbHVlKSA6IFwiXCJcbiAgICAgICk7XG4gICAgfSwgW10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb21wb25lbnRcbiAgICAgICAgdHlwZT1cInNlYXJjaFwiXG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgZGVmYXVsdFZhbHVlPXtkZWZhdWx0VmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuKTtcblxuY29uc3QgZGVmYXVsdENvbnRlbnRDb21wb25lbnRzOiBFbW9qaVBpY2tlckNvbnRlbnRDb21wb25lbnRzID0ge1xuICBDYXRlZ29yeUhlYWRlcjogKHsgY2F0ZWdvcnksIC4uLnByb3BzIH0pID0+IDxkaXYgey4uLnByb3BzfT57Y2F0ZWdvcnl9PC9kaXY+LFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIFJvdzogKHsgY2hpbGRyZW4sIGF0dHJpYnV0ZXMsIC4uLnByb3BzIH0pID0+IDxkaXYgey4uLnByb3BzfT57Y2hpbGRyZW59PC9kaXY+LFxuICBFbW9qaTogKHsgZW1vamksIC4uLnByb3BzIH0pID0+IChcbiAgICA8YnV0dG9uIHsuLi5wcm9wc30+XG4gICAgICA8RW1vamlQcmltaXRpdmUgZW1vamk9e2Vtb2ppfSAvPlxuICAgIDwvYnV0dG9uPlxuICApLFxuICBMb2FkaW5nOiAocHJvcHMpID0+IDxkaXYgey4uLnByb3BzfSAvPixcbiAgRW1wdHk6IChwcm9wcykgPT4gPGRpdiB7Li4ucHJvcHN9IC8+LFxuICBHcmlkOiAocHJvcHMpID0+IDxkaXYgey4uLnByb3BzfSAvPixcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBFcnJvcjogKHsgZXJyb3IsIC4uLnByb3BzIH0pID0+IDxkaXYgey4uLnByb3BzfSAvPixcbn07XG5cbmNvbnN0IHBsYWNlaG9sZGVyUm93QXR0cmlidXRlczogRW1vamlQaWNrZXJDb250ZW50RW1vamlSb3dBdHRyaWJ1dGVzID0ge1xuICByb3dJbmRleDogLTEsXG4gIGNhdGVnb3J5Um93SW5kZXg6IC0xLFxuICBjYXRlZ29yeVJvd3NDb3VudDogMCxcbn07XG5cbi8vIEFib3V0IGBkYXRhLXRlc3RpZD17dW5kZWZpbmVkfWA6IFZpcnR1b3NvIGJha2VzIHRlc3QgSURzIGludG8gdGhlIGNvbXBvbmVudHMgd2UgcGFzc1xuLy8gdG8gaXQsIHNvIHdlIG1hbnVhbGx5IHJlbW92ZSB0aGVtLlxuXG5jb25zdCBWaXJ0dW9zb1Njcm9sbGVyID0gZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgU2Nyb2xsZXJQcm9wcz4oXG4gICh7IGNoaWxkcmVuLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiB7Li4ucHJvcHN9IHRhYkluZGV4PXstMX0gZGF0YS10ZXN0aWQ9e3VuZGVmaW5lZH0gcmVmPXtmb3J3YXJkZWRSZWZ9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG4pO1xuXG5jb25zdCBWaXJ0dW9zb1RvcExpc3QgPSBmb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBUb3BJdGVtTGlzdFByb3BzPihcbiAgKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHsuLi5wcm9wc30gZGF0YS10ZXN0aWQ9e3VuZGVmaW5lZH0gcmVmPXtmb3J3YXJkZWRSZWZ9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG4pO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBUaGUgRW1vamlQaWNrZXIgcHJpbWl0aXZlIGlzIHVuZG9jdW1lbnRlZCBmb3Igbm93IGFuZCBzdWJqZWN0IHRvIGNoYW5nZSxcbiAqIHVzZSBhdCB5b3VyIG93biByaXNrLiBJZiB5b3UgaGF2ZSBhbnkgZmVlZGJhY2sgb24gaXQsIHBsZWFzZSBsZXQgdXMga25vdyFcbiAqIFNlZSBob3cgd2UgdXNlIGl0IGluIHRoZSBkZWZhdWx0IGNvbXBvbmVudHMgdG8gbGVhcm4gaG93IHRvIHVzZSBpdDpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9saXZlYmxvY2tzL2xpdmVibG9ja3MvYmxvYi9tYWluL3BhY2thZ2VzL2xpdmVibG9ja3MtcmVhY3QtdWkvc3JjL2NvbXBvbmVudHMvaW50ZXJuYWwvRW1vamlQaWNrZXIudHN4LlxuICpcbiAqIFRoZSBtYWluIGNvbnRlbnQgb2YgdGhlIGVtb2ppIHBpY2tlciwgZWl0aGVyIGRpc3BsYXlpbmcgdGhlIGVtb2ppIGdyaWQgb3IgdmFyaW91c1xuICogYWx0ZXJuYXRpdmUgc3RhdGVzIChsb2FkaW5nLCBlbXB0eSwgYW5kIGVycm9yKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogPEVtb2ppUGlja2VyLkNvbnRlbnRcbiAqICBjb21wb25lbnRzPXt7XG4gKiAgICBMb2FkaW5nOiBFbW9qaVBpY2tlckxvYWRpbmcsXG4gKiAgICBFbXB0eTogRW1vamlQaWNrZXJFbXB0eSxcbiAqICAgIEVycm9yOiBFbW9qaVBpY2tlckVycm9yLFxuICogICAgQ2F0ZWdvcnlIZWFkZXI6IEVtb2ppUGlja2VyQ2F0ZWdvcnlIZWFkZXIsXG4gKiAgICBHcmlkOiBFbW9qaVBpY2tlckdyaWQsXG4gKiAgICBSb3c6IEVtb2ppUGlja2VyUm93LFxuICogICAgRW1vamk6IEVtb2ppUGlja2VyRW1vamksXG4gKiAgfX1cbiAqIC8+XG4gKi9cbmNvbnN0IEVtb2ppUGlja2VyQ29udGVudCA9IGZvcndhcmRSZWY8SFRNTERpdkVsZW1lbnQsIEVtb2ppUGlja2VyQ29udGVudFByb3BzPihcbiAgKHsgY29tcG9uZW50cywgYXNDaGlsZCwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gYXNDaGlsZCA/IFNsb3QgOiBcImRpdlwiO1xuICAgIGNvbnN0IHZpcnR1b3NvUmVmID0gdXNlUmVmPEdyb3VwZWRWaXJ0dW9zb0hhbmRsZT4obnVsbCk7XG4gICAgY29uc3QgcGxhY2Vob2xkZXJDb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICAgIGNvbnN0IHJvd1Njcm9sbE1hcmdpblRvcFJlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xuICAgIGNvbnN0IHJvd1Njcm9sbE1hcmdpbkJvdHRvbVJlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xuICAgIGNvbnN0IGNhdGVnb3J5SGVhZGVySGVpZ2h0UmVmID0gdXNlUmVmPG51bWJlcj4oMCk7XG4gICAgY29uc3Qge1xuICAgICAgZGF0YSxcbiAgICAgIGVycm9yLFxuICAgICAgaXNMb2FkaW5nLFxuICAgICAgY29sdW1ucyxcbiAgICAgIG9uRW1vamlTZWxlY3QsXG4gICAgICBzZWxlY3RlZENvbHVtbkluZGV4LFxuICAgICAgc2VsZWN0ZWRSb3dJbmRleCxcbiAgICAgIHNldFBvaW50ZXJTZWxlY3Rpb24sXG4gICAgICBpbnRlcmFjdGlvbixcbiAgICAgIHNldEludGVyYWN0aW9uLFxuICAgIH0gPSB1c2VFbW9qaVBpY2tlcigpO1xuICAgIGNvbnN0IHNlbGVjdGVkRW1vamkgPSB1c2VNZW1vKFxuICAgICAgKCkgPT4gZGF0YT8ucm93c1tzZWxlY3RlZFJvd0luZGV4XT8uW3NlbGVjdGVkQ29sdW1uSW5kZXhdLFxuICAgICAgW2RhdGE/LnJvd3MsIHNlbGVjdGVkQ29sdW1uSW5kZXgsIHNlbGVjdGVkUm93SW5kZXhdXG4gICAgKTtcbiAgICBjb25zdCB7IExvYWRpbmcsIEVtcHR5LCBFcnJvciwgQ2F0ZWdvcnlIZWFkZXIsIEdyaWQsIFJvdywgRW1vamkgfSA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiAoeyAuLi5kZWZhdWx0Q29udGVudENvbXBvbmVudHMsIC4uLmNvbXBvbmVudHMgfSksXG4gICAgICBbY29tcG9uZW50c11cbiAgICApO1xuICAgIGNvbnN0IFZpcnR1b3NvTGlzdCA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBmb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBWaXJ0dW9zb0xpc3RQcm9wcz4oXG4gICAgICAgICAgKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0sIGZvcndhcmRlZFJlZikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHJvbGU9XCJncmlkXCJcbiAgICAgICAgICAgICAgICBhcmlhLWNvbGNvdW50PXtjb2x1bW5zfVxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17dW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICApLFxuICAgICAgW2NvbHVtbnNdXG4gICAgKTtcbiAgICBjb25zdCBwbGFjZWhvbGRlckNvbHVtbnMgPSB1c2VNZW1vKFxuICAgICAgKCkgPT4gQXJyYXk8c3RyaW5nPihjb2x1bW5zKS5maWxsKFwi8J+Mq++4j1wiKSxcbiAgICAgIFtjb2x1bW5zXVxuICAgICk7XG5cbiAgICBjb25zdCBwcmV2ZW50RGVmYXVsdCA9IHVzZUNhbGxiYWNrKChldmVudDogU3ludGhldGljRXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgaGFuZGxlRW1vamlQb2ludGVyTGVhdmUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBpZiAoaW50ZXJhY3Rpb24gPT09IFwicG9pbnRlclwiKSB7XG4gICAgICAgIHNldEludGVyYWN0aW9uKFwibm9uZVwiKTtcbiAgICAgIH1cbiAgICB9LCBbaW50ZXJhY3Rpb24sIHNldEludGVyYWN0aW9uXSk7XG5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKCFwbGFjZWhvbGRlckNvbnRhaW5lclJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm93ID0gcGxhY2Vob2xkZXJDb250YWluZXJSZWYuY3VycmVudC5jaGlsZE5vZGVzWzBdO1xuICAgICAgY29uc3QgY2F0ZWdvcnlIZWFkZXIgPSBwbGFjZWhvbGRlckNvbnRhaW5lclJlZi5jdXJyZW50LmNoaWxkTm9kZXNbMV07XG5cbiAgICAgIGlmIChyb3cgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHJvdyk7XG5cbiAgICAgICAgcm93U2Nyb2xsTWFyZ2luVG9wUmVmLmN1cnJlbnQgPSBwYXJzZUZsb2F0KHN0eWxlLnNjcm9sbE1hcmdpblRvcCk7XG4gICAgICAgIHJvd1Njcm9sbE1hcmdpbkJvdHRvbVJlZi5jdXJyZW50ID0gcGFyc2VGbG9hdChzdHlsZS5zY3JvbGxNYXJnaW5Cb3R0b20pO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2F0ZWdvcnlIZWFkZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICBjYXRlZ29yeUhlYWRlckhlaWdodFJlZi5jdXJyZW50ID0gY2F0ZWdvcnlIZWFkZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuICAgIH0sIFtdKTtcblxuICAgIC8vIEN1c3RvbWl6ZSBgc2Nyb2xsSW50b1ZpZXdgIGJlaGF2aW9yIHRvIHRha2UgaW50byBhY2NvdW50IGNhdGVnb3J5IGhlYWRlcnMgYW5kIG1hcmdpbnNcbiAgICBjb25zdCBjYWxjdWxhdGVWaWV3TG9jYXRpb24gPSB1c2VDYWxsYmFjayhcbiAgICAgICh7XG4gICAgICAgIGl0ZW1Ub3AsXG4gICAgICAgIGl0ZW1Cb3R0b20sXG4gICAgICAgIHZpZXdwb3J0VG9wLFxuICAgICAgICB2aWV3cG9ydEJvdHRvbSxcbiAgICAgICAgbG9jYXRpb25QYXJhbXM6IHsgYmVoYXZpb3IsIGFsaWduLCAuLi5wYXJhbXMgfSxcbiAgICAgIH06IENhbGN1bGF0ZVZpZXdMb2NhdGlvblBhcmFtcykgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXRlbVRvcCAtXG4gICAgICAgICAgICAoY2F0ZWdvcnlIZWFkZXJIZWlnaHRSZWYuY3VycmVudCArIHJvd1Njcm9sbE1hcmdpblRvcFJlZi5jdXJyZW50KSA8XG4gICAgICAgICAgdmlld3BvcnRUb3BcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgICAgIGJlaGF2aW9yLFxuICAgICAgICAgICAgYWxpZ246IGFsaWduID8/IFwic3RhcnRcIixcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZW1Cb3R0b20gPiB2aWV3cG9ydEJvdHRvbSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICBiZWhhdmlvcixcbiAgICAgICAgICAgIGFsaWduOiBhbGlnbiA/PyBcImVuZFwiLFxuICAgICAgICAgICAgb2Zmc2V0OiByb3dTY3JvbGxNYXJnaW5Cb3R0b21SZWYuY3VycmVudCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgW11cbiAgICApO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChpbnRlcmFjdGlvbiA9PT0gXCJrZXlib2FyZFwiKSB7XG4gICAgICAgIHZpcnR1b3NvUmVmLmN1cnJlbnQ/LnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgICBpbmRleDogc2VsZWN0ZWRSb3dJbmRleCxcbiAgICAgICAgICBiZWhhdmlvcjogXCJhdXRvXCIsXG4gICAgICAgICAgY2FsY3VsYXRlVmlld0xvY2F0aW9uLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBbaW50ZXJhY3Rpb24sIHNlbGVjdGVkUm93SW5kZXgsIGNhbGN1bGF0ZVZpZXdMb2NhdGlvbl0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb21wb25lbnQgey4uLnByb3BzfSByZWY9e2ZvcndhcmRlZFJlZn0+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgdmlzaWJpbGl0eTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICB9fVxuICAgICAgICAgIHJlZj17cGxhY2Vob2xkZXJDb250YWluZXJSZWZ9XG4gICAgICAgID5cbiAgICAgICAgICB7LyogVmlydHVhbGl6ZWQgcm93cyBhcmUgYWJzb2x1dGVseSBwb3NpdGlvbmVkIHNvIHRoZXkgd29uJ3QgbWFrZVxuICAgICAgICAgICAgdGhlIGNvbnRhaW5lciBhdXRvbWF0aWNhbGx5IHBpY2sgdXAgdGhlaXIgd2lkdGguIFRvIGFjaGlldmVcbiAgICAgICAgICAgIGFuIGF1dG9tYXRpYyB3aWR0aCwgd2UgYWRkIGEgcmVsYXRpdmUgKGJ1dCBoaWRkZW4pIGZ1bGwgcm93LiAqL31cbiAgICAgICAgICA8Um93IGF0dHJpYnV0ZXM9e3BsYWNlaG9sZGVyUm93QXR0cmlidXRlc30+XG4gICAgICAgICAgICB7cGxhY2Vob2xkZXJDb2x1bW5zLm1hcCgocGxhY2Vob2xkZXIsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDxFbW9qaSBlbW9qaT17cGxhY2Vob2xkZXJ9IGtleT17aW5kZXh9IC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICB7LyogV2UgYWxzbyBhZGQgYSBoaWRkZW4gY2F0ZWdvcnkgaGVhZGVyIHRvIGdldCBpdHMgY29tcHV0ZWQgaGVpZ2h0LiAqL31cbiAgICAgICAgICA8Q2F0ZWdvcnlIZWFkZXIgY2F0ZWdvcnk9XCJDYXRlZ29yeVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgICAgICAgIDxMb2FkaW5nIC8+XG4gICAgICAgICkgOiBlcnJvciA/IChcbiAgICAgICAgICA8RXJyb3IgZXJyb3I9e2Vycm9yfSAvPlxuICAgICAgICApIDogZGF0YS5jb3VudCA9PT0gMCA/IChcbiAgICAgICAgICA8RW1wdHkgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8R3JpZD5cbiAgICAgICAgICAgIDxHcm91cGVkVmlydHVvc29cbiAgICAgICAgICAgICAgcmVmPXt2aXJ0dW9zb1JlZn1cbiAgICAgICAgICAgICAgY29tcG9uZW50cz17e1xuICAgICAgICAgICAgICAgIFNjcm9sbGVyOiBWaXJ0dW9zb1Njcm9sbGVyLFxuICAgICAgICAgICAgICAgIExpc3Q6IFZpcnR1b3NvTGlzdCxcbiAgICAgICAgICAgICAgICBUb3BJdGVtTGlzdDogVmlydHVvc29Ub3BMaXN0LFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBncm91cENvdW50cz17ZGF0YS5jYXRlZ29yaWVzUm93Q291bnRzfVxuICAgICAgICAgICAgICBncm91cENvbnRlbnQ9eyhncm91cEluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxDYXRlZ29yeUhlYWRlciBjYXRlZ29yeT17ZGF0YS5jYXRlZ29yaWVzW2dyb3VwSW5kZXhdfSAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGl0ZW1Db250ZW50PXsocm93SW5kZXgsIGdyb3VwSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYXRlZ29yeVJvd0luZGV4ID1cbiAgICAgICAgICAgICAgICAgIGRhdGEuY2F0ZWdvcmllc1Jvd0luZGljZXNbZ3JvdXBJbmRleF0uaW5kZXhPZihyb3dJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnlSb3dzQ291bnQgPSBkYXRhLmNhdGVnb3JpZXNSb3dDb3VudHNbZ3JvdXBJbmRleF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPFJvd1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlSb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVJvd3NDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2RhdGEucm93c1tyb3dJbmRleF0ubWFwKChlbW9qaSwgY29sdW1uSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1NlbGVjdGVkID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uICE9PSBcIm5vbmVcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb2x1bW5JbmRleCA9PT0gY29sdW1uSW5kZXggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93SW5kZXggPT09IHJvd0luZGV4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxFbW9qaVxuICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Vtb2ppLmVtb2ppfVxuICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPVwiZ3JpZGNlbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbGluZGV4PXtjb2x1bW5JbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD17aXNTZWxlY3RlZCB8fCB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0ZWQ9e2lzU2VsZWN0ZWQgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17cHJldmVudERlZmF1bHR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25Qb2ludGVyRW50ZXI9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQb2ludGVyU2VsZWN0aW9uKGNvbHVtbkluZGV4LCByb3dJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uUG9pbnRlckxlYXZlPXtoYW5kbGVFbW9qaVBvaW50ZXJMZWF2ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FbW9qaVNlbGVjdD8uKGVtb2ppLmVtb2ppKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZW1vamk9e2Vtb2ppLmVtb2ppfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgIDwvUm93PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgKX1cbiAgICAgICAge3NlbGVjdGVkRW1vamkgJiYgaW50ZXJhY3Rpb24gIT09IFwibm9uZVwiICYmIChcbiAgICAgICAgICA8ZGl2IGFyaWEtbGl2ZT1cInBvbGl0ZVwiIHN0eWxlPXt2aXN1YWxseUhpZGRlbn0+XG4gICAgICAgICAgICB7c2VsZWN0ZWRFbW9qaS5uYW1lfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9Db21wb25lbnQ+XG4gICAgKTtcbiAgfVxuKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBFbW9qaVBpY2tlclJvb3QuZGlzcGxheU5hbWUgPSBFTU9KSVBJQ0tFUl9ST09UX05BTUU7XG4gIEVtb2ppUGlja2VyQ29udGVudC5kaXNwbGF5TmFtZSA9IEVNT0pJUElDS0VSX0NPTlRFTlRfTkFNRTtcbiAgRW1vamlQaWNrZXJTZWFyY2guZGlzcGxheU5hbWUgPSBFTU9KSVBJQ0tFUl9TRUFSQ0hfTkFNRTtcbn1cblxuLy8gTk9URTogRXZlcnkgZXhwb3J0IGZyb20gdGhpcyBmaWxlIHdpbGwgYmUgYXZhaWxhYmxlIHB1YmxpY2x5IGFzIEVtb2ppUGlja2VyLipcbmV4cG9ydCB7XG4gIEVtb2ppUGlja2VyQ29udGVudCBhcyBDb250ZW50LFxuICBFbW9qaVBpY2tlclJvb3QgYXMgUm9vdCxcbiAgRW1vamlQaWNrZXJTZWFyY2ggYXMgU2VhcmNoLFxufTtcbiJdLCJuYW1lcyI6WyJERUZBVUxUX0NPTFVNTlMiLCJERUZBVUxUX0xPQ0FMRSIsIkxPQURJTkdfTUlOSU1VTV9USU1FT1VUIiwiRU1PSklQSUNLRVJfUk9PVF9OQU1FIiwiRU1PSklQSUNLRVJfQ09OVEVOVF9OQU1FIiwiRU1PSklQSUNLRVJfU0VBUkNIX05BTUUiLCJFbW9qaVBpY2tlclJvb3QiLCJjb2x1bW5zIiwibG9jYWxlIiwib25FbW9qaVNlbGVjdCIsImNoaWxkcmVuIiwiZW1vamlEYXRhIiwidXNlUmVmIiwic2VhcmNoIiwic3RhcnRFbW9qaXNUcmFuc2l0aW9uIiwidXNlVHJhbnNpdGlvbiIsImRhdGEiLCJzZXREYXRhIiwidXNlU3RhdGUiLCJlcnJvciIsInNldEVycm9yIiwic2VsZWN0ZWRDb2x1bW5JbmRleCIsInNldFNlbGVjdGVkQ29sdW1uSW5kZXgiLCJzZWxlY3RlZFJvd0luZGV4Iiwic2V0U2VsZWN0ZWRSb3dJbmRleCIsImludGVyYWN0aW9uIiwic2V0SW50ZXJhY3Rpb24iLCJzZWxlY3RDdXJyZW50RW1vamkiLCJ1c2VDYWxsYmFjayIsImVtb2ppIiwicm93cyIsInJlc2V0U2VsZWN0aW9uIiwic2V0UG9pbnRlclNlbGVjdGlvbiIsImNvbHVtbkluZGV4Iiwicm93SW5kZXgiLCJtb3ZlU2VsZWN0aW9uIiwiZGlyZWN0aW9uIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInByZXZpb3VzUm93SW5kZXgiLCJwcmV2aW91c1JvdyIsImxlbmd0aCIsImN1cnJlbnRSb3ciLCJuZXh0Um93SW5kZXgiLCJuZXh0Um93IiwidXBkYXRlRW1vamlzIiwiY3VycmVudCIsImZpbHRlcmVkRW1vamlzIiwiZmlsdGVyRW1vamlzIiwiZW1vamlzIiwiZ2VuZXJhdGVFbW9qaVBpY2tlckRhdGEiLCJjYXRlZ29yaWVzIiwiaGFuZGxlU2VhcmNoIiwidmFsdWUiLCJpbml0aWFsaXplRW1vamlEYXRhIiwibG9jYWxlMiIsImdldEVtb2ppRGF0YSIsImVycm9yMiIsInVzZUVmZmVjdCIsImlkbGVDYWxsYmFja0lkIiwidGltZW91dElkIiwic2V0VGltZW91dCIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJSZWFjdF9fZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJFbW9qaVBpY2tlckNvbnRleHQiLCJQcm92aWRlciIsImlzTG9hZGluZyIsIm9uU2VhcmNoIiwiRW1vamlQaWNrZXJTZWFyY2giLCJmb3J3YXJkUmVmIiwiYXNDaGlsZCIsImRlZmF1bHRWYWx1ZSIsIm9uQ2hhbmdlIiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCJDb21wb25lbnQiLCJTbG90IiwidXNlRW1vamlQaWNrZXIiLCJoYW5kbGVDaGFuZ2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJ2YWx1ZTIiLCJ0YXJnZXQiLCJoYW5kbGVLZXlEb3duIiwiaXNLZXkiLCJTdHJpbmciLCJ0eXBlIiwib25LZXlEb3duIiwicmVmIiwiZGVmYXVsdENvbnRlbnRDb21wb25lbnRzIiwiQ2F0ZWdvcnlIZWFkZXIiLCJjYXRlZ29yeSIsIlJvdyIsImF0dHJpYnV0ZXMiLCJFbW9qaSIsIkxvYWRpbmciLCJFbXB0eSIsIkdyaWQiLCJFcnJvciIsInBsYWNlaG9sZGVyUm93QXR0cmlidXRlcyIsImNhdGVnb3J5Um93SW5kZXgiLCJjYXRlZ29yeVJvd3NDb3VudCIsIlZpcnR1b3NvU2Nyb2xsZXIiLCJ0YWJJbmRleCIsIlZpcnR1b3NvVG9wTGlzdCIsIkVtb2ppUGlja2VyQ29udGVudCIsImNvbXBvbmVudHMiLCJ2aXJ0dW9zb1JlZiIsInBsYWNlaG9sZGVyQ29udGFpbmVyUmVmIiwicm93U2Nyb2xsTWFyZ2luVG9wUmVmIiwicm93U2Nyb2xsTWFyZ2luQm90dG9tUmVmIiwiY2F0ZWdvcnlIZWFkZXJIZWlnaHRSZWYiLCJzZWxlY3RlZEVtb2ppIiwidXNlTWVtbyIsIlZpcnR1b3NvTGlzdCIsInByb3BzMiIsImZvcndhcmRlZFJlZjIiLCJyb2xlIiwicGxhY2Vob2xkZXJDb2x1bW5zIiwiQXJyYXkiLCJmaWxsIiwiaGFuZGxlRW1vamlQb2ludGVyTGVhdmUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJyb3ciLCJjaGlsZE5vZGVzIiwiY2F0ZWdvcnlIZWFkZXIiLCJIVE1MRWxlbWVudCIsInN0eWxlIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhcnNlRmxvYXQiLCJzY3JvbGxNYXJnaW5Ub3AiLCJzY3JvbGxNYXJnaW5Cb3R0b20iLCJvZmZzZXRIZWlnaHQiLCJjYWxjdWxhdGVWaWV3TG9jYXRpb24iLCJpdGVtVG9wIiwiaXRlbUJvdHRvbSIsInZpZXdwb3J0VG9wIiwidmlld3BvcnRCb3R0b20iLCJsb2NhdGlvblBhcmFtcyIsImJlaGF2aW9yIiwiYWxpZ24iLCJwYXJhbXMiLCJvZmZzZXQiLCJzY3JvbGxJbnRvVmlldyIsImluZGV4IiwidmlzaWJpbGl0eSIsImhlaWdodCIsIm1hcCIsInBsYWNlaG9sZGVyIiwia2V5IiwiY291bnQiLCJHcm91cGVkVmlydHVvc28iLCJTY3JvbGxlciIsIkxpc3QiLCJUb3BJdGVtTGlzdCIsImdyb3VwQ291bnRzIiwiY2F0ZWdvcmllc1Jvd0NvdW50cyIsImdyb3VwQ29udGVudCIsImdyb3VwSW5kZXgiLCJpdGVtQ29udGVudCIsImNhdGVnb3JpZXNSb3dJbmRpY2VzIiwiaW5kZXhPZiIsImlzU2VsZWN0ZWQiLCJvbk1vdXNlRG93biIsIm9uUG9pbnRlckVudGVyIiwib25Qb2ludGVyTGVhdmUiLCJvbkNsaWNrIiwic3RvcFByb3BhZ2F0aW9uIiwidmlzdWFsbHlIaWRkZW4iLCJuYW1lIiwicHJvY2VzcyIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/utils.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/utils.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterEmojis: () => (/* binding */ filterEmojis),\n/* harmony export */   generateEmojiPickerData: () => (/* binding */ generateEmojiPickerData),\n/* harmony export */   getEmojiData: () => (/* binding */ getEmojiData)\n/* harmony export */ });\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs\");\n/* harmony import */ var _utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/capitalize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/capitalize.mjs\");\n/* harmony import */ var _utils_chunk_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/chunk.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/chunk.mjs\");\n\n\n\n\nconst EMOJIBASE_VERSION = \"15.3.0\";\nconst EMOJIBASE_CDN_URL = `https://cdn.jsdelivr.net/npm/emojibase-data@${EMOJIBASE_VERSION}`;\nconst EMOJIBASE_EMOJIS_URL = (locale) => `${EMOJIBASE_CDN_URL}/${locale}/data.json`;\nconst EMOJIBASE_MESSAGES_URL = (locale) => `${EMOJIBASE_CDN_URL}/${locale}/messages.json`;\nconst EMOJIBASE_LOCALES = [\n  \"bn\",\n  \"da\",\n  \"de\",\n  \"en\",\n  \"en-gb\",\n  \"es\",\n  \"es-mx\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"hi\",\n  \"hu\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"ms\",\n  \"nb\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"ru\",\n  \"sv\",\n  \"th\",\n  \"uk\",\n  \"zh\",\n  \"zh-hant\"\n];\nconst EMOJIBASE_DEFAULT_LOCALE = \"en\";\nconst CACHE_EMOJI_DATA_KEY = (locale) => `lb-emoji-data-${locale}`;\nconst CACHE_EMOJI_METADATA_KEY = (locale) => `lb-emoji-metadata-${locale}`;\nconst CACHE_EMOJI_SESSION_METADATA_KEY = \"lb-emoji-metadata\";\nconst EMOJI_DETECTION_CANVAS_WIDTH = 20;\nconst EMOJI_DETECTION_CANVAS_HEIGHT = 25;\nconst EMOJI_DETECTION_COUNTRY_FLAG = \"\\u{1F1EB}\\u{1F1F7}\";\nfunction generateRangeIndices(start, end) {\n  const range = [];\n  for (let i = start; i <= end; i++) {\n    range.push(i);\n  }\n  return range;\n}\nfunction getStorageItem(storage, key) {\n  const item = storage.getItem(key);\n  return item ? JSON.parse(item) : null;\n}\nfunction setStorageItem(storage, key, value) {\n  storage.setItem(key, JSON.stringify(value));\n}\nasync function fetchEtag(url) {\n  try {\n    const response = await fetch(url, { method: \"HEAD\" });\n    return response.headers.get(\"etag\");\n  } catch (error) {\n    return null;\n  }\n}\nfunction getEmojibaseSupportedLocale(locale) {\n  return EMOJIBASE_LOCALES.includes(locale) ? locale : EMOJIBASE_DEFAULT_LOCALE;\n}\nasync function fetchEmojibaseData(locale) {\n  const [{ emojis, emojisEtag }, { messages, messagesEtag }] = await Promise.all([\n    fetch(EMOJIBASE_EMOJIS_URL(locale)).then(async (response) => {\n      return {\n        emojis: await response.json(),\n        emojisEtag: response.headers.get(\"etag\")\n      };\n    }),\n    fetch(EMOJIBASE_MESSAGES_URL(locale)).then(async (response) => {\n      return {\n        messages: await response.json(),\n        messagesEtag: response.headers.get(\"etag\")\n      };\n    })\n  ]);\n  return {\n    emojis,\n    messages,\n    emojisEtag,\n    messagesEtag\n  };\n}\nasync function fetchEmojibaseEtags(locale) {\n  const [emojisEtag, messagesEtag] = await Promise.all([\n    fetchEtag(EMOJIBASE_EMOJIS_URL(locale)),\n    fetchEtag(EMOJIBASE_MESSAGES_URL(locale))\n  ]);\n  return {\n    emojisEtag,\n    messagesEtag\n  };\n}\nasync function fetchEmojiData(locale) {\n  const { emojis, emojisEtag, messages, messagesEtag } = await fetchEmojibaseData(locale);\n  const countryFlagsSubgroup = messages.subgroups.find(\n    (subgroup) => subgroup.key === \"subdivision-flag\"\n  );\n  const filteredGroups = messages.groups.filter(\n    (group) => group.key !== \"component\"\n  );\n  const filteredEmojis = emojis.filter((emoji) => {\n    return \"group\" in emoji;\n  });\n  const categories = filteredGroups.map((group) => ({\n    key: group.order,\n    name: (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__.capitalize)(group.message)\n  }));\n  const skinTones = messages.skinTones.map((skinTone) => ({\n    key: skinTone.key,\n    name: (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__.capitalize)(skinTone.message)\n  }));\n  const compactEmojis = filteredEmojis.map((emoji) => {\n    const compactEmoji = {\n      emoji: emoji.emoji,\n      category: emoji.group,\n      version: emoji.version,\n      name: (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_0__.capitalize)(emoji.label),\n      tags: emoji.tags\n    };\n    if (countryFlagsSubgroup && emoji.subgroup === countryFlagsSubgroup.order) {\n      compactEmoji.countryFlag = true;\n    }\n    return compactEmoji;\n  });\n  const emojiData = {\n    emojis: compactEmojis,\n    categories,\n    skinTones\n  };\n  setStorageItem(\n    localStorage,\n    CACHE_EMOJI_DATA_KEY(locale),\n    emojiData\n  );\n  setStorageItem(\n    localStorage,\n    CACHE_EMOJI_METADATA_KEY(locale),\n    {\n      emojisEtag,\n      messagesEtag\n    }\n  );\n  return emojiData;\n}\nfunction detectEmojiSupport(canvasContext, emoji) {\n  canvasContext.clearRect(\n    0,\n    0,\n    EMOJI_DETECTION_CANVAS_WIDTH * 2,\n    EMOJI_DETECTION_CANVAS_HEIGHT\n  );\n  canvasContext.fillStyle = \"#f00\";\n  canvasContext.fillText(emoji, 0, 22);\n  canvasContext.fillStyle = \"#00f\";\n  canvasContext.fillText(emoji, EMOJI_DETECTION_CANVAS_WIDTH, 22);\n  const pixels = canvasContext.getImageData(\n    0,\n    0,\n    EMOJI_DETECTION_CANVAS_WIDTH,\n    EMOJI_DETECTION_CANVAS_HEIGHT\n  ).data;\n  const pixelCount = pixels.length;\n  let i = 0;\n  for (; i < pixelCount && !pixels[i + 3]; i += 4)\n    ;\n  if (i >= pixelCount) {\n    return false;\n  }\n  const x = EMOJI_DETECTION_CANVAS_WIDTH + i / 4 % EMOJI_DETECTION_CANVAS_WIDTH;\n  const y = Math.floor(i / 4 / EMOJI_DETECTION_CANVAS_WIDTH);\n  const pixel = canvasContext.getImageData(x, y, 1, 1).data;\n  if (pixels[i] !== pixel[0] || pixels[i + 2] !== pixel[2]) {\n    return false;\n  }\n  if (canvasContext.measureText(emoji).width >= EMOJI_DETECTION_CANVAS_WIDTH) {\n    return false;\n  }\n  return true;\n}\nfunction getEmojiFontFamily() {\n  try {\n    const element = document.createElement(\"span\");\n    element.style.display = \"none\";\n    element.dataset.emoji = \"\";\n    document.body.appendChild(element);\n    const computedFontFamily = window.getComputedStyle(element).fontFamily;\n    document.body.removeChild(element);\n    return computedFontFamily;\n  } catch {\n    return _constants_mjs__WEBPACK_IMPORTED_MODULE_1__.EMOJI_FONT_FAMILY;\n  }\n}\nfunction getEmojiSessionMetadata(emojis) {\n  const versions = /* @__PURE__ */ new Map();\n  for (const emoji of emojis) {\n    if (!versions.has(emoji.version)) {\n      versions.set(emoji.version, emoji.emoji);\n    }\n  }\n  const descendingVersions = [...versions.keys()].sort((a, b) => b - a);\n  const canvasContext = document.createElement(\"canvas\").getContext(\"2d\", { willReadFrequently: true });\n  if (!canvasContext) {\n    return { emojiVersion: descendingVersions[0], countryFlags: true };\n  }\n  canvasContext.font = `${Math.floor(\n    EMOJI_DETECTION_CANVAS_HEIGHT / 2\n  )}px ${getEmojiFontFamily()}`;\n  canvasContext.textBaseline = \"top\";\n  canvasContext.canvas.width = EMOJI_DETECTION_CANVAS_WIDTH * 2;\n  canvasContext.canvas.height = EMOJI_DETECTION_CANVAS_HEIGHT;\n  const supportsCountryFlags = detectEmojiSupport(\n    canvasContext,\n    EMOJI_DETECTION_COUNTRY_FLAG\n  );\n  for (const version of descendingVersions) {\n    const emoji = versions.get(version);\n    const isSupported = detectEmojiSupport(canvasContext, emoji);\n    if (isSupported) {\n      return {\n        emojiVersion: version,\n        countryFlags: supportsCountryFlags\n      };\n    }\n  }\n  return {\n    emojiVersion: descendingVersions[0],\n    countryFlags: supportsCountryFlags\n  };\n}\nasync function getEmojiData(locale) {\n  const emojibaseLocale = getEmojibaseSupportedLocale(locale);\n  const sessionMetadata = getStorageItem(\n    sessionStorage,\n    CACHE_EMOJI_SESSION_METADATA_KEY\n  );\n  const cachedData = getStorageItem(\n    localStorage,\n    CACHE_EMOJI_DATA_KEY(emojibaseLocale)\n  );\n  let data;\n  if (cachedData) {\n    if (sessionMetadata) {\n      data = cachedData;\n    } else {\n      const { emojisEtag, messagesEtag } = await fetchEmojibaseEtags(emojibaseLocale);\n      const cachedMetadata = getStorageItem(\n        localStorage,\n        CACHE_EMOJI_METADATA_KEY(emojibaseLocale)\n      );\n      if (cachedMetadata && emojisEtag === cachedMetadata.emojisEtag && messagesEtag === cachedMetadata.messagesEtag) {\n        data = cachedData;\n      } else {\n        data = await fetchEmojiData(emojibaseLocale);\n      }\n    }\n  } else {\n    data = await fetchEmojiData(emojibaseLocale);\n  }\n  const newSessionMetadata = sessionMetadata ?? getEmojiSessionMetadata(data.emojis);\n  setStorageItem(\n    sessionStorage,\n    CACHE_EMOJI_SESSION_METADATA_KEY,\n    newSessionMetadata\n  );\n  const filteredEmojis = data.emojis.filter((emoji) => {\n    const isSupportedVersion = emoji.version <= newSessionMetadata.emojiVersion;\n    return emoji.countryFlag ? isSupportedVersion && newSessionMetadata.countryFlags : isSupportedVersion;\n  });\n  return {\n    emojis: filteredEmojis,\n    categories: data.categories,\n    skinTones: data.skinTones\n  };\n}\nfunction filterEmojis(emojis, search) {\n  if (!search) {\n    return emojis;\n  }\n  const searchText = search.toLowerCase().trim();\n  return emojis.filter(\n    (emoji) => emoji.name.toLowerCase().includes(searchText) || emoji.tags?.some((tag) => tag.toLowerCase().includes(searchText))\n  );\n}\nfunction generateEmojiPickerData(emojis, categories, columns) {\n  let currentIndex = 0;\n  const rows = [];\n  const indexedEmojis = emojis.map((emoji, index) => ({ ...emoji, index }));\n  const categoriesRowCounts = [];\n  const categoriesRowIndices = [];\n  const categoriesNames = [];\n  const categorizedEmojis = categories.map((category) => ({\n    ...category,\n    emojis: indexedEmojis.filter((emoji) => emoji.category === category.key)\n  })).filter((category) => category.emojis.length > 0);\n  for (const category of categorizedEmojis) {\n    const categoryRows = (0,_utils_chunk_mjs__WEBPACK_IMPORTED_MODULE_2__.chunk)(category.emojis, columns);\n    const nextIndex = currentIndex + categoryRows.length;\n    rows.push(...categoryRows);\n    categoriesNames.push(category.name);\n    categoriesRowCounts.push(categoryRows.length);\n    categoriesRowIndices.push(\n      generateRangeIndices(currentIndex, nextIndex - 1)\n    );\n    currentIndex = nextIndex;\n  }\n  return {\n    count: emojis.length,\n    rows,\n    categories: categoriesNames,\n    categoriesRowCounts,\n    categoriesRowIndices\n  };\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/EmojiPicker/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Timestamp.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/Timestamp.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Timestamp: () => (/* binding */ Timestamp)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/capitalize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/capitalize.mjs\");\n/* harmony import */ var _utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/intl.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/intl.mjs\");\n/* harmony import */ var _utils_use_interval_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/use-interval.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-interval.mjs\");\n/* harmony import */ var _utils_use_rerender_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/use-rerender.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-rerender.mjs\");\n/* __next_internal_client_entry_do_not_use__ Timestamp auto */ \n\n\n\n\n\nconst DYNAMIC_DATE_THRESHOLD = 3 * 24 * 60 * 60 * 1e3;\nconst RENDER_INTERVAL = 30 * 1e3;\nconst TIMESTAMP_NAME = \"Timestamp\";\nconst relativeUnits = {\n    seconds: 60,\n    minutes: 60,\n    hours: 24,\n    days: 7,\n    weeks: 4.34524,\n    months: 12\n};\nfunction formatVerboseDate(date, locale) {\n    const formatter = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.dateTimeFormat)(locale, {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\"\n    });\n    return (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__.capitalize)(formatter.format(date));\n}\nfunction formatShortDate(date, locale) {\n    const formatter = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.dateTimeFormat)(locale, {\n        month: \"short\",\n        day: \"numeric\"\n    });\n    return (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__.capitalize)(formatter.format(date));\n}\nconst localesWithBrokenNarrowRelativeFormatting = [\n    \"br\",\n    \"fr\",\n    \"nb\",\n    \"nn\",\n    \"no\",\n    \"ro\",\n    \"sv\"\n];\nfunction formatRelativeDate(date, locale) {\n    let resolvedLocale;\n    if (locale) {\n        resolvedLocale = locale;\n    } else {\n        const formatter2 = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.relativeTimeFormat)();\n        resolvedLocale = formatter2.resolvedOptions().locale;\n    }\n    const isBrokenWhenNarrow = localesWithBrokenNarrowRelativeFormatting.some((locale2)=>resolvedLocale === locale2 || resolvedLocale.startsWith(`${locale2}-`));\n    const formatter = (0,_utils_intl_mjs__WEBPACK_IMPORTED_MODULE_1__.relativeTimeFormat)(resolvedLocale, {\n        style: isBrokenWhenNarrow ? \"short\" : \"narrow\",\n        numeric: \"auto\"\n    });\n    let difference = (date.getTime() - Date.now()) / 1e3;\n    if (difference > -relativeUnits.seconds && difference < relativeUnits.seconds) {\n        return formatter.format(0, \"seconds\");\n    }\n    for (const [unit, length] of Object.entries(relativeUnits)){\n        if (Math.abs(difference) < length) {\n            return formatter.format(Math.round(difference), unit);\n        }\n        difference /= length;\n    }\n    return (0,_utils_capitalize_mjs__WEBPACK_IMPORTED_MODULE_2__.capitalize)(formatter.format(Math.round(difference), \"years\"));\n}\nfunction formatDynamicDate(date, locale) {\n    return date.getTime() > Date.now() - DYNAMIC_DATE_THRESHOLD ? formatRelativeDate(date, locale) : formatShortDate(date, locale);\n}\nconst Timestamp = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ date, locale, children: renderChildren = formatDynamicDate, title: renderTitle = formatVerboseDate, dateTime, interval = RENDER_INTERVAL, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__.Slot : \"time\";\n    const [rerender, key] = (0,_utils_use_rerender_mjs__WEBPACK_IMPORTED_MODULE_4__.useRerender)();\n    const parsedDate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new Date(date), [\n        date\n    ]);\n    const normalizedDate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>parsedDate.toISOString(), [\n        parsedDate\n    ]);\n    const title = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof renderTitle === \"function\" ? renderTitle(parsedDate, locale) : renderTitle, [\n        renderTitle,\n        parsedDate,\n        key\n    ]);\n    const children = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof renderChildren === \"function\" ? renderChildren(parsedDate, locale) : renderChildren, [\n        renderChildren,\n        parsedDate,\n        key\n    ]);\n    (0,_utils_use_interval_mjs__WEBPACK_IMPORTED_MODULE_5__.useInterval)(rerender, interval);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        ...props,\n        ref: forwardedRef,\n        dateTime: dateTime ?? normalizedDate,\n        title\n    }, children);\n});\nif (true) {\n    Timestamp.displayName = TIMESTAMP_NAME;\n}\n //# sourceMappingURL=Timestamp.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/Timestamp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/internal/Emoji.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/primitives/internal/Emoji.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emoji: () => (/* binding */ Emoji)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/constants.mjs\");\n\n\n\n\nconst Emoji = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  ({ emoji, style, asChild, ...props }, forwardedRef) => {\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_1__.Slot : \"span\";\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n      role: \"img\",\n      \"aria-label\": emoji,\n      \"data-emoji\": emoji,\n      style: {\n        ...style,\n        fontFamily: _constants_mjs__WEBPACK_IMPORTED_MODULE_2__.EMOJI_FONT_FAMILY,\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"1em\",\n        whiteSpace: \"nowrap\"\n      },\n      ...props,\n      ref: forwardedRef\n    }, emoji);\n  }\n);\n\n\n//# sourceMappingURL=Emoji.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL2ludGVybmFsL0Vtb2ppLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBQ087QUFDSzs7QUFFeEQsY0FBYyxpREFBVTtBQUN4QixLQUFLLGlDQUFpQztBQUN0QyxnQ0FBZ0Msc0RBQUk7QUFDcEMsMkJBQTJCLGdEQUE0QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZEQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9wcmltaXRpdmVzL2ludGVybmFsL0Vtb2ppLm1qcz9lZmIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNsb3QgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3Qtc2xvdCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVNT0pJX0ZPTlRfRkFNSUxZIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLm1qcyc7XG5cbmNvbnN0IEVtb2ppID0gZm9yd2FyZFJlZihcbiAgKHsgZW1vamksIHN0eWxlLCBhc0NoaWxkLCAuLi5wcm9wcyB9LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgICBjb25zdCBDb21wb25lbnQgPSBhc0NoaWxkID8gU2xvdCA6IFwic3BhblwiO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHtcbiAgICAgIHJvbGU6IFwiaW1nXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogZW1vamksXG4gICAgICBcImRhdGEtZW1vamlcIjogZW1vamksXG4gICAgICBzdHlsZToge1xuICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgZm9udEZhbWlseTogRU1PSklfRk9OVF9GQU1JTFksXG4gICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWZsZXhcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIHdpZHRoOiBcIjFlbVwiLFxuICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiXG4gICAgICB9LFxuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgIH0sIGVtb2ppKTtcbiAgfVxuKTtcblxuZXhwb3J0IHsgRW1vamkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVtb2ppLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/primitives/internal/Emoji.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/shared.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/shared.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCurrentUserId: () => (/* binding */ useCurrentUserId),\n/* harmony export */   useMentionSuggestions: () => (/* binding */ useMentionSuggestions)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @liveblocks/react */ \"(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n\n\n\n\n\nconst MENTION_SUGGESTIONS_DEBOUNCE = 500;\nconst _cachesByClient = /* @__PURE__ */ new WeakMap();\nfunction getMentionSuggestionsCacheForClient(client) {\n  let cache = _cachesByClient.get(client);\n  if (!cache) {\n    cache = /* @__PURE__ */ new Map();\n    _cachesByClient.set(client, cache);\n  }\n  return cache;\n}\nfunction useMentionSuggestions(search) {\n  const client = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_2__.useClient)();\n  const room = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_2__._useRoom)();\n  const [mentionSuggestions, setMentionSuggestions] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n  const lastInvokedAt = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const resolveMentionSuggestions = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].resolveMentionSuggestions;\n    if (search === void 0 || !resolveMentionSuggestions) {\n      return;\n    }\n    const resolveMentionSuggestionsArgs = { text: search, roomId: room.id };\n    const mentionSuggestionsCacheKey = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(resolveMentionSuggestionsArgs);\n    let debounceTimeout;\n    let isCanceled = false;\n    const mentionSuggestionsCache = getMentionSuggestionsCacheForClient(client);\n    const getMentionSuggestions = async () => {\n      try {\n        lastInvokedAt.current = performance.now();\n        const mentionSuggestions2 = await resolveMentionSuggestions(\n          resolveMentionSuggestionsArgs\n        );\n        if (!isCanceled) {\n          setMentionSuggestions(mentionSuggestions2);\n          mentionSuggestionsCache.set(\n            mentionSuggestionsCacheKey,\n            mentionSuggestions2\n          );\n        }\n      } catch (error) {\n        console.error(error?.message);\n      }\n    };\n    if (mentionSuggestionsCache.has(mentionSuggestionsCacheKey)) {\n      setMentionSuggestions(\n        mentionSuggestionsCache.get(mentionSuggestionsCacheKey)\n      );\n    } else if (!lastInvokedAt.current || Math.abs(performance.now() - lastInvokedAt.current) > MENTION_SUGGESTIONS_DEBOUNCE) {\n      void getMentionSuggestions();\n    } else {\n      debounceTimeout = window.setTimeout(() => {\n        void getMentionSuggestions();\n      }, MENTION_SUGGESTIONS_DEBOUNCE);\n    }\n    return () => {\n      isCanceled = true;\n      window.clearTimeout(debounceTimeout);\n    };\n  }, [client, room.id, search]);\n  return mentionSuggestions;\n}\nfunction useCurrentUserIdFromRoom() {\n  return (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_2__._useSelf)((user) => typeof user.id === \"string\" ? user.id : null);\n}\nfunction useCurrentUserIdFromClient_withClient(client) {\n  const currentUserIdStore = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].currentUserIdStore;\n  return (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(\n    currentUserIdStore.subscribe,\n    currentUserIdStore.get,\n    currentUserIdStore.get\n  );\n}\nfunction useCurrentUserId() {\n  const client = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_liveblocks_react__WEBPACK_IMPORTED_MODULE_2__.ClientContext);\n  const room = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_liveblocks_react__WEBPACK_IMPORTED_MODULE_2__.RoomContext);\n  if (room !== null) {\n    return useCurrentUserIdFromRoom();\n  } else if (client !== null) {\n    return useCurrentUserIdFromClient_withClient(client);\n  } else {\n    (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.raise)(\n      \"LiveblocksProvider or RoomProvider are missing from the React tree.\"\n    );\n  }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zaGFyZWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErRDtBQUM2QjtBQUN6QztBQUMwQjs7QUFFN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw0REFBUztBQUMxQixlQUFlLDJEQUFPO0FBQ3RCLHNEQUFzRCwyQ0FBdUI7QUFDN0Usd0JBQXdCLHlDQUFxQjtBQUM3QyxFQUFFLDRDQUF3QjtBQUMxQiw2Q0FBNkMsdURBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDLHVDQUF1QywyREFBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsU0FBUywyREFBTztBQUNoQjtBQUNBO0FBQ0Esb0NBQW9DLHVEQUFTO0FBQzdDLFNBQVMsMkZBQW9CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpREFBVSxDQUFDLDREQUFhO0FBQ3pDLGVBQWUsaURBQVUsQ0FBQywwREFBVztBQUNyQztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKLElBQUksdURBQUs7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFbUQ7QUFDbkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zaGFyZWQubWpzP2VjMTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga0ludGVybmFsLCBzdHJpbmdpZnksIHJhaXNlIH0gZnJvbSAnQGxpdmVibG9ja3MvY29yZSc7XG5pbXBvcnQgeyB1c2VDbGllbnQsIHVzZVJvb20sIENsaWVudENvbnRleHQsIFJvb21Db250ZXh0LCB1c2VTZWxmIH0gZnJvbSAnQGxpdmVibG9ja3MvcmVhY3QnO1xuaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanMnO1xuXG5jb25zdCBNRU5USU9OX1NVR0dFU1RJT05TX0RFQk9VTkNFID0gNTAwO1xuY29uc3QgX2NhY2hlc0J5Q2xpZW50ID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBnZXRNZW50aW9uU3VnZ2VzdGlvbnNDYWNoZUZvckNsaWVudChjbGllbnQpIHtcbiAgbGV0IGNhY2hlID0gX2NhY2hlc0J5Q2xpZW50LmdldChjbGllbnQpO1xuICBpZiAoIWNhY2hlKSB7XG4gICAgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIF9jYWNoZXNCeUNsaWVudC5zZXQoY2xpZW50LCBjYWNoZSk7XG4gIH1cbiAgcmV0dXJuIGNhY2hlO1xufVxuZnVuY3Rpb24gdXNlTWVudGlvblN1Z2dlc3Rpb25zKHNlYXJjaCkge1xuICBjb25zdCBjbGllbnQgPSB1c2VDbGllbnQoKTtcbiAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgY29uc3QgW21lbnRpb25TdWdnZXN0aW9ucywgc2V0TWVudGlvblN1Z2dlc3Rpb25zXSA9IFJlYWN0X19kZWZhdWx0LnVzZVN0YXRlKCk7XG4gIGNvbnN0IGxhc3RJbnZva2VkQXQgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoKTtcbiAgUmVhY3RfX2RlZmF1bHQudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCByZXNvbHZlTWVudGlvblN1Z2dlc3Rpb25zID0gY2xpZW50W2tJbnRlcm5hbF0ucmVzb2x2ZU1lbnRpb25TdWdnZXN0aW9ucztcbiAgICBpZiAoc2VhcmNoID09PSB2b2lkIDAgfHwgIXJlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZU1lbnRpb25TdWdnZXN0aW9uc0FyZ3MgPSB7IHRleHQ6IHNlYXJjaCwgcm9vbUlkOiByb29tLmlkIH07XG4gICAgY29uc3QgbWVudGlvblN1Z2dlc3Rpb25zQ2FjaGVLZXkgPSBzdHJpbmdpZnkocmVzb2x2ZU1lbnRpb25TdWdnZXN0aW9uc0FyZ3MpO1xuICAgIGxldCBkZWJvdW5jZVRpbWVvdXQ7XG4gICAgbGV0IGlzQ2FuY2VsZWQgPSBmYWxzZTtcbiAgICBjb25zdCBtZW50aW9uU3VnZ2VzdGlvbnNDYWNoZSA9IGdldE1lbnRpb25TdWdnZXN0aW9uc0NhY2hlRm9yQ2xpZW50KGNsaWVudCk7XG4gICAgY29uc3QgZ2V0TWVudGlvblN1Z2dlc3Rpb25zID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGFzdEludm9rZWRBdC5jdXJyZW50ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGNvbnN0IG1lbnRpb25TdWdnZXN0aW9uczIgPSBhd2FpdCByZXNvbHZlTWVudGlvblN1Z2dlc3Rpb25zKFxuICAgICAgICAgIHJlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnNBcmdzXG4gICAgICAgICk7XG4gICAgICAgIGlmICghaXNDYW5jZWxlZCkge1xuICAgICAgICAgIHNldE1lbnRpb25TdWdnZXN0aW9ucyhtZW50aW9uU3VnZ2VzdGlvbnMyKTtcbiAgICAgICAgICBtZW50aW9uU3VnZ2VzdGlvbnNDYWNoZS5zZXQoXG4gICAgICAgICAgICBtZW50aW9uU3VnZ2VzdGlvbnNDYWNoZUtleSxcbiAgICAgICAgICAgIG1lbnRpb25TdWdnZXN0aW9uczJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yPy5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChtZW50aW9uU3VnZ2VzdGlvbnNDYWNoZS5oYXMobWVudGlvblN1Z2dlc3Rpb25zQ2FjaGVLZXkpKSB7XG4gICAgICBzZXRNZW50aW9uU3VnZ2VzdGlvbnMoXG4gICAgICAgIG1lbnRpb25TdWdnZXN0aW9uc0NhY2hlLmdldChtZW50aW9uU3VnZ2VzdGlvbnNDYWNoZUtleSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghbGFzdEludm9rZWRBdC5jdXJyZW50IHx8IE1hdGguYWJzKHBlcmZvcm1hbmNlLm5vdygpIC0gbGFzdEludm9rZWRBdC5jdXJyZW50KSA+IE1FTlRJT05fU1VHR0VTVElPTlNfREVCT1VOQ0UpIHtcbiAgICAgIHZvaWQgZ2V0TWVudGlvblN1Z2dlc3Rpb25zKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYm91bmNlVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdm9pZCBnZXRNZW50aW9uU3VnZ2VzdGlvbnMoKTtcbiAgICAgIH0sIE1FTlRJT05fU1VHR0VTVElPTlNfREVCT1VOQ0UpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaXNDYW5jZWxlZCA9IHRydWU7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZW91dCk7XG4gICAgfTtcbiAgfSwgW2NsaWVudCwgcm9vbS5pZCwgc2VhcmNoXSk7XG4gIHJldHVybiBtZW50aW9uU3VnZ2VzdGlvbnM7XG59XG5mdW5jdGlvbiB1c2VDdXJyZW50VXNlcklkRnJvbVJvb20oKSB7XG4gIHJldHVybiB1c2VTZWxmKCh1c2VyKSA9PiB0eXBlb2YgdXNlci5pZCA9PT0gXCJzdHJpbmdcIiA/IHVzZXIuaWQgOiBudWxsKTtcbn1cbmZ1bmN0aW9uIHVzZUN1cnJlbnRVc2VySWRGcm9tQ2xpZW50X3dpdGhDbGllbnQoY2xpZW50KSB7XG4gIGNvbnN0IGN1cnJlbnRVc2VySWRTdG9yZSA9IGNsaWVudFtrSW50ZXJuYWxdLmN1cnJlbnRVc2VySWRTdG9yZTtcbiAgcmV0dXJuIHVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgIGN1cnJlbnRVc2VySWRTdG9yZS5zdWJzY3JpYmUsXG4gICAgY3VycmVudFVzZXJJZFN0b3JlLmdldCxcbiAgICBjdXJyZW50VXNlcklkU3RvcmUuZ2V0XG4gICk7XG59XG5mdW5jdGlvbiB1c2VDdXJyZW50VXNlcklkKCkge1xuICBjb25zdCBjbGllbnQgPSB1c2VDb250ZXh0KENsaWVudENvbnRleHQpO1xuICBjb25zdCByb29tID0gdXNlQ29udGV4dChSb29tQ29udGV4dCk7XG4gIGlmIChyb29tICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVzZUN1cnJlbnRVc2VySWRGcm9tUm9vbSgpO1xuICB9IGVsc2UgaWYgKGNsaWVudCAhPT0gbnVsbCkge1xuICAgIHJldHVybiB1c2VDdXJyZW50VXNlcklkRnJvbUNsaWVudF93aXRoQ2xpZW50KGNsaWVudCk7XG4gIH0gZWxzZSB7XG4gICAgcmFpc2UoXG4gICAgICBcIkxpdmVibG9ja3NQcm92aWRlciBvciBSb29tUHJvdmlkZXIgYXJlIG1pc3NpbmcgZnJvbSB0aGUgUmVhY3QgdHJlZS5cIlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHsgdXNlQ3VycmVudFVzZXJJZCwgdXNlTWVudGlvblN1Z2dlc3Rpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/shared.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-formatting.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-formatting.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withAutoFormatting: () => (/* binding */ withAutoFormatting)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/get-character.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-character.mjs\");\n/* harmony import */ var _utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/get-match-range.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-match-range.mjs\");\n/* harmony import */ var _utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/is-empty-string.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty-string.mjs\");\n/* harmony import */ var _utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/is-selection-collapsed.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-selection-collapsed.mjs\");\n\n\n\n\n\n\nconst formatters = [\n  {\n    type: \"mark\",\n    mark: \"bold\",\n    character: \"*\"\n  },\n  {\n    type: \"mark\",\n    mark: \"italic\",\n    character: \"_\"\n  },\n  {\n    type: \"mark\",\n    mark: \"strikethrough\",\n    character: \"~\"\n  },\n  {\n    type: \"mark\",\n    mark: \"code\",\n    character: \"`\"\n  }\n];\nconst markFormattingCharacters = formatters.filter((formatter) => formatter.type === \"mark\").map((formatter) => formatter.character);\nfunction formatMark(editor, text, formatter) {\n  if (text !== formatter.character) {\n    return false;\n  }\n  const match = (0,_utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_0__.getMatchRange)(editor, editor.selection, [formatter.character]);\n  if (!match || slate__WEBPACK_IMPORTED_MODULE_1__.Range.isCollapsed(match)) {\n    return false;\n  }\n  const formattingCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, match);\n  if (!formattingCharacter || formattingCharacter.text !== formatter.character) {\n    return false;\n  }\n  const beforeCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, formattingCharacter.range);\n  if (beforeCharacter && !markFormattingCharacters.includes(beforeCharacter.text) && !(0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_3__.isEmptyString)(beforeCharacter.text)) {\n    return false;\n  }\n  const matchText = slate__WEBPACK_IMPORTED_MODULE_1__.Editor.string(editor, match);\n  if (matchText.trim() !== matchText) {\n    return false;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.select(editor, match);\n  editor.addMark(formatter.mark, true);\n  slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.collapse(editor, { edge: \"end\" });\n  editor.removeMark(formatter.mark);\n  slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.delete(editor, {\n    at: formattingCharacter.range\n  });\n  return true;\n}\nfunction withAutoFormatting(editor) {\n  const { insertText } = editor;\n  editor.insertText = (text, options) => {\n    if (!(0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_4__.isSelectionCollapsed)(editor.selection)) {\n      return insertText(text, options);\n    }\n    let shouldInsertText = true;\n    for (const formatter of formatters) {\n      if (formatter.type === \"mark\") {\n        if (formatMark(editor, text, formatter)) {\n          shouldInsertText = false;\n        }\n      }\n    }\n    if (shouldInsertText) {\n      insertText(text, options);\n    }\n  };\n  return editor;\n}\n\n\n//# sourceMappingURL=auto-formatting.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL2F1dG8tZm9ybWF0dGluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtEO0FBQ2M7QUFDSDtBQUNBO0FBQ2M7O0FBRTNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5RUFBYTtBQUM3QixnQkFBZ0Isd0NBQUs7QUFDckI7QUFDQTtBQUNBLDhCQUE4Qiw0RUFBa0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDRFQUFrQjtBQUM1QyxzRkFBc0YseUVBQWE7QUFDbkc7QUFDQTtBQUNBLG9CQUFvQix5Q0FBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxFQUFFLDZDQUFVO0FBQ1o7QUFDQSxFQUFFLDZDQUFVLG9CQUFvQixhQUFhO0FBQzdDO0FBQ0EsRUFBRSw2Q0FBVTtBQUNaO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLFVBQVUsYUFBYTtBQUN2QjtBQUNBLFNBQVMsdUZBQW9CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3NsYXRlL3BsdWdpbnMvYXV0by1mb3JtYXR0aW5nLm1qcz9jMzZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJhbmdlLCBFZGl0b3IsIFRyYW5zZm9ybXMgfSBmcm9tICdzbGF0ZSc7XG5pbXBvcnQgeyBnZXRDaGFyYWN0ZXJCZWZvcmUgfSBmcm9tICcuLi91dGlscy9nZXQtY2hhcmFjdGVyLm1qcyc7XG5pbXBvcnQgeyBnZXRNYXRjaFJhbmdlIH0gZnJvbSAnLi4vdXRpbHMvZ2V0LW1hdGNoLXJhbmdlLm1qcyc7XG5pbXBvcnQgeyBpc0VtcHR5U3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvaXMtZW1wdHktc3RyaW5nLm1qcyc7XG5pbXBvcnQgeyBpc1NlbGVjdGlvbkNvbGxhcHNlZCB9IGZyb20gJy4uL3V0aWxzL2lzLXNlbGVjdGlvbi1jb2xsYXBzZWQubWpzJztcblxuY29uc3QgZm9ybWF0dGVycyA9IFtcbiAge1xuICAgIHR5cGU6IFwibWFya1wiLFxuICAgIG1hcms6IFwiYm9sZFwiLFxuICAgIGNoYXJhY3RlcjogXCIqXCJcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwibWFya1wiLFxuICAgIG1hcms6IFwiaXRhbGljXCIsXG4gICAgY2hhcmFjdGVyOiBcIl9cIlxuICB9LFxuICB7XG4gICAgdHlwZTogXCJtYXJrXCIsXG4gICAgbWFyazogXCJzdHJpa2V0aHJvdWdoXCIsXG4gICAgY2hhcmFjdGVyOiBcIn5cIlxuICB9LFxuICB7XG4gICAgdHlwZTogXCJtYXJrXCIsXG4gICAgbWFyazogXCJjb2RlXCIsXG4gICAgY2hhcmFjdGVyOiBcImBcIlxuICB9XG5dO1xuY29uc3QgbWFya0Zvcm1hdHRpbmdDaGFyYWN0ZXJzID0gZm9ybWF0dGVycy5maWx0ZXIoKGZvcm1hdHRlcikgPT4gZm9ybWF0dGVyLnR5cGUgPT09IFwibWFya1wiKS5tYXAoKGZvcm1hdHRlcikgPT4gZm9ybWF0dGVyLmNoYXJhY3Rlcik7XG5mdW5jdGlvbiBmb3JtYXRNYXJrKGVkaXRvciwgdGV4dCwgZm9ybWF0dGVyKSB7XG4gIGlmICh0ZXh0ICE9PSBmb3JtYXR0ZXIuY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1hdGNoID0gZ2V0TWF0Y2hSYW5nZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24sIFtmb3JtYXR0ZXIuY2hhcmFjdGVyXSk7XG4gIGlmICghbWF0Y2ggfHwgUmFuZ2UuaXNDb2xsYXBzZWQobWF0Y2gpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGZvcm1hdHRpbmdDaGFyYWN0ZXIgPSBnZXRDaGFyYWN0ZXJCZWZvcmUoZWRpdG9yLCBtYXRjaCk7XG4gIGlmICghZm9ybWF0dGluZ0NoYXJhY3RlciB8fCBmb3JtYXR0aW5nQ2hhcmFjdGVyLnRleHQgIT09IGZvcm1hdHRlci5jaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgYmVmb3JlQ2hhcmFjdGVyID0gZ2V0Q2hhcmFjdGVyQmVmb3JlKGVkaXRvciwgZm9ybWF0dGluZ0NoYXJhY3Rlci5yYW5nZSk7XG4gIGlmIChiZWZvcmVDaGFyYWN0ZXIgJiYgIW1hcmtGb3JtYXR0aW5nQ2hhcmFjdGVycy5pbmNsdWRlcyhiZWZvcmVDaGFyYWN0ZXIudGV4dCkgJiYgIWlzRW1wdHlTdHJpbmcoYmVmb3JlQ2hhcmFjdGVyLnRleHQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1hdGNoVGV4dCA9IEVkaXRvci5zdHJpbmcoZWRpdG9yLCBtYXRjaCk7XG4gIGlmIChtYXRjaFRleHQudHJpbSgpICE9PSBtYXRjaFRleHQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCBtYXRjaCk7XG4gIGVkaXRvci5hZGRNYXJrKGZvcm1hdHRlci5tYXJrLCB0cnVlKTtcbiAgVHJhbnNmb3Jtcy5jb2xsYXBzZShlZGl0b3IsIHsgZWRnZTogXCJlbmRcIiB9KTtcbiAgZWRpdG9yLnJlbW92ZU1hcmsoZm9ybWF0dGVyLm1hcmspO1xuICBUcmFuc2Zvcm1zLmRlbGV0ZShlZGl0b3IsIHtcbiAgICBhdDogZm9ybWF0dGluZ0NoYXJhY3Rlci5yYW5nZVxuICB9KTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiB3aXRoQXV0b0Zvcm1hdHRpbmcoZWRpdG9yKSB7XG4gIGNvbnN0IHsgaW5zZXJ0VGV4dCB9ID0gZWRpdG9yO1xuICBlZGl0b3IuaW5zZXJ0VGV4dCA9ICh0ZXh0LCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFpc1NlbGVjdGlvbkNvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGluc2VydFRleHQodGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGxldCBzaG91bGRJbnNlcnRUZXh0ID0gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IGZvcm1hdHRlciBvZiBmb3JtYXR0ZXJzKSB7XG4gICAgICBpZiAoZm9ybWF0dGVyLnR5cGUgPT09IFwibWFya1wiKSB7XG4gICAgICAgIGlmIChmb3JtYXRNYXJrKGVkaXRvciwgdGV4dCwgZm9ybWF0dGVyKSkge1xuICAgICAgICAgIHNob3VsZEluc2VydFRleHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hvdWxkSW5zZXJ0VGV4dCkge1xuICAgICAgaW5zZXJ0VGV4dCh0ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBlZGl0b3I7XG59XG5cbmV4cG9ydCB7IHdpdGhBdXRvRm9ybWF0dGluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0by1mb3JtYXR0aW5nLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-formatting.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-links.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-links.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isComposerBodyAutoLink: () => (/* binding */ isComposerBodyAutoLink),\n/* harmony export */   withAutoLinks: () => (/* binding */ withAutoLinks)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/is-text.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-text.mjs\");\n/* harmony import */ var _custom_links_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./custom-links.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/custom-links.mjs\");\n\n\n\n\nfunction withAutoLinks(editor) {\n  const { isInline, normalizeNode, deleteBackward } = editor;\n  editor.isInline = (element) => {\n    return element.type === \"auto-link\" ? true : isInline(element);\n  };\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n    if ((0,_custom_links_mjs__WEBPACK_IMPORTED_MODULE_0__.isComposerBodyCustomLink)(node)) {\n      return;\n    }\n    if ((0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_1__.isText)(node)) {\n      const parentNode = slate__WEBPACK_IMPORTED_MODULE_2__.Node.parent(editor, path);\n      if ((0,_custom_links_mjs__WEBPACK_IMPORTED_MODULE_0__.isComposerBodyCustomLink)(parentNode)) {\n        return;\n      } else if (isComposerBodyAutoLink(parentNode)) {\n        const parentPath = slate__WEBPACK_IMPORTED_MODULE_2__.Path.parent(path);\n        handleLinkEdit(editor, [parentNode, parentPath]);\n        if (!(0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_1__.isPlainText)(node)) {\n          const marks = Object.keys(node).filter((key) => key !== \"text\");\n          slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unsetNodes(editor, marks, { at: path });\n        }\n      } else {\n        handleLinkCreate(editor, [node, path]);\n        handleNeighbours(editor, [node, path]);\n      }\n    }\n    normalizeNode(entry);\n  };\n  editor.deleteBackward = (unit) => {\n    deleteBackward(unit);\n    const { selection } = editor;\n    if (!selection)\n      return;\n    if (!slate__WEBPACK_IMPORTED_MODULE_2__.Range.isCollapsed(selection))\n      return;\n    const [match] = slate__WEBPACK_IMPORTED_MODULE_2__.Editor.nodes(editor, {\n      at: selection,\n      match: isComposerBodyAutoLink,\n      mode: \"lowest\"\n    });\n    if (!match)\n      return;\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, {\n      match: isComposerBodyAutoLink\n    });\n  };\n  return editor;\n}\nfunction isComposerBodyAutoLink(node) {\n  return slate__WEBPACK_IMPORTED_MODULE_2__.Element.isElement(node) && node.type === \"auto-link\";\n}\nconst URL_REGEX = /((https?:\\/\\/(www\\.)?)|(www\\.))[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9().@:%_+~#?&//=]*)/;\nconst PUNCTUATION_OR_SPACE = /[.,;!?\\s()]/;\nconst PERIOD_OR_QUESTION_MARK_FOLLOWED_BY_ALPHANUMERIC = /^[.?][a-zA-Z0-9]+/;\nconst PARENTHESES = /[()]/;\nfunction isSeparator(char) {\n  return PUNCTUATION_OR_SPACE.test(char);\n}\nfunction endsWithSeparator(textContent) {\n  return isSeparator(textContent[textContent.length - 1]);\n}\nfunction startsWithSeparator(textContent) {\n  return isSeparator(textContent[0]);\n}\nfunction endsWithPeriodOrQuestionMark(textContent) {\n  return textContent[textContent.length - 1] === \".\" || textContent[textContent.length - 1] === \"?\";\n}\nfunction getUrlLogicalLength(url) {\n  if (!PARENTHESES.test(url)) {\n    return url.length;\n  }\n  let logicalLength = 0;\n  let parenthesesCount = 0;\n  for (const character of url) {\n    if (character === \"(\") {\n      parenthesesCount++;\n    }\n    if (character === \")\") {\n      parenthesesCount--;\n      if (parenthesesCount < 0) {\n        break;\n      }\n    }\n    logicalLength++;\n  }\n  return logicalLength;\n}\nfunction isPreviousNodeValid(editor, path) {\n  const entry = slate__WEBPACK_IMPORTED_MODULE_2__.Editor.previous(editor, { at: path });\n  if (!entry)\n    return true;\n  return (0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_1__.isText)(entry[0]) && (endsWithSeparator(entry[0].text) || entry[0].text === \"\");\n}\nfunction isNextNodeValid(editor, path) {\n  const entry = slate__WEBPACK_IMPORTED_MODULE_2__.Editor.next(editor, { at: path });\n  if (!entry)\n    return true;\n  return (0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_1__.isText)(entry[0]) && (startsWithSeparator(entry[0].text) || entry[0].text === \"\");\n}\nfunction isContentAroundValid(editor, entry, start, end) {\n  const [node, path] = entry;\n  const text = node.text;\n  const contentBeforeIsValid = start > 0 ? isSeparator(text[start - 1]) : isPreviousNodeValid(editor, path);\n  const contentAfterIsValid = end < text.length ? isSeparator(text[end]) : isNextNodeValid(editor, path);\n  return contentBeforeIsValid && contentAfterIsValid;\n}\nconst handleLinkEdit = (editor, entry) => {\n  const [node, path] = entry;\n  const children = slate__WEBPACK_IMPORTED_MODULE_2__.Node.children(editor, path);\n  for (const [child] of children) {\n    if ((0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_1__.isText)(child))\n      continue;\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: path });\n    return;\n  }\n  const text = slate__WEBPACK_IMPORTED_MODULE_2__.Node.string(node);\n  const match = URL_REGEX.exec(text);\n  if (!match || match[0] !== text) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: path });\n    return;\n  }\n  if (endsWithPeriodOrQuestionMark(text)) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: path });\n    const textBeforePeriod = text.slice(0, text.length - 1);\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.wrapNodes(\n      editor,\n      {\n        type: \"auto-link\",\n        url: textBeforePeriod,\n        children: []\n      },\n      {\n        at: {\n          anchor: { path, offset: 0 },\n          focus: { path, offset: textBeforePeriod.length }\n        },\n        split: true\n      }\n    );\n    return;\n  }\n  const logicalLength = getUrlLogicalLength(text);\n  if (logicalLength < text.length) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: path });\n    const logicalText = text.slice(0, logicalLength);\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.wrapNodes(\n      editor,\n      {\n        type: \"auto-link\",\n        url: logicalText,\n        children: []\n      },\n      {\n        at: {\n          anchor: { path, offset: 0 },\n          focus: { path, offset: logicalText.length }\n        },\n        split: true\n      }\n    );\n    return;\n  }\n  if (!isPreviousNodeValid(editor, path) || !isNextNodeValid(editor, path)) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: path });\n    return;\n  }\n  if (node.url !== text) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.setNodes(editor, { url: match[0] }, { at: path });\n    return;\n  }\n};\nconst handleLinkCreate = (editor, entry) => {\n  const [node, path] = entry;\n  const match = URL_REGEX.exec(node.text);\n  if (!match)\n    return;\n  const start = match.index;\n  const end = start + match[0].length;\n  if (!isContentAroundValid(editor, entry, start, end))\n    return;\n  slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.wrapNodes(\n    editor,\n    {\n      type: \"auto-link\",\n      url: match[0],\n      children: []\n    },\n    {\n      at: {\n        anchor: { path, offset: start },\n        focus: { path, offset: end }\n      },\n      split: true\n    }\n  );\n  return;\n};\nconst handleNeighbours = (editor, entry) => {\n  const [node, path] = entry;\n  const text = node.text;\n  const previousSibling = slate__WEBPACK_IMPORTED_MODULE_2__.Editor.previous(editor, { at: path });\n  if (previousSibling && isComposerBodyAutoLink(previousSibling[0])) {\n    if (PERIOD_OR_QUESTION_MARK_FOLLOWED_BY_ALPHANUMERIC.test(text)) {\n      slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: previousSibling[1] });\n      slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.mergeNodes(editor, { at: path });\n      return;\n    }\n    if (!startsWithSeparator(text)) {\n      slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: previousSibling[1] });\n      return;\n    }\n  }\n  const nextSibling = slate__WEBPACK_IMPORTED_MODULE_2__.Editor.next(editor, { at: path });\n  if (nextSibling && isComposerBodyAutoLink(nextSibling[0]) && !endsWithSeparator(text)) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.unwrapNodes(editor, { at: nextSibling[1] });\n    return;\n  }\n};\n\n\n//# sourceMappingURL=auto-links.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL2F1dG8tbGlua3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVFO0FBQ1o7QUFDRzs7QUFFOUQ7QUFDQSxVQUFVLDBDQUEwQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyRUFBd0I7QUFDaEM7QUFDQTtBQUNBLFFBQVEsMERBQU07QUFDZCx5QkFBeUIsdUNBQUk7QUFDN0IsVUFBVSwyRUFBd0I7QUFDbEM7QUFDQSxRQUFRO0FBQ1IsMkJBQTJCLHVDQUFJO0FBQy9CO0FBQ0EsYUFBYSwrREFBVztBQUN4QjtBQUNBLFVBQVUsNkNBQVUsNkJBQTZCLFVBQVU7QUFDM0Q7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBO0FBQ0EsU0FBUyx3Q0FBSztBQUNkO0FBQ0Esb0JBQW9CLHlDQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSSw2Q0FBVTtBQUNkO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywwQ0FBTztBQUNoQjtBQUNBLHdFQUF3RSxNQUFNLGdCQUFnQixJQUFJO0FBQ2xHLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlDQUFNLG9CQUFvQixVQUFVO0FBQ3BEO0FBQ0E7QUFDQSxTQUFTLDBEQUFNO0FBQ2Y7QUFDQTtBQUNBLGdCQUFnQix5Q0FBTSxnQkFBZ0IsVUFBVTtBQUNoRDtBQUNBO0FBQ0EsU0FBUywwREFBTTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVDQUFJO0FBQ3ZCO0FBQ0EsUUFBUSwwREFBTTtBQUNkO0FBQ0EsSUFBSSw2Q0FBVSx1QkFBdUIsVUFBVTtBQUMvQztBQUNBO0FBQ0EsZUFBZSx1Q0FBSTtBQUNuQjtBQUNBO0FBQ0EsSUFBSSw2Q0FBVSx1QkFBdUIsVUFBVTtBQUMvQztBQUNBO0FBQ0E7QUFDQSxJQUFJLDZDQUFVLHVCQUF1QixVQUFVO0FBQy9DO0FBQ0EsSUFBSSw2Q0FBVTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckMsbUJBQW1CO0FBQ25CLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNkNBQVUsdUJBQXVCLFVBQVU7QUFDL0M7QUFDQSxJQUFJLDZDQUFVO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQyxtQkFBbUI7QUFDbkIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNkNBQVUsdUJBQXVCLFVBQVU7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsSUFBSSw2Q0FBVSxvQkFBb0IsZUFBZSxJQUFJLFVBQVU7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSw2Q0FBVTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkMsaUJBQWlCO0FBQ2pCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHlDQUFNLG9CQUFvQixVQUFVO0FBQzlEO0FBQ0E7QUFDQSxNQUFNLDZDQUFVLHVCQUF1Qix3QkFBd0I7QUFDL0QsTUFBTSw2Q0FBVSxzQkFBc0IsVUFBVTtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxNQUFNLDZDQUFVLHVCQUF1Qix3QkFBd0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHlDQUFNLGdCQUFnQixVQUFVO0FBQ3REO0FBQ0EsSUFBSSw2Q0FBVSx1QkFBdUIsb0JBQW9CO0FBQ3pEO0FBQ0E7QUFDQTs7QUFFaUQ7QUFDakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL2F1dG8tbGlua3MubWpzP2JkNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudCwgTm9kZSwgUGF0aCwgVHJhbnNmb3JtcywgUmFuZ2UsIEVkaXRvciB9IGZyb20gJ3NsYXRlJztcbmltcG9ydCB7IGlzVGV4dCwgaXNQbGFpblRleHQgfSBmcm9tICcuLi91dGlscy9pcy10ZXh0Lm1qcyc7XG5pbXBvcnQgeyBpc0NvbXBvc2VyQm9keUN1c3RvbUxpbmsgfSBmcm9tICcuL2N1c3RvbS1saW5rcy5tanMnO1xuXG5mdW5jdGlvbiB3aXRoQXV0b0xpbmtzKGVkaXRvcikge1xuICBjb25zdCB7IGlzSW5saW5lLCBub3JtYWxpemVOb2RlLCBkZWxldGVCYWNrd2FyZCB9ID0gZWRpdG9yO1xuICBlZGl0b3IuaXNJbmxpbmUgPSAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiBlbGVtZW50LnR5cGUgPT09IFwiYXV0by1saW5rXCIgPyB0cnVlIDogaXNJbmxpbmUoZWxlbWVudCk7XG4gIH07XG4gIGVkaXRvci5ub3JtYWxpemVOb2RlID0gKGVudHJ5KSA9PiB7XG4gICAgY29uc3QgW25vZGUsIHBhdGhdID0gZW50cnk7XG4gICAgaWYgKGlzQ29tcG9zZXJCb2R5Q3VzdG9tTGluayhub2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNUZXh0KG5vZGUpKSB7XG4gICAgICBjb25zdCBwYXJlbnROb2RlID0gTm9kZS5wYXJlbnQoZWRpdG9yLCBwYXRoKTtcbiAgICAgIGlmIChpc0NvbXBvc2VyQm9keUN1c3RvbUxpbmsocGFyZW50Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChpc0NvbXBvc2VyQm9keUF1dG9MaW5rKHBhcmVudE5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBQYXRoLnBhcmVudChwYXRoKTtcbiAgICAgICAgaGFuZGxlTGlua0VkaXQoZWRpdG9yLCBbcGFyZW50Tm9kZSwgcGFyZW50UGF0aF0pO1xuICAgICAgICBpZiAoIWlzUGxhaW5UZXh0KG5vZGUpKSB7XG4gICAgICAgICAgY29uc3QgbWFya3MgPSBPYmplY3Qua2V5cyhub2RlKS5maWx0ZXIoKGtleSkgPT4ga2V5ICE9PSBcInRleHRcIik7XG4gICAgICAgICAgVHJhbnNmb3Jtcy51bnNldE5vZGVzKGVkaXRvciwgbWFya3MsIHsgYXQ6IHBhdGggfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZUxpbmtDcmVhdGUoZWRpdG9yLCBbbm9kZSwgcGF0aF0pO1xuICAgICAgICBoYW5kbGVOZWlnaGJvdXJzKGVkaXRvciwgW25vZGUsIHBhdGhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbm9ybWFsaXplTm9kZShlbnRyeSk7XG4gIH07XG4gIGVkaXRvci5kZWxldGVCYWNrd2FyZCA9ICh1bml0KSA9PiB7XG4gICAgZGVsZXRlQmFja3dhcmQodW5pdCk7XG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IGVkaXRvcjtcbiAgICBpZiAoIXNlbGVjdGlvbilcbiAgICAgIHJldHVybjtcbiAgICBpZiAoIVJhbmdlLmlzQ29sbGFwc2VkKHNlbGVjdGlvbikpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgW21hdGNoXSA9IEVkaXRvci5ub2RlcyhlZGl0b3IsIHtcbiAgICAgIGF0OiBzZWxlY3Rpb24sXG4gICAgICBtYXRjaDogaXNDb21wb3NlckJvZHlBdXRvTGluayxcbiAgICAgIG1vZGU6IFwibG93ZXN0XCJcbiAgICB9KTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgcmV0dXJuO1xuICAgIFRyYW5zZm9ybXMudW53cmFwTm9kZXMoZWRpdG9yLCB7XG4gICAgICBtYXRjaDogaXNDb21wb3NlckJvZHlBdXRvTGlua1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gZWRpdG9yO1xufVxuZnVuY3Rpb24gaXNDb21wb3NlckJvZHlBdXRvTGluayhub2RlKSB7XG4gIHJldHVybiBFbGVtZW50LmlzRWxlbWVudChub2RlKSAmJiBub2RlLnR5cGUgPT09IFwiYXV0by1saW5rXCI7XG59XG5jb25zdCBVUkxfUkVHRVggPSAvKChodHRwcz86XFwvXFwvKHd3d1xcLik/KXwod3d3XFwuKSlbLWEtekEtWjAtOUA6JS5fK34jPV17MSwyNTZ9XFwuW2EtekEtWjAtOSgpXXsxLDZ9XFxiKFstYS16QS1aMC05KCkuQDolXyt+Iz8mLy89XSopLztcbmNvbnN0IFBVTkNUVUFUSU9OX09SX1NQQUNFID0gL1suLDshP1xccygpXS87XG5jb25zdCBQRVJJT0RfT1JfUVVFU1RJT05fTUFSS19GT0xMT1dFRF9CWV9BTFBIQU5VTUVSSUMgPSAvXlsuP11bYS16QS1aMC05XSsvO1xuY29uc3QgUEFSRU5USEVTRVMgPSAvWygpXS87XG5mdW5jdGlvbiBpc1NlcGFyYXRvcihjaGFyKSB7XG4gIHJldHVybiBQVU5DVFVBVElPTl9PUl9TUEFDRS50ZXN0KGNoYXIpO1xufVxuZnVuY3Rpb24gZW5kc1dpdGhTZXBhcmF0b3IodGV4dENvbnRlbnQpIHtcbiAgcmV0dXJuIGlzU2VwYXJhdG9yKHRleHRDb250ZW50W3RleHRDb250ZW50Lmxlbmd0aCAtIDFdKTtcbn1cbmZ1bmN0aW9uIHN0YXJ0c1dpdGhTZXBhcmF0b3IodGV4dENvbnRlbnQpIHtcbiAgcmV0dXJuIGlzU2VwYXJhdG9yKHRleHRDb250ZW50WzBdKTtcbn1cbmZ1bmN0aW9uIGVuZHNXaXRoUGVyaW9kT3JRdWVzdGlvbk1hcmsodGV4dENvbnRlbnQpIHtcbiAgcmV0dXJuIHRleHRDb250ZW50W3RleHRDb250ZW50Lmxlbmd0aCAtIDFdID09PSBcIi5cIiB8fCB0ZXh0Q29udGVudFt0ZXh0Q29udGVudC5sZW5ndGggLSAxXSA9PT0gXCI/XCI7XG59XG5mdW5jdGlvbiBnZXRVcmxMb2dpY2FsTGVuZ3RoKHVybCkge1xuICBpZiAoIVBBUkVOVEhFU0VTLnRlc3QodXJsKSkge1xuICAgIHJldHVybiB1cmwubGVuZ3RoO1xuICB9XG4gIGxldCBsb2dpY2FsTGVuZ3RoID0gMDtcbiAgbGV0IHBhcmVudGhlc2VzQ291bnQgPSAwO1xuICBmb3IgKGNvbnN0IGNoYXJhY3RlciBvZiB1cmwpIHtcbiAgICBpZiAoY2hhcmFjdGVyID09PSBcIihcIikge1xuICAgICAgcGFyZW50aGVzZXNDb3VudCsrO1xuICAgIH1cbiAgICBpZiAoY2hhcmFjdGVyID09PSBcIilcIikge1xuICAgICAgcGFyZW50aGVzZXNDb3VudC0tO1xuICAgICAgaWYgKHBhcmVudGhlc2VzQ291bnQgPCAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2dpY2FsTGVuZ3RoKys7XG4gIH1cbiAgcmV0dXJuIGxvZ2ljYWxMZW5ndGg7XG59XG5mdW5jdGlvbiBpc1ByZXZpb3VzTm9kZVZhbGlkKGVkaXRvciwgcGF0aCkge1xuICBjb25zdCBlbnRyeSA9IEVkaXRvci5wcmV2aW91cyhlZGl0b3IsIHsgYXQ6IHBhdGggfSk7XG4gIGlmICghZW50cnkpXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBpc1RleHQoZW50cnlbMF0pICYmIChlbmRzV2l0aFNlcGFyYXRvcihlbnRyeVswXS50ZXh0KSB8fCBlbnRyeVswXS50ZXh0ID09PSBcIlwiKTtcbn1cbmZ1bmN0aW9uIGlzTmV4dE5vZGVWYWxpZChlZGl0b3IsIHBhdGgpIHtcbiAgY29uc3QgZW50cnkgPSBFZGl0b3IubmV4dChlZGl0b3IsIHsgYXQ6IHBhdGggfSk7XG4gIGlmICghZW50cnkpXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBpc1RleHQoZW50cnlbMF0pICYmIChzdGFydHNXaXRoU2VwYXJhdG9yKGVudHJ5WzBdLnRleHQpIHx8IGVudHJ5WzBdLnRleHQgPT09IFwiXCIpO1xufVxuZnVuY3Rpb24gaXNDb250ZW50QXJvdW5kVmFsaWQoZWRpdG9yLCBlbnRyeSwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBbbm9kZSwgcGF0aF0gPSBlbnRyeTtcbiAgY29uc3QgdGV4dCA9IG5vZGUudGV4dDtcbiAgY29uc3QgY29udGVudEJlZm9yZUlzVmFsaWQgPSBzdGFydCA+IDAgPyBpc1NlcGFyYXRvcih0ZXh0W3N0YXJ0IC0gMV0pIDogaXNQcmV2aW91c05vZGVWYWxpZChlZGl0b3IsIHBhdGgpO1xuICBjb25zdCBjb250ZW50QWZ0ZXJJc1ZhbGlkID0gZW5kIDwgdGV4dC5sZW5ndGggPyBpc1NlcGFyYXRvcih0ZXh0W2VuZF0pIDogaXNOZXh0Tm9kZVZhbGlkKGVkaXRvciwgcGF0aCk7XG4gIHJldHVybiBjb250ZW50QmVmb3JlSXNWYWxpZCAmJiBjb250ZW50QWZ0ZXJJc1ZhbGlkO1xufVxuY29uc3QgaGFuZGxlTGlua0VkaXQgPSAoZWRpdG9yLCBlbnRyeSkgPT4ge1xuICBjb25zdCBbbm9kZSwgcGF0aF0gPSBlbnRyeTtcbiAgY29uc3QgY2hpbGRyZW4gPSBOb2RlLmNoaWxkcmVuKGVkaXRvciwgcGF0aCk7XG4gIGZvciAoY29uc3QgW2NoaWxkXSBvZiBjaGlsZHJlbikge1xuICAgIGlmIChpc1RleHQoY2hpbGQpKVxuICAgICAgY29udGludWU7XG4gICAgVHJhbnNmb3Jtcy51bndyYXBOb2RlcyhlZGl0b3IsIHsgYXQ6IHBhdGggfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHRleHQgPSBOb2RlLnN0cmluZyhub2RlKTtcbiAgY29uc3QgbWF0Y2ggPSBVUkxfUkVHRVguZXhlYyh0ZXh0KTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFswXSAhPT0gdGV4dCkge1xuICAgIFRyYW5zZm9ybXMudW53cmFwTm9kZXMoZWRpdG9yLCB7IGF0OiBwYXRoIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZW5kc1dpdGhQZXJpb2RPclF1ZXN0aW9uTWFyayh0ZXh0KSkge1xuICAgIFRyYW5zZm9ybXMudW53cmFwTm9kZXMoZWRpdG9yLCB7IGF0OiBwYXRoIH0pO1xuICAgIGNvbnN0IHRleHRCZWZvcmVQZXJpb2QgPSB0ZXh0LnNsaWNlKDAsIHRleHQubGVuZ3RoIC0gMSk7XG4gICAgVHJhbnNmb3Jtcy53cmFwTm9kZXMoXG4gICAgICBlZGl0b3IsXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiYXV0by1saW5rXCIsXG4gICAgICAgIHVybDogdGV4dEJlZm9yZVBlcmlvZCxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBhdDoge1xuICAgICAgICAgIGFuY2hvcjogeyBwYXRoLCBvZmZzZXQ6IDAgfSxcbiAgICAgICAgICBmb2N1czogeyBwYXRoLCBvZmZzZXQ6IHRleHRCZWZvcmVQZXJpb2QubGVuZ3RoIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3BsaXQ6IHRydWVcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBsb2dpY2FsTGVuZ3RoID0gZ2V0VXJsTG9naWNhbExlbmd0aCh0ZXh0KTtcbiAgaWYgKGxvZ2ljYWxMZW5ndGggPCB0ZXh0Lmxlbmd0aCkge1xuICAgIFRyYW5zZm9ybXMudW53cmFwTm9kZXMoZWRpdG9yLCB7IGF0OiBwYXRoIH0pO1xuICAgIGNvbnN0IGxvZ2ljYWxUZXh0ID0gdGV4dC5zbGljZSgwLCBsb2dpY2FsTGVuZ3RoKTtcbiAgICBUcmFuc2Zvcm1zLndyYXBOb2RlcyhcbiAgICAgIGVkaXRvcixcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJhdXRvLWxpbmtcIixcbiAgICAgICAgdXJsOiBsb2dpY2FsVGV4dCxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBhdDoge1xuICAgICAgICAgIGFuY2hvcjogeyBwYXRoLCBvZmZzZXQ6IDAgfSxcbiAgICAgICAgICBmb2N1czogeyBwYXRoLCBvZmZzZXQ6IGxvZ2ljYWxUZXh0Lmxlbmd0aCB9XG4gICAgICAgIH0sXG4gICAgICAgIHNwbGl0OiB0cnVlXG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFpc1ByZXZpb3VzTm9kZVZhbGlkKGVkaXRvciwgcGF0aCkgfHwgIWlzTmV4dE5vZGVWYWxpZChlZGl0b3IsIHBhdGgpKSB7XG4gICAgVHJhbnNmb3Jtcy51bndyYXBOb2RlcyhlZGl0b3IsIHsgYXQ6IHBhdGggfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChub2RlLnVybCAhPT0gdGV4dCkge1xuICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7IHVybDogbWF0Y2hbMF0gfSwgeyBhdDogcGF0aCB9KTtcbiAgICByZXR1cm47XG4gIH1cbn07XG5jb25zdCBoYW5kbGVMaW5rQ3JlYXRlID0gKGVkaXRvciwgZW50cnkpID0+IHtcbiAgY29uc3QgW25vZGUsIHBhdGhdID0gZW50cnk7XG4gIGNvbnN0IG1hdGNoID0gVVJMX1JFR0VYLmV4ZWMobm9kZS50ZXh0KTtcbiAgaWYgKCFtYXRjaClcbiAgICByZXR1cm47XG4gIGNvbnN0IHN0YXJ0ID0gbWF0Y2guaW5kZXg7XG4gIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICBpZiAoIWlzQ29udGVudEFyb3VuZFZhbGlkKGVkaXRvciwgZW50cnksIHN0YXJ0LCBlbmQpKVxuICAgIHJldHVybjtcbiAgVHJhbnNmb3Jtcy53cmFwTm9kZXMoXG4gICAgZWRpdG9yLFxuICAgIHtcbiAgICAgIHR5cGU6IFwiYXV0by1saW5rXCIsXG4gICAgICB1cmw6IG1hdGNoWzBdLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfSxcbiAgICB7XG4gICAgICBhdDoge1xuICAgICAgICBhbmNob3I6IHsgcGF0aCwgb2Zmc2V0OiBzdGFydCB9LFxuICAgICAgICBmb2N1czogeyBwYXRoLCBvZmZzZXQ6IGVuZCB9XG4gICAgICB9LFxuICAgICAgc3BsaXQ6IHRydWVcbiAgICB9XG4gICk7XG4gIHJldHVybjtcbn07XG5jb25zdCBoYW5kbGVOZWlnaGJvdXJzID0gKGVkaXRvciwgZW50cnkpID0+IHtcbiAgY29uc3QgW25vZGUsIHBhdGhdID0gZW50cnk7XG4gIGNvbnN0IHRleHQgPSBub2RlLnRleHQ7XG4gIGNvbnN0IHByZXZpb3VzU2libGluZyA9IEVkaXRvci5wcmV2aW91cyhlZGl0b3IsIHsgYXQ6IHBhdGggfSk7XG4gIGlmIChwcmV2aW91c1NpYmxpbmcgJiYgaXNDb21wb3NlckJvZHlBdXRvTGluayhwcmV2aW91c1NpYmxpbmdbMF0pKSB7XG4gICAgaWYgKFBFUklPRF9PUl9RVUVTVElPTl9NQVJLX0ZPTExPV0VEX0JZX0FMUEhBTlVNRVJJQy50ZXN0KHRleHQpKSB7XG4gICAgICBUcmFuc2Zvcm1zLnVud3JhcE5vZGVzKGVkaXRvciwgeyBhdDogcHJldmlvdXNTaWJsaW5nWzFdIH0pO1xuICAgICAgVHJhbnNmb3Jtcy5tZXJnZU5vZGVzKGVkaXRvciwgeyBhdDogcGF0aCB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzdGFydHNXaXRoU2VwYXJhdG9yKHRleHQpKSB7XG4gICAgICBUcmFuc2Zvcm1zLnVud3JhcE5vZGVzKGVkaXRvciwgeyBhdDogcHJldmlvdXNTaWJsaW5nWzFdIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBjb25zdCBuZXh0U2libGluZyA9IEVkaXRvci5uZXh0KGVkaXRvciwgeyBhdDogcGF0aCB9KTtcbiAgaWYgKG5leHRTaWJsaW5nICYmIGlzQ29tcG9zZXJCb2R5QXV0b0xpbmsobmV4dFNpYmxpbmdbMF0pICYmICFlbmRzV2l0aFNlcGFyYXRvcih0ZXh0KSkge1xuICAgIFRyYW5zZm9ybXMudW53cmFwTm9kZXMoZWRpdG9yLCB7IGF0OiBuZXh0U2libGluZ1sxXSB9KTtcbiAgICByZXR1cm47XG4gIH1cbn07XG5cbmV4cG9ydCB7IGlzQ29tcG9zZXJCb2R5QXV0b0xpbmssIHdpdGhBdXRvTGlua3MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dG8tbGlua3MubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/auto-links.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/custom-links.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/plugins/custom-links.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isComposerBodyCustomLink: () => (/* binding */ isComposerBodyCustomLink),\n/* harmony export */   withCustomLinks: () => (/* binding */ withCustomLinks)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/is-text.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-text.mjs\");\n/* harmony import */ var _utils_selection_contains_inlines_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/selection-contains-inlines.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/selection-contains-inlines.mjs\");\n\n\n\n\nfunction isUrl(string) {\n  try {\n    new URL(string);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\nfunction withCustomLinks(editor) {\n  const { isInline, normalizeNode, insertData } = editor;\n  editor.isInline = (element) => {\n    return element.type === \"custom-link\" ? true : isInline(element);\n  };\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n    if ((0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_0__.isText)(node)) {\n      const parentNode = slate__WEBPACK_IMPORTED_MODULE_1__.Node.parent(editor, path);\n      if (isComposerBodyCustomLink(parentNode)) {\n        if (!(0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_0__.isPlainText)(node)) {\n          const marks = Object.keys(node).filter((key) => key !== \"text\");\n          slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.unsetNodes(editor, marks, { at: path });\n        }\n      }\n    }\n    normalizeNode(entry);\n  };\n  editor.insertData = (data) => {\n    const { selection } = editor;\n    const pastedText = data.getData(\"text/plain\");\n    let shouldInvokeDefaultBehavior = true;\n    if (selection && !slate__WEBPACK_IMPORTED_MODULE_1__.Range.isCollapsed(selection)) {\n      if (selection.anchor.path[0] === selection.focus.path[0]) {\n        if (isUrl(pastedText)) {\n          if (!(0,_utils_selection_contains_inlines_mjs__WEBPACK_IMPORTED_MODULE_2__.selectionContainsInlines)(editor, (node) => !(0,_utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_0__.isText)(node))) {\n            slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.wrapNodes(\n              editor,\n              {\n                type: \"custom-link\",\n                url: pastedText,\n                children: []\n              },\n              {\n                at: selection,\n                split: true,\n                match: _utils_is_text_mjs__WEBPACK_IMPORTED_MODULE_0__.isPlainText\n              }\n            );\n            shouldInvokeDefaultBehavior = false;\n          }\n        }\n      }\n    }\n    if (shouldInvokeDefaultBehavior) {\n      insertData(data);\n    }\n  };\n  return editor;\n}\nfunction isComposerBodyCustomLink(node) {\n  return slate__WEBPACK_IMPORTED_MODULE_1__.Element.isElement(node) && node.type === \"custom-link\";\n}\n\n\n//# sourceMappingURL=custom-links.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL2N1c3RvbS1saW5rcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBeUQ7QUFDRTtBQUN3Qjs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNDQUFzQztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwwREFBTTtBQUNkLHlCQUF5Qix1Q0FBSTtBQUM3QjtBQUNBLGFBQWEsK0RBQVc7QUFDeEI7QUFDQSxVQUFVLDZDQUFVLDZCQUE2QixVQUFVO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBO0FBQ0Esc0JBQXNCLHdDQUFLO0FBQzNCO0FBQ0E7QUFDQSxlQUFlLCtGQUF3QixvQkFBb0IsMERBQU07QUFDakUsWUFBWSw2Q0FBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwyREFBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywwQ0FBTztBQUNoQjs7QUFFcUQ7QUFDckQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL2N1c3RvbS1saW5rcy5tanM/MDY3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50LCBOb2RlLCBUcmFuc2Zvcm1zLCBSYW5nZSB9IGZyb20gJ3NsYXRlJztcbmltcG9ydCB7IGlzVGV4dCwgaXNQbGFpblRleHQgfSBmcm9tICcuLi91dGlscy9pcy10ZXh0Lm1qcyc7XG5pbXBvcnQgeyBzZWxlY3Rpb25Db250YWluc0lubGluZXMgfSBmcm9tICcuLi91dGlscy9zZWxlY3Rpb24tY29udGFpbnMtaW5saW5lcy5tanMnO1xuXG5mdW5jdGlvbiBpc1VybChzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBuZXcgVVJMKHN0cmluZyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIHdpdGhDdXN0b21MaW5rcyhlZGl0b3IpIHtcbiAgY29uc3QgeyBpc0lubGluZSwgbm9ybWFsaXplTm9kZSwgaW5zZXJ0RGF0YSB9ID0gZWRpdG9yO1xuICBlZGl0b3IuaXNJbmxpbmUgPSAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiBlbGVtZW50LnR5cGUgPT09IFwiY3VzdG9tLWxpbmtcIiA/IHRydWUgOiBpc0lubGluZShlbGVtZW50KTtcbiAgfTtcbiAgZWRpdG9yLm5vcm1hbGl6ZU5vZGUgPSAoZW50cnkpID0+IHtcbiAgICBjb25zdCBbbm9kZSwgcGF0aF0gPSBlbnRyeTtcbiAgICBpZiAoaXNUZXh0KG5vZGUpKSB7XG4gICAgICBjb25zdCBwYXJlbnROb2RlID0gTm9kZS5wYXJlbnQoZWRpdG9yLCBwYXRoKTtcbiAgICAgIGlmIChpc0NvbXBvc2VyQm9keUN1c3RvbUxpbmsocGFyZW50Tm9kZSkpIHtcbiAgICAgICAgaWYgKCFpc1BsYWluVGV4dChub2RlKSkge1xuICAgICAgICAgIGNvbnN0IG1hcmtzID0gT2JqZWN0LmtleXMobm9kZSkuZmlsdGVyKChrZXkpID0+IGtleSAhPT0gXCJ0ZXh0XCIpO1xuICAgICAgICAgIFRyYW5zZm9ybXMudW5zZXROb2RlcyhlZGl0b3IsIG1hcmtzLCB7IGF0OiBwYXRoIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG5vcm1hbGl6ZU5vZGUoZW50cnkpO1xuICB9O1xuICBlZGl0b3IuaW5zZXJ0RGF0YSA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBzZWxlY3Rpb24gfSA9IGVkaXRvcjtcbiAgICBjb25zdCBwYXN0ZWRUZXh0ID0gZGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKTtcbiAgICBsZXQgc2hvdWxkSW52b2tlRGVmYXVsdEJlaGF2aW9yID0gdHJ1ZTtcbiAgICBpZiAoc2VsZWN0aW9uICYmICFSYW5nZS5pc0NvbGxhcHNlZChzZWxlY3Rpb24pKSB7XG4gICAgICBpZiAoc2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdID09PSBzZWxlY3Rpb24uZm9jdXMucGF0aFswXSkge1xuICAgICAgICBpZiAoaXNVcmwocGFzdGVkVGV4dCkpIHtcbiAgICAgICAgICBpZiAoIXNlbGVjdGlvbkNvbnRhaW5zSW5saW5lcyhlZGl0b3IsIChub2RlKSA9PiAhaXNUZXh0KG5vZGUpKSkge1xuICAgICAgICAgICAgVHJhbnNmb3Jtcy53cmFwTm9kZXMoXG4gICAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY3VzdG9tLWxpbmtcIixcbiAgICAgICAgICAgICAgICB1cmw6IHBhc3RlZFRleHQsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdDogc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIHNwbGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIG1hdGNoOiBpc1BsYWluVGV4dFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc2hvdWxkSW52b2tlRGVmYXVsdEJlaGF2aW9yID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzaG91bGRJbnZva2VEZWZhdWx0QmVoYXZpb3IpIHtcbiAgICAgIGluc2VydERhdGEoZGF0YSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gZWRpdG9yO1xufVxuZnVuY3Rpb24gaXNDb21wb3NlckJvZHlDdXN0b21MaW5rKG5vZGUpIHtcbiAgcmV0dXJuIEVsZW1lbnQuaXNFbGVtZW50KG5vZGUpICYmIG5vZGUudHlwZSA9PT0gXCJjdXN0b20tbGlua1wiO1xufVxuXG5leHBvcnQgeyBpc0NvbXBvc2VyQm9keUN1c3RvbUxpbmssIHdpdGhDdXN0b21MaW5rcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWxpbmtzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/custom-links.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/empty-clear-formatting.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/plugins/empty-clear-formatting.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withEmptyClearFormatting: () => (/* binding */ withEmptyClearFormatting)\n/* harmony export */ });\n/* harmony import */ var _utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/is-empty.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty.mjs\");\n/* harmony import */ var _utils_marks_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/marks.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/marks.mjs\");\n\n\n\nfunction withEmptyClearFormatting(editor) {\n  const { onChange } = editor;\n  editor.onChange = (options) => {\n    if ((0,_utils_is_empty_mjs__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(editor, editor.children)) {\n      (0,_utils_marks_mjs__WEBPACK_IMPORTED_MODULE_1__.removeMarks)(editor);\n    }\n    onChange(options);\n  };\n  return editor;\n}\n\n\n//# sourceMappingURL=empty-clear-formatting.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL2VtcHR5LWNsZWFyLWZvcm1hdHRpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNDOztBQUVqRDtBQUNBLFVBQVUsV0FBVztBQUNyQjtBQUNBLFFBQVEsNERBQU87QUFDZixNQUFNLDZEQUFXO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3Qvc2xhdGUvcGx1Z2lucy9lbXB0eS1jbGVhci1mb3JtYXR0aW5nLm1qcz8xNzAzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICcuLi91dGlscy9pcy1lbXB0eS5tanMnO1xuaW1wb3J0IHsgcmVtb3ZlTWFya3MgfSBmcm9tICcuLi91dGlscy9tYXJrcy5tanMnO1xuXG5mdW5jdGlvbiB3aXRoRW1wdHlDbGVhckZvcm1hdHRpbmcoZWRpdG9yKSB7XG4gIGNvbnN0IHsgb25DaGFuZ2UgfSA9IGVkaXRvcjtcbiAgZWRpdG9yLm9uQ2hhbmdlID0gKG9wdGlvbnMpID0+IHtcbiAgICBpZiAoaXNFbXB0eShlZGl0b3IsIGVkaXRvci5jaGlsZHJlbikpIHtcbiAgICAgIHJlbW92ZU1hcmtzKGVkaXRvcik7XG4gICAgfVxuICAgIG9uQ2hhbmdlKG9wdGlvbnMpO1xuICB9O1xuICByZXR1cm4gZWRpdG9yO1xufVxuXG5leHBvcnQgeyB3aXRoRW1wdHlDbGVhckZvcm1hdHRpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LWNsZWFyLWZvcm1hdHRpbmcubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/empty-clear-formatting.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MENTION_CHARACTER: () => (/* binding */ MENTION_CHARACTER),\n/* harmony export */   getMentionDraftAtSelection: () => (/* binding */ getMentionDraftAtSelection),\n/* harmony export */   insertMention: () => (/* binding */ insertMention),\n/* harmony export */   insertMentionCharacter: () => (/* binding */ insertMentionCharacter),\n/* harmony export */   isComposerBodyMention: () => (/* binding */ isComposerBodyMention),\n/* harmony export */   withMentions: () => (/* binding */ withMentions)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/get-character.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-character.mjs\");\n/* harmony import */ var _utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/get-match-range.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-match-range.mjs\");\n/* harmony import */ var _utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/is-empty-string.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty-string.mjs\");\n/* harmony import */ var _utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/is-selection-collapsed.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-selection-collapsed.mjs\");\n\n\n\n\n\n\nconst MENTION_CHARACTER = \"@\";\nfunction getMentionDraftAtSelection(editor) {\n  const { selection } = editor;\n  if (!(0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(selection)) {\n    return;\n  }\n  const match = (0,_utils_get_match_range_mjs__WEBPACK_IMPORTED_MODULE_1__.getMatchRange)(editor, selection);\n  if (!match) {\n    return;\n  }\n  const matchText = slate__WEBPACK_IMPORTED_MODULE_2__.Editor.string(editor, match);\n  if (!matchText.startsWith(MENTION_CHARACTER)) {\n    return;\n  }\n  return {\n    range: match,\n    text: matchText.substring(1)\n  };\n}\nfunction isComposerBodyMention(node) {\n  return slate__WEBPACK_IMPORTED_MODULE_2__.Element.isElement(node) && node.type === \"mention\";\n}\nfunction insertMention(editor, userId) {\n  const mention = {\n    type: \"mention\",\n    id: userId,\n    children: [{ text: \"\" }]\n  };\n  slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.insertNodes(editor, mention);\n  slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.move(editor);\n  const afterCharacter = editor.selection ? (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_3__.getCharacterAfter)(editor, editor.selection) : void 0;\n  if (!afterCharacter || afterCharacter.void) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.insertText(editor, \" \");\n  } else if ((0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmptyString)(afterCharacter.text)) {\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.move(editor);\n  }\n}\nfunction insertMentionCharacter(editor) {\n  if (!editor.selection) {\n    return;\n  }\n  const beforeCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_3__.getCharacterBefore)(editor, editor.selection, {\n    filterVoids: true\n  });\n  const afterCharacter = (0,_utils_get_character_mjs__WEBPACK_IMPORTED_MODULE_3__.getCharacterAfter)(editor, editor.selection, {\n    filterVoids: true\n  });\n  const shouldInsertSpaceBefore = beforeCharacter && !(0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmptyString)(beforeCharacter.text);\n  const shouldInsertSpaceAfter = afterCharacter && !(0,_utils_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isEmptyString)(afterCharacter.text);\n  if ((0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(editor.selection)) {\n    const text = (shouldInsertSpaceBefore ? \" \" : \"\") + MENTION_CHARACTER + (shouldInsertSpaceAfter ? \" \" : \"\");\n    editor.insertText(text);\n    if (shouldInsertSpaceAfter) {\n      slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.move(editor, {\n        distance: 1,\n        unit: \"character\",\n        reverse: true\n      });\n    }\n  } else {\n    const beforeText = (shouldInsertSpaceBefore ? \" \" : \"\") + MENTION_CHARACTER;\n    editor.insertText(beforeText, { at: slate__WEBPACK_IMPORTED_MODULE_2__.Range.start(editor.selection) });\n    if (shouldInsertSpaceAfter) {\n      editor.insertText(\" \", { at: slate__WEBPACK_IMPORTED_MODULE_2__.Range.end(editor.selection) });\n    }\n    slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.collapse(editor, { edge: \"end\" });\n  }\n}\nfunction withMentions(editor) {\n  const { isInline, isVoid, markableVoid, deleteBackward } = editor;\n  editor.isInline = (element) => {\n    return isComposerBodyMention(element) || isInline(element);\n  };\n  editor.isVoid = (element) => {\n    return isComposerBodyMention(element) || isVoid(element);\n  };\n  editor.markableVoid = (element) => {\n    return isComposerBodyMention(element) || markableVoid(element);\n  };\n  editor.deleteBackward = (unit) => {\n    const { selection } = editor;\n    if ((0,_utils_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(selection)) {\n      const [mention] = slate__WEBPACK_IMPORTED_MODULE_2__.Editor.nodes(editor, {\n        at: unit === \"character\" ? slate__WEBPACK_IMPORTED_MODULE_2__.Editor.before(editor, selection, { unit: \"character\" }) : selection,\n        match: isComposerBodyMention\n      });\n      deleteBackward(unit);\n      if (mention) {\n        slate__WEBPACK_IMPORTED_MODULE_2__.Transforms.insertText(editor, MENTION_CHARACTER);\n      }\n    } else {\n      deleteBackward(unit);\n    }\n  };\n  return editor;\n}\n\n\n//# sourceMappingURL=mentions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL21lbnRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUEyRDtBQUN3QjtBQUN0QjtBQUNBO0FBQ2M7O0FBRTNFO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsT0FBTyx1RkFBb0I7QUFDM0I7QUFDQTtBQUNBLGdCQUFnQix5RUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IseUNBQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywwQ0FBTztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQSxFQUFFLDZDQUFVO0FBQ1osRUFBRSw2Q0FBVTtBQUNaLDRDQUE0QywyRUFBaUI7QUFDN0Q7QUFDQSxJQUFJLDZDQUFVO0FBQ2QsSUFBSSxTQUFTLHlFQUFhO0FBQzFCLElBQUksNkNBQVU7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNEVBQWtCO0FBQzVDO0FBQ0EsR0FBRztBQUNILHlCQUF5QiwyRUFBaUI7QUFDMUM7QUFDQSxHQUFHO0FBQ0gsc0RBQXNELHlFQUFhO0FBQ25FLG9EQUFvRCx5RUFBYTtBQUNqRSxNQUFNLHVGQUFvQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLDZDQUFVO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLElBQUk7QUFDSjtBQUNBLG9DQUFvQyxJQUFJLHdDQUFLLDBCQUEwQjtBQUN2RTtBQUNBLCtCQUErQixJQUFJLHdDQUFLLHdCQUF3QjtBQUNoRTtBQUNBLElBQUksNkNBQVUsb0JBQW9CLGFBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpREFBaUQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEIsUUFBUSx1RkFBb0I7QUFDNUIsd0JBQXdCLHlDQUFNO0FBQzlCLG1DQUFtQyx5Q0FBTSw2QkFBNkIsbUJBQW1CO0FBQ3pGO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxRQUFRLDZDQUFVO0FBQ2xCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFJO0FBQ3JJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3Qvc2xhdGUvcGx1Z2lucy9tZW50aW9ucy5tanM/OWIyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3IsIFRyYW5zZm9ybXMsIFJhbmdlLCBFbGVtZW50IH0gZnJvbSAnc2xhdGUnO1xuaW1wb3J0IHsgZ2V0Q2hhcmFjdGVyQWZ0ZXIsIGdldENoYXJhY3RlckJlZm9yZSB9IGZyb20gJy4uL3V0aWxzL2dldC1jaGFyYWN0ZXIubWpzJztcbmltcG9ydCB7IGdldE1hdGNoUmFuZ2UgfSBmcm9tICcuLi91dGlscy9nZXQtbWF0Y2gtcmFuZ2UubWpzJztcbmltcG9ydCB7IGlzRW1wdHlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9pcy1lbXB0eS1zdHJpbmcubWpzJztcbmltcG9ydCB7IGlzU2VsZWN0aW9uQ29sbGFwc2VkIH0gZnJvbSAnLi4vdXRpbHMvaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5tanMnO1xuXG5jb25zdCBNRU5USU9OX0NIQVJBQ1RFUiA9IFwiQFwiO1xuZnVuY3Rpb24gZ2V0TWVudGlvbkRyYWZ0QXRTZWxlY3Rpb24oZWRpdG9yKSB7XG4gIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBlZGl0b3I7XG4gIGlmICghaXNTZWxlY3Rpb25Db2xsYXBzZWQoc2VsZWN0aW9uKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBtYXRjaCA9IGdldE1hdGNoUmFuZ2UoZWRpdG9yLCBzZWxlY3Rpb24pO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG1hdGNoVGV4dCA9IEVkaXRvci5zdHJpbmcoZWRpdG9yLCBtYXRjaCk7XG4gIGlmICghbWF0Y2hUZXh0LnN0YXJ0c1dpdGgoTUVOVElPTl9DSEFSQUNURVIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiB7XG4gICAgcmFuZ2U6IG1hdGNoLFxuICAgIHRleHQ6IG1hdGNoVGV4dC5zdWJzdHJpbmcoMSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzQ29tcG9zZXJCb2R5TWVudGlvbihub2RlKSB7XG4gIHJldHVybiBFbGVtZW50LmlzRWxlbWVudChub2RlKSAmJiBub2RlLnR5cGUgPT09IFwibWVudGlvblwiO1xufVxuZnVuY3Rpb24gaW5zZXJ0TWVudGlvbihlZGl0b3IsIHVzZXJJZCkge1xuICBjb25zdCBtZW50aW9uID0ge1xuICAgIHR5cGU6IFwibWVudGlvblwiLFxuICAgIGlkOiB1c2VySWQsXG4gICAgY2hpbGRyZW46IFt7IHRleHQ6IFwiXCIgfV1cbiAgfTtcbiAgVHJhbnNmb3Jtcy5pbnNlcnROb2RlcyhlZGl0b3IsIG1lbnRpb24pO1xuICBUcmFuc2Zvcm1zLm1vdmUoZWRpdG9yKTtcbiAgY29uc3QgYWZ0ZXJDaGFyYWN0ZXIgPSBlZGl0b3Iuc2VsZWN0aW9uID8gZ2V0Q2hhcmFjdGVyQWZ0ZXIoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uKSA6IHZvaWQgMDtcbiAgaWYgKCFhZnRlckNoYXJhY3RlciB8fCBhZnRlckNoYXJhY3Rlci52b2lkKSB7XG4gICAgVHJhbnNmb3Jtcy5pbnNlcnRUZXh0KGVkaXRvciwgXCIgXCIpO1xuICB9IGVsc2UgaWYgKGlzRW1wdHlTdHJpbmcoYWZ0ZXJDaGFyYWN0ZXIudGV4dCkpIHtcbiAgICBUcmFuc2Zvcm1zLm1vdmUoZWRpdG9yKTtcbiAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0TWVudGlvbkNoYXJhY3RlcihlZGl0b3IpIHtcbiAgaWYgKCFlZGl0b3Iuc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGJlZm9yZUNoYXJhY3RlciA9IGdldENoYXJhY3RlckJlZm9yZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24sIHtcbiAgICBmaWx0ZXJWb2lkczogdHJ1ZVxuICB9KTtcbiAgY29uc3QgYWZ0ZXJDaGFyYWN0ZXIgPSBnZXRDaGFyYWN0ZXJBZnRlcihlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24sIHtcbiAgICBmaWx0ZXJWb2lkczogdHJ1ZVxuICB9KTtcbiAgY29uc3Qgc2hvdWxkSW5zZXJ0U3BhY2VCZWZvcmUgPSBiZWZvcmVDaGFyYWN0ZXIgJiYgIWlzRW1wdHlTdHJpbmcoYmVmb3JlQ2hhcmFjdGVyLnRleHQpO1xuICBjb25zdCBzaG91bGRJbnNlcnRTcGFjZUFmdGVyID0gYWZ0ZXJDaGFyYWN0ZXIgJiYgIWlzRW1wdHlTdHJpbmcoYWZ0ZXJDaGFyYWN0ZXIudGV4dCk7XG4gIGlmIChpc1NlbGVjdGlvbkNvbGxhcHNlZChlZGl0b3Iuc2VsZWN0aW9uKSkge1xuICAgIGNvbnN0IHRleHQgPSAoc2hvdWxkSW5zZXJ0U3BhY2VCZWZvcmUgPyBcIiBcIiA6IFwiXCIpICsgTUVOVElPTl9DSEFSQUNURVIgKyAoc2hvdWxkSW5zZXJ0U3BhY2VBZnRlciA/IFwiIFwiIDogXCJcIik7XG4gICAgZWRpdG9yLmluc2VydFRleHQodGV4dCk7XG4gICAgaWYgKHNob3VsZEluc2VydFNwYWNlQWZ0ZXIpIHtcbiAgICAgIFRyYW5zZm9ybXMubW92ZShlZGl0b3IsIHtcbiAgICAgICAgZGlzdGFuY2U6IDEsXG4gICAgICAgIHVuaXQ6IFwiY2hhcmFjdGVyXCIsXG4gICAgICAgIHJldmVyc2U6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBiZWZvcmVUZXh0ID0gKHNob3VsZEluc2VydFNwYWNlQmVmb3JlID8gXCIgXCIgOiBcIlwiKSArIE1FTlRJT05fQ0hBUkFDVEVSO1xuICAgIGVkaXRvci5pbnNlcnRUZXh0KGJlZm9yZVRleHQsIHsgYXQ6IFJhbmdlLnN0YXJ0KGVkaXRvci5zZWxlY3Rpb24pIH0pO1xuICAgIGlmIChzaG91bGRJbnNlcnRTcGFjZUFmdGVyKSB7XG4gICAgICBlZGl0b3IuaW5zZXJ0VGV4dChcIiBcIiwgeyBhdDogUmFuZ2UuZW5kKGVkaXRvci5zZWxlY3Rpb24pIH0pO1xuICAgIH1cbiAgICBUcmFuc2Zvcm1zLmNvbGxhcHNlKGVkaXRvciwgeyBlZGdlOiBcImVuZFwiIH0pO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoTWVudGlvbnMoZWRpdG9yKSB7XG4gIGNvbnN0IHsgaXNJbmxpbmUsIGlzVm9pZCwgbWFya2FibGVWb2lkLCBkZWxldGVCYWNrd2FyZCB9ID0gZWRpdG9yO1xuICBlZGl0b3IuaXNJbmxpbmUgPSAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiBpc0NvbXBvc2VyQm9keU1lbnRpb24oZWxlbWVudCkgfHwgaXNJbmxpbmUoZWxlbWVudCk7XG4gIH07XG4gIGVkaXRvci5pc1ZvaWQgPSAoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiBpc0NvbXBvc2VyQm9keU1lbnRpb24oZWxlbWVudCkgfHwgaXNWb2lkKGVsZW1lbnQpO1xuICB9O1xuICBlZGl0b3IubWFya2FibGVWb2lkID0gKGVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4gaXNDb21wb3NlckJvZHlNZW50aW9uKGVsZW1lbnQpIHx8IG1hcmthYmxlVm9pZChlbGVtZW50KTtcbiAgfTtcbiAgZWRpdG9yLmRlbGV0ZUJhY2t3YXJkID0gKHVuaXQpID0+IHtcbiAgICBjb25zdCB7IHNlbGVjdGlvbiB9ID0gZWRpdG9yO1xuICAgIGlmIChpc1NlbGVjdGlvbkNvbGxhcHNlZChzZWxlY3Rpb24pKSB7XG4gICAgICBjb25zdCBbbWVudGlvbl0gPSBFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICAgIGF0OiB1bml0ID09PSBcImNoYXJhY3RlclwiID8gRWRpdG9yLmJlZm9yZShlZGl0b3IsIHNlbGVjdGlvbiwgeyB1bml0OiBcImNoYXJhY3RlclwiIH0pIDogc2VsZWN0aW9uLFxuICAgICAgICBtYXRjaDogaXNDb21wb3NlckJvZHlNZW50aW9uXG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZUJhY2t3YXJkKHVuaXQpO1xuICAgICAgaWYgKG1lbnRpb24pIHtcbiAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnRUZXh0KGVkaXRvciwgTUVOVElPTl9DSEFSQUNURVIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVCYWNrd2FyZCh1bml0KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBlZGl0b3I7XG59XG5cbmV4cG9ydCB7IE1FTlRJT05fQ0hBUkFDVEVSLCBnZXRNZW50aW9uRHJhZnRBdFNlbGVjdGlvbiwgaW5zZXJ0TWVudGlvbiwgaW5zZXJ0TWVudGlvbkNoYXJhY3RlciwgaXNDb21wb3NlckJvZHlNZW50aW9uLCB3aXRoTWVudGlvbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnRpb25zLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/mentions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/paste-html.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/plugins/paste-html.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withPasteHtml: () => (/* binding */ withPasteHtml)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_hyperscript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate-hyperscript */ \"(ssr)/./node_modules/slate-hyperscript/dist/index.es.js\");\n\n\n\nfunction areUrlsEqual(a, b) {\n  try {\n    const urlA = new URL(a);\n    const urlB = new URL(b);\n    return urlA.origin === urlB.origin && urlA.pathname === urlB.pathname;\n  } catch {\n    return false;\n  }\n}\nconst createParagraphElement = () => ({\n  type: \"paragraph\"\n});\nconst ELEMENT_TAGS = {\n  A: (element) => {\n    const href = element.getAttribute(\"href\");\n    const innerText = element.innerText;\n    return {\n      type: href && areUrlsEqual(href, innerText) ? \"auto-link\" : \"custom-link\",\n      url: href ?? \"\"\n    };\n  },\n  P: createParagraphElement,\n  BLOCKQUOTE: createParagraphElement,\n  H1: createParagraphElement,\n  H2: createParagraphElement,\n  H3: createParagraphElement,\n  H4: createParagraphElement,\n  H5: createParagraphElement,\n  H6: createParagraphElement,\n  LI: createParagraphElement\n};\nconst TEXT_TAGS = {\n  CODE: () => ({ code: true }),\n  DEL: () => ({ strikethrough: true }),\n  EM: () => ({ italic: true }),\n  I: () => ({ italic: true }),\n  S: () => ({ strikethrough: true }),\n  STRONG: () => ({ bold: true })\n};\nfunction flattenListItems(node) {\n  const listItems = [];\n  if (node.nodeName === \"LI\") {\n    listItems.push(node);\n  }\n  node.childNodes.forEach((child) => {\n    if (child.nodeType === 1) {\n      listItems.push(...flattenListItems(child));\n    }\n  });\n  return listItems;\n}\nfunction deserialize(node) {\n  if (node.nodeType === 3) {\n    return node.textContent;\n  } else if (node.nodeType !== 1) {\n    return null;\n  } else if (node.nodeName === \"BR\") {\n    return \"\\n\";\n  }\n  const childNodes = Array.from(node.childNodes);\n  let children = childNodes.map(deserialize).flat();\n  if (node.nodeName === \"UL\" || node.nodeName === \"OL\") {\n    const listItems = flattenListItems(node);\n    children = listItems.map((li) => deserialize(li)).flat();\n  }\n  if (children.length === 0) {\n    children = [{ text: \"\" }];\n  }\n  if (node.nodeName === \"BODY\") {\n    return (0,slate_hyperscript__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"fragment\", {}, children);\n  }\n  if (ELEMENT_TAGS[node.nodeName]) {\n    const attrs = ELEMENT_TAGS[node.nodeName](node);\n    return (0,slate_hyperscript__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"element\", attrs, children);\n  }\n  if (TEXT_TAGS[node.nodeName]) {\n    const attrs = TEXT_TAGS[node.nodeName](node);\n    return children.map((child) => (0,slate_hyperscript__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"text\", attrs, child));\n  }\n  return children;\n}\nfunction withPasteHtml(editor) {\n  const { insertData } = editor;\n  editor.insertData = (data) => {\n    const html = data.getData(\"text/html\");\n    if (html) {\n      const parsed = new DOMParser().parseFromString(html, \"text/html\");\n      const fragment = deserialize(parsed.body);\n      if (fragment !== null && Array.isArray(fragment)) {\n        slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.insertFragment(editor, fragment);\n        return;\n      }\n    }\n    insertData(data);\n  };\n  return editor;\n}\n\n\n//# sourceMappingURL=paste-html.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS9wbHVnaW5zL3Bhc3RlLWh0bWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNLOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0IsZ0JBQWdCLHFCQUFxQjtBQUNyQyxlQUFlLGNBQWM7QUFDN0IsY0FBYyxjQUFjO0FBQzVCLGNBQWMscUJBQXFCO0FBQ25DLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUI7QUFDQTtBQUNBLFdBQVcsc0RBQUcsZUFBZTtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNEQUFHO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHNEQUFHO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxhQUFhO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsNkNBQVU7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3Qvc2xhdGUvcGx1Z2lucy9wYXN0ZS1odG1sLm1qcz9hYWZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zZm9ybXMgfSBmcm9tICdzbGF0ZSc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdzbGF0ZS1oeXBlcnNjcmlwdCc7XG5cbmZ1bmN0aW9uIGFyZVVybHNFcXVhbChhLCBiKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsQSA9IG5ldyBVUkwoYSk7XG4gICAgY29uc3QgdXJsQiA9IG5ldyBVUkwoYik7XG4gICAgcmV0dXJuIHVybEEub3JpZ2luID09PSB1cmxCLm9yaWdpbiAmJiB1cmxBLnBhdGhuYW1lID09PSB1cmxCLnBhdGhuYW1lO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZVBhcmFncmFwaEVsZW1lbnQgPSAoKSA9PiAoe1xuICB0eXBlOiBcInBhcmFncmFwaFwiXG59KTtcbmNvbnN0IEVMRU1FTlRfVEFHUyA9IHtcbiAgQTogKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBocmVmID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgIGNvbnN0IGlubmVyVGV4dCA9IGVsZW1lbnQuaW5uZXJUZXh0O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBocmVmICYmIGFyZVVybHNFcXVhbChocmVmLCBpbm5lclRleHQpID8gXCJhdXRvLWxpbmtcIiA6IFwiY3VzdG9tLWxpbmtcIixcbiAgICAgIHVybDogaHJlZiA/PyBcIlwiXG4gICAgfTtcbiAgfSxcbiAgUDogY3JlYXRlUGFyYWdyYXBoRWxlbWVudCxcbiAgQkxPQ0tRVU9URTogY3JlYXRlUGFyYWdyYXBoRWxlbWVudCxcbiAgSDE6IGNyZWF0ZVBhcmFncmFwaEVsZW1lbnQsXG4gIEgyOiBjcmVhdGVQYXJhZ3JhcGhFbGVtZW50LFxuICBIMzogY3JlYXRlUGFyYWdyYXBoRWxlbWVudCxcbiAgSDQ6IGNyZWF0ZVBhcmFncmFwaEVsZW1lbnQsXG4gIEg1OiBjcmVhdGVQYXJhZ3JhcGhFbGVtZW50LFxuICBINjogY3JlYXRlUGFyYWdyYXBoRWxlbWVudCxcbiAgTEk6IGNyZWF0ZVBhcmFncmFwaEVsZW1lbnRcbn07XG5jb25zdCBURVhUX1RBR1MgPSB7XG4gIENPREU6ICgpID0+ICh7IGNvZGU6IHRydWUgfSksXG4gIERFTDogKCkgPT4gKHsgc3RyaWtldGhyb3VnaDogdHJ1ZSB9KSxcbiAgRU06ICgpID0+ICh7IGl0YWxpYzogdHJ1ZSB9KSxcbiAgSTogKCkgPT4gKHsgaXRhbGljOiB0cnVlIH0pLFxuICBTOiAoKSA9PiAoeyBzdHJpa2V0aHJvdWdoOiB0cnVlIH0pLFxuICBTVFJPTkc6ICgpID0+ICh7IGJvbGQ6IHRydWUgfSlcbn07XG5mdW5jdGlvbiBmbGF0dGVuTGlzdEl0ZW1zKG5vZGUpIHtcbiAgY29uc3QgbGlzdEl0ZW1zID0gW107XG4gIGlmIChub2RlLm5vZGVOYW1lID09PSBcIkxJXCIpIHtcbiAgICBsaXN0SXRlbXMucHVzaChub2RlKTtcbiAgfVxuICBub2RlLmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIGxpc3RJdGVtcy5wdXNoKC4uLmZsYXR0ZW5MaXN0SXRlbXMoY2hpbGQpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbGlzdEl0ZW1zO1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemUobm9kZSkge1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgIHJldHVybiBub2RlLnRleHRDb250ZW50O1xuICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChub2RlLm5vZGVOYW1lID09PSBcIkJSXCIpIHtcbiAgICByZXR1cm4gXCJcXG5cIjtcbiAgfVxuICBjb25zdCBjaGlsZE5vZGVzID0gQXJyYXkuZnJvbShub2RlLmNoaWxkTm9kZXMpO1xuICBsZXQgY2hpbGRyZW4gPSBjaGlsZE5vZGVzLm1hcChkZXNlcmlhbGl6ZSkuZmxhdCgpO1xuICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gXCJVTFwiIHx8IG5vZGUubm9kZU5hbWUgPT09IFwiT0xcIikge1xuICAgIGNvbnN0IGxpc3RJdGVtcyA9IGZsYXR0ZW5MaXN0SXRlbXMobm9kZSk7XG4gICAgY2hpbGRyZW4gPSBsaXN0SXRlbXMubWFwKChsaSkgPT4gZGVzZXJpYWxpemUobGkpKS5mbGF0KCk7XG4gIH1cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgIGNoaWxkcmVuID0gW3sgdGV4dDogXCJcIiB9XTtcbiAgfVxuICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gXCJCT0RZXCIpIHtcbiAgICByZXR1cm4ganN4KFwiZnJhZ21lbnRcIiwge30sIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoRUxFTUVOVF9UQUdTW25vZGUubm9kZU5hbWVdKSB7XG4gICAgY29uc3QgYXR0cnMgPSBFTEVNRU5UX1RBR1Nbbm9kZS5ub2RlTmFtZV0obm9kZSk7XG4gICAgcmV0dXJuIGpzeChcImVsZW1lbnRcIiwgYXR0cnMsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoVEVYVF9UQUdTW25vZGUubm9kZU5hbWVdKSB7XG4gICAgY29uc3QgYXR0cnMgPSBURVhUX1RBR1Nbbm9kZS5ub2RlTmFtZV0obm9kZSk7XG4gICAgcmV0dXJuIGNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IGpzeChcInRleHRcIiwgYXR0cnMsIGNoaWxkKSk7XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuZnVuY3Rpb24gd2l0aFBhc3RlSHRtbChlZGl0b3IpIHtcbiAgY29uc3QgeyBpbnNlcnREYXRhIH0gPSBlZGl0b3I7XG4gIGVkaXRvci5pbnNlcnREYXRhID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCBodG1sID0gZGF0YS5nZXREYXRhKFwidGV4dC9odG1sXCIpO1xuICAgIGlmIChodG1sKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xuICAgICAgY29uc3QgZnJhZ21lbnQgPSBkZXNlcmlhbGl6ZShwYXJzZWQuYm9keSk7XG4gICAgICBpZiAoZnJhZ21lbnQgIT09IG51bGwgJiYgQXJyYXkuaXNBcnJheShmcmFnbWVudCkpIHtcbiAgICAgICAgVHJhbnNmb3Jtcy5pbnNlcnRGcmFnbWVudChlZGl0b3IsIGZyYWdtZW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnNlcnREYXRhKGRhdGEpO1xuICB9O1xuICByZXR1cm4gZWRpdG9yO1xufVxuXG5leHBvcnQgeyB3aXRoUGFzdGVIdG1sIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXN0ZS1odG1sLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/plugins/paste-html.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-character.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/get-character.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCharacterAfter: () => (/* binding */ getCharacterAfter),\n/* harmony export */   getCharacterBefore: () => (/* binding */ getCharacterBefore)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\n\nfunction getCharacterBefore(editor, at, options = {}) {\n  const { filterVoids } = options;\n  const before = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.before(editor, at, {\n    unit: \"character\",\n    voids: filterVoids\n  });\n  if (before) {\n    const range = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.range(\n      editor,\n      before,\n      slate__WEBPACK_IMPORTED_MODULE_0__.Range.isRange(at) ? slate__WEBPACK_IMPORTED_MODULE_0__.Range.start(at) : at\n    );\n    const text = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.string(editor, range);\n    return {\n      range,\n      text,\n      void: text.length === 0\n    };\n  }\n  return;\n}\nfunction getCharacterAfter(editor, at, options = {}) {\n  const { filterVoids } = options;\n  const after = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.after(editor, at, {\n    unit: \"character\",\n    voids: filterVoids\n  });\n  if (after) {\n    const range = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.range(\n      editor,\n      after,\n      slate__WEBPACK_IMPORTED_MODULE_0__.Range.isRange(at) ? slate__WEBPACK_IMPORTED_MODULE_0__.Range.end(at) : at\n    );\n    const text = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.string(editor, range);\n    return {\n      range,\n      text,\n      void: text.length === 0\n    };\n  }\n  return;\n}\n\n\n//# sourceMappingURL=get-character.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9nZXQtY2hhcmFjdGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7O0FBRXRDLG9EQUFvRDtBQUNwRCxVQUFVLGNBQWM7QUFDeEIsaUJBQWlCLHlDQUFNO0FBQ3ZCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxrQkFBa0IseUNBQU07QUFDeEI7QUFDQTtBQUNBLE1BQU0sd0NBQUssZUFBZSx3Q0FBSztBQUMvQjtBQUNBLGlCQUFpQix5Q0FBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELFVBQVUsY0FBYztBQUN4QixnQkFBZ0IseUNBQU07QUFDdEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGtCQUFrQix5Q0FBTTtBQUN4QjtBQUNBO0FBQ0EsTUFBTSx3Q0FBSyxlQUFlLHdDQUFLO0FBQy9CO0FBQ0EsaUJBQWlCLHlDQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlEO0FBQ2pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3Qvc2xhdGUvdXRpbHMvZ2V0LWNoYXJhY3Rlci5tanM/ZWE1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3IsIFJhbmdlIH0gZnJvbSAnc2xhdGUnO1xuXG5mdW5jdGlvbiBnZXRDaGFyYWN0ZXJCZWZvcmUoZWRpdG9yLCBhdCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgZmlsdGVyVm9pZHMgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGJlZm9yZSA9IEVkaXRvci5iZWZvcmUoZWRpdG9yLCBhdCwge1xuICAgIHVuaXQ6IFwiY2hhcmFjdGVyXCIsXG4gICAgdm9pZHM6IGZpbHRlclZvaWRzXG4gIH0pO1xuICBpZiAoYmVmb3JlKSB7XG4gICAgY29uc3QgcmFuZ2UgPSBFZGl0b3IucmFuZ2UoXG4gICAgICBlZGl0b3IsXG4gICAgICBiZWZvcmUsXG4gICAgICBSYW5nZS5pc1JhbmdlKGF0KSA/IFJhbmdlLnN0YXJ0KGF0KSA6IGF0XG4gICAgKTtcbiAgICBjb25zdCB0ZXh0ID0gRWRpdG9yLnN0cmluZyhlZGl0b3IsIHJhbmdlKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmFuZ2UsXG4gICAgICB0ZXh0LFxuICAgICAgdm9pZDogdGV4dC5sZW5ndGggPT09IDBcbiAgICB9O1xuICB9XG4gIHJldHVybjtcbn1cbmZ1bmN0aW9uIGdldENoYXJhY3RlckFmdGVyKGVkaXRvciwgYXQsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7IGZpbHRlclZvaWRzIH0gPSBvcHRpb25zO1xuICBjb25zdCBhZnRlciA9IEVkaXRvci5hZnRlcihlZGl0b3IsIGF0LCB7XG4gICAgdW5pdDogXCJjaGFyYWN0ZXJcIixcbiAgICB2b2lkczogZmlsdGVyVm9pZHNcbiAgfSk7XG4gIGlmIChhZnRlcikge1xuICAgIGNvbnN0IHJhbmdlID0gRWRpdG9yLnJhbmdlKFxuICAgICAgZWRpdG9yLFxuICAgICAgYWZ0ZXIsXG4gICAgICBSYW5nZS5pc1JhbmdlKGF0KSA/IFJhbmdlLmVuZChhdCkgOiBhdFxuICAgICk7XG4gICAgY29uc3QgdGV4dCA9IEVkaXRvci5zdHJpbmcoZWRpdG9yLCByYW5nZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJhbmdlLFxuICAgICAgdGV4dCxcbiAgICAgIHZvaWQ6IHRleHQubGVuZ3RoID09PSAwXG4gICAgfTtcbiAgfVxuICByZXR1cm47XG59XG5cbmV4cG9ydCB7IGdldENoYXJhY3RlckFmdGVyLCBnZXRDaGFyYWN0ZXJCZWZvcmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1jaGFyYWN0ZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-character.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-dom-range.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/get-dom-range.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDOMRange: () => (/* binding */ getDOMRange)\n/* harmony export */ });\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n\n\nfunction getDOMRange(editor, range) {\n  try {\n    return slate_react__WEBPACK_IMPORTED_MODULE_0__.ReactEditor.toDOMRange(editor, range);\n  } catch (error) {\n    return getDOMRange(editor, {\n      anchor: range.anchor,\n      focus: range.anchor\n    });\n  }\n}\n\n\n//# sourceMappingURL=get-dom-range.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9nZXQtZG9tLXJhbmdlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQzs7QUFFMUM7QUFDQTtBQUNBLFdBQVcsb0RBQVc7QUFDdEIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUV1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3NsYXRlL3V0aWxzL2dldC1kb20tcmFuZ2UubWpzPzdkZTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RFZGl0b3IgfSBmcm9tICdzbGF0ZS1yZWFjdCc7XG5cbmZ1bmN0aW9uIGdldERPTVJhbmdlKGVkaXRvciwgcmFuZ2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gUmVhY3RFZGl0b3IudG9ET01SYW5nZShlZGl0b3IsIHJhbmdlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZ2V0RE9NUmFuZ2UoZWRpdG9yLCB7XG4gICAgICBhbmNob3I6IHJhbmdlLmFuY2hvcixcbiAgICAgIGZvY3VzOiByYW5nZS5hbmNob3JcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRET01SYW5nZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWRvbS1yYW5nZS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-dom-range.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-match-range.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/get-match-range.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMatchRange: () => (/* binding */ getMatchRange)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\n\nconst defaultOptions = {\n  direction: \"before\"\n};\nfunction getMatchRange(editor, at, terminators = [\" \"], options = defaultOptions) {\n  const { include, direction } = { ...defaultOptions, ...options };\n  let [start, end] = slate__WEBPACK_IMPORTED_MODULE_0__.Range.edges(at);\n  let point = start;\n  function move(direction2) {\n    const next = direction2 === \"after\" ? slate__WEBPACK_IMPORTED_MODULE_0__.Editor.after(editor, point, {\n      unit: \"character\"\n    }) : slate__WEBPACK_IMPORTED_MODULE_0__.Editor.before(editor, point, { unit: \"character\" });\n    const nextWord = next && slate__WEBPACK_IMPORTED_MODULE_0__.Editor.string(\n      editor,\n      direction2 === \"after\" ? { anchor: point, focus: next } : { anchor: next, focus: point }\n    );\n    const lastWord = nextWord && nextWord[direction2 === \"after\" ? 0 : nextWord.length - 1];\n    if (next && lastWord && !terminators.includes(lastWord)) {\n      point = next;\n      if (point.offset === 0) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  if (direction !== \"before\") {\n    point = end;\n    while (move(\"after\"))\n      ;\n    end = point;\n  }\n  if (direction !== \"after\") {\n    point = start;\n    while (move(\"before\"))\n      ;\n    start = point;\n  }\n  if (include) {\n    return {\n      anchor: slate__WEBPACK_IMPORTED_MODULE_0__.Editor.before(editor, start, { unit: \"offset\" }) ?? start,\n      focus: slate__WEBPACK_IMPORTED_MODULE_0__.Editor.after(editor, end, { unit: \"offset\" }) ?? end\n    };\n  }\n  return { anchor: start, focus: end };\n}\n\n\n//# sourceMappingURL=get-match-range.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9nZXQtbWF0Y2gtcmFuZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUscUJBQXFCLElBQUk7QUFDbkMscUJBQXFCLHdDQUFLO0FBQzFCO0FBQ0E7QUFDQSwwQ0FBMEMseUNBQU07QUFDaEQ7QUFDQSxLQUFLLElBQUkseUNBQU0seUJBQXlCLG1CQUFtQjtBQUMzRCw2QkFBNkIseUNBQU07QUFDbkM7QUFDQSxpQ0FBaUMsNkJBQTZCLElBQUk7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5Q0FBTSx5QkFBeUIsZ0JBQWdCO0FBQzdELGFBQWEseUNBQU0sc0JBQXNCLGdCQUFnQjtBQUN6RDtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUV5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3NsYXRlL3V0aWxzL2dldC1tYXRjaC1yYW5nZS5tanM/NTZiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYW5nZSwgRWRpdG9yIH0gZnJvbSAnc2xhdGUnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZGlyZWN0aW9uOiBcImJlZm9yZVwiXG59O1xuZnVuY3Rpb24gZ2V0TWF0Y2hSYW5nZShlZGl0b3IsIGF0LCB0ZXJtaW5hdG9ycyA9IFtcIiBcIl0sIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucykge1xuICBjb25zdCB7IGluY2x1ZGUsIGRpcmVjdGlvbiB9ID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICBsZXQgW3N0YXJ0LCBlbmRdID0gUmFuZ2UuZWRnZXMoYXQpO1xuICBsZXQgcG9pbnQgPSBzdGFydDtcbiAgZnVuY3Rpb24gbW92ZShkaXJlY3Rpb24yKSB7XG4gICAgY29uc3QgbmV4dCA9IGRpcmVjdGlvbjIgPT09IFwiYWZ0ZXJcIiA/IEVkaXRvci5hZnRlcihlZGl0b3IsIHBvaW50LCB7XG4gICAgICB1bml0OiBcImNoYXJhY3RlclwiXG4gICAgfSkgOiBFZGl0b3IuYmVmb3JlKGVkaXRvciwgcG9pbnQsIHsgdW5pdDogXCJjaGFyYWN0ZXJcIiB9KTtcbiAgICBjb25zdCBuZXh0V29yZCA9IG5leHQgJiYgRWRpdG9yLnN0cmluZyhcbiAgICAgIGVkaXRvcixcbiAgICAgIGRpcmVjdGlvbjIgPT09IFwiYWZ0ZXJcIiA/IHsgYW5jaG9yOiBwb2ludCwgZm9jdXM6IG5leHQgfSA6IHsgYW5jaG9yOiBuZXh0LCBmb2N1czogcG9pbnQgfVxuICAgICk7XG4gICAgY29uc3QgbGFzdFdvcmQgPSBuZXh0V29yZCAmJiBuZXh0V29yZFtkaXJlY3Rpb24yID09PSBcImFmdGVyXCIgPyAwIDogbmV4dFdvcmQubGVuZ3RoIC0gMV07XG4gICAgaWYgKG5leHQgJiYgbGFzdFdvcmQgJiYgIXRlcm1pbmF0b3JzLmluY2x1ZGVzKGxhc3RXb3JkKSkge1xuICAgICAgcG9pbnQgPSBuZXh0O1xuICAgICAgaWYgKHBvaW50Lm9mZnNldCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGRpcmVjdGlvbiAhPT0gXCJiZWZvcmVcIikge1xuICAgIHBvaW50ID0gZW5kO1xuICAgIHdoaWxlIChtb3ZlKFwiYWZ0ZXJcIikpXG4gICAgICA7XG4gICAgZW5kID0gcG9pbnQ7XG4gIH1cbiAgaWYgKGRpcmVjdGlvbiAhPT0gXCJhZnRlclwiKSB7XG4gICAgcG9pbnQgPSBzdGFydDtcbiAgICB3aGlsZSAobW92ZShcImJlZm9yZVwiKSlcbiAgICAgIDtcbiAgICBzdGFydCA9IHBvaW50O1xuICB9XG4gIGlmIChpbmNsdWRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvcjogRWRpdG9yLmJlZm9yZShlZGl0b3IsIHN0YXJ0LCB7IHVuaXQ6IFwib2Zmc2V0XCIgfSkgPz8gc3RhcnQsXG4gICAgICBmb2N1czogRWRpdG9yLmFmdGVyKGVkaXRvciwgZW5kLCB7IHVuaXQ6IFwib2Zmc2V0XCIgfSkgPz8gZW5kXG4gICAgfTtcbiAgfVxuICByZXR1cm4geyBhbmNob3I6IHN0YXJ0LCBmb2N1czogZW5kIH07XG59XG5cbmV4cG9ydCB7IGdldE1hdGNoUmFuZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1tYXRjaC1yYW5nZS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-match-range.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty-string.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty-string.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isEmptyString: () => (/* binding */ isEmptyString)\n/* harmony export */ });\nfunction isEmptyString(string) {\n  return !string.trim();\n}\n\n\n//# sourceMappingURL=is-empty-string.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9pcy1lbXB0eS1zdHJpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3Qvc2xhdGUvdXRpbHMvaXMtZW1wdHktc3RyaW5nLm1qcz8yMWRhIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzRW1wdHlTdHJpbmcoc3RyaW5nKSB7XG4gIHJldHVybiAhc3RyaW5nLnRyaW0oKTtcbn1cblxuZXhwb3J0IHsgaXNFbXB0eVN0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtZW1wdHktc3RyaW5nLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty-string.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-empty-string.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty-string.mjs\");\n/* harmony import */ var _is_text_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-text.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-text.mjs\");\n\n\n\n\nfunction isEmpty(editor, children) {\n  for (const child of children) {\n    if ((0,_is_text_mjs__WEBPACK_IMPORTED_MODULE_0__.isText)(child)) {\n      if (!(0,_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmptyString)(child.text)) {\n        return false;\n      }\n    } else if (child.type === \"paragraph\") {\n      if (child.children.length > 1 || !((0,_is_text_mjs__WEBPACK_IMPORTED_MODULE_0__.isText)(child.children[0]) && (0,_is_empty_string_mjs__WEBPACK_IMPORTED_MODULE_1__.isEmptyString)(child.children[0].text))) {\n        return false;\n      }\n    } else {\n      if (!slate__WEBPACK_IMPORTED_MODULE_2__.Editor.isEmpty(editor, child)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n\n//# sourceMappingURL=is-empty.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9pcy1lbXB0eS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUN1QjtBQUNmOztBQUV2QztBQUNBO0FBQ0EsUUFBUSxvREFBTTtBQUNkLFdBQVcsbUVBQWE7QUFDeEI7QUFDQTtBQUNBLE1BQU07QUFDTix5Q0FBeUMsb0RBQU0sdUJBQXVCLG1FQUFhO0FBQ25GO0FBQ0E7QUFDQSxNQUFNO0FBQ04sV0FBVyx5Q0FBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3Qvc2xhdGUvdXRpbHMvaXMtZW1wdHkubWpzPzBkZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yIH0gZnJvbSAnc2xhdGUnO1xuaW1wb3J0IHsgaXNFbXB0eVN0cmluZyB9IGZyb20gJy4vaXMtZW1wdHktc3RyaW5nLm1qcyc7XG5pbXBvcnQgeyBpc1RleHQgfSBmcm9tICcuL2lzLXRleHQubWpzJztcblxuZnVuY3Rpb24gaXNFbXB0eShlZGl0b3IsIGNoaWxkcmVuKSB7XG4gIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICBpZiAoaXNUZXh0KGNoaWxkKSkge1xuICAgICAgaWYgKCFpc0VtcHR5U3RyaW5nKGNoaWxkLnRleHQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09IFwicGFyYWdyYXBoXCIpIHtcbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbi5sZW5ndGggPiAxIHx8ICEoaXNUZXh0KGNoaWxkLmNoaWxkcmVuWzBdKSAmJiBpc0VtcHR5U3RyaW5nKGNoaWxkLmNoaWxkcmVuWzBdLnRleHQpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghRWRpdG9yLmlzRW1wdHkoZWRpdG9yLCBjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgaXNFbXB0eSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtZW1wdHkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-empty.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-selection-collapsed.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/is-selection-collapsed.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\n\nfunction isSelectionCollapsed(selection) {\n  return selection !== null && slate__WEBPACK_IMPORTED_MODULE_0__.Range.isCollapsed(selection);\n}\n\n\n//# sourceMappingURL=is-selection-collapsed.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9pcy1zZWxlY3Rpb24tY29sbGFwc2VkLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4Qjs7QUFFOUI7QUFDQSwrQkFBK0Isd0NBQUs7QUFDcEM7O0FBRWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3Qvc2xhdGUvdXRpbHMvaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5tanM/N2EyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYW5nZSB9IGZyb20gJ3NsYXRlJztcblxuZnVuY3Rpb24gaXNTZWxlY3Rpb25Db2xsYXBzZWQoc2VsZWN0aW9uKSB7XG4gIHJldHVybiBzZWxlY3Rpb24gIT09IG51bGwgJiYgUmFuZ2UuaXNDb2xsYXBzZWQoc2VsZWN0aW9uKTtcbn1cblxuZXhwb3J0IHsgaXNTZWxlY3Rpb25Db2xsYXBzZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLXNlbGVjdGlvbi1jb2xsYXBzZWQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-selection-collapsed.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-text.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/is-text.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPlainText: () => (/* binding */ isPlainText),\n/* harmony export */   isText: () => (/* binding */ isText)\n/* harmony export */ });\nfunction isText(element) {\n  return !(\"type\" in element) && \"text\" in element && typeof element.text === \"string\";\n}\nfunction isPlainText(node) {\n  return isText(node) && Object.keys(node).length === 1;\n}\n\n\n//# sourceMappingURL=is-text.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9pcy10ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0I7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9pcy10ZXh0Lm1qcz8xZWE2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzVGV4dChlbGVtZW50KSB7XG4gIHJldHVybiAhKFwidHlwZVwiIGluIGVsZW1lbnQpICYmIFwidGV4dFwiIGluIGVsZW1lbnQgJiYgdHlwZW9mIGVsZW1lbnQudGV4dCA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5UZXh0KG5vZGUpIHtcbiAgcmV0dXJuIGlzVGV4dChub2RlKSAmJiBPYmplY3Qua2V5cyhub2RlKS5sZW5ndGggPT09IDE7XG59XG5cbmV4cG9ydCB7IGlzUGxhaW5UZXh0LCBpc1RleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLXRleHQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-text.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/marks.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/marks.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMarkActive: () => (/* binding */ isMarkActive),\n/* harmony export */   leaveMarkEdge: () => (/* binding */ leaveMarkEdge),\n/* harmony export */   removeMarks: () => (/* binding */ removeMarks),\n/* harmony export */   toggleMark: () => (/* binding */ toggleMark)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _get_character_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get-character.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/get-character.mjs\");\n/* harmony import */ var _is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-selection-collapsed.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/is-selection-collapsed.mjs\");\n\n\n\n\nfunction isMarkActive(editor, format) {\n  const marks = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n}\nfunction toggleMark(editor, format) {\n  const isActive = isMarkActive(editor, format);\n  if (isActive) {\n    slate__WEBPACK_IMPORTED_MODULE_0__.Editor.removeMark(editor, format);\n  } else {\n    slate__WEBPACK_IMPORTED_MODULE_0__.Editor.addMark(editor, format, true);\n  }\n}\nfunction removeMarks(editor) {\n  const marks = slate__WEBPACK_IMPORTED_MODULE_0__.Editor.marks(editor);\n  if (marks) {\n    for (const mark in marks) {\n      slate__WEBPACK_IMPORTED_MODULE_0__.Editor.removeMark(editor, mark);\n    }\n  }\n}\nfunction leaveMarkEdge(editor, edge) {\n  if ((0,_is_selection_collapsed_mjs__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(editor.selection)) {\n    const marks = Object.keys(slate__WEBPACK_IMPORTED_MODULE_0__.Editor.marks(editor) ?? {});\n    if (marks.length > 0) {\n      const sibling = edge === \"start\" ? (0,_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterBefore)(editor, editor.selection) : (0,_get_character_mjs__WEBPACK_IMPORTED_MODULE_2__.getCharacterAfter)(editor, editor.selection);\n      if (!sibling) {\n        removeMarks(editor);\n      }\n    }\n  }\n}\n\n\n//# sourceMappingURL=marks.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9tYXJrcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUErQjtBQUM2QztBQUNSOztBQUVwRTtBQUNBLGdCQUFnQix5Q0FBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5Q0FBTTtBQUNWLElBQUk7QUFDSixJQUFJLHlDQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlDQUFNO0FBQ3RCO0FBQ0E7QUFDQSxNQUFNLHlDQUFNO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGlGQUFvQjtBQUMxQiw4QkFBOEIseUNBQU0sb0JBQW9CO0FBQ3hEO0FBQ0EseUNBQXlDLHNFQUFrQiw2QkFBNkIscUVBQWlCO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0U7QUFDaEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9tYXJrcy5tanM/NTlkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdzbGF0ZSc7XG5pbXBvcnQgeyBnZXRDaGFyYWN0ZXJCZWZvcmUsIGdldENoYXJhY3RlckFmdGVyIH0gZnJvbSAnLi9nZXQtY2hhcmFjdGVyLm1qcyc7XG5pbXBvcnQgeyBpc1NlbGVjdGlvbkNvbGxhcHNlZCB9IGZyb20gJy4vaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5tanMnO1xuXG5mdW5jdGlvbiBpc01hcmtBY3RpdmUoZWRpdG9yLCBmb3JtYXQpIHtcbiAgY29uc3QgbWFya3MgPSBFZGl0b3IubWFya3MoZWRpdG9yKTtcbiAgcmV0dXJuIG1hcmtzID8gbWFya3NbZm9ybWF0XSA9PT0gdHJ1ZSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gdG9nZ2xlTWFyayhlZGl0b3IsIGZvcm1hdCkge1xuICBjb25zdCBpc0FjdGl2ZSA9IGlzTWFya0FjdGl2ZShlZGl0b3IsIGZvcm1hdCk7XG4gIGlmIChpc0FjdGl2ZSkge1xuICAgIEVkaXRvci5yZW1vdmVNYXJrKGVkaXRvciwgZm9ybWF0KTtcbiAgfSBlbHNlIHtcbiAgICBFZGl0b3IuYWRkTWFyayhlZGl0b3IsIGZvcm1hdCwgdHJ1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbW92ZU1hcmtzKGVkaXRvcikge1xuICBjb25zdCBtYXJrcyA9IEVkaXRvci5tYXJrcyhlZGl0b3IpO1xuICBpZiAobWFya3MpIHtcbiAgICBmb3IgKGNvbnN0IG1hcmsgaW4gbWFya3MpIHtcbiAgICAgIEVkaXRvci5yZW1vdmVNYXJrKGVkaXRvciwgbWFyayk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBsZWF2ZU1hcmtFZGdlKGVkaXRvciwgZWRnZSkge1xuICBpZiAoaXNTZWxlY3Rpb25Db2xsYXBzZWQoZWRpdG9yLnNlbGVjdGlvbikpIHtcbiAgICBjb25zdCBtYXJrcyA9IE9iamVjdC5rZXlzKEVkaXRvci5tYXJrcyhlZGl0b3IpID8/IHt9KTtcbiAgICBpZiAobWFya3MubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgc2libGluZyA9IGVkZ2UgPT09IFwic3RhcnRcIiA/IGdldENoYXJhY3RlckJlZm9yZShlZGl0b3IsIGVkaXRvci5zZWxlY3Rpb24pIDogZ2V0Q2hhcmFjdGVyQWZ0ZXIoZWRpdG9yLCBlZGl0b3Iuc2VsZWN0aW9uKTtcbiAgICAgIGlmICghc2libGluZykge1xuICAgICAgICByZW1vdmVNYXJrcyhlZGl0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBpc01hcmtBY3RpdmUsIGxlYXZlTWFya0VkZ2UsIHJlbW92ZU1hcmtzLCB0b2dnbGVNYXJrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXJrcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/marks.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/selection-contains-inlines.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/slate/utils/selection-contains-inlines.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectionContainsInlines: () => (/* binding */ selectionContainsInlines)\n/* harmony export */ });\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\n\nfunction selectionContainsInlines(editor, match) {\n  const { selection } = editor;\n  if (!selection) {\n    return false;\n  }\n  const roots = Array.from(\n    slate__WEBPACK_IMPORTED_MODULE_0__.Editor.nodes(editor, {\n      at: selection,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_0__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_0__.Editor.isBlock(editor, node),\n      mode: \"lowest\"\n    })\n  );\n  for (const [, rootPath] of roots) {\n    const intersectingSelection = slate__WEBPACK_IMPORTED_MODULE_0__.Range.isRange(selection) ? slate__WEBPACK_IMPORTED_MODULE_0__.Range.intersection(selection, slate__WEBPACK_IMPORTED_MODULE_0__.Editor.range(editor, rootPath)) : selection;\n    if (!intersectingSelection) {\n      continue;\n    }\n    const matches = Array.from(\n      slate__WEBPACK_IMPORTED_MODULE_0__.Editor.nodes(editor, {\n        at: intersectingSelection,\n        match: (node) => slate__WEBPACK_IMPORTED_MODULE_0__.Editor.isInline(editor, node) && match(node)\n      })\n    );\n    if (matches.length > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\n//# sourceMappingURL=selection-contains-inlines.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC9zbGF0ZS91dGlscy9zZWxlY3Rpb24tY29udGFpbnMtaW5saW5lcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7O0FBRS9DO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5Q0FBTTtBQUNWO0FBQ0EsdUJBQXVCLDBDQUFPLG9CQUFvQix5Q0FBTTtBQUN4RDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esa0NBQWtDLHdDQUFLLHNCQUFzQix3Q0FBSyx5QkFBeUIseUNBQU07QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHlDQUFNO0FBQ1o7QUFDQSx5QkFBeUIseUNBQU07QUFDL0IsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3NsYXRlL3V0aWxzL3NlbGVjdGlvbi1jb250YWlucy1pbmxpbmVzLm1qcz8wMzJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvciwgRWxlbWVudCwgUmFuZ2UgfSBmcm9tICdzbGF0ZSc7XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbkNvbnRhaW5zSW5saW5lcyhlZGl0b3IsIG1hdGNoKSB7XG4gIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBlZGl0b3I7XG4gIGlmICghc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHJvb3RzID0gQXJyYXkuZnJvbShcbiAgICBFZGl0b3Iubm9kZXMoZWRpdG9yLCB7XG4gICAgICBhdDogc2VsZWN0aW9uLFxuICAgICAgbWF0Y2g6IChub2RlKSA9PiBFbGVtZW50LmlzRWxlbWVudChub2RlKSAmJiBFZGl0b3IuaXNCbG9jayhlZGl0b3IsIG5vZGUpLFxuICAgICAgbW9kZTogXCJsb3dlc3RcIlxuICAgIH0pXG4gICk7XG4gIGZvciAoY29uc3QgWywgcm9vdFBhdGhdIG9mIHJvb3RzKSB7XG4gICAgY29uc3QgaW50ZXJzZWN0aW5nU2VsZWN0aW9uID0gUmFuZ2UuaXNSYW5nZShzZWxlY3Rpb24pID8gUmFuZ2UuaW50ZXJzZWN0aW9uKHNlbGVjdGlvbiwgRWRpdG9yLnJhbmdlKGVkaXRvciwgcm9vdFBhdGgpKSA6IHNlbGVjdGlvbjtcbiAgICBpZiAoIWludGVyc2VjdGluZ1NlbGVjdGlvbikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoZXMgPSBBcnJheS5mcm9tKFxuICAgICAgRWRpdG9yLm5vZGVzKGVkaXRvciwge1xuICAgICAgICBhdDogaW50ZXJzZWN0aW5nU2VsZWN0aW9uLFxuICAgICAgICBtYXRjaDogKG5vZGUpID0+IEVkaXRvci5pc0lubGluZShlZGl0b3IsIG5vZGUpICYmIG1hdGNoKG5vZGUpXG4gICAgICB9KVxuICAgICk7XG4gICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IHsgc2VsZWN0aW9uQ29udGFpbnNJbmxpbmVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3Rpb24tY29udGFpbnMtaW5saW5lcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/slate/utils/selection-contains-inlines.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/Persist.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/Persist.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Persist: () => (/* binding */ Persist),\n/* harmony export */   useAnimationPersist: () => (/* binding */ useAnimationPersist),\n/* harmony export */   usePersist: () => (/* binding */ usePersist)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _flush_sync_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./flush-sync.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/flush-sync.mjs\");\n/* harmony import */ var _use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use-layout-effect.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-layout-effect.mjs\");\n/* __next_internal_client_entry_do_not_use__ Persist,useAnimationPersist,usePersist auto */ \n\n\n\nconst PERSIST_NAME = \"Persist\";\nconst PersistContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction usePersist() {\n    const persistContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PersistContext);\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.nn)(persistContext, \"Persist is missing from the React tree.\");\n}\nfunction getChild(children) {\n    const child = Array.isArray(children) ? react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children) : children;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child) ? child : void 0;\n}\nfunction useAnimationPersist(ref) {\n    const [isPresent, unmount] = usePersist();\n    const previousAnimationName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const unmountAnimationName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n        const element = ref.current;\n        if (!element) {\n            return;\n        }\n        const handleAnimationEnd = (event)=>{\n            if (event.animationName === unmountAnimationName.current) {\n                unmount();\n            }\n            previousAnimationName.current = event.animationName;\n        };\n        element.addEventListener(\"animationcancel\", handleAnimationEnd);\n        element.addEventListener(\"animationend\", handleAnimationEnd);\n        return ()=>{\n            element.removeEventListener(\"animationcancel\", handleAnimationEnd);\n            element.removeEventListener(\"animationend\", handleAnimationEnd);\n        };\n    }, [\n        ref,\n        unmount\n    ]);\n    (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n        const element = ref.current;\n        let animationFrameId;\n        if (!element) {\n            return;\n        }\n        if (!isPresent) {\n            animationFrameId = requestAnimationFrame(()=>{\n                const styles = getComputedStyle(element);\n                unmountAnimationName.current = styles.animationName;\n                if (styles.animationName === \"none\" || styles.animationName === previousAnimationName.current || styles.display === \"none\") {\n                    unmount();\n                }\n            });\n        }\n        return ()=>{\n            cancelAnimationFrame(animationFrameId);\n        };\n    }, [\n        isPresent,\n        ref,\n        unmount\n    ]);\n}\nfunction Persist({ children }) {\n    const [isPersisting, setPersisting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const lastPresentChild = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const child = getChild(children);\n    const unmount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        (0,_flush_sync_mjs__WEBPACK_IMPORTED_MODULE_3__.flushSync)(()=>setPersisting(false));\n    }, []);\n    (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_2__.useLayoutEffect)(()=>{\n        if (child) {\n            setPersisting(true);\n            lastPresentChild.current = child;\n        }\n    }, [\n        child\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PersistContext.Provider, {\n        value: [\n            Boolean(child),\n            unmount\n        ]\n    }, child ?? (isPersisting ? lastPresentChild.current : null));\n}\nif (true) {\n    Persist.displayName = PERSIST_NAME;\n}\n //# sourceMappingURL=Persist.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/Persist.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/Portal.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/Portal.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Portal: () => (/* binding */ Portal)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ Portal auto */ \n\n\nconst PORTAL_NAME = \"Portal\";\nconst Portal = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ container = document?.body, asChild, ...props }, forwardedRef)=>{\n    const Component = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_2__.Slot : \"div\";\n    return container ? /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n        \"data-liveblocks-portal\": \"\",\n        ...props,\n        ref: forwardedRef\n    }), container) : null;\n});\nif (true) {\n    Portal.displayName = PORTAL_NAME;\n}\n //# sourceMappingURL=Portal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9Qb3J0YWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFRQSxNQUFBQSxjQUFBO0FBU0EsTUFBQUMsdUJBQUFDLGlEQUFBQSxDQUFlLEdBQUFDLFlBQUFDLFVBQUFDLElBQUEsRUFBQUMsT0FBQSxLQUFBQyxPQUFBLEVBQUFDO0lBRVgsTUFBQUMsWUFBQUgsVUFBQUksc0RBQUFBLEdBQUE7SUFFQSxPQUFBUCwwQkFBQVEsdURBQUFBLENBQ0ksOEJBQUFDLGdEQUFBLENBQUFILFdBQUE7UUFDRztRQUFpQyxHQUFBRixLQUFBO1FBQU9PLEtBQUFOO0lBQVksSUFBY0wsYUFDbkU7QUFFRjtBQUlSLElBQUFZLElBQUE7SUFDRWQsT0FBQWUsV0FBQSxHQUFBaEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uLi8uLi9zcmMvdXRpbHMvUG9ydGFsLnRzeD9iMDBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI7XG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuXG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudFByb3BzV2l0aFNsb3QgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuY29uc3QgUE9SVEFMX05BTUUgPSBcIlBvcnRhbFwiO1xuXG5pbnRlcmZhY2UgUG9ydGFsUHJvcHMgZXh0ZW5kcyBDb21wb25lbnRQcm9wc1dpdGhTbG90PFwiZGl2XCI+IHtcbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgdG8gcmVuZGVyIHRoZSBwb3J0YWwgaW50by5cbiAgICovXG4gIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50IHwgbnVsbDtcbn1cblxuY29uc3QgUG9ydGFsID0gZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgUG9ydGFsUHJvcHM+KFxuICAoeyBjb250YWluZXIgPSBkb2N1bWVudD8uYm9keSwgYXNDaGlsZCwgLi4ucHJvcHMgfSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gYXNDaGlsZCA/IFNsb3QgOiBcImRpdlwiO1xuXG4gICAgcmV0dXJuIGNvbnRhaW5lclxuICAgICAgPyBjcmVhdGVQb3J0YWwoXG4gICAgICAgICAgPENvbXBvbmVudCBkYXRhLWxpdmVibG9ja3MtcG9ydGFsPVwiXCIgey4uLnByb3BzfSByZWY9e2ZvcndhcmRlZFJlZn0gLz4sXG4gICAgICAgICAgY29udGFpbmVyXG4gICAgICAgIClcbiAgICAgIDogbnVsbDtcbiAgfVxuKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBQb3J0YWwuZGlzcGxheU5hbWUgPSBQT1JUQUxfTkFNRTtcbn1cblxuZXhwb3J0IHsgUG9ydGFsIH07XG4iXSwibmFtZXMiOlsiUE9SVEFMX05BTUUiLCJQb3J0YWwiLCJmb3J3YXJkUmVmIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJib2R5IiwiYXNDaGlsZCIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiQ29tcG9uZW50IiwiU2xvdCIsImNyZWF0ZVBvcnRhbCIsIlJlYWN0X19kZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsInJlZiIsInByb2Nlc3MiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/Portal.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/capitalize.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/capitalize.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalize: () => (/* binding */ capitalize)\n/* harmony export */ });\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\n//# sourceMappingURL=capitalize.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9jYXBpdGFsaXplLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBOztBQUVzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL2NhcGl0YWxpemUubWpzPzM4ZTciXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cblxuZXhwb3J0IHsgY2FwaXRhbGl6ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwaXRhbGl6ZS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/capitalize.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/chunk.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/chunk.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunk: () => (/* binding */ chunk)\n/* harmony export */ });\nfunction chunk(array, size) {\n  const chunks = [];\n  for (let i = 0, j = array.length; i < j; i += size) {\n    chunks.push(array.slice(i, i + size));\n  }\n  return chunks;\n}\n\n\n//# sourceMappingURL=chunk.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9jaHVuay5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxvQ0FBb0MsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9jaHVuay5tanM/ODk3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSkge1xuICBjb25zdCBjaHVua3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBhcnJheS5sZW5ndGg7IGkgPCBqOyBpICs9IHNpemUpIHtcbiAgICBjaHVua3MucHVzaChhcnJheS5zbGljZShpLCBpICsgc2l6ZSkpO1xuICB9XG4gIHJldHVybiBjaHVua3M7XG59XG5cbmV4cG9ydCB7IGNodW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/chunk.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/clamp.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/clamp.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clamp: () => (/* binding */ clamp)\n/* harmony export */ });\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n\n//# sourceMappingURL=clamp.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9jbGFtcC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9jbGFtcC5tanM/ZjI0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpO1xufVxuXG5leHBvcnQgeyBjbGFtcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xhbXAubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/clamp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classNames: () => (/* binding */ classNames)\n/* harmony export */ });\nfunction classNames(...args) {\n  return args.filter((arg) => typeof arg === \"string\" || typeof arg === \"number\").join(\" \");\n}\n\n\n//# sourceMappingURL=class-names.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9jbGFzcy1uYW1lcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9jbGFzcy1uYW1lcy5tanM/ZGZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjbGFzc05hbWVzKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3MuZmlsdGVyKChhcmcpID0+IHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGFyZyA9PT0gXCJudW1iZXJcIikuam9pbihcIiBcIik7XG59XG5cbmV4cG9ydCB7IGNsYXNzTmFtZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsYXNzLW5hbWVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/class-names.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/exists.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/exists.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exists: () => (/* binding */ exists)\n/* harmony export */ });\nfunction exists(input) {\n  return input !== null && input !== void 0;\n}\n\n\n//# sourceMappingURL=exists.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9leGlzdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvZXhpc3RzLm1qcz83MjEwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGV4aXN0cyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgaW5wdXQgIT09IHZvaWQgMDtcbn1cblxuZXhwb3J0IHsgZXhpc3RzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGlzdHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/exists.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/flush-sync.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/flush-sync.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flushSync: () => (/* binding */ flushSync)\n/* harmony export */ });\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\n\nconst useReactFlushSync = react_dom__WEBPACK_IMPORTED_MODULE_0__[\"flushSync\".toString()];\nfunction flushSyncFallback(fn) {\n  return fn();\n}\nconst flushSync = useReactFlushSync ?? flushSyncFallback;\n\n\n//# sourceMappingURL=flush-sync.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9mbHVzaC1zeW5jLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpQzs7QUFFakMsMEJBQTBCLHNDQUFRO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL2ZsdXNoLXN5bmMubWpzPzZjYTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbmNvbnN0IHVzZVJlYWN0Rmx1c2hTeW5jID0gUmVhY3RET01bXCJmbHVzaFN5bmNcIi50b1N0cmluZygpXTtcbmZ1bmN0aW9uIGZsdXNoU3luY0ZhbGxiYWNrKGZuKSB7XG4gIHJldHVybiBmbigpO1xufVxuY29uc3QgZmx1c2hTeW5jID0gdXNlUmVhY3RGbHVzaFN5bmMgPz8gZmx1c2hTeW5jRmFsbGJhY2s7XG5cbmV4cG9ydCB7IGZsdXNoU3luYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmx1c2gtc3luYy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/flush-sync.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/get-initials.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/get-initials.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getInitials: () => (/* binding */ getInitials)\n/* harmony export */ });\nfunction getInitials(name) {\n  return name.trim().split(\" \").reduce((initials, name2, index, array) => {\n    if (index === 0 || index === array.length - 1) {\n      initials += name2.charAt(0).toLocaleUpperCase();\n    }\n    return initials;\n  }, \"\");\n}\n\n\n//# sourceMappingURL=get-initials.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9nZXQtaW5pdGlhbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvZ2V0LWluaXRpYWxzLm1qcz8yMWY2Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldEluaXRpYWxzKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUudHJpbSgpLnNwbGl0KFwiIFwiKS5yZWR1Y2UoKGluaXRpYWxzLCBuYW1lMiwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSAwIHx8IGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICBpbml0aWFscyArPSBuYW1lMi5jaGFyQXQoMCkudG9Mb2NhbGVVcHBlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGluaXRpYWxzO1xuICB9LCBcIlwiKTtcbn1cblxuZXhwb3J0IHsgZ2V0SW5pdGlhbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1pbml0aWFscy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/get-initials.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/intl.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/intl.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dateTimeFormat: () => (/* binding */ dateTimeFormat),\n/* harmony export */   listFormat: () => (/* binding */ listFormat),\n/* harmony export */   relativeTimeFormat: () => (/* binding */ relativeTimeFormat)\n/* harmony export */ });\n/* harmony import */ var _memoize_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./memoize.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/memoize.mjs\");\n\n\nconst dateTimeFormat = (0,_memoize_mjs__WEBPACK_IMPORTED_MODULE_0__.memoize)(\n  (...args) => {\n    return new Intl.DateTimeFormat(...args);\n  }\n);\nconst relativeTimeFormat = (0,_memoize_mjs__WEBPACK_IMPORTED_MODULE_0__.memoize)(\n  (...args) => {\n    return new Intl.RelativeTimeFormat(...args);\n  }\n);\nconst listFormat = (0,_memoize_mjs__WEBPACK_IMPORTED_MODULE_0__.memoize)(\n  (...args) => {\n    return new Intl.ListFormat(...args);\n  }\n);\n\n\n//# sourceMappingURL=intl.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9pbnRsLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdDOztBQUV4Qyx1QkFBdUIscURBQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIscURBQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscURBQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRTBEO0FBQzFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvaW50bC5tanM/YTEyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZW1vaXplIH0gZnJvbSAnLi9tZW1vaXplLm1qcyc7XG5cbmNvbnN0IGRhdGVUaW1lRm9ybWF0ID0gbWVtb2l6ZShcbiAgKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoLi4uYXJncyk7XG4gIH1cbik7XG5jb25zdCByZWxhdGl2ZVRpbWVGb3JtYXQgPSBtZW1vaXplKFxuICAoLi4uYXJncykgPT4ge1xuICAgIHJldHVybiBuZXcgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQoLi4uYXJncyk7XG4gIH1cbik7XG5jb25zdCBsaXN0Rm9ybWF0ID0gbWVtb2l6ZShcbiAgKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gbmV3IEludGwuTGlzdEZvcm1hdCguLi5hcmdzKTtcbiAgfVxuKTtcblxuZXhwb3J0IHsgZGF0ZVRpbWVGb3JtYXQsIGxpc3RGb3JtYXQsIHJlbGF0aXZlVGltZUZvcm1hdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50bC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/intl.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-apple.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/is-apple.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isApple: () => (/* binding */ isApple)\n/* harmony export */ });\nconst APPLE_REGEX = /Mac|iPod|iPhone|iPad/;\nfunction isApple() {\n  return typeof window !== \"undefined\" && APPLE_REGEX.test(window.navigator.platform);\n}\n\n\n//# sourceMappingURL=is-apple.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9pcy1hcHBsZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL2lzLWFwcGxlLm1qcz9kNmY5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFQUExFX1JFR0VYID0gL01hY3xpUG9kfGlQaG9uZXxpUGFkLztcbmZ1bmN0aW9uIGlzQXBwbGUoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIEFQUExFX1JFR0VYLnRlc3Qod2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSk7XG59XG5cbmV4cG9ydCB7IGlzQXBwbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWFwcGxlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-apple.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-key.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/is-key.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKey: () => (/* binding */ isKey)\n/* harmony export */ });\n/* harmony import */ var _is_apple_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-apple.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-apple.mjs\");\n\n\nconst MODIFIERS = {\n  alt: () => \"altKey\",\n  ctrl: () => \"ctrlKey\",\n  meta: () => \"metaKey\",\n  mod: () => (0,_is_apple_mjs__WEBPACK_IMPORTED_MODULE_0__.isApple)() ? \"metaKey\" : \"ctrlKey\",\n  shift: () => \"shiftKey\"\n};\nfunction isKey(event, key, modifiers = {}) {\n  if (event.key !== key) {\n    return false;\n  }\n  const explicitModifiers = Object.entries(modifiers).filter(\n    ([, value]) => typeof value === \"boolean\"\n  );\n  return explicitModifiers.every(([modifier, value]) => {\n    const property = MODIFIERS[modifier]();\n    return event[property] === value;\n  });\n}\n\n\n//# sourceMappingURL=is-key.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9pcy1rZXkubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0RBQU87QUFDcEI7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvaXMta2V5Lm1qcz8xNDc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXBwbGUgfSBmcm9tICcuL2lzLWFwcGxlLm1qcyc7XG5cbmNvbnN0IE1PRElGSUVSUyA9IHtcbiAgYWx0OiAoKSA9PiBcImFsdEtleVwiLFxuICBjdHJsOiAoKSA9PiBcImN0cmxLZXlcIixcbiAgbWV0YTogKCkgPT4gXCJtZXRhS2V5XCIsXG4gIG1vZDogKCkgPT4gaXNBcHBsZSgpID8gXCJtZXRhS2V5XCIgOiBcImN0cmxLZXlcIixcbiAgc2hpZnQ6ICgpID0+IFwic2hpZnRLZXlcIlxufTtcbmZ1bmN0aW9uIGlzS2V5KGV2ZW50LCBrZXksIG1vZGlmaWVycyA9IHt9KSB7XG4gIGlmIChldmVudC5rZXkgIT09IGtleSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBleHBsaWNpdE1vZGlmaWVycyA9IE9iamVjdC5lbnRyaWVzKG1vZGlmaWVycykuZmlsdGVyKFxuICAgIChbLCB2YWx1ZV0pID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCJcbiAgKTtcbiAgcmV0dXJuIGV4cGxpY2l0TW9kaWZpZXJzLmV2ZXJ5KChbbW9kaWZpZXIsIHZhbHVlXSkgPT4ge1xuICAgIGNvbnN0IHByb3BlcnR5ID0gTU9ESUZJRVJTW21vZGlmaWVyXSgpO1xuICAgIHJldHVybiBldmVudFtwcm9wZXJ0eV0gPT09IHZhbHVlO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgaXNLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWtleS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/is-key.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/memoize.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/memoize.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoize: () => (/* binding */ memoize)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n\n\nfunction memoize(fn) {\n  const cache = /* @__PURE__ */ new Map();\n  return (...args) => {\n    const key = JSON.stringify(args.map((arg) => (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.stringify)(arg)));\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  };\n}\n\n\n//# sourceMappingURL=memoize.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9tZW1vaXplLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0EsaURBQWlELDJEQUFTO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvbWVtb2l6ZS5tanM/M2JmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICdAbGl2ZWJsb2Nrcy9jb3JlJztcblxuZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KGFyZ3MubWFwKChhcmcpID0+IHN0cmluZ2lmeShhcmcpKSk7XG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGZuKC4uLmFyZ3MpO1xuICAgIGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0IHsgbWVtb2l6ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVtb2l6ZS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/memoize.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/pluralize.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/pluralize.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pluralize: () => (/* binding */ pluralize)\n/* harmony export */ });\nfunction pluralize(count, singular, plural) {\n  return count === 1 ? singular : plural ?? `${singular}s`;\n}\n\n\n//# sourceMappingURL=pluralize.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9wbHVyYWxpemUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEOztBQUVxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3BsdXJhbGl6ZS5tanM/ZTU2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBwbHVyYWxpemUoY291bnQsIHNpbmd1bGFyLCBwbHVyYWwpIHtcbiAgcmV0dXJuIGNvdW50ID09PSAxID8gc2luZ3VsYXIgOiBwbHVyYWwgPz8gYCR7c2luZ3VsYXJ9c2A7XG59XG5cbmV4cG9ydCB7IHBsdXJhbGl6ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGx1cmFsaXplLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/pluralize.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/request-idle-callback.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/request-idle-callback.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelIdleCallback: () => (/* binding */ cancelIdleCallback),\n/* harmony export */   requestIdleCallback: () => (/* binding */ requestIdleCallback)\n/* harmony export */ });\nconst IDLE_CALLBACK_FALLBACK_TIMEOUT = 100;\nfunction requestIdleCallbackFallback(callback, options) {\n  return setTimeout(\n    callback,\n    Math.min(options?.timeout ?? Infinity, IDLE_CALLBACK_FALLBACK_TIMEOUT)\n  );\n}\nconst requestIdleCallback = (typeof window !== \"undefined\" ? window.requestIdleCallback : null) ?? requestIdleCallbackFallback;\nconst cancelIdleCallback = (typeof window !== \"undefined\" ? window.cancelIdleCallback : null) ?? clearTimeout;\n\n\n//# sourceMappingURL=request-idle-callback.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9yZXF1ZXN0LWlkbGUtY2FsbGJhY2subWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtRDtBQUNuRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3JlcXVlc3QtaWRsZS1jYWxsYmFjay5tanM/MTY3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBJRExFX0NBTExCQUNLX0ZBTExCQUNLX1RJTUVPVVQgPSAxMDA7XG5mdW5jdGlvbiByZXF1ZXN0SWRsZUNhbGxiYWNrRmFsbGJhY2soY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoXG4gICAgY2FsbGJhY2ssXG4gICAgTWF0aC5taW4ob3B0aW9ucz8udGltZW91dCA/PyBJbmZpbml0eSwgSURMRV9DQUxMQkFDS19GQUxMQkFDS19USU1FT1VUKVxuICApO1xufVxuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgOiBudWxsKSA/PyByZXF1ZXN0SWRsZUNhbGxiYWNrRmFsbGJhY2s7XG5jb25zdCBjYW5jZWxJZGxlQ2FsbGJhY2sgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2sgOiBudWxsKSA/PyBjbGVhclRpbWVvdXQ7XG5cbmV4cG9ydCB7IGNhbmNlbElkbGVDYWxsYmFjaywgcmVxdWVzdElkbGVDYWxsYmFjayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/request-idle-callback.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/request-submit.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/request-submit.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestSubmit: () => (/* binding */ requestSubmit)\n/* harmony export */ });\nfunction requestSubmit(form, submitter) {\n  if (typeof form.requestSubmit === \"function\") {\n    return form.requestSubmit(submitter);\n  }\n  if (submitter) {\n    submitter.click();\n  } else {\n    submitter = document.createElement(\"input\");\n    submitter.type = \"submit\";\n    submitter.hidden = true;\n    form.appendChild(submitter);\n    submitter.click();\n    form.removeChild(submitter);\n  }\n}\n\n\n//# sourceMappingURL=request-submit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy9yZXF1ZXN0LXN1Ym1pdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3JlcXVlc3Qtc3VibWl0Lm1qcz9iNjdjIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlcXVlc3RTdWJtaXQoZm9ybSwgc3VibWl0dGVyKSB7XG4gIGlmICh0eXBlb2YgZm9ybS5yZXF1ZXN0U3VibWl0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZm9ybS5yZXF1ZXN0U3VibWl0KHN1Ym1pdHRlcik7XG4gIH1cbiAgaWYgKHN1Ym1pdHRlcikge1xuICAgIHN1Ym1pdHRlci5jbGljaygpO1xuICB9IGVsc2Uge1xuICAgIHN1Ym1pdHRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBzdWJtaXR0ZXIudHlwZSA9IFwic3VibWl0XCI7XG4gICAgc3VibWl0dGVyLmhpZGRlbiA9IHRydWU7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChzdWJtaXR0ZXIpO1xuICAgIHN1Ym1pdHRlci5jbGljaygpO1xuICAgIGZvcm0ucmVtb3ZlQ2hpbGQoc3VibWl0dGVyKTtcbiAgfVxufVxuXG5leHBvcnQgeyByZXF1ZXN0U3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LXN1Ym1pdC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/request-submit.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/url.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/url.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateURL: () => (/* binding */ generateURL)\n/* harmony export */ });\nconst PLACEHOLDER_BASE_URL = \"https://localhost:9999\";\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\nfunction generateURL(url, params, hash) {\n  const isAbsolute = ABSOLUTE_URL_REGEX.test(url);\n  const urlObject = new URL(url, isAbsolute ? void 0 : PLACEHOLDER_BASE_URL);\n  if (params !== void 0) {\n    for (const [param, value] of Object.entries(params)) {\n      if (value) {\n        urlObject.searchParams.set(param, String(value));\n      }\n    }\n  }\n  if (!urlObject.hash && hash !== void 0) {\n    urlObject.hash = `#${hash}`;\n  }\n  return isAbsolute ? urlObject.href : urlObject.href.replace(PLACEHOLDER_BASE_URL, \"\");\n}\n\n\n//# sourceMappingURL=url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91cmwubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixLQUFLO0FBQzlCO0FBQ0E7QUFDQTs7QUFFdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91cmwubWpzP2M1ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUExBQ0VIT0xERVJfQkFTRV9VUkwgPSBcImh0dHBzOi8vbG9jYWxob3N0Ojk5OTlcIjtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKj86LztcbmZ1bmN0aW9uIGdlbmVyYXRlVVJMKHVybCwgcGFyYW1zLCBoYXNoKSB7XG4gIGNvbnN0IGlzQWJzb2x1dGUgPSBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh1cmwpO1xuICBjb25zdCB1cmxPYmplY3QgPSBuZXcgVVJMKHVybCwgaXNBYnNvbHV0ZSA/IHZvaWQgMCA6IFBMQUNFSE9MREVSX0JBU0VfVVJMKTtcbiAgaWYgKHBhcmFtcyAhPT0gdm9pZCAwKSB7XG4gICAgZm9yIChjb25zdCBbcGFyYW0sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdXJsT2JqZWN0LnNlYXJjaFBhcmFtcy5zZXQocGFyYW0sIFN0cmluZyh2YWx1ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIXVybE9iamVjdC5oYXNoICYmIGhhc2ggIT09IHZvaWQgMCkge1xuICAgIHVybE9iamVjdC5oYXNoID0gYCMke2hhc2h9YDtcbiAgfVxuICByZXR1cm4gaXNBYnNvbHV0ZSA/IHVybE9iamVjdC5ocmVmIDogdXJsT2JqZWN0LmhyZWYucmVwbGFjZShQTEFDRUhPTERFUl9CQVNFX1VSTCwgXCJcIik7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlVVJMIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/url.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-controllable-state.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-controllable-state.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useControllableState: () => (/* binding */ useControllableState)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\nfunction useControllableState(value, onChange, defaultValue) {\n  const [uncontrolledValue, setUncontrolledValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultValue);\n  const isControlled = value !== void 0;\n  const wasControlled = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(isControlled);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if ( true && wasControlled.current !== isControlled) {\n      _liveblocks_core__WEBPACK_IMPORTED_MODULE_1__.console.warn(\n        `A component is changing from ${wasControlled ? \"controlled\" : \"uncontrolled\"} to ${isControlled ? \"controlled\" : \"uncontrolled\"}.`\n      );\n    }\n    wasControlled.current = isControlled;\n  }, [isControlled]);\n  const currentValue = isControlled ? value : uncontrolledValue;\n  const setValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (value2) => {\n      if (isControlled) {\n        return onChange?.(value2);\n      } else {\n        setUncontrolledValue(value2);\n        return onChange?.(value2);\n      }\n    },\n    [isControlled, onChange]\n  );\n  return [currentValue, setValue];\n}\n\n\n//# sourceMappingURL=use-controllable-state.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtY29udHJvbGxhYmxlLXN0YXRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkM7QUFDc0I7O0FBRWpFO0FBQ0Esb0RBQW9ELCtDQUFRO0FBQzVEO0FBQ0Esd0JBQXdCLDZDQUFNO0FBQzlCLEVBQUUsZ0RBQVM7QUFDWCxRQUFRLEtBQXFDO0FBQzdDLE1BQU0scURBQU87QUFDYix3Q0FBd0MsK0NBQStDLEtBQUssNkNBQTZDO0FBQ3pJO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLG1CQUFtQixrREFBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS1jb250cm9sbGFibGUtc3RhdGUubWpzPzJkMjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc29sZSB9IGZyb20gJ0BsaXZlYmxvY2tzL2NvcmUnO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gdXNlQ29udHJvbGxhYmxlU3RhdGUodmFsdWUsIG9uQ2hhbmdlLCBkZWZhdWx0VmFsdWUpIHtcbiAgY29uc3QgW3VuY29udHJvbGxlZFZhbHVlLCBzZXRVbmNvbnRyb2xsZWRWYWx1ZV0gPSB1c2VTdGF0ZShkZWZhdWx0VmFsdWUpO1xuICBjb25zdCBpc0NvbnRyb2xsZWQgPSB2YWx1ZSAhPT0gdm9pZCAwO1xuICBjb25zdCB3YXNDb250cm9sbGVkID0gdXNlUmVmKGlzQ29udHJvbGxlZCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiB3YXNDb250cm9sbGVkLmN1cnJlbnQgIT09IGlzQ29udHJvbGxlZCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgZnJvbSAke3dhc0NvbnRyb2xsZWQgPyBcImNvbnRyb2xsZWRcIiA6IFwidW5jb250cm9sbGVkXCJ9IHRvICR7aXNDb250cm9sbGVkID8gXCJjb250cm9sbGVkXCIgOiBcInVuY29udHJvbGxlZFwifS5gXG4gICAgICApO1xuICAgIH1cbiAgICB3YXNDb250cm9sbGVkLmN1cnJlbnQgPSBpc0NvbnRyb2xsZWQ7XG4gIH0sIFtpc0NvbnRyb2xsZWRdKTtcbiAgY29uc3QgY3VycmVudFZhbHVlID0gaXNDb250cm9sbGVkID8gdmFsdWUgOiB1bmNvbnRyb2xsZWRWYWx1ZTtcbiAgY29uc3Qgc2V0VmFsdWUgPSB1c2VDYWxsYmFjayhcbiAgICAodmFsdWUyKSA9PiB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICAgIHJldHVybiBvbkNoYW5nZT8uKHZhbHVlMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRVbmNvbnRyb2xsZWRWYWx1ZSh2YWx1ZTIpO1xuICAgICAgICByZXR1cm4gb25DaGFuZ2U/Lih2YWx1ZTIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2lzQ29udHJvbGxlZCwgb25DaGFuZ2VdXG4gICk7XG4gIHJldHVybiBbY3VycmVudFZhbHVlLCBzZXRWYWx1ZV07XG59XG5cbmV4cG9ydCB7IHVzZUNvbnRyb2xsYWJsZVN0YXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtY29udHJvbGxhYmxlLXN0YXRlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-controllable-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-id.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-id.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useId: () => (/* binding */ useId)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-layout-effect.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-layout-effect.mjs\");\n\n\n\nlet isHydrated = false;\nlet id = 0;\nfunction getId() {\n  return ++id;\n}\nconst useReactId = react__WEBPACK_IMPORTED_MODULE_0__[\"useId\".toString()];\nfunction useIncrementalId() {\n  const [id2, setId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isHydrated ? getId : null);\n  (0,_use_layout_effect_mjs__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(() => {\n    if (id2 === null) {\n      setId(getId());\n    }\n  }, [id2]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!isHydrated) {\n      isHydrated = true;\n    }\n  }, []);\n  return String(id2) ?? void 0;\n}\nconst useId = useReactId ?? useIncrementalId;\n\n\n//# sourceMappingURL=use-id.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtaWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0RDtBQUNGOztBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtDQUFjO0FBQ2pDO0FBQ0EsdUJBQXVCLCtDQUFRO0FBQy9CLEVBQUUsdUVBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUUsZ0RBQVM7QUFDWDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS1pZC5tanM/NGVjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCB9IGZyb20gJy4vdXNlLWxheW91dC1lZmZlY3QubWpzJztcblxubGV0IGlzSHlkcmF0ZWQgPSBmYWxzZTtcbmxldCBpZCA9IDA7XG5mdW5jdGlvbiBnZXRJZCgpIHtcbiAgcmV0dXJuICsraWQ7XG59XG5jb25zdCB1c2VSZWFjdElkID0gUmVhY3RfX2RlZmF1bHRbXCJ1c2VJZFwiLnRvU3RyaW5nKCldO1xuZnVuY3Rpb24gdXNlSW5jcmVtZW50YWxJZCgpIHtcbiAgY29uc3QgW2lkMiwgc2V0SWRdID0gdXNlU3RhdGUoaXNIeWRyYXRlZCA/IGdldElkIDogbnVsbCk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlkMiA9PT0gbnVsbCkge1xuICAgICAgc2V0SWQoZ2V0SWQoKSk7XG4gICAgfVxuICB9LCBbaWQyXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0h5ZHJhdGVkKSB7XG4gICAgICBpc0h5ZHJhdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFN0cmluZyhpZDIpID8/IHZvaWQgMDtcbn1cbmNvbnN0IHVzZUlkID0gdXNlUmVhY3RJZCA/PyB1c2VJbmNyZW1lbnRhbElkO1xuXG5leHBvcnQgeyB1c2VJZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWlkLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-id.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-index.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-index.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIndex: () => (/* binding */ useIndex)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _clamp_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clamp.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/clamp.mjs\");\n/* harmony import */ var _wrap_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrap.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/wrap.mjs\");\n\n\n\n\nconst defaultOptions = {\n  wrap: true\n};\nfunction useIndex(initial, length, options) {\n  const { wrap: shouldWrap } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  }, [options]);\n  const transform = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => shouldWrap ? _wrap_mjs__WEBPACK_IMPORTED_MODULE_1__.wrap : _clamp_mjs__WEBPACK_IMPORTED_MODULE_2__.clamp, [shouldWrap]);\n  const [index, setIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initial);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    setIndex((index2) => (0,_clamp_mjs__WEBPACK_IMPORTED_MODULE_2__.clamp)(index2, 0, Math.max(length - 1, 0)));\n  }, [length]);\n  const previousIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    setIndex((index2) => transform(index2 - 1, 0, Math.max(length, 0)));\n  }, [length, transform]);\n  const nextIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    setIndex((index2) => transform(index2 + 1, 0, Math.max(length, 0)));\n  }, [length, transform]);\n  return [index, previousIndex, nextIndex, setIndex];\n}\n\n\n//# sourceMappingURL=use-index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0U7QUFDOUI7QUFDRjs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLG1CQUFtQixFQUFFLDhDQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILG9CQUFvQiw4Q0FBTyxvQkFBb0IsMkNBQUksR0FBRyw2Q0FBSztBQUMzRCw0QkFBNEIsK0NBQVE7QUFDcEMsRUFBRSxnREFBUztBQUNYLHlCQUF5QixpREFBSztBQUM5QixHQUFHO0FBQ0gsd0JBQXdCLGtEQUFXO0FBQ25DO0FBQ0EsR0FBRztBQUNILG9CQUFvQixrREFBVztBQUMvQjtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS1pbmRleC5tanM/MThiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnLi9jbGFtcC5tanMnO1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4vd3JhcC5tanMnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgd3JhcDogdHJ1ZVxufTtcbmZ1bmN0aW9uIHVzZUluZGV4KGluaXRpYWwsIGxlbmd0aCwgb3B0aW9ucykge1xuICBjb25zdCB7IHdyYXA6IHNob3VsZFdyYXAgfSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuICB9LCBbb3B0aW9uc10pO1xuICBjb25zdCB0cmFuc2Zvcm0gPSB1c2VNZW1vKCgpID0+IHNob3VsZFdyYXAgPyB3cmFwIDogY2xhbXAsIFtzaG91bGRXcmFwXSk7XG4gIGNvbnN0IFtpbmRleCwgc2V0SW5kZXhdID0gdXNlU3RhdGUoaW5pdGlhbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SW5kZXgoKGluZGV4MikgPT4gY2xhbXAoaW5kZXgyLCAwLCBNYXRoLm1heChsZW5ndGggLSAxLCAwKSkpO1xuICB9LCBbbGVuZ3RoXSk7XG4gIGNvbnN0IHByZXZpb3VzSW5kZXggPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SW5kZXgoKGluZGV4MikgPT4gdHJhbnNmb3JtKGluZGV4MiAtIDEsIDAsIE1hdGgubWF4KGxlbmd0aCwgMCkpKTtcbiAgfSwgW2xlbmd0aCwgdHJhbnNmb3JtXSk7XG4gIGNvbnN0IG5leHRJbmRleCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRJbmRleCgoaW5kZXgyKSA9PiB0cmFuc2Zvcm0oaW5kZXgyICsgMSwgMCwgTWF0aC5tYXgobGVuZ3RoLCAwKSkpO1xuICB9LCBbbGVuZ3RoLCB0cmFuc2Zvcm1dKTtcbiAgcmV0dXJuIFtpbmRleCwgcHJldmlvdXNJbmRleCwgbmV4dEluZGV4LCBzZXRJbmRleF07XG59XG5cbmV4cG9ydCB7IHVzZUluZGV4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtaW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-initial.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-initial.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInitial: () => (/* binding */ useInitial)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction useInitial(value) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value instanceof Function ? value() : value).current;\n}\n\n\n//# sourceMappingURL=use-initial.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtaW5pdGlhbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7O0FBRS9CO0FBQ0EsU0FBUyw2Q0FBTTtBQUNmOztBQUVzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS1pbml0aWFsLm1qcz81YWM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gdXNlSW5pdGlhbCh2YWx1ZSkge1xuICByZXR1cm4gdXNlUmVmKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24gPyB2YWx1ZSgpIDogdmFsdWUpLmN1cnJlbnQ7XG59XG5cbmV4cG9ydCB7IHVzZUluaXRpYWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pbml0aWFsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-initial.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-interval.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-interval.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInterval: () => (/* binding */ useInterval)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction useInterval(callback, delay) {\n  const latestCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    latestCallback.current = callback;\n  }, [callback]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!delay && delay !== 0) {\n      return;\n    }\n    const id = setInterval(() => {\n      if (latestCallback.current() === false) {\n        clearInterval(id);\n      }\n    }, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\n\n//# sourceMappingURL=use-interval.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtaW50ZXJ2YWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDOztBQUUxQztBQUNBLHlCQUF5Qiw2Q0FBTTtBQUMvQixFQUFFLGdEQUFTO0FBQ1g7QUFDQSxHQUFHO0FBQ0gsRUFBRSxnREFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIOztBQUV1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS1pbnRlcnZhbC5tanM/MzY2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gdXNlSW50ZXJ2YWwoY2FsbGJhY2ssIGRlbGF5KSB7XG4gIGNvbnN0IGxhdGVzdENhbGxiYWNrID0gdXNlUmVmKGNhbGxiYWNrKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsYXRlc3RDYWxsYmFjay5jdXJyZW50ID0gY2FsbGJhY2s7XG4gIH0sIFtjYWxsYmFja10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZGVsYXkgJiYgZGVsYXkgIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAobGF0ZXN0Q2FsbGJhY2suY3VycmVudCgpID09PSBmYWxzZSkge1xuICAgICAgICBjbGVhckludGVydmFsKGlkKTtcbiAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaWQpO1xuICB9LCBbZGVsYXldKTtcbn1cblxuZXhwb3J0IHsgdXNlSW50ZXJ2YWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pbnRlcnZhbC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-interval.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-latest.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-latest.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLatest: () => (/* binding */ useLatest)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction useLatest(value) {\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\n\n//# sourceMappingURL=use-latest.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtbGF0ZXN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQzs7QUFFMUM7QUFDQSxjQUFjLDZDQUFNO0FBQ3BCLEVBQUUsZ0RBQVM7QUFDWDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS1sYXRlc3QubWpzPzEzNGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIHVzZUxhdGVzdCh2YWx1ZSkge1xuICBjb25zdCByZWYgPSB1c2VSZWYodmFsdWUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFt2YWx1ZV0pO1xuICByZXR1cm4gcmVmO1xufVxuXG5leHBvcnQgeyB1c2VMYXRlc3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1sYXRlc3QubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-latest.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-layout-effect.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-layout-effect.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useLayoutEffect: () => (/* binding */ useLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nconst useLayoutEffect = typeof window !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n\n//# sourceMappingURL=use-layout-effect.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtbGF5b3V0LWVmZmVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0U7O0FBRXhFLHdEQUF3RCxrREFBaUIsR0FBRyw0Q0FBUzs7QUFFMUQ7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtbGF5b3V0LWVmZmVjdC5tanM/MjZjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgYXMgdXNlTGF5b3V0RWZmZWN0JDEsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgdXNlTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHVzZUxheW91dEVmZmVjdCQxIDogdXNlRWZmZWN0O1xuXG5leHBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1sYXlvdXQtZWZmZWN0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-layout-effect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-refs.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-refs.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useRefs: () => (/* binding */ useRefs)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction applyRef(ref, value) {\n  if (value) {\n    if (typeof ref === \"function\") {\n      ref(value);\n    } else if (ref && \"current\" in ref) {\n      ref.current = value;\n    }\n  }\n}\nfunction mergeRefs(value, ...refs) {\n  for (const ref of refs) {\n    applyRef(ref, value);\n  }\n}\nfunction useRefs(...refs) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value) => mergeRefs(value, ...refs), [refs]);\n}\n\n\n//# sourceMappingURL=use-refs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtcmVmcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrREFBVztBQUNwQjs7QUFFbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtcmVmcy5tanM/YjI5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gYXBwbHlSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZWYodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocmVmICYmIFwiY3VycmVudFwiIGluIHJlZikge1xuICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlUmVmcyh2YWx1ZSwgLi4ucmVmcykge1xuICBmb3IgKGNvbnN0IHJlZiBvZiByZWZzKSB7XG4gICAgYXBwbHlSZWYocmVmLCB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVzZVJlZnMoLi4ucmVmcykge1xuICByZXR1cm4gdXNlQ2FsbGJhY2soKHZhbHVlKSA9PiBtZXJnZVJlZnModmFsdWUsIC4uLnJlZnMpLCBbcmVmc10pO1xufVxuXG5leHBvcnQgeyB1c2VSZWZzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtcmVmcy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-refs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-rerender.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-rerender.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useRerender: () => (/* binding */ useRerender)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction useRerender() {\n  const [key, update] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(\n    (key2) => key2 + 1,\n    0\n  );\n  return [update, key];\n}\n\n\n//# sourceMappingURL=use-rerender.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtcmVyZW5kZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DOztBQUVuQztBQUNBLHdCQUF3QixpREFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS1yZXJlbmRlci5tanM/OTVjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VSZXJlbmRlcigpIHtcbiAgY29uc3QgW2tleSwgdXBkYXRlXSA9IHVzZVJlZHVjZXIoXG4gICAgKGtleTIpID0+IGtleTIgKyAxLFxuICAgIDBcbiAgKTtcbiAgcmV0dXJuIFt1cGRhdGUsIGtleV07XG59XG5cbmV4cG9ydCB7IHVzZVJlcmVuZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtcmVyZW5kZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-rerender.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-transition.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-transition.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTransition: () => (/* binding */ useTransition)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nconst useReactTransition = react__WEBPACK_IMPORTED_MODULE_0__[\"useTransition\".toString()];\nfunction useTransitionFallback() {\n  const startTransition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (callback) => callback(),\n    []\n  );\n  return [false, startTransition];\n}\nconst useTransition = useReactTransition ?? useTransitionFallback;\n\n\n//# sourceMappingURL=use-transition.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtdHJhbnNpdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7O0FBRXBELDJCQUEyQixrQ0FBYztBQUN6QztBQUNBLDBCQUEwQixrREFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvdXNlLXRyYW5zaXRpb24ubWpzPzJjMGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCB1c2VSZWFjdFRyYW5zaXRpb24gPSBSZWFjdF9fZGVmYXVsdFtcInVzZVRyYW5zaXRpb25cIi50b1N0cmluZygpXTtcbmZ1bmN0aW9uIHVzZVRyYW5zaXRpb25GYWxsYmFjaygpIHtcbiAgY29uc3Qgc3RhcnRUcmFuc2l0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgKGNhbGxiYWNrKSA9PiBjYWxsYmFjaygpLFxuICAgIFtdXG4gICk7XG4gIHJldHVybiBbZmFsc2UsIHN0YXJ0VHJhbnNpdGlvbl07XG59XG5jb25zdCB1c2VUcmFuc2l0aW9uID0gdXNlUmVhY3RUcmFuc2l0aW9uID8/IHVzZVRyYW5zaXRpb25GYWxsYmFjaztcblxuZXhwb3J0IHsgdXNlVHJhbnNpdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXRyYW5zaXRpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-transition.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-visible.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-visible.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useVisibleCallback: () => (/* binding */ useVisibleCallback)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _use_latest_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-latest.mjs */ \"(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-latest.mjs\");\n\n\n\nlet intersectionObserver;\nconst intersectionCallbacks = /* @__PURE__ */ new WeakMap();\nfunction observe(element, callback) {\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver((entries) => {\n      for (const entry of entries) {\n        const callback2 = intersectionCallbacks.get(entry.target);\n        callback2?.(entry);\n      }\n    });\n  }\n  intersectionCallbacks.set(element, callback);\n  intersectionObserver.observe(element);\n}\nfunction unobserve(element) {\n  intersectionCallbacks.delete(element);\n  intersectionObserver?.unobserve(element);\n}\nfunction useVisibleCallback(ref, callback, options) {\n  const enabled = options?.enabled ?? true;\n  const latestCallback = (0,_use_latest_mjs__WEBPACK_IMPORTED_MODULE_1__.useLatest)(callback);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const element = ref.current;\n    if (!element) {\n      return;\n    }\n    if (enabled) {\n      observe(element, (entry) => {\n        if (entry.isIntersecting) {\n          latestCallback.current();\n        }\n      });\n    } else {\n      unobserve(element);\n    }\n    return () => {\n      unobserve(element);\n    };\n  }, [enabled]);\n}\n\n\n//# sourceMappingURL=use-visible.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2UtdmlzaWJsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQ1c7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwwREFBUztBQUNsQyxFQUFFLGdEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUU4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC11aS9kaXN0L3V0aWxzL3VzZS12aXNpYmxlLm1qcz85ODdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUxhdGVzdCB9IGZyb20gJy4vdXNlLWxhdGVzdC5tanMnO1xuXG5sZXQgaW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG5jb25zdCBpbnRlcnNlY3Rpb25DYWxsYmFja3MgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIG9ic2VydmUoZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgaWYgKCFpbnRlcnNlY3Rpb25PYnNlcnZlcikge1xuICAgIGludGVyc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2syID0gaW50ZXJzZWN0aW9uQ2FsbGJhY2tzLmdldChlbnRyeS50YXJnZXQpO1xuICAgICAgICBjYWxsYmFjazI/LihlbnRyeSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaW50ZXJzZWN0aW9uQ2FsbGJhY2tzLnNldChlbGVtZW50LCBjYWxsYmFjayk7XG4gIGludGVyc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG59XG5mdW5jdGlvbiB1bm9ic2VydmUoZWxlbWVudCkge1xuICBpbnRlcnNlY3Rpb25DYWxsYmFja3MuZGVsZXRlKGVsZW1lbnQpO1xuICBpbnRlcnNlY3Rpb25PYnNlcnZlcj8udW5vYnNlcnZlKGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gdXNlVmlzaWJsZUNhbGxiYWNrKHJlZiwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgY29uc3QgZW5hYmxlZCA9IG9wdGlvbnM/LmVuYWJsZWQgPz8gdHJ1ZTtcbiAgY29uc3QgbGF0ZXN0Q2FsbGJhY2sgPSB1c2VMYXRlc3QoY2FsbGJhY2spO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSByZWYuY3VycmVudDtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIG9ic2VydmUoZWxlbWVudCwgKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgIGxhdGVzdENhbGxiYWNrLmN1cnJlbnQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICB9O1xuICB9LCBbZW5hYmxlZF0pO1xufVxuXG5leHBvcnQgeyB1c2VWaXNpYmxlQ2FsbGJhY2sgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS12aXNpYmxlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-visible.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-window-focus.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/use-window-focus.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useWindowFocus: () => (/* binding */ useWindowFocus)\n/* harmony export */ });\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n\n\nfunction subscribe(callback) {\n  window.addEventListener(\"blur\", callback);\n  window.addEventListener(\"focus\", callback);\n  return () => {\n    window.removeEventListener(\"blur\", callback);\n    window.removeEventListener(\"focus\", callback);\n  };\n}\nfunction getSnapshot() {\n  return document.hasFocus();\n}\nfunction getServerSnapshot() {\n  return true;\n}\nfunction useWindowFocus() {\n  return (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(subscribe, getSnapshot, getServerSnapshot);\n}\n\n\n//# sourceMappingURL=use-window-focus.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy91c2Utd2luZG93LWZvY3VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2RTs7QUFFN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywyRkFBb0I7QUFDN0I7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvdXNlLXdpbmRvdy1mb2N1cy5tanM/MDMyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanMnO1xuXG5mdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGNhbGxiYWNrKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBjYWxsYmFjayk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGNhbGxiYWNrKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGNhbGxiYWNrKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNuYXBzaG90KCkge1xuICByZXR1cm4gZG9jdW1lbnQuaGFzRm9jdXMoKTtcbn1cbmZ1bmN0aW9uIGdldFNlcnZlclNuYXBzaG90KCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVzZVdpbmRvd0ZvY3VzKCkge1xuICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xufVxuXG5leHBvcnQgeyB1c2VXaW5kb3dGb2N1cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXdpbmRvdy1mb2N1cy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/use-window-focus.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/visually-hidden.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/visually-hidden.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   visuallyHidden: () => (/* binding */ visuallyHidden)\n/* harmony export */ });\nconst visuallyHidden = {\n  position: \"absolute\",\n  border: 0,\n  width: 1,\n  height: 1,\n  padding: 0,\n  margin: -1,\n  overflow: \"hidden\",\n  clip: \"rect(0, 0, 0, 0)\",\n  whiteSpace: \"nowrap\",\n  wordWrap: \"normal\"\n};\n\n\n//# sourceMappingURL=visually-hidden.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy92aXN1YWxseS1oaWRkZW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvdmlzdWFsbHktaGlkZGVuLm1qcz9iYTI1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHZpc3VhbGx5SGlkZGVuID0ge1xuICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICBib3JkZXI6IDAsXG4gIHdpZHRoOiAxLFxuICBoZWlnaHQ6IDEsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogLTEsXG4gIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICBjbGlwOiBcInJlY3QoMCwgMCwgMCwgMClcIixcbiAgd2hpdGVTcGFjZTogXCJub3dyYXBcIixcbiAgd29yZFdyYXA6IFwibm9ybWFsXCJcbn07XG5cbmV4cG9ydCB7IHZpc3VhbGx5SGlkZGVuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aXN1YWxseS1oaWRkZW4ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/visually-hidden.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/wrap.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@liveblocks/react-ui/dist/utils/wrap.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\nfunction wrap(value, min, max) {\n  const range = max - min;\n  return range > 0 ? ((value - min) % range + range) % range + min : 0;\n}\n\n\n//# sourceMappingURL=wrap.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3QtdWkvZGlzdC91dGlscy93cmFwLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0LXVpL2Rpc3QvdXRpbHMvd3JhcC5tanM/MzJhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3cmFwKHZhbHVlLCBtaW4sIG1heCkge1xuICBjb25zdCByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIHJhbmdlID4gMCA/ICgodmFsdWUgLSBtaW4pICUgcmFuZ2UgKyByYW5nZSkgJSByYW5nZSArIG1pbiA6IDA7XG59XG5cbmV4cG9ydCB7IHdyYXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXAubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react-ui/dist/utils/wrap.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientContext: () => (/* binding */ ClientContext),\n/* harmony export */   ClientSideSuspense: () => (/* binding */ ClientSideSuspense),\n/* harmony export */   CreateThreadError: () => (/* binding */ CreateThreadError),\n/* harmony export */   LiveblocksProvider: () => (/* binding */ LiveblocksProvider),\n/* harmony export */   PKG_FORMAT: () => (/* binding */ PKG_FORMAT),\n/* harmony export */   PKG_NAME: () => (/* binding */ PKG_NAME),\n/* harmony export */   PKG_VERSION: () => (/* binding */ PKG_VERSION),\n/* harmony export */   RoomContext: () => (/* binding */ RoomContext),\n/* harmony export */   _RoomProvider: () => (/* binding */ _RoomProvider),\n/* harmony export */   _useAddReaction: () => (/* binding */ _useAddReaction),\n/* harmony export */   _useBroadcastEvent: () => (/* binding */ _useBroadcastEvent),\n/* harmony export */   _useCreateThread: () => (/* binding */ _useCreateThread),\n/* harmony export */   _useDeleteThread: () => (/* binding */ _useDeleteThread),\n/* harmony export */   _useEditThreadMetadata: () => (/* binding */ _useEditThreadMetadata),\n/* harmony export */   _useEventListener: () => (/* binding */ _useEventListener),\n/* harmony export */   _useInboxNotificationThread: () => (/* binding */ _useInboxNotificationThread),\n/* harmony export */   _useMutation: () => (/* binding */ _useMutation),\n/* harmony export */   _useMyPresence: () => (/* binding */ _useMyPresence),\n/* harmony export */   _useOther: () => (/* binding */ _useOther),\n/* harmony export */   _useOtherSuspense: () => (/* binding */ _useOtherSuspense),\n/* harmony export */   _useOthers: () => (/* binding */ _useOthers),\n/* harmony export */   _useOthersListener: () => (/* binding */ _useOthersListener),\n/* harmony export */   _useOthersMapped: () => (/* binding */ _useOthersMapped),\n/* harmony export */   _useOthersMappedSuspense: () => (/* binding */ _useOthersMappedSuspense),\n/* harmony export */   _useOthersSuspense: () => (/* binding */ _useOthersSuspense),\n/* harmony export */   _useRoom: () => (/* binding */ _useRoom),\n/* harmony export */   _useSelf: () => (/* binding */ _useSelf),\n/* harmony export */   _useSelfSuspense: () => (/* binding */ _useSelfSuspense),\n/* harmony export */   _useStorage: () => (/* binding */ _useStorage),\n/* harmony export */   _useStorageRoot: () => (/* binding */ _useStorageRoot),\n/* harmony export */   _useStorageSuspense: () => (/* binding */ _useStorageSuspense),\n/* harmony export */   _useThreads: () => (/* binding */ _useThreads),\n/* harmony export */   _useThreadsSuspense: () => (/* binding */ _useThreadsSuspense),\n/* harmony export */   _useUpdateMyPresence: () => (/* binding */ _useUpdateMyPresence),\n/* harmony export */   _useUser: () => (/* binding */ _useUser),\n/* harmony export */   _useUserSuspense: () => (/* binding */ _useUserSuspense),\n/* harmony export */   createLiveblocksContext: () => (/* binding */ createLiveblocksContext),\n/* harmony export */   createRoomContext: () => (/* binding */ createRoomContext),\n/* harmony export */   selectedThreads: () => (/* binding */ selectedThreads),\n/* harmony export */   useBatch: () => (/* binding */ useBatch),\n/* harmony export */   useCanRedo: () => (/* binding */ useCanRedo),\n/* harmony export */   useCanUndo: () => (/* binding */ useCanUndo),\n/* harmony export */   useClient: () => (/* binding */ useClient),\n/* harmony export */   useCommentsErrorListener: () => (/* binding */ useCommentsErrorListener),\n/* harmony export */   useCreateComment: () => (/* binding */ useCreateComment),\n/* harmony export */   useDeleteAllInboxNotifications: () => (/* binding */ useDeleteAllInboxNotifications),\n/* harmony export */   useDeleteComment: () => (/* binding */ useDeleteComment),\n/* harmony export */   useDeleteInboxNotification: () => (/* binding */ useDeleteInboxNotification),\n/* harmony export */   useEditComment: () => (/* binding */ useEditComment),\n/* harmony export */   useErrorListener: () => (/* binding */ useErrorListener),\n/* harmony export */   useHistory: () => (/* binding */ useHistory),\n/* harmony export */   useInboxNotifications: () => (/* binding */ useInboxNotifications),\n/* harmony export */   useInboxNotificationsSuspense: () => (/* binding */ useInboxNotificationsSuspense),\n/* harmony export */   useLostConnectionListener: () => (/* binding */ useLostConnectionListener),\n/* harmony export */   useMarkAllInboxNotificationsAsRead: () => (/* binding */ useMarkAllInboxNotificationsAsRead),\n/* harmony export */   useMarkInboxNotificationAsRead: () => (/* binding */ useMarkInboxNotificationAsRead),\n/* harmony export */   useMarkThreadAsRead: () => (/* binding */ useMarkThreadAsRead),\n/* harmony export */   useMarkThreadAsResolved: () => (/* binding */ useMarkThreadAsResolved),\n/* harmony export */   useMarkThreadAsUnresolved: () => (/* binding */ useMarkThreadAsUnresolved),\n/* harmony export */   useOthersConnectionIds: () => (/* binding */ useOthersConnectionIds),\n/* harmony export */   useOthersConnectionIdsSuspense: () => (/* binding */ useOthersConnectionIdsSuspense),\n/* harmony export */   useRedo: () => (/* binding */ useRedo),\n/* harmony export */   useRemoveReaction: () => (/* binding */ useRemoveReaction),\n/* harmony export */   useRoomInfo: () => (/* binding */ useRoomInfo),\n/* harmony export */   useRoomInfoSuspense: () => (/* binding */ useRoomInfoSuspense),\n/* harmony export */   useRoomNotificationSettings: () => (/* binding */ useRoomNotificationSettings),\n/* harmony export */   useStatus: () => (/* binding */ useStatus),\n/* harmony export */   useStorageStatus: () => (/* binding */ useStorageStatus),\n/* harmony export */   useStorageStatusSuspense: () => (/* binding */ useStorageStatusSuspense),\n/* harmony export */   useThreadSubscription: () => (/* binding */ useThreadSubscription),\n/* harmony export */   useUndo: () => (/* binding */ useUndo),\n/* harmony export */   useUnreadInboxNotificationsCount: () => (/* binding */ useUnreadInboxNotificationsCount),\n/* harmony export */   useUnreadInboxNotificationsCountSuspense: () => (/* binding */ useUnreadInboxNotificationsCountSuspense),\n/* harmony export */   useUpdateRoomNotificationSettings: () => (/* binding */ useUpdateRoomNotificationSettings)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @liveblocks/core */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@liveblocks/react/node_modules/nanoid/index.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/react\";\nvar PKG_VERSION = \"2.3.0\";\nvar PKG_FORMAT = \"esm\";\n\n// src/ClientSideSuspense.tsx\n\nfunction ClientSideSuspense(props) {\n  const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    setMounted(true);\n  }, []);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, { fallback: props.fallback }, mounted ? typeof props.children === \"function\" ? props.children() : props.children : props.fallback);\n}\n\n// src/liveblocks.tsx\n\n\n\n\n\n\n// src/comments/lib/selected-inbox-notifications.ts\n\nfunction selectedInboxNotifications(state) {\n  const result = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.applyOptimisticUpdates)(state);\n  return Object.values(result.inboxNotifications).sort(\n    // Sort so that the most recent notifications are first\n    (a, b) => b.notifiedAt.getTime() - a.notifiedAt.getTime()\n  );\n}\n\n// src/lib/retry-error.ts\n\nvar MAX_ERROR_RETRY_COUNT = 5;\nvar ERROR_RETRY_INTERVAL = 5e3;\nfunction retryError(action, retryCount) {\n  if (retryCount >= MAX_ERROR_RETRY_COUNT) return;\n  const timeout = Math.pow(2, retryCount) * ERROR_RETRY_INTERVAL;\n  setTimeout(() => {\n    void action();\n  }, timeout);\n}\nasync function autoRetry(promiseFn, maxTries, backoff) {\n  const fallbackBackoff = backoff.length > 0 ? backoff[backoff.length - 1] : 0;\n  let attempt = 0;\n  while (true) {\n    attempt++;\n    const promise = promiseFn();\n    try {\n      return await promise;\n    } catch (err) {\n      if (attempt >= maxTries) {\n        throw new Error(`Failed after ${maxTries} attempts: ${String(err)}`);\n      }\n    }\n    const delay = backoff[attempt - 1] ?? fallbackBackoff;\n    await (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.wait)(delay);\n  }\n}\n\n// src/lib/use-initial.ts\n\n\n// src/lib/use-latest.ts\n\nfunction useLatest(value) {\n  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\n// src/lib/use-initial.ts\nvar noop = (state) => state;\nfunction useInitial(value) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(noop, value)[0];\n}\nfunction useInitialUnlessFunction(latestValue) {\n  const frozenValue = useInitial(latestValue);\n  if (typeof frozenValue === \"function\") {\n    const ref = useLatest(latestValue);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args) => ref.current(...args), [\n      ref\n    ]);\n  } else {\n    return frozenValue;\n  }\n}\n\n// src/lib/use-polyfill.ts\nvar use = (\n  // React.use ||\n  (promise) => {\n    if (promise.status === \"pending\") {\n      throw promise;\n    } else if (promise.status === \"fulfilled\") {\n      return promise.value;\n    } else if (promise.status === \"rejected\") {\n      throw promise.reason;\n    } else {\n      promise.status = \"pending\";\n      promise.then(\n        (v) => {\n          promise.status = \"fulfilled\";\n          promise.value = v;\n        },\n        (e) => {\n          promise.status = \"rejected\";\n          promise.reason = e;\n        }\n      );\n      throw promise;\n    }\n  }\n);\n\n// src/liveblocks.tsx\nvar ClientContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction missingUserError(userId) {\n  return new Error(`resolveUsers didn't return anything for user '${userId}'`);\n}\nfunction missingRoomInfoError(roomId) {\n  return new Error(\n    `resolveRoomsInfo didn't return anything for room '${roomId}'`\n  );\n}\nvar _extras = /* @__PURE__ */ new WeakMap();\nvar _bundles = /* @__PURE__ */ new WeakMap();\nvar POLLING_INTERVAL = 60 * 1e3;\nvar INBOX_NOTIFICATIONS_QUERY = \"INBOX_NOTIFICATIONS\";\nfunction selectorFor_useInboxNotifications(state) {\n  const query = state.queries[INBOX_NOTIFICATIONS_QUERY];\n  if (query === void 0 || query.isLoading) {\n    return {\n      isLoading: true\n    };\n  }\n  if (query.error !== void 0) {\n    return {\n      error: query.error,\n      isLoading: false\n    };\n  }\n  return {\n    inboxNotifications: selectedInboxNotifications(state),\n    isLoading: false\n  };\n}\nfunction selectUnreadInboxNotificationsCount(state) {\n  let count = 0;\n  for (const notification of selectedInboxNotifications(state)) {\n    if (notification.readAt === null || notification.readAt < notification.notifiedAt) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction selectorFor_useUnreadInboxNotificationsCount(state) {\n  const query = state.queries[INBOX_NOTIFICATIONS_QUERY];\n  if (query === void 0 || query.isLoading) {\n    return {\n      isLoading: true\n    };\n  }\n  if (query.error !== void 0) {\n    return {\n      error: query.error,\n      isLoading: false\n    };\n  }\n  return {\n    isLoading: false,\n    count: selectUnreadInboxNotificationsCount(state)\n  };\n}\nfunction selectorFor_useUser(state, userId) {\n  if (state === void 0 || state?.isLoading) {\n    return state ?? { isLoading: true };\n  }\n  if (state.error) {\n    return state;\n  }\n  if (!state.data) {\n    return {\n      isLoading: false,\n      error: missingUserError(userId)\n    };\n  }\n  return {\n    isLoading: false,\n    user: state.data\n  };\n}\nfunction selectorFor_useRoomInfo(state, roomId) {\n  if (state === void 0 || state?.isLoading) {\n    return state ?? { isLoading: true };\n  }\n  if (state.error) {\n    return state;\n  }\n  if (!state.data) {\n    return {\n      isLoading: false,\n      error: missingRoomInfoError(roomId)\n    };\n  }\n  return {\n    isLoading: false,\n    info: state.data\n  };\n}\nfunction getOrCreateContextBundle(client) {\n  let bundle = _bundles.get(client);\n  if (!bundle) {\n    bundle = makeLiveblocksContextBundle(client);\n    _bundles.set(client, bundle);\n  }\n  return bundle;\n}\nfunction getExtrasForClient(client) {\n  let extras = _extras.get(client);\n  if (!extras) {\n    extras = makeExtrasForClient(client);\n    _extras.set(client, extras);\n  }\n  return extras;\n}\nfunction makeExtrasForClient(client) {\n  const internals = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal];\n  const store = internals.cacheStore;\n  const notifications = internals.notifications;\n  let lastRequestedAt;\n  async function fetchInboxNotifications() {\n    const since = lastRequestedAt !== void 0 ? { since: lastRequestedAt } : void 0;\n    const result = await notifications.getInboxNotifications(since);\n    store.updateThreadsAndNotifications(\n      result.threads,\n      result.inboxNotifications,\n      result.deletedThreads,\n      result.deletedInboxNotifications,\n      INBOX_NOTIFICATIONS_QUERY\n    );\n    if (lastRequestedAt === void 0 || lastRequestedAt < result.meta.requestedAt) {\n      lastRequestedAt = result.meta.requestedAt;\n    }\n  }\n  let pollerSubscribers = 0;\n  const poller = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makePoller)(async () => {\n    try {\n      await waitUntilInboxNotificationsLoaded();\n      await fetchInboxNotifications();\n    } catch (err) {\n      console.warn(`Polling new inbox notifications failed: ${String(err)}`);\n    }\n  });\n  const waitUntilInboxNotificationsLoaded = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.memoizeOnSuccess)(async () => {\n    store.setQueryState(INBOX_NOTIFICATIONS_QUERY, {\n      isLoading: true\n    });\n    try {\n      await autoRetry(\n        () => fetchInboxNotifications(),\n        5,\n        [5e3, 5e3, 1e4, 15e3]\n      );\n    } catch (err) {\n      store.setQueryState(INBOX_NOTIFICATIONS_QUERY, {\n        isLoading: false,\n        error: err\n      });\n      throw err;\n    }\n  });\n  function loadInboxNotifications() {\n    void waitUntilInboxNotificationsLoaded().catch(() => {\n    });\n  }\n  function useEnableInboxNotificationsPolling() {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      pollerSubscribers++;\n      poller.start(POLLING_INTERVAL);\n      return () => {\n        if (pollerSubscribers <= 0) {\n          console.warn(\n            `Internal unexpected behavior. Cannot decrease subscriber count for query \"${INBOX_NOTIFICATIONS_QUERY}\"`\n          );\n          return;\n        }\n        pollerSubscribers--;\n        if (pollerSubscribers <= 0) {\n          poller.stop();\n        }\n      };\n    }, []);\n  }\n  return {\n    store,\n    notifications,\n    useEnableInboxNotificationsPolling,\n    waitUntilInboxNotificationsLoaded,\n    loadInboxNotifications\n  };\n}\nfunction makeLiveblocksContextBundle(client) {\n  const useInboxNotificationThread2 = (inboxNotificationId) => useInboxNotificationThread_withClient(client, inboxNotificationId);\n  const useMarkInboxNotificationAsRead2 = () => useMarkInboxNotificationAsRead_withClient(client);\n  const useMarkAllInboxNotificationsAsRead2 = () => useMarkAllInboxNotificationsAsRead_withClient(client);\n  const useDeleteInboxNotification2 = () => useDeleteInboxNotification_withClient(client);\n  const useDeleteAllInboxNotifications2 = () => useDeleteAllInboxNotifications_withClient(client);\n  function LiveblocksProvider2(props) {\n    useEnsureNoLiveblocksProvider();\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ClientContext.Provider, { value: client }, props.children);\n  }\n  const shared = createSharedContext(client);\n  const bundle = {\n    LiveblocksProvider: LiveblocksProvider2,\n    useInboxNotifications: () => useInboxNotifications_withClient(client),\n    useUnreadInboxNotificationsCount: () => useUnreadInboxNotificationsCount_withClient(client),\n    useMarkInboxNotificationAsRead: useMarkInboxNotificationAsRead2,\n    useMarkAllInboxNotificationsAsRead: useMarkAllInboxNotificationsAsRead2,\n    useDeleteInboxNotification: useDeleteInboxNotification2,\n    useDeleteAllInboxNotifications: useDeleteAllInboxNotifications2,\n    useInboxNotificationThread: useInboxNotificationThread2,\n    ...shared.classic,\n    suspense: {\n      LiveblocksProvider: LiveblocksProvider2,\n      useInboxNotifications: () => useInboxNotificationsSuspense_withClient(client),\n      useUnreadInboxNotificationsCount: () => useUnreadInboxNotificationsCountSuspense_withClient(client),\n      useMarkInboxNotificationAsRead: useMarkInboxNotificationAsRead2,\n      useMarkAllInboxNotificationsAsRead: useMarkAllInboxNotificationsAsRead2,\n      useDeleteInboxNotification: useDeleteInboxNotification2,\n      useDeleteAllInboxNotifications: useDeleteAllInboxNotifications2,\n      useInboxNotificationThread: useInboxNotificationThread2,\n      ...shared.suspense\n    }\n  };\n  return bundle;\n}\nfunction useInboxNotifications_withClient(client) {\n  const { loadInboxNotifications, store, useEnableInboxNotificationsPolling } = getExtrasForClient(client);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    loadInboxNotifications();\n  }, [loadInboxNotifications]);\n  useEnableInboxNotificationsPolling();\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selectorFor_useInboxNotifications,\n    _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow\n  );\n}\nfunction useInboxNotificationsSuspense_withClient(client) {\n  const { waitUntilInboxNotificationsLoaded } = getExtrasForClient(client);\n  use(waitUntilInboxNotificationsLoaded());\n  const result = useInboxNotifications_withClient(client);\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!result.error, \"Did not expect error\");\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!result.isLoading, \"Did not expect loading\");\n  return result;\n}\nfunction useUnreadInboxNotificationsCount_withClient(client) {\n  const { store, loadInboxNotifications, useEnableInboxNotificationsPolling } = getExtrasForClient(client);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    loadInboxNotifications();\n  }, [loadInboxNotifications]);\n  useEnableInboxNotificationsPolling();\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selectorFor_useUnreadInboxNotificationsCount,\n    _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow\n  );\n}\nfunction useUnreadInboxNotificationsCountSuspense_withClient(client) {\n  const { waitUntilInboxNotificationsLoaded } = getExtrasForClient(client);\n  use(waitUntilInboxNotificationsLoaded());\n  const result = useUnreadInboxNotificationsCount_withClient(client);\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!result.isLoading, \"Did not expect loading\");\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!result.error, \"Did not expect error\");\n  return result;\n}\nfunction useMarkInboxNotificationAsRead_withClient(client) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (inboxNotificationId) => {\n      const { store, notifications } = getExtrasForClient(client);\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const readAt = /* @__PURE__ */ new Date();\n      store.pushOptimisticUpdate({\n        type: \"mark-inbox-notification-as-read\",\n        id: optimisticUpdateId,\n        inboxNotificationId,\n        readAt\n      });\n      notifications.markInboxNotificationAsRead(inboxNotificationId).then(\n        () => {\n          store.set((state) => {\n            const existingNotification = state.inboxNotifications[inboxNotificationId];\n            if (existingNotification === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: state.optimisticUpdates.filter(\n                  (update) => update.id !== optimisticUpdateId\n                )\n              };\n            }\n            return {\n              ...state,\n              inboxNotifications: {\n                ...state.inboxNotifications,\n                [inboxNotificationId]: {\n                  ...existingNotification,\n                  readAt\n                }\n              },\n              optimisticUpdates: state.optimisticUpdates.filter(\n                (update) => update.id !== optimisticUpdateId\n              )\n            };\n          });\n        },\n        () => {\n          store.set((state) => ({\n            ...state,\n            optimisticUpdates: state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            )\n          }));\n        }\n      );\n    },\n    [client]\n  );\n}\nfunction useMarkAllInboxNotificationsAsRead_withClient(client) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const { store, notifications } = getExtrasForClient(client);\n    const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n    const readAt = /* @__PURE__ */ new Date();\n    store.pushOptimisticUpdate({\n      type: \"mark-all-inbox-notifications-as-read\",\n      id: optimisticUpdateId,\n      readAt\n    });\n    notifications.markAllInboxNotificationsAsRead().then(\n      () => {\n        store.set((state) => ({\n          ...state,\n          inboxNotifications: Object.fromEntries(\n            Array.from(Object.entries(state.inboxNotifications)).map(\n              ([id, inboxNotification]) => [\n                id,\n                { ...inboxNotification, readAt }\n              ]\n            )\n          ),\n          optimisticUpdates: state.optimisticUpdates.filter(\n            (update) => update.id !== optimisticUpdateId\n          )\n        }));\n      },\n      () => {\n        store.set((state) => ({\n          ...state,\n          optimisticUpdates: state.optimisticUpdates.filter(\n            (update) => update.id !== optimisticUpdateId\n          )\n        }));\n      }\n    );\n  }, [client]);\n}\nfunction useDeleteInboxNotification_withClient(client) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (inboxNotificationId) => {\n      const { store, notifications } = getExtrasForClient(client);\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const deletedAt = /* @__PURE__ */ new Date();\n      store.pushOptimisticUpdate({\n        type: \"delete-inbox-notification\",\n        id: optimisticUpdateId,\n        inboxNotificationId,\n        deletedAt\n      });\n      notifications.deleteInboxNotification(inboxNotificationId).then(\n        () => {\n          store.set((state) => {\n            const existingNotification = state.inboxNotifications[inboxNotificationId];\n            if (existingNotification === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: state.optimisticUpdates.filter(\n                  (update) => update.id !== optimisticUpdateId\n                )\n              };\n            }\n            const { [inboxNotificationId]: _, ...inboxNotifications } = state.inboxNotifications;\n            return {\n              ...state,\n              inboxNotifications,\n              optimisticUpdates: state.optimisticUpdates.filter(\n                (update) => update.id !== optimisticUpdateId\n              )\n            };\n          });\n        },\n        () => {\n          store.set((state) => ({\n            ...state,\n            optimisticUpdates: state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            )\n          }));\n        }\n      );\n    },\n    [client]\n  );\n}\nfunction useDeleteAllInboxNotifications_withClient(client) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const { store, notifications } = getExtrasForClient(client);\n    const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n    const deletedAt = /* @__PURE__ */ new Date();\n    store.pushOptimisticUpdate({\n      type: \"delete-all-inbox-notifications\",\n      id: optimisticUpdateId,\n      deletedAt\n    });\n    notifications.deleteAllInboxNotifications().then(\n      () => {\n        store.set((state) => ({\n          ...state,\n          inboxNotifications: {},\n          optimisticUpdates: state.optimisticUpdates.filter(\n            (update) => update.id !== optimisticUpdateId\n          )\n        }));\n      },\n      () => {\n        store.set((state) => ({\n          ...state,\n          optimisticUpdates: state.optimisticUpdates.filter(\n            (update) => update.id !== optimisticUpdateId\n          )\n        }));\n      }\n    );\n  }, [client]);\n}\nfunction useInboxNotificationThread_withClient(client, inboxNotificationId) {\n  const { store } = getExtrasForClient(client);\n  const selector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (state) => {\n      const inboxNotification = state.inboxNotifications[inboxNotificationId] ?? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.raise)(`Inbox notification with ID \"${inboxNotificationId}\" not found`);\n      if (inboxNotification.kind !== \"thread\") {\n        (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.raise)(\n          `Inbox notification with ID \"${inboxNotificationId}\" is not of kind \"thread\"`\n        );\n      }\n      const thread = state.threads[inboxNotification.threadId] ?? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.raise)(\n        `Thread with ID \"${inboxNotification.threadId}\" not found, this inbox notification might not be of kind \"thread\"`\n      );\n      return thread;\n    },\n    [inboxNotificationId]\n  );\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selector\n  );\n}\nfunction useUser_withClient(client, userId) {\n  const usersStore = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].usersStore;\n  const getUserState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    () => usersStore.getState(userId),\n    [usersStore, userId]\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    void usersStore.get(userId);\n  }, [usersStore, userId]);\n  const selector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (state) => selectorFor_useUser(state, userId),\n    [userId]\n  );\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    usersStore.subscribe,\n    getUserState,\n    getUserState,\n    selector,\n    _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow\n  );\n}\nfunction useUserSuspense_withClient(client, userId) {\n  const usersStore = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].usersStore;\n  const getUserState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    () => usersStore.getState(userId),\n    [usersStore, userId]\n  );\n  const userState = getUserState();\n  if (!userState || userState.isLoading) {\n    throw usersStore.get(userId);\n  }\n  if (userState.error) {\n    throw userState.error;\n  }\n  if (!userState.data) {\n    throw missingUserError(userId);\n  }\n  const state = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(\n    usersStore.subscribe,\n    getUserState,\n    getUserState\n  );\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(state !== void 0, \"Unexpected missing state\");\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!state.isLoading, \"Unexpected loading state\");\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!state.error, \"Unexpected error state\");\n  return {\n    isLoading: false,\n    user: state.data,\n    error: void 0\n  };\n}\nfunction useRoomInfo_withClient(client, roomId) {\n  const roomsInfoStore = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].roomsInfoStore;\n  const getRoomInfoState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    () => roomsInfoStore.getState(roomId),\n    [roomsInfoStore, roomId]\n  );\n  const selector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (state) => selectorFor_useRoomInfo(state, roomId),\n    [roomId]\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    void roomsInfoStore.get(roomId);\n  }, [roomsInfoStore, roomId]);\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    roomsInfoStore.subscribe,\n    getRoomInfoState,\n    getRoomInfoState,\n    selector,\n    _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow\n  );\n}\nfunction useRoomInfoSuspense_withClient(client, roomId) {\n  const roomsInfoStore = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].roomsInfoStore;\n  const getRoomInfoState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    () => roomsInfoStore.getState(roomId),\n    [roomsInfoStore, roomId]\n  );\n  const roomInfoState = getRoomInfoState();\n  if (!roomInfoState || roomInfoState.isLoading) {\n    throw roomsInfoStore.get(roomId);\n  }\n  if (roomInfoState.error) {\n    throw roomInfoState.error;\n  }\n  if (!roomInfoState.data) {\n    throw missingRoomInfoError(roomId);\n  }\n  const state = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(\n    roomsInfoStore.subscribe,\n    getRoomInfoState,\n    getRoomInfoState\n  );\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(state !== void 0, \"Unexpected missing state\");\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!state.isLoading, \"Unexpected loading state\");\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(!state.error, \"Unexpected error state\");\n  (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.assert)(state.data !== void 0, \"Unexpected missing room info data\");\n  return {\n    isLoading: false,\n    info: state.data,\n    error: void 0\n  };\n}\nfunction createSharedContext(client) {\n  const useClient2 = () => client;\n  return {\n    classic: {\n      useClient: useClient2,\n      useUser: (userId) => useUser_withClient(client, userId),\n      useRoomInfo: (roomId) => useRoomInfo_withClient(client, roomId)\n    },\n    suspense: {\n      useClient: useClient2,\n      useUser: (userId) => useUserSuspense_withClient(client, userId),\n      useRoomInfo: (roomId) => useRoomInfoSuspense_withClient(client, roomId)\n    }\n  };\n}\nfunction useEnsureNoLiveblocksProvider(options) {\n  const existing = useClientOrNull();\n  if (!options?.allowNesting && existing !== null) {\n    throw new Error(\n      \"You cannot nest multiple LiveblocksProvider instances in the same React tree.\"\n    );\n  }\n}\nfunction useClientOrNull() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ClientContext);\n}\nfunction useClient() {\n  return useClientOrNull() ?? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.raise)(\"LiveblocksProvider is missing from the React tree.\");\n}\nfunction LiveblocksProviderWithClient(props) {\n  useEnsureNoLiveblocksProvider(props);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ClientContext.Provider, { value: props.client }, props.children);\n}\nfunction LiveblocksProvider(props) {\n  const { children, ...o } = props;\n  const options = {\n    publicApiKey: useInitial(o.publicApiKey),\n    throttle: useInitial(o.throttle),\n    lostConnectionTimeout: useInitial(o.lostConnectionTimeout),\n    backgroundKeepAliveTimeout: useInitial(o.backgroundKeepAliveTimeout),\n    polyfills: useInitial(o.polyfills),\n    unstable_fallbackToHTTP: useInitial(o.unstable_fallbackToHTTP),\n    unstable_streamData: useInitial(o.unstable_streamData),\n    authEndpoint: useInitialUnlessFunction(o.authEndpoint),\n    resolveMentionSuggestions: useInitialUnlessFunction(\n      o.resolveMentionSuggestions\n    ),\n    resolveUsers: useInitialUnlessFunction(o.resolveUsers),\n    resolveRoomsInfo: useInitialUnlessFunction(o.resolveRoomsInfo),\n    baseUrl: useInitial(\n      // @ts-expect-error - Hidden config options\n      o.baseUrl\n    ),\n    enableDebugLogging: useInitial(\n      // @ts-expect-error - Hidden config options\n      o.enableDebugLogging\n    )\n  };\n  const client = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.createClient)(options), []);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LiveblocksProviderWithClient, { client }, children);\n}\nfunction createLiveblocksContext(client) {\n  return getOrCreateContextBundle(client);\n}\nfunction useInboxNotifications() {\n  return useInboxNotifications_withClient(useClient());\n}\nfunction useInboxNotificationsSuspense() {\n  return useInboxNotificationsSuspense_withClient(useClient());\n}\nfunction useInboxNotificationThread(inboxNotificationId) {\n  return useInboxNotificationThread_withClient(\n    useClient(),\n    inboxNotificationId\n  );\n}\nfunction useMarkAllInboxNotificationsAsRead() {\n  return useMarkAllInboxNotificationsAsRead_withClient(useClient());\n}\nfunction useMarkInboxNotificationAsRead() {\n  return useMarkInboxNotificationAsRead_withClient(useClient());\n}\nfunction useDeleteAllInboxNotifications() {\n  return useDeleteAllInboxNotifications_withClient(useClient());\n}\nfunction useDeleteInboxNotification() {\n  return useDeleteInboxNotification_withClient(useClient());\n}\nfunction useUnreadInboxNotificationsCount() {\n  return useUnreadInboxNotificationsCount_withClient(useClient());\n}\nfunction useUnreadInboxNotificationsCountSuspense() {\n  return useUnreadInboxNotificationsCountSuspense_withClient(useClient());\n}\nfunction useUser(userId) {\n  const client = useClient();\n  return useUser_withClient(client, userId);\n}\nfunction useUserSuspense(userId) {\n  const client = useClient();\n  return useUserSuspense_withClient(client, userId);\n}\nfunction useRoomInfo(roomId) {\n  return useRoomInfo_withClient(useClient(), roomId);\n}\nfunction useRoomInfoSuspense(roomId) {\n  return useRoomInfoSuspense_withClient(useClient(), roomId);\n}\nvar _useInboxNotificationThread = useInboxNotificationThread;\nvar _useUser = useUser;\nvar _useUserSuspense = useUserSuspense;\n\n// src/comments/errors.ts\nvar CreateThreadError = class extends Error {\n  constructor(cause, context) {\n    super(\"Create thread failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"CreateThreadError\";\n  }\n};\nvar DeleteThreadError = class extends Error {\n  constructor(cause, context) {\n    super(\"Delete thread failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"DeleteThreadError\";\n  }\n};\nvar EditThreadMetadataError = class extends Error {\n  constructor(cause, context) {\n    super(\"Edit thread metadata failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"EditThreadMetadataError\";\n  }\n};\nvar MarkThreadAsResolvedError = class extends Error {\n  constructor(cause, context) {\n    super(\"Mark thread as resolved failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"MarkThreadAsResolvedError\";\n  }\n};\nvar MarkThreadAsUnresolvedError = class extends Error {\n  constructor(cause, context) {\n    super(\"Mark thread as unresolved failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"MarkThreadAsUnresolvedError\";\n  }\n};\nvar CreateCommentError = class extends Error {\n  constructor(cause, context) {\n    super(\"Create comment failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"CreateCommentError\";\n  }\n};\nvar EditCommentError = class extends Error {\n  constructor(cause, context) {\n    super(\"Edit comment failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"EditCommentError\";\n  }\n};\nvar DeleteCommentError = class extends Error {\n  constructor(cause, context) {\n    super(\"Delete comment failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"DeleteCommentError\";\n  }\n};\nvar AddReactionError = class extends Error {\n  constructor(cause, context) {\n    super(\"Add reaction failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"AddReactionError\";\n  }\n};\nvar RemoveReactionError = class extends Error {\n  constructor(cause, context) {\n    super(\"Remove reaction failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"RemoveReactionError\";\n  }\n};\nvar MarkInboxNotificationAsReadError = class extends Error {\n  constructor(cause, context) {\n    super(\"Mark inbox notification as read failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"MarkInboxNotificationAsReadError\";\n  }\n};\nvar UpdateNotificationSettingsError = class extends Error {\n  constructor(cause, context) {\n    super(\"Update notification settings failed.\");\n    this.cause = cause;\n    this.context = context;\n    this.name = \"UpdateNotificationSettingsError\";\n  }\n};\n\n// src/comments/lib/selected-threads.ts\n\nfunction selectedThreads(roomId, state, options) {\n  const result = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.applyOptimisticUpdates)(state);\n  const threads = Object.values(result.threads).filter(\n    (thread) => {\n      if (thread.roomId !== roomId) return false;\n      if (thread.deletedAt !== void 0) {\n        return false;\n      }\n      const query = options.query;\n      if (!query) return true;\n      if (query.resolved !== void 0 && thread.resolved !== query.resolved) {\n        return false;\n      }\n      for (const key in query.metadata) {\n        const metadataValue = thread.metadata[key];\n        const filterValue = query.metadata[key];\n        if (assertFilterIsStartsWithOperator(filterValue) && assertMetadataValueIsString(metadataValue)) {\n          if (metadataValue.startsWith(filterValue.startsWith)) {\n            return true;\n          }\n        }\n        if (metadataValue !== filterValue) {\n          return false;\n        }\n      }\n      return true;\n    }\n  );\n  return threads.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n}\nvar assertFilterIsStartsWithOperator = (filter) => {\n  if (typeof filter === \"object\" && typeof filter.startsWith === \"string\") {\n    return true;\n  } else {\n    return false;\n  }\n};\nvar assertMetadataValueIsString = (value) => {\n  return typeof value === \"string\";\n};\n\n// src/room.tsx\n\n\n\n\n\n\n// src/comments/lib/createIds.ts\n\nvar THREAD_ID_PREFIX = \"th\";\nvar COMMENT_ID_PREFIX = \"cm\";\nfunction createOptimisticId(prefix) {\n  return `${prefix}_${(0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)()}`;\n}\nfunction createThreadId() {\n  return createOptimisticId(THREAD_ID_PREFIX);\n}\nfunction createCommentId() {\n  return createOptimisticId(COMMENT_ID_PREFIX);\n}\n\n// src/comments/lib/select-notification-settings.ts\n\nfunction selectNotificationSettings(roomId, state) {\n  const { notificationSettings } = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.applyOptimisticUpdates)(state);\n  return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.nn)(notificationSettings[roomId]);\n}\n\n// src/use-scroll-to-comment-on-load-effect.ts\n\nfunction handleScrollToCommentOnLoad(shouldScrollOnLoad, state) {\n  if (shouldScrollOnLoad === false) return;\n  if (state.isLoading) return;\n  const isWindowDefined = typeof window !== \"undefined\";\n  if (!isWindowDefined) return;\n  const hash = window.location.hash;\n  const commentId = hash.slice(1);\n  if (!commentId.startsWith(\"cm_\")) return;\n  const comment = document.getElementById(commentId);\n  if (comment === null) return;\n  const comments = state.threads.flatMap((thread) => thread.comments);\n  const isCommentInThreads = comments.some(\n    (comment2) => comment2.id === commentId\n  );\n  if (!isCommentInThreads) return;\n  comment.scrollIntoView();\n}\nfunction useScrollToCommentOnLoadEffect(shouldScrollOnLoad, state) {\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(\n    () => {\n      handleScrollToCommentOnLoad(shouldScrollOnLoad, state);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- We only want to run this effect once\n    [state.isLoading]\n  );\n}\n\n// src/room.tsx\nvar SMOOTH_DELAY = 1e3;\nvar noop2 = () => {\n};\nvar identity = (x) => x;\nvar missing_unstable_batchedUpdates = (reactVersion, roomId) => `We noticed you\\u2019re using React ${reactVersion}. Please pass unstable_batchedUpdates at the RoomProvider level until you\\u2019re ready to upgrade to React 18:\n\n    import { unstable_batchedUpdates } from \"react-dom\";  // or \"react-native\"\n\n    <RoomProvider id=${JSON.stringify(\n  roomId\n)} ... unstable_batchedUpdates={unstable_batchedUpdates}>\n      ...\n    </RoomProvider>\n\nWhy? Please see https://liveblocks.io/docs/platform/troubleshooting#stale-props-zombie-child for more information`;\nvar superfluous_unstable_batchedUpdates = \"You don\\u2019t need to pass unstable_batchedUpdates to RoomProvider anymore, since you\\u2019re on React 18+ already.\";\nfunction useSyncExternalStore2(s, gs, gss) {\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(s, gs, gss, identity);\n}\nvar STABLE_EMPTY_LIST = Object.freeze([]);\nvar POLLING_INTERVAL2 = 5 * 60 * 1e3;\nfunction makeNotificationSettingsQueryKey(roomId) {\n  return `${roomId}:NOTIFICATION_SETTINGS`;\n}\nfunction alwaysEmptyList() {\n  return STABLE_EMPTY_LIST;\n}\nfunction alwaysNull() {\n  return null;\n}\nfunction selectorFor_useOthersConnectionIds(others) {\n  return others.map((user) => user.connectionId);\n}\nfunction makeMutationContext(room) {\n  const cannotUseUntil = \"This mutation cannot be used until\";\n  const needsPresence = `${cannotUseUntil} connected to the Liveblocks room`;\n  const needsStorage = `${cannotUseUntil} storage has been loaded`;\n  return {\n    get storage() {\n      const mutableRoot = room.getStorageSnapshot();\n      if (mutableRoot === null) {\n        throw new Error(needsStorage);\n      }\n      return mutableRoot;\n    },\n    get self() {\n      const self = room.getSelf();\n      if (self === null) {\n        throw new Error(needsPresence);\n      }\n      return self;\n    },\n    get others() {\n      const others = room.getOthers();\n      if (room.getSelf() === null) {\n        throw new Error(needsPresence);\n      }\n      return others;\n    },\n    setMyPresence: room.updatePresence\n  };\n}\nfunction getCurrentUserId(room) {\n  const self = room.getSelf();\n  if (self === null || self.id === void 0) {\n    return \"anonymous\";\n  } else {\n    return self.id;\n  }\n}\nfunction handleApiError(err) {\n  const message = `Request failed with status ${err.status}: ${err.message}`;\n  if (err.details?.error === \"FORBIDDEN\") {\n    const detailedMessage = [message, err.details.suggestion, err.details.docs].filter(Boolean).join(\"\\n\");\n    _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.console.error(detailedMessage);\n  }\n  return new Error(message);\n}\nvar _extras2 = /* @__PURE__ */ new WeakMap();\nvar _bundles2 = /* @__PURE__ */ new WeakMap();\nfunction getOrCreateRoomContextBundle(client) {\n  let bundle = _bundles2.get(client);\n  if (!bundle) {\n    bundle = makeRoomContextBundle(client);\n    _bundles2.set(client, bundle);\n  }\n  return bundle;\n}\nfunction getExtrasForClient2(client) {\n  let extras = _extras2.get(client);\n  if (!extras) {\n    extras = makeExtrasForClient2(client);\n    _extras2.set(client, extras);\n  }\n  return extras;\n}\nfunction makeExtrasForClient2(client) {\n  const store = client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].cacheStore;\n  const DEFAULT_DEDUPING_INTERVAL = 2e3;\n  const lastRequestedAtByRoom = /* @__PURE__ */ new Map();\n  const requestsByQuery = /* @__PURE__ */ new Map();\n  const requestStatusByRoom = /* @__PURE__ */ new Map();\n  const subscribersByQuery = /* @__PURE__ */ new Map();\n  const poller = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makePoller)(refreshThreadsAndNotifications);\n  async function refreshThreadsAndNotifications() {\n    const requests = [];\n    client[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].getRoomIds().map((roomId) => {\n      const room = client.getRoom(roomId);\n      if (room === null) return;\n      requests.push(getThreadsUpdates(room.id));\n    });\n    await Promise.allSettled(requests);\n  }\n  function incrementQuerySubscribers(queryKey) {\n    const subscribers = subscribersByQuery.get(queryKey) ?? 0;\n    subscribersByQuery.set(queryKey, subscribers + 1);\n    poller.start(POLLING_INTERVAL2);\n    return () => {\n      const subscribers2 = subscribersByQuery.get(queryKey);\n      if (subscribers2 === void 0 || subscribers2 <= 0) {\n        _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.console.warn(\n          `Internal unexpected behavior. Cannot decrease subscriber count for query \"${queryKey}\"`\n        );\n        return;\n      }\n      subscribersByQuery.set(queryKey, subscribers2 - 1);\n      let totalSubscribers = 0;\n      for (const subscribers3 of subscribersByQuery.values()) {\n        totalSubscribers += subscribers3;\n      }\n      if (totalSubscribers <= 0) {\n        poller.stop();\n      }\n    };\n  }\n  async function getThreadsUpdates(roomId) {\n    const room = client.getRoom(roomId);\n    if (room === null) return;\n    const since = lastRequestedAtByRoom.get(room.id);\n    if (since === void 0) return;\n    const isFetchingThreadsUpdates = requestStatusByRoom.get(room.id) ?? false;\n    if (isFetchingThreadsUpdates === true) return;\n    try {\n      requestStatusByRoom.set(room.id, true);\n      const commentsAPI = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments;\n      const updates = await commentsAPI.getThreads({ since });\n      setTimeout(() => {\n        requestStatusByRoom.set(room.id, false);\n      }, DEFAULT_DEDUPING_INTERVAL);\n      store.updateThreadsAndNotifications(\n        updates.threads,\n        updates.inboxNotifications,\n        updates.deletedThreads,\n        updates.deletedInboxNotifications\n      );\n      lastRequestedAtByRoom.set(room.id, updates.meta.requestedAt);\n    } catch (err) {\n      requestStatusByRoom.set(room.id, false);\n      return;\n    }\n  }\n  async function getThreadsAndInboxNotifications(room, queryKey, options, { retryCount } = { retryCount: 0 }) {\n    const existingRequest = requestsByQuery.get(queryKey);\n    if (existingRequest !== void 0) return existingRequest;\n    const commentsAPI = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments;\n    const request = commentsAPI.getThreads(options);\n    requestsByQuery.set(queryKey, request);\n    store.setQueryState(queryKey, {\n      isLoading: true\n    });\n    try {\n      const result = await request;\n      store.updateThreadsAndNotifications(\n        result.threads,\n        result.inboxNotifications,\n        result.deletedThreads,\n        result.deletedInboxNotifications,\n        queryKey\n      );\n      const lastRequestedAt = lastRequestedAtByRoom.get(room.id);\n      if (lastRequestedAt === void 0 || lastRequestedAt > result.meta.requestedAt) {\n        lastRequestedAtByRoom.set(room.id, result.meta.requestedAt);\n      }\n      poller.start(POLLING_INTERVAL2);\n    } catch (err) {\n      requestsByQuery.delete(queryKey);\n      retryError(() => {\n        void getThreadsAndInboxNotifications(room, queryKey, options, {\n          retryCount: retryCount + 1\n        });\n      }, retryCount);\n      store.setQueryState(queryKey, {\n        isLoading: false,\n        error: err\n      });\n    }\n    return;\n  }\n  async function getInboxNotificationSettings(room, queryKey, { retryCount } = { retryCount: 0 }) {\n    const existingRequest = requestsByQuery.get(queryKey);\n    if (existingRequest !== void 0) return existingRequest;\n    try {\n      const request = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].notifications.getRoomNotificationSettings();\n      requestsByQuery.set(queryKey, request);\n      store.setQueryState(queryKey, {\n        isLoading: true\n      });\n      const settings = await request;\n      store.updateRoomInboxNotificationSettings(room.id, settings, queryKey);\n    } catch (err) {\n      requestsByQuery.delete(queryKey);\n      retryError(() => {\n        void getInboxNotificationSettings(room, queryKey, {\n          retryCount: retryCount + 1\n        });\n      }, retryCount);\n      store.setQueryState(queryKey, {\n        isLoading: false,\n        error: err\n      });\n    }\n    return;\n  }\n  const commentsErrorEventSource = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makeEventSource)();\n  function onMutationFailure(innerError, optimisticUpdateId, createPublicError) {\n    store.set((state) => ({\n      ...state,\n      optimisticUpdates: state.optimisticUpdates.filter(\n        (update) => update.id !== optimisticUpdateId\n      )\n    }));\n    if (innerError instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError) {\n      const error = handleApiError(innerError);\n      commentsErrorEventSource.notify(createPublicError(error));\n      return;\n    }\n    if (innerError instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.NotificationsApiError) {\n      handleApiError(innerError);\n      return;\n    }\n    throw innerError;\n  }\n  return {\n    store,\n    incrementQuerySubscribers,\n    commentsErrorEventSource,\n    getThreadsUpdates,\n    getThreadsAndInboxNotifications,\n    getInboxNotificationSettings,\n    onMutationFailure\n  };\n}\nvar RoomContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nfunction makeRoomContextBundle(client) {\n  function RoomProvider_withImplicitLiveblocksProvider(props) {\n    return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LiveblocksProviderWithClient, { client, allowNesting: true }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomProvider, { ...props }));\n  }\n  const shared = createSharedContext(client);\n  const bundle = {\n    RoomContext,\n    RoomProvider: RoomProvider_withImplicitLiveblocksProvider,\n    useRoom,\n    useStatus,\n    useStorageStatus,\n    useBatch,\n    useBroadcastEvent,\n    useOthersListener,\n    useLostConnectionListener,\n    useErrorListener,\n    useEventListener,\n    useHistory,\n    useUndo,\n    useRedo,\n    useCanRedo,\n    useCanUndo,\n    useStorageRoot,\n    useStorage,\n    useSelf,\n    useMyPresence,\n    useUpdateMyPresence,\n    useOthers,\n    useOthersMapped,\n    useOthersConnectionIds,\n    useOther,\n    useMutation,\n    useThreads,\n    useCreateThread,\n    useDeleteThread,\n    useEditThreadMetadata,\n    useMarkThreadAsResolved,\n    useMarkThreadAsUnresolved,\n    useCreateComment,\n    useEditComment,\n    useDeleteComment,\n    useAddReaction,\n    useRemoveReaction,\n    useMarkThreadAsRead,\n    useThreadSubscription,\n    useRoomNotificationSettings,\n    useUpdateRoomNotificationSettings,\n    ...shared.classic,\n    suspense: {\n      RoomContext,\n      RoomProvider: RoomProvider_withImplicitLiveblocksProvider,\n      useRoom,\n      useStatus,\n      useStorageStatus: useStorageStatusSuspense,\n      useBatch,\n      useBroadcastEvent,\n      useOthersListener,\n      useLostConnectionListener,\n      useErrorListener,\n      useEventListener,\n      useHistory,\n      useUndo,\n      useRedo,\n      useCanRedo,\n      useCanUndo,\n      useStorageRoot,\n      useStorage: useStorageSuspense,\n      useSelf: useSelfSuspense,\n      useMyPresence,\n      useUpdateMyPresence,\n      useOthers: useOthersSuspense,\n      useOthersMapped: useOthersMappedSuspense,\n      useOthersConnectionIds: useOthersConnectionIdsSuspense,\n      useOther: useOtherSuspense,\n      useMutation,\n      useThreads: useThreadsSuspense,\n      useCreateThread,\n      useDeleteThread,\n      useEditThreadMetadata,\n      useMarkThreadAsResolved,\n      useMarkThreadAsUnresolved,\n      useCreateComment,\n      useEditComment,\n      useDeleteComment,\n      useAddReaction,\n      useRemoveReaction,\n      useMarkThreadAsRead,\n      useThreadSubscription,\n      useRoomNotificationSettings: useRoomNotificationSettingsSuspense,\n      useUpdateRoomNotificationSettings,\n      ...shared.suspense\n    },\n    useCommentsErrorListener\n  };\n  return Object.defineProperty(bundle, _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal, {\n    enumerable: false\n  });\n}\nfunction RoomProvider(props) {\n  const client = useClient();\n  const [cache] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    () => /* @__PURE__ */ new Map()\n  );\n  const stableEnterRoom = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (roomId, options) => {\n      const cached = cache.get(roomId);\n      if (cached) return cached;\n      const rv = client.enterRoom(roomId, options);\n      const origLeave = rv.leave;\n      rv.leave = () => {\n        origLeave();\n        cache.delete(roomId);\n      };\n      cache.set(roomId, rv);\n      return rv;\n    },\n    [client, cache]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    RoomProviderInner,\n    {\n      ...props,\n      stableEnterRoom\n    }\n  );\n}\nfunction RoomProviderInner(props) {\n  const client = useClient();\n  const { id: roomId, stableEnterRoom } = props;\n  if (true) {\n    if (!roomId) {\n      throw new Error(\n        \"RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required\"\n      );\n    }\n    if (typeof roomId !== \"string\") {\n      throw new Error(\"RoomProvider id property should be a string.\");\n    }\n    const majorReactVersion = parseInt(react__WEBPACK_IMPORTED_MODULE_0__.version) || 1;\n    const oldReactVersion = majorReactVersion < 18;\n    (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.errorIf)(\n      oldReactVersion && props.unstable_batchedUpdates === void 0,\n      missing_unstable_batchedUpdates(majorReactVersion, roomId)\n    );\n    (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.deprecateIf)(\n      !oldReactVersion && props.unstable_batchedUpdates !== void 0,\n      superfluous_unstable_batchedUpdates\n    );\n  }\n  const frozenProps = useInitial({\n    initialPresence: props.initialPresence,\n    initialStorage: props.initialStorage,\n    unstable_batchedUpdates: props.unstable_batchedUpdates,\n    autoConnect: props.autoConnect ?? typeof window !== \"undefined\"\n  });\n  const [{ room }, setRoomLeavePair] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\n    () => stableEnterRoom(roomId, {\n      ...frozenProps,\n      autoConnect: false\n      // Deliberately using false here on the first render, see below\n    })\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const { store } = getExtrasForClient2(client);\n    async function handleCommentEvent(message) {\n      if (message.type === _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.THREAD_DELETED) {\n        store.deleteThread(message.threadId);\n        return;\n      }\n      const info = await room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments.getThread({\n        threadId: message.threadId\n      });\n      if (!info) {\n        store.deleteThread(message.threadId);\n        return;\n      }\n      const { thread, inboxNotification } = info;\n      const existingThread = store.get().threads[message.threadId];\n      switch (message.type) {\n        case _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.COMMENT_EDITED:\n        case _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.THREAD_METADATA_UPDATED:\n        case _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.THREAD_UPDATED:\n        case _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.COMMENT_REACTION_ADDED:\n        case _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.COMMENT_REACTION_REMOVED:\n        case _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.COMMENT_DELETED:\n          if (!existingThread) break;\n          store.updateThreadAndNotification(thread, inboxNotification);\n          break;\n        case _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.ServerMsgCode.COMMENT_CREATED:\n          store.updateThreadAndNotification(thread, inboxNotification);\n          break;\n        default:\n          break;\n      }\n    }\n    return room.events.comments.subscribe(\n      (message) => void handleCommentEvent(message)\n    );\n  }, [client, room]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const { getThreadsUpdates } = getExtrasForClient2(client);\n    void getThreadsUpdates(room.id);\n  }, [client, room.id]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    function handleIsOnline() {\n      const { getThreadsUpdates } = getExtrasForClient2(client);\n      void getThreadsUpdates(room.id);\n    }\n    window.addEventListener(\"online\", handleIsOnline);\n    return () => {\n      window.removeEventListener(\"online\", handleIsOnline);\n    };\n  }, [client, room.id]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const pair = stableEnterRoom(roomId, frozenProps);\n    setRoomLeavePair(pair);\n    const { room: room2, leave } = pair;\n    if (frozenProps.autoConnect) {\n      room2.connect();\n    }\n    return () => {\n      leave();\n    };\n  }, [roomId, frozenProps, stableEnterRoom]);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, { value: room }, props.children);\n}\nfunction useRoom() {\n  const room = useRoomOrNull();\n  if (room === null) {\n    throw new Error(\"RoomProvider is missing from the React tree.\");\n  }\n  return room;\n}\nfunction useStatus() {\n  const room = useRoom();\n  const subscribe = room.events.status.subscribe;\n  const getSnapshot = room.getStatus;\n  const getServerSnapshot = room.getStatus;\n  return useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useStorageStatus(options) {\n  const smooth = useInitial(options?.smooth ?? false);\n  if (smooth) {\n    return useStorageStatusSmooth();\n  } else {\n    return useStorageStatusImmediate();\n  }\n}\nfunction useStorageStatusImmediate() {\n  const room = useRoom();\n  const subscribe = room.events.storageStatus.subscribe;\n  const getSnapshot = room.getStorageStatus;\n  const getServerSnapshot = room.getStorageStatus;\n  return useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useStorageStatusSmooth() {\n  const room = useRoom();\n  const [status, setStatus] = react__WEBPACK_IMPORTED_MODULE_0__.useState(room.getStorageStatus);\n  const oldStatus = useLatest(room.getStorageStatus());\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    let timeoutId;\n    const unsub = room.events.storageStatus.subscribe((newStatus) => {\n      if (oldStatus.current === \"synchronizing\" && newStatus === \"synchronized\") {\n        timeoutId = setTimeout(() => setStatus(newStatus), SMOOTH_DELAY);\n      } else {\n        clearTimeout(timeoutId);\n        setStatus(newStatus);\n      }\n    });\n    return () => {\n      clearTimeout(timeoutId);\n      unsub();\n    };\n  }, [room, oldStatus]);\n  return status;\n}\nfunction useBatch() {\n  return useRoom().batch;\n}\nfunction useBroadcastEvent() {\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (event, options = { shouldQueueEventIfNotReady: false }) => {\n      room.broadcastEvent(event, options);\n    },\n    [room]\n  );\n}\nfunction useOthersListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(\n    () => room.events.others.subscribe((event) => savedCallback.current(event)),\n    [room, savedCallback]\n  );\n}\nfunction useLostConnectionListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(\n    () => room.events.lostConnection.subscribe(\n      (event) => savedCallback.current(event)\n    ),\n    [room, savedCallback]\n  );\n}\nfunction useErrorListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(\n    () => room.events.error.subscribe((e) => savedCallback.current(e)),\n    [room, savedCallback]\n  );\n}\nfunction useEventListener(callback) {\n  const room = useRoom();\n  const savedCallback = useLatest(callback);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const listener = (eventData) => {\n      savedCallback.current(eventData);\n    };\n    return room.events.customEvent.subscribe(listener);\n  }, [room, savedCallback]);\n}\nfunction useHistory() {\n  return useRoom().history;\n}\nfunction useUndo() {\n  return useHistory().undo;\n}\nfunction useRedo() {\n  return useHistory().redo;\n}\nfunction useCanUndo() {\n  const room = useRoom();\n  const subscribe = room.events.history.subscribe;\n  const canUndo = room.history.canUndo;\n  return useSyncExternalStore2(subscribe, canUndo, canUndo);\n}\nfunction useCanRedo() {\n  const room = useRoom();\n  const subscribe = room.events.history.subscribe;\n  const canRedo = room.history.canRedo;\n  return useSyncExternalStore2(subscribe, canRedo, canRedo);\n}\nfunction useSelf(maybeSelector, isEqual) {\n  const room = useRoom();\n  const subscribe = room.events.self.subscribe;\n  const getSnapshot = room.getSelf;\n  const selector = maybeSelector ?? identity;\n  const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (me) => me !== null ? selector(me) : null,\n    [selector]\n  );\n  const getServerSnapshot = alwaysNull;\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    wrappedSelector,\n    isEqual\n  );\n}\nfunction useMyPresence() {\n  const room = useRoom();\n  const subscribe = room.events.myPresence.subscribe;\n  const getSnapshot = room.getPresence;\n  const presence = useSyncExternalStore2(subscribe, getSnapshot, getSnapshot);\n  const setPresence = room.updatePresence;\n  return [presence, setPresence];\n}\nfunction useUpdateMyPresence() {\n  return useRoom().updatePresence;\n}\nfunction useOthers(selector, isEqual) {\n  const room = useRoom();\n  const subscribe = room.events.others.subscribe;\n  const getSnapshot = room.getOthers;\n  const getServerSnapshot = alwaysEmptyList;\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    selector ?? identity,\n    isEqual\n  );\n}\nfunction useOthersMapped(itemSelector, itemIsEqual) {\n  const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (others) => others.map((other) => [other.connectionId, itemSelector(other)]),\n    [itemSelector]\n  );\n  const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (a, b) => {\n      const eq = itemIsEqual ?? Object.is;\n      return a.length === b.length && a.every((atuple, index) => {\n        const btuple = b[index];\n        return atuple[0] === btuple[0] && eq(atuple[1], btuple[1]);\n      });\n    },\n    [itemIsEqual]\n  );\n  return useOthers(wrappedSelector, wrappedIsEqual);\n}\nfunction useOthersConnectionIds() {\n  return useOthers(selectorFor_useOthersConnectionIds, _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow);\n}\nvar NOT_FOUND = Symbol();\nfunction useOther(connectionId, selector, isEqual) {\n  const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (others) => {\n      const other2 = others.find((other3) => other3.connectionId === connectionId);\n      return other2 !== void 0 ? selector(other2) : NOT_FOUND;\n    },\n    [connectionId, selector]\n  );\n  const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (prev, curr) => {\n      if (prev === NOT_FOUND || curr === NOT_FOUND) {\n        return prev === curr;\n      }\n      const eq = isEqual ?? Object.is;\n      return eq(prev, curr);\n    },\n    [isEqual]\n  );\n  const other = useOthers(wrappedSelector, wrappedIsEqual);\n  if (other === NOT_FOUND) {\n    throw new Error(\n      `No such other user with connection id ${connectionId} exists`\n    );\n  }\n  return other;\n}\nfunction useMutableStorageRoot() {\n  const room = useRoom();\n  const subscribe = room.events.storageDidLoad.subscribeOnce;\n  const getSnapshot = room.getStorageSnapshot;\n  const getServerSnapshot = alwaysNull;\n  return useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useStorageRoot() {\n  return [useMutableStorageRoot()];\n}\nfunction useStorage(selector, isEqual) {\n  const room = useRoom();\n  const rootOrNull = useMutableStorageRoot();\n  const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (rootOrNull2) => rootOrNull2 !== null ? selector(rootOrNull2) : null,\n    [selector]\n  );\n  const subscribe = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (onStoreChange) => rootOrNull !== null ? room.subscribe(rootOrNull, onStoreChange, { isDeep: true }) : noop2,\n    [room, rootOrNull]\n  );\n  const getSnapshot = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    if (rootOrNull === null) {\n      return null;\n    } else {\n      const root = rootOrNull;\n      const imm = root.toImmutable();\n      return imm;\n    }\n  }, [rootOrNull]);\n  const getServerSnapshot = alwaysNull;\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    wrappedSelector,\n    isEqual\n  );\n}\nfunction useMutation(callback, deps) {\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => {\n      return (...args) => (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        room.batch(\n          () => (\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            callback(\n              makeMutationContext(room),\n              ...args\n            )\n          )\n        )\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [room, ...deps]\n  );\n}\nfunction useThreads(options = {\n  query: { metadata: {} }\n}) {\n  const { scrollOnLoad = true } = options;\n  const client = useClient();\n  const room = useRoom();\n  const queryKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => generateQueryKey(room.id, options.query),\n    [room, options]\n  );\n  const { store, getThreadsAndInboxNotifications, incrementQuerySubscribers } = getExtrasForClient2(client);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    void getThreadsAndInboxNotifications(room, queryKey, options);\n    return incrementQuerySubscribers(queryKey);\n  }, [room, queryKey]);\n  const selector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (state2) => {\n      const query = state2.queries[queryKey];\n      if (query === void 0 || query.isLoading) {\n        return {\n          isLoading: true\n        };\n      }\n      return {\n        threads: selectedThreads(room.id, state2, options),\n        isLoading: false,\n        error: query.error\n      };\n    },\n    [room, queryKey]\n    // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  const state = (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selector\n  );\n  useScrollToCommentOnLoadEffect(scrollOnLoad, state);\n  return state;\n}\nfunction useCommentsErrorListener(callback) {\n  const client = useClient();\n  const savedCallback = useLatest(callback);\n  const { commentsErrorEventSource } = getExtrasForClient2(client);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    return commentsErrorEventSource.subscribe(savedCallback.current);\n  }, [savedCallback, commentsErrorEventSource]);\n}\nfunction useCreateThread() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (options) => {\n      const body = options.body;\n      const metadata = options.metadata ?? {};\n      const threadId = createThreadId();\n      const commentId = createCommentId();\n      const createdAt = /* @__PURE__ */ new Date();\n      const newComment = {\n        id: commentId,\n        threadId,\n        roomId: room.id,\n        createdAt,\n        type: \"comment\",\n        userId: getCurrentUserId(room),\n        body,\n        reactions: []\n      };\n      const newThread = {\n        id: threadId,\n        type: \"thread\",\n        createdAt,\n        updatedAt: createdAt,\n        roomId: room.id,\n        metadata,\n        comments: [newComment],\n        resolved: false\n      };\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"create-thread\",\n        thread: newThread,\n        id: optimisticUpdateId,\n        roomId: room.id\n      });\n      const commentsAPI = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments;\n      commentsAPI.createThread({ threadId, commentId, body, metadata }).then(\n        (thread) => {\n          store.set((state) => ({\n            ...state,\n            threads: {\n              ...state.threads,\n              [threadId]: thread\n            },\n            optimisticUpdates: state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            )\n          }));\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (err2) => new CreateThreadError(err2, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            body,\n            metadata\n          })\n        )\n      );\n      return newThread;\n    },\n    [client, room]\n  );\n}\nfunction useDeleteThread() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (threadId) => {\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      const thread = store.get().threads[threadId];\n      const userId = getCurrentUserId(room);\n      if (thread?.comments?.[0]?.userId !== userId) {\n        throw new Error(\"Only the thread creator can delete the thread\");\n      }\n      store.pushOptimisticUpdate({\n        type: \"delete-thread\",\n        id: optimisticUpdateId,\n        roomId: room.id,\n        threadId,\n        deletedAt: /* @__PURE__ */ new Date()\n      });\n      const commentsAPI = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments;\n      commentsAPI.deleteThread({ threadId }).then(\n        () => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            if (existingThread === void 0) {\n              return state;\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: {\n                  ...existingThread,\n                  updatedAt: /* @__PURE__ */ new Date(),\n                  deletedAt: /* @__PURE__ */ new Date()\n                }\n              },\n              optimisticUpdates: state.optimisticUpdates.filter(\n                (update) => update.id !== optimisticUpdateId\n              )\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (err2) => new DeleteThreadError(err2, { roomId: room.id, threadId })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useEditThreadMetadata() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (options) => {\n      if (!options.metadata) {\n        return;\n      }\n      const threadId = options.threadId;\n      const metadata = options.metadata;\n      const updatedAt = /* @__PURE__ */ new Date();\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"edit-thread-metadata\",\n        metadata,\n        id: optimisticUpdateId,\n        threadId,\n        updatedAt\n      });\n      const commentsAPI = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments;\n      commentsAPI.editThreadMetadata({ metadata, threadId }).then(\n        (metadata2) => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            if (existingThread.deletedAt !== void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            if (existingThread.updatedAt && existingThread.updatedAt > updatedAt) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: {\n                  ...existingThread,\n                  metadata: metadata2\n                }\n              },\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new EditThreadMetadataError(error, {\n            roomId: room.id,\n            threadId,\n            metadata\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useCreateComment() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    ({ threadId, body }) => {\n      const commentId = createCommentId();\n      const createdAt = /* @__PURE__ */ new Date();\n      const comment = {\n        id: commentId,\n        threadId,\n        roomId: room.id,\n        type: \"comment\",\n        createdAt,\n        userId: getCurrentUserId(room),\n        body,\n        reactions: []\n      };\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"create-comment\",\n        comment,\n        id: optimisticUpdateId\n      });\n      room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments.createComment({ threadId, commentId, body }).then(\n        (newComment) => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            const inboxNotification = Object.values(\n              state.inboxNotifications\n            ).find(\n              (notification) => notification.kind === \"thread\" && notification.threadId === threadId\n            );\n            const updatedInboxNotifications = inboxNotification !== void 0 ? {\n              ...state.inboxNotifications,\n              [inboxNotification.id]: {\n                ...inboxNotification,\n                notifiedAt: newComment.createdAt,\n                readAt: newComment.createdAt\n              }\n            } : state.inboxNotifications;\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.upsertComment)(existingThread, newComment)\n                // Upsert the new comment into the thread comments list (if applicable)\n              },\n              inboxNotifications: updatedInboxNotifications,\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (err2) => new CreateCommentError(err2, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            body\n          })\n        )\n      );\n      return comment;\n    },\n    [client, room]\n  );\n}\nfunction useEditComment() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    ({ threadId, commentId, body }) => {\n      const editedAt = /* @__PURE__ */ new Date();\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      const thread = store.get().threads[threadId];\n      if (thread === void 0) {\n        _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.console.warn(\n          `Internal unexpected behavior. Cannot edit comment in thread \"${threadId}\" because the thread does not exist in the cache.`\n        );\n        return;\n      }\n      const comment = thread.comments.find(\n        (comment2) => comment2.id === commentId\n      );\n      if (comment === void 0 || comment.deletedAt !== void 0) {\n        _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.console.warn(\n          `Internal unexpected behavior. Cannot edit comment \"${commentId}\" in thread \"${threadId}\" because the comment does not exist in the cache.`\n        );\n        return;\n      }\n      store.pushOptimisticUpdate({\n        type: \"edit-comment\",\n        comment: {\n          ...comment,\n          editedAt,\n          body\n        },\n        id: optimisticUpdateId\n      });\n      room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments.editComment({ threadId, commentId, body }).then(\n        (editedComment) => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.upsertComment)(existingThread, editedComment)\n                // Upsert the edited comment into the thread comments list (if applicable)\n              },\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new EditCommentError(error, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            body\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useDeleteComment() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    ({ threadId, commentId }) => {\n      const deletedAt = /* @__PURE__ */ new Date();\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"delete-comment\",\n        threadId,\n        commentId,\n        deletedAt,\n        id: optimisticUpdateId,\n        roomId: room.id\n      });\n      room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments.deleteComment({ threadId, commentId }).then(\n        () => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.deleteComment)(existingThread, commentId, deletedAt)\n              },\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new DeleteCommentError(error, {\n            roomId: room.id,\n            threadId,\n            commentId\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useAddReaction() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    ({ threadId, commentId, emoji }) => {\n      const createdAt = /* @__PURE__ */ new Date();\n      const userId = getCurrentUserId(room);\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"add-reaction\",\n        threadId,\n        commentId,\n        reaction: {\n          emoji,\n          userId,\n          createdAt\n        },\n        id: optimisticUpdateId\n      });\n      room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments.addReaction({ threadId, commentId, emoji }).then(\n        (addedReaction) => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.addReaction)(\n                  existingThread,\n                  commentId,\n                  addedReaction\n                )\n              },\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new AddReactionError(error, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            emoji\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useRemoveReaction() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    ({ threadId, commentId, emoji }) => {\n      const userId = getCurrentUserId(room);\n      const removedAt = /* @__PURE__ */ new Date();\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"remove-reaction\",\n        threadId,\n        commentId,\n        emoji,\n        userId,\n        removedAt,\n        id: optimisticUpdateId\n      });\n      room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments.removeReaction({ threadId, commentId, emoji }).then(\n        () => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.removeReaction)(\n                  existingThread,\n                  commentId,\n                  emoji,\n                  userId,\n                  removedAt\n                )\n              },\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new RemoveReactionError(error, {\n            roomId: room.id,\n            threadId,\n            commentId,\n            emoji\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useMarkThreadAsRead() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (threadId) => {\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      const inboxNotification = Object.values(\n        store.get().inboxNotifications\n      ).find(\n        (inboxNotification2) => inboxNotification2.kind === \"thread\" && inboxNotification2.threadId === threadId\n      );\n      if (!inboxNotification) return;\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const now = /* @__PURE__ */ new Date();\n      store.pushOptimisticUpdate({\n        type: \"mark-inbox-notification-as-read\",\n        id: optimisticUpdateId,\n        inboxNotificationId: inboxNotification.id,\n        readAt: now\n      });\n      room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].notifications.markInboxNotificationAsRead(inboxNotification.id).then(\n        () => {\n          store.set((state) => ({\n            ...state,\n            inboxNotifications: {\n              ...state.inboxNotifications,\n              [inboxNotification.id]: {\n                ...inboxNotification,\n                readAt: now\n              }\n            },\n            optimisticUpdates: state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            )\n          }));\n        },\n        (err) => {\n          onMutationFailure(\n            err,\n            optimisticUpdateId,\n            (error) => new MarkInboxNotificationAsReadError(error, {\n              inboxNotificationId: inboxNotification.id\n            })\n          );\n          return;\n        }\n      );\n    },\n    [client, room]\n  );\n}\nfunction useMarkThreadAsResolved() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (threadId) => {\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const updatedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"mark-thread-as-resolved\",\n        id: optimisticUpdateId,\n        threadId,\n        updatedAt\n      });\n      const commentsAPI = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments;\n      commentsAPI.markThreadAsResolved({ threadId }).then(\n        () => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            if (existingThread.deletedAt !== void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            if (existingThread.updatedAt && existingThread.updatedAt > updatedAt) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: {\n                  ...existingThread,\n                  resolved: true\n                }\n              },\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new MarkThreadAsResolvedError(error, {\n            roomId: room.id,\n            threadId\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useMarkThreadAsUnresolved() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (threadId) => {\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const updatedAt = /* @__PURE__ */ new Date();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        type: \"mark-thread-as-unresolved\",\n        id: optimisticUpdateId,\n        threadId,\n        updatedAt\n      });\n      const commentsAPI = room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].comments;\n      commentsAPI.markThreadAsUnresolved({ threadId }).then(\n        () => {\n          store.set((state) => {\n            const existingThread = state.threads[threadId];\n            const updatedOptimisticUpdates = state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            );\n            if (existingThread === void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            if (existingThread.deletedAt !== void 0) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            if (existingThread.updatedAt && existingThread.updatedAt > updatedAt) {\n              return {\n                ...state,\n                optimisticUpdates: updatedOptimisticUpdates\n              };\n            }\n            return {\n              ...state,\n              threads: {\n                ...state.threads,\n                [threadId]: {\n                  ...existingThread,\n                  resolved: false\n                }\n              },\n              optimisticUpdates: updatedOptimisticUpdates\n            };\n          });\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new MarkThreadAsUnresolvedError(error, {\n            roomId: room.id,\n            threadId\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction useThreadSubscription(threadId) {\n  const client = useClient();\n  const { store } = getExtrasForClient2(client);\n  const selector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (state) => {\n      const inboxNotification = selectedInboxNotifications(state).find(\n        (inboxNotification2) => inboxNotification2.kind === \"thread\" && inboxNotification2.threadId === threadId\n      );\n      const thread = state.threads[threadId];\n      if (inboxNotification === void 0 || thread === void 0) {\n        return {\n          status: \"not-subscribed\"\n        };\n      }\n      return {\n        status: \"subscribed\",\n        unreadSince: inboxNotification.readAt\n      };\n    },\n    [threadId]\n  );\n  return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selector\n  );\n}\nfunction useRoomNotificationSettings() {\n  const client = useClient();\n  const room = useRoom();\n  const { store } = getExtrasForClient2(client);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const { getInboxNotificationSettings } = getExtrasForClient2(client);\n    const queryKey = makeNotificationSettingsQueryKey(room.id);\n    void getInboxNotificationSettings(room, queryKey);\n  }, [client, room]);\n  const updateRoomNotificationSettings = useUpdateRoomNotificationSettings();\n  const selector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (state) => {\n      const query = state.queries[makeNotificationSettingsQueryKey(room.id)];\n      if (query === void 0 || query.isLoading) {\n        return { isLoading: true };\n      }\n      if (query.error !== void 0) {\n        return { isLoading: false, error: query.error };\n      }\n      return {\n        isLoading: false,\n        settings: selectNotificationSettings(room.id, state)\n      };\n    },\n    [room]\n  );\n  const settings = (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selector\n  );\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return [settings, updateRoomNotificationSettings];\n  }, [settings, updateRoomNotificationSettings]);\n}\nfunction useUpdateRoomNotificationSettings() {\n  const client = useClient();\n  const room = useRoom();\n  return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (settings) => {\n      const optimisticUpdateId = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)();\n      const { store, onMutationFailure } = getExtrasForClient2(client);\n      store.pushOptimisticUpdate({\n        id: optimisticUpdateId,\n        type: \"update-notification-settings\",\n        roomId: room.id,\n        settings\n      });\n      room[_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.kInternal].notifications.updateRoomNotificationSettings(settings).then(\n        (settings2) => {\n          store.set((state) => ({\n            ...state,\n            notificationSettings: {\n              [room.id]: settings2\n            },\n            optimisticUpdates: state.optimisticUpdates.filter(\n              (update) => update.id !== optimisticUpdateId\n            )\n          }));\n        },\n        (err) => onMutationFailure(\n          err,\n          optimisticUpdateId,\n          (error) => new UpdateNotificationSettingsError(error, {\n            roomId: room.id\n          })\n        )\n      );\n    },\n    [client, room]\n  );\n}\nfunction ensureNotServerSide() {\n  if (typeof window === \"undefined\") {\n    throw new Error(\n      \"You cannot use the Suspense version of this hook on the server side. Make sure to only call them on the client side.\\nFor tips, see https://liveblocks.io/docs/api-reference/liveblocks-react#suspense-avoid-ssr\"\n    );\n  }\n}\nfunction useSuspendUntilPresenceReady() {\n  ensureNotServerSide();\n  const room = useRoom();\n  use(room.waitUntilPresenceReady());\n}\nfunction useSelfSuspense(selector, isEqual) {\n  useSuspendUntilPresenceReady();\n  return useSelf(\n    selector,\n    isEqual\n  );\n}\nfunction useOthersSuspense(selector, isEqual) {\n  useSuspendUntilPresenceReady();\n  return useOthers(\n    selector,\n    isEqual\n  );\n}\nfunction useOthersConnectionIdsSuspense() {\n  useSuspendUntilPresenceReady();\n  return useOthersConnectionIds();\n}\nfunction useOthersMappedSuspense(itemSelector, itemIsEqual) {\n  useSuspendUntilPresenceReady();\n  return useOthersMapped(itemSelector, itemIsEqual);\n}\nfunction useOtherSuspense(connectionId, selector, isEqual) {\n  useSuspendUntilPresenceReady();\n  return useOther(connectionId, selector, isEqual);\n}\nfunction useSuspendUntilStorageReady() {\n  ensureNotServerSide();\n  const room = useRoom();\n  use(room.waitUntilStorageReady());\n}\nfunction useStorageSuspense(selector, isEqual) {\n  useSuspendUntilStorageReady();\n  return useStorage(\n    selector,\n    isEqual\n  );\n}\nfunction useStorageStatusSuspense(options) {\n  useSuspendUntilStorageReady();\n  return useStorageStatus(options);\n}\nfunction useThreadsSuspense(options = {\n  query: { metadata: {} }\n}) {\n  const { scrollOnLoad = true } = options;\n  const client = useClient();\n  const room = useRoom();\n  const queryKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => generateQueryKey(room.id, options.query),\n    [room, options]\n  );\n  const { store, getThreadsAndInboxNotifications } = getExtrasForClient2(client);\n  const query = store.get().queries[queryKey];\n  if (query === void 0 || query.isLoading) {\n    throw getThreadsAndInboxNotifications(room, queryKey, options);\n  }\n  if (query.error) {\n    throw query.error;\n  }\n  const selector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (state2) => {\n      return {\n        threads: selectedThreads(room.id, state2, options),\n        isLoading: false\n      };\n    },\n    [room, queryKey]\n    // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const { incrementQuerySubscribers } = getExtrasForClient2(client);\n    return incrementQuerySubscribers(queryKey);\n  }, [client, queryKey]);\n  const state = (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selector\n  );\n  useScrollToCommentOnLoadEffect(scrollOnLoad, state);\n  return state;\n}\nfunction useRoomNotificationSettingsSuspense() {\n  const updateRoomNotificationSettings = useUpdateRoomNotificationSettings();\n  const client = useClient();\n  const room = useRoom();\n  const queryKey = makeNotificationSettingsQueryKey(room.id);\n  const { store, getInboxNotificationSettings } = getExtrasForClient2(client);\n  const query = store.get().queries[queryKey];\n  if (query === void 0 || query.isLoading) {\n    throw getInboxNotificationSettings(room, queryKey);\n  }\n  if (query.error) {\n    throw query.error;\n  }\n  const selector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (state) => {\n      return {\n        isLoading: false,\n        settings: selectNotificationSettings(room.id, state)\n      };\n    },\n    [room]\n  );\n  const settings = (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(\n    store.subscribe,\n    store.get,\n    store.get,\n    selector\n  );\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    return [settings, updateRoomNotificationSettings];\n  }, [settings, updateRoomNotificationSettings]);\n}\nfunction useRoomOrNull() {\n  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n}\nfunction createRoomContext(client) {\n  return getOrCreateRoomContextBundle(client);\n}\nfunction generateQueryKey(roomId, options) {\n  return `${roomId}-${(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options ?? {})}`;\n}\nvar _RoomProvider = RoomProvider;\nvar _useBroadcastEvent = useBroadcastEvent;\nvar _useOthersListener = useOthersListener;\nvar _useRoom = useRoom;\nvar _useAddReaction = useAddReaction;\nvar _useMutation = useMutation;\nvar _useCreateThread = useCreateThread;\nvar _useDeleteThread = useDeleteThread;\nvar _useEditThreadMetadata = useEditThreadMetadata;\nvar _useEventListener = useEventListener;\nvar _useMyPresence = useMyPresence;\nvar _useOthersMapped = useOthersMapped;\nvar _useOthersMappedSuspense = useOthersMappedSuspense;\nvar _useThreads = useThreads;\nvar _useThreadsSuspense = useThreadsSuspense;\nvar _useOther = useOther;\nfunction _useOthers(...args) {\n  return useOthers(...args);\n}\nvar _useOtherSuspense = useOtherSuspense;\nfunction _useOthersSuspense(...args) {\n  return useOthersSuspense(...args);\n}\nvar _useStorage = useStorage;\nvar _useStorageSuspense = useStorageSuspense;\nfunction _useSelf(...args) {\n  return useSelf(...args);\n}\nfunction _useSelfSuspense(...args) {\n  return useSelfSuspense(...args);\n}\nvar _useStorageRoot = useStorageRoot;\nvar _useUpdateMyPresence = useUpdateMyPresence;\n\n\n//# sourceMappingURL=chunk-N2EE2UOX.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react/dist/chunk-N2EE2UOX.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react/node_modules/nanoid/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@liveblocks/react/node_modules/nanoid/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   customRandom: () => (/* binding */ customRandom),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   urlAlphabet: () => (/* reexport safe */ _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url-alphabet/index.js */ \"(ssr)/./node_modules/@liveblocks/react/node_modules/nanoid/url-alphabet/index.js\");\n\n\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nlet random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3Qvbm9kZV9tb2R1bGVzL25hbm9pZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTJCO0FBQzBCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGtEQUFxQjtBQUN6QjtBQUNBLElBQUk7QUFDSixJQUFJLGtEQUFxQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxnQkFBZ0I7QUFDbEQsVUFBVSwrREFBVztBQUNyQjtBQUNBO0FBQ0E7QUFDb0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3Qvbm9kZV9tb2R1bGVzL25hbm9pZC9pbmRleC5qcz82OTc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJ1xuaW1wb3J0IHsgdXJsQWxwaGFiZXQgfSBmcm9tICcuL3VybC1hbHBoYWJldC9pbmRleC5qcydcbmNvbnN0IFBPT0xfU0laRV9NVUxUSVBMSUVSID0gMTI4XG5sZXQgcG9vbCwgcG9vbE9mZnNldFxubGV0IGZpbGxQb29sID0gYnl0ZXMgPT4ge1xuICBpZiAoIXBvb2wgfHwgcG9vbC5sZW5ndGggPCBieXRlcykge1xuICAgIHBvb2wgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnl0ZXMgKiBQT09MX1NJWkVfTVVMVElQTElFUilcbiAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMocG9vbClcbiAgICBwb29sT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKHBvb2xPZmZzZXQgKyBieXRlcyA+IHBvb2wubGVuZ3RoKSB7XG4gICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKHBvb2wpXG4gICAgcG9vbE9mZnNldCA9IDBcbiAgfVxuICBwb29sT2Zmc2V0ICs9IGJ5dGVzXG59XG5sZXQgcmFuZG9tID0gYnl0ZXMgPT4ge1xuICBmaWxsUG9vbCgoYnl0ZXMgLT0gMCkpXG4gIHJldHVybiBwb29sLnN1YmFycmF5KHBvb2xPZmZzZXQgLSBieXRlcywgcG9vbE9mZnNldClcbn1cbmxldCBjdXN0b21SYW5kb20gPSAoYWxwaGFiZXQsIGRlZmF1bHRTaXplLCBnZXRSYW5kb20pID0+IHtcbiAgbGV0IG1hc2sgPSAoMiA8PCAoMzEgLSBNYXRoLmNsejMyKChhbHBoYWJldC5sZW5ndGggLSAxKSB8IDEpKSkgLSAxXG4gIGxldCBzdGVwID0gTWF0aC5jZWlsKCgxLjYgKiBtYXNrICogZGVmYXVsdFNpemUpIC8gYWxwaGFiZXQubGVuZ3RoKVxuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBieXRlcyA9IGdldFJhbmRvbShzdGVwKVxuICAgICAgbGV0IGkgPSBzdGVwXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlkICs9IGFscGhhYmV0W2J5dGVzW2ldICYgbWFza10gfHwgJydcbiAgICAgICAgaWYgKGlkLmxlbmd0aCA9PT0gc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5sZXQgY3VzdG9tQWxwaGFiZXQgPSAoYWxwaGFiZXQsIHNpemUgPSAyMSkgPT5cbiAgY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG5sZXQgbmFub2lkID0gKHNpemUgPSAyMSkgPT4ge1xuICBmaWxsUG9vbCgoc2l6ZSAtPSAwKSlcbiAgbGV0IGlkID0gJydcbiAgZm9yIChsZXQgaSA9IHBvb2xPZmZzZXQgLSBzaXplOyBpIDwgcG9vbE9mZnNldDsgaSsrKSB7XG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbcG9vbFtpXSAmIDYzXVxuICB9XG4gIHJldHVybiBpZFxufVxuZXhwb3J0IHsgbmFub2lkLCBjdXN0b21BbHBoYWJldCwgY3VzdG9tUmFuZG9tLCB1cmxBbHBoYWJldCwgcmFuZG9tIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react/node_modules/nanoid/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react/node_modules/nanoid/url-alphabet/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@liveblocks/react/node_modules/nanoid/url-alphabet/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   urlAlphabet: () => (/* binding */ urlAlphabet)\n/* harmony export */ });\nlet urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3Qvbm9kZV9tb2R1bGVzL25hbm9pZC91cmwtYWxwaGFiZXQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3MvcmVhY3Qvbm9kZV9tb2R1bGVzL25hbm9pZC91cmwtYWxwaGFiZXQvaW5kZXguanM/NDRmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdXJsQWxwaGFiZXQgPVxuICAndXNlYW5kb20tMjZUMTk4MzQwUFg3NXB4SkFDS1ZFUllNSU5EQlVTSFdPTEZfR1FaYmZnaGprbHF2d3l6cmljdCdcbmV4cG9ydCB7IHVybEFscGhhYmV0IH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react/node_modules/nanoid/url-alphabet/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@liveblocks/core/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/core/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientMsgCode: () => (/* binding */ ClientMsgCode),\n/* harmony export */   CommentsApiError: () => (/* binding */ CommentsApiError),\n/* harmony export */   CrdtType: () => (/* binding */ CrdtType),\n/* harmony export */   LiveList: () => (/* binding */ LiveList),\n/* harmony export */   LiveMap: () => (/* binding */ LiveMap),\n/* harmony export */   LiveObject: () => (/* binding */ LiveObject),\n/* harmony export */   NotificationsApiError: () => (/* binding */ NotificationsApiError),\n/* harmony export */   OpCode: () => (/* binding */ OpCode),\n/* harmony export */   ServerMsgCode: () => (/* binding */ ServerMsgCode),\n/* harmony export */   WebsocketCloseCodes: () => (/* binding */ WebsocketCloseCodes),\n/* harmony export */   ackOp: () => (/* binding */ ackOp),\n/* harmony export */   addReaction: () => (/* binding */ addReaction),\n/* harmony export */   applyOptimisticUpdates: () => (/* binding */ applyOptimisticUpdates),\n/* harmony export */   asPos: () => (/* binding */ asPos),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   b64decode: () => (/* binding */ b64decode),\n/* harmony export */   cloneLson: () => (/* binding */ cloneLson),\n/* harmony export */   console: () => (/* binding */ fancy_console_exports),\n/* harmony export */   convertToCommentData: () => (/* binding */ convertToCommentData),\n/* harmony export */   convertToCommentUserReaction: () => (/* binding */ convertToCommentUserReaction),\n/* harmony export */   convertToInboxNotificationData: () => (/* binding */ convertToInboxNotificationData),\n/* harmony export */   convertToThreadData: () => (/* binding */ convertToThreadData),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   deleteComment: () => (/* binding */ deleteComment),\n/* harmony export */   deprecate: () => (/* binding */ deprecate),\n/* harmony export */   deprecateIf: () => (/* binding */ deprecateIf),\n/* harmony export */   detectDupes: () => (/* binding */ detectDupes),\n/* harmony export */   errorIf: () => (/* binding */ errorIf),\n/* harmony export */   freeze: () => (/* binding */ freeze),\n/* harmony export */   getMentionedIdsFromCommentBody: () => (/* binding */ getMentionedIdsFromCommentBody),\n/* harmony export */   isChildCrdt: () => (/* binding */ isChildCrdt),\n/* harmony export */   isJsonArray: () => (/* binding */ isJsonArray),\n/* harmony export */   isJsonObject: () => (/* binding */ isJsonObject),\n/* harmony export */   isJsonScalar: () => (/* binding */ isJsonScalar),\n/* harmony export */   isLiveNode: () => (/* binding */ isLiveNode),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRootCrdt: () => (/* binding */ isRootCrdt),\n/* harmony export */   kInternal: () => (/* binding */ kInternal),\n/* harmony export */   legacy_patchImmutableObject: () => (/* binding */ legacy_patchImmutableObject),\n/* harmony export */   lsonToJson: () => (/* binding */ lsonToJson),\n/* harmony export */   makeEventSource: () => (/* binding */ makeEventSource),\n/* harmony export */   makePoller: () => (/* binding */ makePoller),\n/* harmony export */   makePosition: () => (/* binding */ makePosition),\n/* harmony export */   memoizeOnSuccess: () => (/* binding */ memoizeOnSuccess),\n/* harmony export */   nn: () => (/* binding */ nn),\n/* harmony export */   objectToQuery: () => (/* binding */ objectToQuery),\n/* harmony export */   patchLiveObjectKey: () => (/* binding */ patchLiveObjectKey),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   removeReaction: () => (/* binding */ removeReaction),\n/* harmony export */   shallow: () => (/* binding */ shallow),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   stringifyCommentBody: () => (/* binding */ stringifyCommentBody),\n/* harmony export */   throwUsageError: () => (/* binding */ throwUsageError),\n/* harmony export */   toPlainLson: () => (/* binding */ toPlainLson),\n/* harmony export */   tryParseJson: () => (/* binding */ tryParseJson),\n/* harmony export */   upsertComment: () => (/* binding */ upsertComment),\n/* harmony export */   wait: () => (/* binding */ wait),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/core\";\nvar PKG_VERSION = \"2.3.0\";\nvar PKG_FORMAT = \"esm\";\n\n// src/dupe-detection.ts\nvar g = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {};\nvar crossLinkedDocs = \"https://liveblocks.io/docs/errors/cross-linked\";\nvar dupesDocs = \"https://liveblocks.io/docs/errors/dupes\";\nvar SPACE = \" \";\nfunction error(msg) {\n  if (false) {} else {\n    throw new Error(msg);\n  }\n}\nfunction detectDupes(pkgName, pkgVersion, pkgFormat) {\n  const pkgId = Symbol.for(pkgName);\n  const pkgBuildInfo = pkgFormat ? `${pkgVersion || \"dev\"} (${pkgFormat})` : pkgVersion || \"dev\";\n  if (!g[pkgId]) {\n    g[pkgId] = pkgBuildInfo;\n  } else if (g[pkgId] === pkgBuildInfo) {\n  } else {\n    const msg = [\n      `Multiple copies of Liveblocks are being loaded in your project. This will cause issues! See ${dupesDocs + SPACE}`,\n      \"\",\n      \"Conflicts:\",\n      `- ${pkgName} ${g[pkgId]} (already loaded)`,\n      `- ${pkgName} ${pkgBuildInfo} (trying to load this now)`\n    ].join(\"\\n\");\n    error(msg);\n  }\n  if (pkgVersion && PKG_VERSION && pkgVersion !== PKG_VERSION) {\n    error(\n      [\n        `Cross-linked versions of Liveblocks found, which will cause issues! See ${crossLinkedDocs + SPACE}`,\n        \"\",\n        \"Conflicts:\",\n        `- ${PKG_NAME} is at ${PKG_VERSION}`,\n        `- ${pkgName} is at ${pkgVersion}`,\n        \"\",\n        \"Always upgrade all Liveblocks packages to the same version number.\"\n      ].join(\"\\n\")\n    );\n  }\n}\n\n// src/lib/assert.ts\nfunction assertNever(_value, errmsg) {\n  throw new Error(errmsg);\n}\nfunction assert(condition, errmsg) {\n  if (true) {\n    if (!condition) {\n      const err = new Error(errmsg);\n      err.name = \"Assertion failure\";\n      throw err;\n    }\n  }\n}\nfunction nn(value, errmsg = \"Expected value to be non-nullable\") {\n  assert(value !== null && value !== void 0, errmsg);\n  return value;\n}\n\n// src/lib/controlledPromise.ts\nfunction controlledPromise() {\n  let resolve;\n  let reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return [promise, resolve, reject];\n}\nfunction Promise_withResolvers() {\n  const [promise, resolve, reject] = controlledPromise();\n  return { promise, resolve, reject };\n}\n\n// src/lib/EventSource.ts\nfunction makeEventSource() {\n  const _onetimeObservers = /* @__PURE__ */ new Set();\n  const _observers = /* @__PURE__ */ new Set();\n  let _buffer = null;\n  function pause() {\n    _buffer = [];\n  }\n  function unpause() {\n    if (_buffer === null) {\n      return;\n    }\n    for (const event of _buffer) {\n      notify(event);\n    }\n    _buffer = null;\n  }\n  function subscribe(callback) {\n    _observers.add(callback);\n    return () => _observers.delete(callback);\n  }\n  function subscribeOnce(callback) {\n    _onetimeObservers.add(callback);\n    return () => _onetimeObservers.delete(callback);\n  }\n  async function waitUntil(predicate) {\n    let unsub;\n    return new Promise((res) => {\n      unsub = subscribe((event) => {\n        if (predicate === void 0 || predicate(event)) {\n          res(event);\n        }\n      });\n    }).finally(() => unsub?.());\n  }\n  function notifyOrBuffer(event) {\n    if (_buffer !== null) {\n      _buffer.push(event);\n    } else {\n      notify(event);\n    }\n  }\n  function notify(event) {\n    _onetimeObservers.forEach((callback) => callback(event));\n    _onetimeObservers.clear();\n    _observers.forEach((callback) => callback(event));\n  }\n  function clear() {\n    _onetimeObservers.clear();\n    _observers.clear();\n  }\n  function count() {\n    return _onetimeObservers.size + _observers.size;\n  }\n  return {\n    // Private/internal control over event emission\n    notify: notifyOrBuffer,\n    subscribe,\n    subscribeOnce,\n    clear,\n    count,\n    waitUntil,\n    pause,\n    unpause,\n    // Publicly exposable subscription API\n    observable: {\n      subscribe,\n      subscribeOnce,\n      waitUntil\n    }\n  };\n}\n\n// src/lib/fancy-console.ts\nvar fancy_console_exports = {};\n__export(fancy_console_exports, {\n  error: () => error2,\n  errorWithTitle: () => errorWithTitle,\n  warn: () => warn,\n  warnWithTitle: () => warnWithTitle\n});\nvar badge = \"background:#0e0d12;border-radius:9999px;color:#fff;padding:3px 7px;font-family:sans-serif;font-weight:600;\";\nvar bold = \"font-weight:600\";\nfunction wrap(method) {\n  return typeof window === \"undefined\" || \"development\" === \"test\" ? console[method] : (\n    /* istanbul ignore next */\n    (message, ...args) => console[method](\"%cLiveblocks\", badge, message, ...args)\n  );\n}\nvar warn = wrap(\"warn\");\nvar error2 = wrap(\"error\");\nfunction wrapWithTitle(method) {\n  return typeof window === \"undefined\" || \"development\" === \"test\" ? console[method] : (\n    /* istanbul ignore next */\n    (title, message, ...args) => console[method](\n      `%cLiveblocks%c ${title}`,\n      badge,\n      bold,\n      message,\n      ...args\n    )\n  );\n}\nvar warnWithTitle = wrapWithTitle(\"warn\");\nvar errorWithTitle = wrapWithTitle(\"error\");\n\n// src/lib/fsm.ts\nfunction distance(state1, state2) {\n  if (state1 === state2) {\n    return [0, 0];\n  }\n  const chunks1 = state1.split(\".\");\n  const chunks2 = state2.split(\".\");\n  const minLen = Math.min(chunks1.length, chunks2.length);\n  let shared = 0;\n  for (; shared < minLen; shared++) {\n    if (chunks1[shared] !== chunks2[shared]) {\n      break;\n    }\n  }\n  const up = chunks1.length - shared;\n  const down = chunks2.length - shared;\n  return [up, down];\n}\nfunction patterns(targetState, levels) {\n  const parts = targetState.split(\".\");\n  if (levels < 1 || levels > parts.length + 1) {\n    throw new Error(\"Invalid number of levels\");\n  }\n  const result = [];\n  if (levels > parts.length) {\n    result.push(\"*\");\n  }\n  for (let i = parts.length - levels + 1; i < parts.length; i++) {\n    const slice = parts.slice(0, i);\n    if (slice.length > 0) {\n      result.push(slice.join(\".\") + \".*\");\n    }\n  }\n  result.push(targetState);\n  return result;\n}\nvar SafeContext = class {\n  constructor(initialContext) {\n    this.curr = initialContext;\n  }\n  get current() {\n    return this.curr;\n  }\n  /**\n   * Call a callback function that allows patching of the context, by\n   * calling `context.patch()`. Patching is only allowed for the duration\n   * of this window.\n   */\n  allowPatching(callback) {\n    const self = this;\n    let allowed = true;\n    const patchableContext = {\n      ...this.curr,\n      patch(patch) {\n        if (allowed) {\n          self.curr = Object.assign({}, self.curr, patch);\n          for (const pair of Object.entries(patch)) {\n            const [key, value] = pair;\n            if (key !== \"patch\") {\n              this[key] = value;\n            }\n          }\n        } else {\n          throw new Error(\"Can no longer patch stale context\");\n        }\n      }\n    };\n    callback(patchableContext);\n    allowed = false;\n    return;\n  }\n};\nvar nextId = 1;\nvar FSM = class {\n  /**\n   * Returns the initial state, which is defined by the first call made to\n   * .addState().\n   */\n  get initialState() {\n    const result = this.states.values()[Symbol.iterator]().next();\n    if (result.done) {\n      throw new Error(\"No states defined yet\");\n    } else {\n      return result.value;\n    }\n  }\n  get currentState() {\n    if (this.currentStateOrNull === null) {\n      if (this.runningState === 0 /* NOT_STARTED_YET */) {\n        throw new Error(\"Not started yet\");\n      } else {\n        throw new Error(\"Already stopped\");\n      }\n    }\n    return this.currentStateOrNull;\n  }\n  /**\n   * Starts the machine by entering the initial state.\n   */\n  start() {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"State machine has already started\");\n    }\n    this.runningState = 1 /* STARTED */;\n    this.currentStateOrNull = this.initialState;\n    this.enter(null);\n    return this;\n  }\n  /**\n   * Stops the state machine. Stopping the state machine will call exit\n   * handlers for the current state, but not enter a new state.\n   */\n  stop() {\n    if (this.runningState !== 1 /* STARTED */) {\n      throw new Error(\"Cannot stop a state machine that hasn't started yet\");\n    }\n    this.exit(null);\n    this.runningState = 2 /* STOPPED */;\n    this.currentStateOrNull = null;\n  }\n  constructor(initialContext) {\n    this.id = nextId++;\n    this.runningState = 0 /* NOT_STARTED_YET */;\n    this.currentStateOrNull = null;\n    this.states = /* @__PURE__ */ new Set();\n    this.enterFns = /* @__PURE__ */ new Map();\n    this.cleanupStack = [];\n    this.knownEventTypes = /* @__PURE__ */ new Set();\n    this.allowedTransitions = /* @__PURE__ */ new Map();\n    this.currentContext = new SafeContext(initialContext);\n    this.eventHub = {\n      didReceiveEvent: makeEventSource(),\n      willTransition: makeEventSource(),\n      didIgnoreEvent: makeEventSource(),\n      willExitState: makeEventSource(),\n      didEnterState: makeEventSource()\n    };\n    this.events = {\n      didReceiveEvent: this.eventHub.didReceiveEvent.observable,\n      willTransition: this.eventHub.willTransition.observable,\n      didIgnoreEvent: this.eventHub.didIgnoreEvent.observable,\n      willExitState: this.eventHub.willExitState.observable,\n      didEnterState: this.eventHub.didEnterState.observable\n    };\n  }\n  get context() {\n    return this.currentContext.current;\n  }\n  /**\n   * Define an explicit finite state in the state machine.\n   */\n  addState(state) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    }\n    this.states.add(state);\n    return this;\n  }\n  onEnter(nameOrPattern, enterFn) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    } else if (this.enterFns.has(nameOrPattern)) {\n      throw new Error(\n        // TODO We _currently_ don't support multiple .onEnters() for the same\n        // state, but this is not a fundamental limitation. Just not\n        // implemented yet. If we wanted to, we could make this an array.\n        `enter/exit function for ${nameOrPattern} already exists`\n      );\n    }\n    this.enterFns.set(nameOrPattern, enterFn);\n    return this;\n  }\n  onEnterAsync(nameOrPattern, promiseFn, onOK, onError) {\n    return this.onEnter(nameOrPattern, () => {\n      const abortController = new AbortController();\n      const signal = abortController.signal;\n      let done = false;\n      void promiseFn(this.currentContext.current, signal).then(\n        // On OK\n        (data) => {\n          if (!signal.aborted) {\n            done = true;\n            this.transition({ type: \"ASYNC_OK\", data }, onOK);\n          }\n        },\n        // On Error\n        (reason) => {\n          if (!signal.aborted) {\n            done = true;\n            this.transition({ type: \"ASYNC_ERROR\", reason }, onError);\n          }\n        }\n      );\n      return () => {\n        if (!done) {\n          abortController.abort();\n        }\n      };\n    });\n  }\n  getStatesMatching(nameOrPattern) {\n    const matches = [];\n    if (nameOrPattern === \"*\") {\n      for (const state of this.states) {\n        matches.push(state);\n      }\n    } else if (nameOrPattern.endsWith(\".*\")) {\n      const prefix = nameOrPattern.slice(0, -1);\n      for (const state of this.states) {\n        if (state.startsWith(prefix)) {\n          matches.push(state);\n        }\n      }\n    } else {\n      const name = nameOrPattern;\n      if (this.states.has(name)) {\n        matches.push(name);\n      }\n    }\n    if (matches.length === 0) {\n      throw new Error(`No states match ${JSON.stringify(nameOrPattern)}`);\n    }\n    return matches;\n  }\n  /**\n   * Define all allowed outgoing transitions for a state.\n   *\n   * The targets for each event can be defined as a function which returns the\n   * next state to transition to. These functions can look at the `event` or\n   * `context` params to conditionally decide which next state to transition\n   * to.\n   *\n   * If you set it to `null`, then the transition will be explicitly forbidden\n   * and throw an error. If you don't define a target for a transition, then\n   * such events will get ignored.\n   */\n  addTransitions(nameOrPattern, mapping) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    }\n    for (const srcState of this.getStatesMatching(nameOrPattern)) {\n      let map = this.allowedTransitions.get(srcState);\n      if (map === void 0) {\n        map = /* @__PURE__ */ new Map();\n        this.allowedTransitions.set(srcState, map);\n      }\n      for (const [type, target_] of Object.entries(mapping)) {\n        if (map.has(type)) {\n          throw new Error(\n            `Trying to set transition \"${type}\" on \"${srcState}\" (via \"${nameOrPattern}\"), but a transition already exists there.`\n          );\n        }\n        const target = target_;\n        this.knownEventTypes.add(type);\n        if (target !== void 0) {\n          const targetFn = typeof target === \"function\" ? target : () => target;\n          map.set(type, targetFn);\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * Like `.addTransition()`, but takes an (anonymous) transition whenever the\n   * timer fires.\n   *\n   * @param stateOrPattern The state name, or state group pattern name.\n   * @param after          Number of milliseconds after which to take the\n   *                       transition. If in the mean time, another transition\n   *                       is taken, the timer will get cancelled.\n   * @param target     The target state to go to.\n   */\n  addTimedTransition(stateOrPattern, after2, target) {\n    return this.onEnter(stateOrPattern, () => {\n      const ms = typeof after2 === \"function\" ? after2(this.currentContext.current) : after2;\n      const timeoutID = setTimeout(() => {\n        this.transition({ type: \"TIMER\" }, target);\n      }, ms);\n      return () => {\n        clearTimeout(timeoutID);\n      };\n    });\n  }\n  getTargetFn(eventName) {\n    return this.allowedTransitions.get(this.currentState)?.get(eventName);\n  }\n  /**\n   * Exits the current state, and executes any necessary cleanup functions.\n   * Call this before changing the current state to the next state.\n   *\n   * @param levels Defines how many \"levels\" of nesting will be\n   * exited. For example, if you transition from `foo.bar.qux` to\n   * `foo.bar.baz`, then the level is 1. But if you transition from\n   * `foo.bar.qux` to `bla.bla`, then the level is 3.\n   * If `null`, it will exit all levels.\n   */\n  exit(levels) {\n    this.eventHub.willExitState.notify(this.currentState);\n    this.currentContext.allowPatching((patchableContext) => {\n      levels = levels ?? this.cleanupStack.length;\n      for (let i = 0; i < levels; i++) {\n        this.cleanupStack.pop()?.(patchableContext);\n      }\n    });\n  }\n  /**\n   * Enters the current state, and executes any necessary onEnter handlers.\n   * Call this directly _after_ setting the current state to the next state.\n   */\n  enter(levels) {\n    const enterPatterns = patterns(\n      this.currentState,\n      levels ?? this.currentState.split(\".\").length + 1\n    );\n    this.currentContext.allowPatching((patchableContext) => {\n      for (const pattern of enterPatterns) {\n        const enterFn = this.enterFns.get(pattern);\n        const cleanupFn = enterFn?.(patchableContext);\n        if (typeof cleanupFn === \"function\") {\n          this.cleanupStack.push(cleanupFn);\n        } else {\n          this.cleanupStack.push(null);\n        }\n      }\n    });\n    this.eventHub.didEnterState.notify(this.currentState);\n  }\n  /**\n   * Sends an event to the machine, which may cause an internal state\n   * transition to happen. When that happens, will trigger side effects.\n   */\n  send(event) {\n    if (!this.knownEventTypes.has(event.type)) {\n      throw new Error(`Invalid event ${JSON.stringify(event.type)}`);\n    }\n    if (this.runningState === 2 /* STOPPED */) {\n      return;\n    }\n    const targetFn = this.getTargetFn(event.type);\n    if (targetFn !== void 0) {\n      return this.transition(event, targetFn);\n    } else {\n      this.eventHub.didIgnoreEvent.notify(event);\n    }\n  }\n  transition(event, target) {\n    this.eventHub.didReceiveEvent.notify(event);\n    const oldState = this.currentState;\n    const targetFn = typeof target === \"function\" ? target : () => target;\n    const nextTarget = targetFn(event, this.currentContext.current);\n    let nextState;\n    let effects = void 0;\n    if (nextTarget === null) {\n      this.eventHub.didIgnoreEvent.notify(event);\n      return;\n    }\n    if (typeof nextTarget === \"string\") {\n      nextState = nextTarget;\n    } else {\n      nextState = nextTarget.target;\n      effects = Array.isArray(nextTarget.effect) ? nextTarget.effect : [nextTarget.effect];\n    }\n    if (!this.states.has(nextState)) {\n      throw new Error(`Invalid next state name: ${JSON.stringify(nextState)}`);\n    }\n    this.eventHub.willTransition.notify({ from: oldState, to: nextState });\n    const [up, down] = distance(this.currentState, nextState);\n    if (up > 0) {\n      this.exit(up);\n    }\n    this.currentStateOrNull = nextState;\n    if (effects !== void 0) {\n      const effectsToRun = effects;\n      this.currentContext.allowPatching((patchableContext) => {\n        for (const effect of effectsToRun) {\n          if (typeof effect === \"function\") {\n            effect(patchableContext, event);\n          } else {\n            patchableContext.patch(effect);\n          }\n        }\n      });\n    }\n    if (down > 0) {\n      this.enter(down);\n    }\n  }\n};\n\n// src/lib/utils.ts\nfunction raise(msg) {\n  throw new Error(msg);\n}\nfunction isPlainObject(blob) {\n  return blob !== null && typeof blob === \"object\" && Object.prototype.toString.call(blob) === \"[object Object]\";\n}\nfunction entries(obj) {\n  return Object.entries(obj);\n}\nfunction tryParseJson(rawMessage) {\n  try {\n    return JSON.parse(rawMessage);\n  } catch (e) {\n    return void 0;\n  }\n}\nfunction deepClone(value) {\n  return JSON.parse(JSON.stringify(value));\n}\nfunction b64decode(b64value) {\n  try {\n    const formattedValue = b64value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const decodedValue = decodeURIComponent(\n      atob(formattedValue).split(\"\").map(function(c) {\n        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(\"\")\n    );\n    return decodedValue;\n  } catch (err) {\n    return atob(b64value);\n  }\n}\nfunction compact(items) {\n  return items.filter(\n    (item) => item !== null && item !== void 0\n  );\n}\nfunction compactObject(obj) {\n  const newObj = { ...obj };\n  Object.keys(obj).forEach((k) => {\n    const key = k;\n    if (newObj[key] === void 0) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n}\nfunction wait(millis) {\n  return new Promise((res) => setTimeout(res, millis));\n}\nasync function withTimeout(promise, millis, errmsg) {\n  let timerID;\n  const timer$ = new Promise((_, reject) => {\n    timerID = setTimeout(() => {\n      reject(new Error(errmsg));\n    }, millis);\n  });\n  return Promise.race([promise, timer$]).finally(() => clearTimeout(timerID));\n}\nfunction memoizeOnSuccess(factoryFn) {\n  let cached = null;\n  return () => {\n    if (cached === null) {\n      cached = factoryFn().catch((err) => {\n        setTimeout(() => {\n          cached = null;\n        }, 5e3);\n        throw err;\n      });\n    }\n    return cached;\n  };\n}\n\n// src/protocol/ServerMsg.ts\nvar ServerMsgCode = /* @__PURE__ */ ((ServerMsgCode2) => {\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n  ServerMsgCode2[ServerMsgCode2[\"USER_JOINED\"] = 101] = \"USER_JOINED\";\n  ServerMsgCode2[ServerMsgCode2[\"USER_LEFT\"] = 102] = \"USER_LEFT\";\n  ServerMsgCode2[ServerMsgCode2[\"BROADCASTED_EVENT\"] = 103] = \"BROADCASTED_EVENT\";\n  ServerMsgCode2[ServerMsgCode2[\"ROOM_STATE\"] = 104] = \"ROOM_STATE\";\n  ServerMsgCode2[ServerMsgCode2[\"INITIAL_STORAGE_STATE\"] = 200] = \"INITIAL_STORAGE_STATE\";\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n  ServerMsgCode2[ServerMsgCode2[\"REJECT_STORAGE_OP\"] = 299] = \"REJECT_STORAGE_OP\";\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_YDOC\"] = 300] = \"UPDATE_YDOC\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_CREATED\"] = 400] = \"THREAD_CREATED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_DELETED\"] = 407] = \"THREAD_DELETED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_METADATA_UPDATED\"] = 401] = \"THREAD_METADATA_UPDATED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_UPDATED\"] = 408] = \"THREAD_UPDATED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_CREATED\"] = 402] = \"COMMENT_CREATED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_EDITED\"] = 403] = \"COMMENT_EDITED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_DELETED\"] = 404] = \"COMMENT_DELETED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_ADDED\"] = 405] = \"COMMENT_REACTION_ADDED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_REMOVED\"] = 406] = \"COMMENT_REACTION_REMOVED\";\n  return ServerMsgCode2;\n})(ServerMsgCode || {});\n\n// src/types/IWebSocket.ts\nvar WebsocketCloseCodes = /* @__PURE__ */ ((WebsocketCloseCodes2) => {\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_NORMAL\"] = 1e3] = \"CLOSE_NORMAL\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_ABNORMAL\"] = 1006] = \"CLOSE_ABNORMAL\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"UNEXPECTED_CONDITION\"] = 1011] = \"UNEXPECTED_CONDITION\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"TRY_AGAIN_LATER\"] = 1013] = \"TRY_AGAIN_LATER\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"INVALID_MESSAGE_FORMAT\"] = 4e3] = \"INVALID_MESSAGE_FORMAT\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"NOT_ALLOWED\"] = 4001] = \"NOT_ALLOWED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\"] = 4002] = \"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\"] = 4003] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\"] = 4004] = \"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\"] = 4005] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"ROOM_ID_UPDATED\"] = 4006] = \"ROOM_ID_UPDATED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"KICKED\"] = 4100] = \"KICKED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"TOKEN_EXPIRED\"] = 4109] = \"TOKEN_EXPIRED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_WITHOUT_RETRY\"] = 4999] = \"CLOSE_WITHOUT_RETRY\";\n  return WebsocketCloseCodes2;\n})(WebsocketCloseCodes || {});\nfunction shouldDisconnect(code) {\n  return code === 4999 /* CLOSE_WITHOUT_RETRY */ || code >= 4e3 && code < 4100;\n}\nfunction shouldReauth(code) {\n  return code >= 4100 && code < 4200;\n}\nfunction shouldRetryWithoutReauth(code) {\n  return code === 1013 /* TRY_AGAIN_LATER */ || code >= 4200 && code < 4300;\n}\n\n// src/connection.ts\nfunction isIdle(status) {\n  return status === \"initial\" || status === \"disconnected\";\n}\nfunction toNewConnectionStatus(machine) {\n  const state = machine.currentState;\n  switch (state) {\n    case \"@ok.connected\":\n    case \"@ok.awaiting-pong\":\n      return \"connected\";\n    case \"@idle.initial\":\n      return \"initial\";\n    case \"@auth.busy\":\n    case \"@auth.backoff\":\n    case \"@connecting.busy\":\n    case \"@connecting.backoff\":\n    case \"@idle.zombie\":\n      return machine.context.successCount > 0 ? \"reconnecting\" : \"connecting\";\n    case \"@idle.failed\":\n      return \"disconnected\";\n    default:\n      return assertNever(state, \"Unknown state\");\n  }\n}\nvar BACKOFF_DELAYS = [250, 500, 1e3, 2e3, 4e3, 8e3, 1e4];\nvar RESET_DELAY = BACKOFF_DELAYS[0] - 1;\nvar BACKOFF_DELAYS_SLOW = [2e3, 3e4, 6e4, 3e5];\nvar HEARTBEAT_INTERVAL = 3e4;\nvar PONG_TIMEOUT = 2e3;\nvar AUTH_TIMEOUT = 1e4;\nvar SOCKET_CONNECT_TIMEOUT = 1e4;\nvar StopRetrying = class extends Error {\n  constructor(reason) {\n    super(reason);\n  }\n};\nvar LiveblocksError = class extends Error {\n  /** @internal */\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n};\nfunction nextBackoffDelay(currentDelay, delays) {\n  return delays.find((delay) => delay > currentDelay) ?? delays[delays.length - 1];\n}\nfunction increaseBackoffDelay(context) {\n  context.patch({\n    backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS)\n  });\n}\nfunction increaseBackoffDelayAggressively(context) {\n  context.patch({\n    backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS_SLOW)\n  });\n}\nfunction resetSuccessCount(context) {\n  context.patch({ successCount: 0 });\n}\nfunction log(level, message) {\n  const logger = level === 2 /* ERROR */ ? error2 : level === 1 /* WARN */ ? warn : (\n    /* black hole */\n    () => {\n    }\n  );\n  return () => {\n    logger(message);\n  };\n}\nfunction logPrematureErrorOrCloseEvent(e) {\n  const conn = \"Connection to Liveblocks websocket server\";\n  return (ctx) => {\n    if (e instanceof Error) {\n      warn(`${conn} could not be established. ${String(e)}`);\n    } else {\n      warn(\n        isCloseEvent(e) ? `${conn} closed prematurely (code: ${e.code}). Retrying in ${ctx.backoffDelay}ms.` : `${conn} could not be established.`\n      );\n    }\n  };\n}\nfunction logCloseEvent(event) {\n  const details = [`code: ${event.code}`];\n  if (event.reason) {\n    details.push(`reason: ${event.reason}`);\n  }\n  return (ctx) => {\n    warn(\n      `Connection to Liveblocks websocket server closed (${details.join(\", \")}). Retrying in ${ctx.backoffDelay}ms.`\n    );\n  };\n}\nvar logPermanentClose = log(\n  1 /* WARN */,\n  \"Connection to WebSocket closed permanently. Won't retry.\"\n);\nfunction isCloseEvent(error3) {\n  return !(error3 instanceof Error) && error3.type === \"close\";\n}\nfunction enableTracing(machine) {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  function log2(...args) {\n    warn(\n      `${(((/* @__PURE__ */ new Date()).getTime() - start) / 1e3).toFixed(2)} [FSM #${machine.id}]`,\n      ...args\n    );\n  }\n  const unsubs = [\n    machine.events.didReceiveEvent.subscribe((e) => log2(`Event ${e.type}`)),\n    machine.events.willTransition.subscribe(\n      ({ from, to }) => log2(\"Transitioning\", from, \"\\u2192\", to)\n    ),\n    machine.events.didIgnoreEvent.subscribe(\n      (e) => log2(\"Ignored event\", e.type, e, \"(current state won't handle it)\")\n    )\n    // machine.events.willExitState.subscribe((s) => log(\"Exiting state\", s)),\n    // machine.events.didEnterState.subscribe((s) => log(\"Entering state\", s)),\n  ];\n  return () => {\n    for (const unsub of unsubs) {\n      unsub();\n    }\n  };\n}\nfunction defineConnectivityEvents(machine) {\n  const statusDidChange = makeEventSource();\n  const didConnect = makeEventSource();\n  const didDisconnect = makeEventSource();\n  let lastStatus = null;\n  const unsubscribe = machine.events.didEnterState.subscribe(() => {\n    const currStatus = toNewConnectionStatus(machine);\n    if (currStatus !== lastStatus) {\n      statusDidChange.notify(currStatus);\n    }\n    if (lastStatus === \"connected\" && currStatus !== \"connected\") {\n      didDisconnect.notify();\n    } else if (lastStatus !== \"connected\" && currStatus === \"connected\") {\n      didConnect.notify();\n    }\n    lastStatus = currStatus;\n  });\n  return {\n    statusDidChange: statusDidChange.observable,\n    didConnect: didConnect.observable,\n    didDisconnect: didDisconnect.observable,\n    unsubscribe\n  };\n}\nvar assign = (patch) => (ctx) => ctx.patch(patch);\nfunction createConnectionStateMachine(delegates, options) {\n  const onMessage = makeEventSource();\n  onMessage.pause();\n  const onLiveblocksError = makeEventSource();\n  function fireErrorEvent(errmsg, errcode) {\n    return () => {\n      const err = new LiveblocksError(errmsg, errcode);\n      onLiveblocksError.notify(err);\n    };\n  }\n  const initialContext = {\n    successCount: 0,\n    authValue: null,\n    socket: null,\n    backoffDelay: RESET_DELAY\n  };\n  const machine = new FSM(initialContext).addState(\"@idle.initial\").addState(\"@idle.failed\").addState(\"@idle.zombie\").addState(\"@auth.busy\").addState(\"@auth.backoff\").addState(\"@connecting.busy\").addState(\"@connecting.backoff\").addState(\"@ok.connected\").addState(\"@ok.awaiting-pong\");\n  machine.addTransitions(\"*\", {\n    RECONNECT: {\n      target: \"@auth.backoff\",\n      effect: [increaseBackoffDelay, resetSuccessCount]\n    },\n    DISCONNECT: \"@idle.initial\"\n  });\n  machine.onEnter(\"@idle.*\", resetSuccessCount).addTransitions(\"@idle.*\", {\n    CONNECT: (_, ctx) => (\n      // If we still have a known authValue, try to reconnect to the socket directly,\n      // otherwise, try to obtain a new authValue\n      ctx.authValue !== null ? \"@connecting.busy\" : \"@auth.busy\"\n    )\n  });\n  machine.addTransitions(\"@auth.backoff\", {\n    NAVIGATOR_ONLINE: {\n      target: \"@auth.busy\",\n      effect: assign({ backoffDelay: RESET_DELAY })\n    }\n  }).addTimedTransition(\n    \"@auth.backoff\",\n    (ctx) => ctx.backoffDelay,\n    \"@auth.busy\"\n  ).onEnterAsync(\n    \"@auth.busy\",\n    () => withTimeout(\n      delegates.authenticate(),\n      AUTH_TIMEOUT,\n      \"Timed out during auth\"\n    ),\n    // On successful authentication\n    (okEvent) => ({\n      target: \"@connecting.busy\",\n      effect: assign({\n        authValue: okEvent.data\n      })\n    }),\n    // Auth failed\n    (failedEvent) => {\n      if (failedEvent.reason instanceof StopRetrying) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            log(2 /* ERROR */, failedEvent.reason.message),\n            fireErrorEvent(failedEvent.reason.message, -1)\n          ]\n        };\n      }\n      return {\n        target: \"@auth.backoff\",\n        effect: [\n          increaseBackoffDelay,\n          log(\n            2 /* ERROR */,\n            `Authentication failed: ${failedEvent.reason instanceof Error ? failedEvent.reason.message : String(failedEvent.reason)}`\n          )\n        ]\n      };\n    }\n  );\n  const onSocketError = (event) => machine.send({ type: \"EXPLICIT_SOCKET_ERROR\", event });\n  const onSocketClose = (event) => machine.send({ type: \"EXPLICIT_SOCKET_CLOSE\", event });\n  const onSocketMessage = (event) => event.data === \"pong\" ? machine.send({ type: \"PONG\" }) : onMessage.notify(event);\n  function teardownSocket(socket) {\n    if (socket) {\n      socket.removeEventListener(\"error\", onSocketError);\n      socket.removeEventListener(\"close\", onSocketClose);\n      socket.removeEventListener(\"message\", onSocketMessage);\n      socket.close();\n    }\n  }\n  machine.addTransitions(\"@connecting.backoff\", {\n    NAVIGATOR_ONLINE: {\n      target: \"@connecting.busy\",\n      effect: assign({ backoffDelay: RESET_DELAY })\n    }\n  }).addTimedTransition(\n    \"@connecting.backoff\",\n    (ctx) => ctx.backoffDelay,\n    \"@connecting.busy\"\n  ).onEnterAsync(\n    \"@connecting.busy\",\n    //\n    // Use the \"createSocket\" delegate function (provided to the\n    // ManagedSocket) to create the actual WebSocket connection instance.\n    // Then, set up all the necessary event listeners, and wait for the\n    // \"open\" event to occur.\n    //\n    // When the \"open\" event happens, we're ready to transition to the\n    // OK state. This is done by resolving the Promise.\n    //\n    async (ctx, signal) => {\n      let capturedPrematureEvent = null;\n      let unconfirmedSocket = null;\n      const connect$ = new Promise(\n        (resolve, rej) => {\n          if (ctx.authValue === null) {\n            throw new Error(\"No auth authValue\");\n          }\n          const socket = delegates.createSocket(ctx.authValue);\n          unconfirmedSocket = socket;\n          function reject(event) {\n            capturedPrematureEvent = event;\n            socket.removeEventListener(\"message\", onSocketMessage);\n            rej(event);\n          }\n          const [actor$, didReceiveActor] = controlledPromise();\n          if (!options.waitForActorId) {\n            didReceiveActor();\n          }\n          function waitForActorId(event) {\n            const serverMsg = tryParseJson(event.data);\n            if (serverMsg?.type === 104 /* ROOM_STATE */) {\n              didReceiveActor();\n            }\n          }\n          socket.addEventListener(\"message\", onSocketMessage);\n          if (options.waitForActorId) {\n            socket.addEventListener(\"message\", waitForActorId);\n          }\n          socket.addEventListener(\"error\", reject);\n          socket.addEventListener(\"close\", reject);\n          socket.addEventListener(\"open\", () => {\n            socket.addEventListener(\"error\", onSocketError);\n            socket.addEventListener(\"close\", onSocketClose);\n            const unsub = () => {\n              socket.removeEventListener(\"error\", reject);\n              socket.removeEventListener(\"close\", reject);\n              socket.removeEventListener(\"message\", waitForActorId);\n            };\n            void actor$.then(() => {\n              resolve([socket, unsub]);\n            });\n          });\n        }\n      );\n      return withTimeout(\n        connect$,\n        SOCKET_CONNECT_TIMEOUT,\n        \"Timed out during websocket connection\"\n      ).then(\n        //\n        // Part 3:\n        // By now, our \"open\" event has fired, and the promise has been\n        // resolved. Two possible scenarios:\n        //\n        // 1. The happy path. Most likely.\n        // 2. Uh-oh. A premature close/error event has been observed. Let's\n        //    reject the promise after all.\n        //\n        // Any close/error event that will get scheduled after this point\n        // onwards, will be caught in the OK state, and dealt with\n        // accordingly.\n        //\n        ([socket, unsub]) => {\n          unsub();\n          if (signal.aborted) {\n            throw new Error(\"Aborted\");\n          }\n          if (capturedPrematureEvent) {\n            throw capturedPrematureEvent;\n          }\n          return socket;\n        }\n      ).catch((e) => {\n        teardownSocket(unconfirmedSocket);\n        throw e;\n      });\n    },\n    // Only transition to OK state after a successfully opened WebSocket connection\n    (okEvent) => ({\n      target: \"@ok.connected\",\n      effect: assign({\n        socket: okEvent.data,\n        backoffDelay: RESET_DELAY\n      })\n    }),\n    // If the WebSocket connection cannot be established\n    (failure) => {\n      const err = failure.reason;\n      if (err instanceof StopRetrying) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            log(2 /* ERROR */, err.message),\n            fireErrorEvent(err.message, -1)\n          ]\n        };\n      }\n      if (isCloseEvent(err)) {\n        if (err.code === 4109 /* TOKEN_EXPIRED */) {\n          return \"@auth.busy\";\n        }\n        if (shouldRetryWithoutReauth(err.code)) {\n          return {\n            target: \"@connecting.backoff\",\n            effect: [\n              increaseBackoffDelayAggressively,\n              logPrematureErrorOrCloseEvent(err)\n            ]\n          };\n        }\n        if (shouldDisconnect(err.code)) {\n          return {\n            target: \"@idle.failed\",\n            effect: [\n              log(2 /* ERROR */, err.reason),\n              fireErrorEvent(err.reason, err.code)\n            ]\n          };\n        }\n      }\n      return {\n        target: \"@auth.backoff\",\n        effect: [increaseBackoffDelay, logPrematureErrorOrCloseEvent(err)]\n      };\n    }\n  );\n  const sendHeartbeat = {\n    target: \"@ok.awaiting-pong\",\n    effect: (ctx) => {\n      ctx.socket?.send(\"ping\");\n    }\n  };\n  const maybeHeartbeat = () => {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const canZombie = doc?.visibilityState === \"hidden\" && delegates.canZombie();\n    return canZombie ? \"@idle.zombie\" : sendHeartbeat;\n  };\n  machine.addTimedTransition(\"@ok.connected\", HEARTBEAT_INTERVAL, maybeHeartbeat).addTransitions(\"@ok.connected\", {\n    NAVIGATOR_OFFLINE: maybeHeartbeat,\n    // Don't take the browser's word for it when it says it's offline. Do a ping/pong to make sure.\n    WINDOW_GOT_FOCUS: sendHeartbeat\n  });\n  machine.addTransitions(\"@idle.zombie\", {\n    WINDOW_GOT_FOCUS: \"@connecting.backoff\"\n    // When in zombie state, the client will try to wake up automatically when the window regains focus\n  });\n  machine.onEnter(\"@ok.*\", (ctx) => {\n    ctx.patch({ successCount: ctx.successCount + 1 });\n    const timerID = setTimeout(\n      // On the next tick, start delivering all messages that have already\n      // been received, and continue synchronous delivery of all future\n      // incoming messages.\n      onMessage.unpause,\n      0\n    );\n    return (ctx2) => {\n      teardownSocket(ctx2.socket);\n      ctx2.patch({ socket: null });\n      clearTimeout(timerID);\n      onMessage.pause();\n    };\n  }).addTransitions(\"@ok.awaiting-pong\", { PONG: \"@ok.connected\" }).addTimedTransition(\"@ok.awaiting-pong\", PONG_TIMEOUT, {\n    target: \"@connecting.busy\",\n    // Log implicit connection loss and drop the current open socket\n    effect: log(\n      1 /* WARN */,\n      \"Received no pong from server, assume implicit connection loss.\"\n    )\n  }).addTransitions(\"@ok.*\", {\n    // When a socket receives an error, this can cause the closing of the\n    // socket, or not. So always check to see if the socket is still OPEN or\n    // not. When still OPEN, don't transition.\n    EXPLICIT_SOCKET_ERROR: (_, context) => {\n      if (context.socket?.readyState === 1) {\n        return null;\n      }\n      return {\n        target: \"@connecting.backoff\",\n        effect: increaseBackoffDelay\n      };\n    },\n    EXPLICIT_SOCKET_CLOSE: (e) => {\n      if (shouldDisconnect(e.event.code)) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            logPermanentClose,\n            fireErrorEvent(e.event.reason, e.event.code)\n          ]\n        };\n      }\n      if (shouldReauth(e.event.code)) {\n        if (e.event.code === 4109 /* TOKEN_EXPIRED */) {\n          return \"@auth.busy\";\n        } else {\n          return {\n            target: \"@auth.backoff\",\n            effect: [increaseBackoffDelay, logCloseEvent(e.event)]\n          };\n        }\n      }\n      if (shouldRetryWithoutReauth(e.event.code)) {\n        return {\n          target: \"@connecting.backoff\",\n          effect: [increaseBackoffDelayAggressively, logCloseEvent(e.event)]\n        };\n      }\n      return {\n        target: \"@connecting.backoff\",\n        effect: [increaseBackoffDelay, logCloseEvent(e.event)]\n      };\n    }\n  });\n  if (typeof document !== \"undefined\") {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const win = typeof window !== \"undefined\" ? window : void 0;\n    const root = win ?? doc;\n    machine.onEnter(\"*\", (ctx) => {\n      function onNetworkOffline() {\n        machine.send({ type: \"NAVIGATOR_OFFLINE\" });\n      }\n      function onNetworkBackOnline() {\n        machine.send({ type: \"NAVIGATOR_ONLINE\" });\n      }\n      function onVisibilityChange() {\n        if (doc?.visibilityState === \"visible\") {\n          machine.send({ type: \"WINDOW_GOT_FOCUS\" });\n        }\n      }\n      win?.addEventListener(\"online\", onNetworkBackOnline);\n      win?.addEventListener(\"offline\", onNetworkOffline);\n      root?.addEventListener(\"visibilitychange\", onVisibilityChange);\n      return () => {\n        root?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n        win?.removeEventListener(\"online\", onNetworkBackOnline);\n        win?.removeEventListener(\"offline\", onNetworkOffline);\n        teardownSocket(ctx.socket);\n      };\n    });\n  }\n  const cleanups = [];\n  const { statusDidChange, didConnect, didDisconnect, unsubscribe } = defineConnectivityEvents(machine);\n  cleanups.push(unsubscribe);\n  if (options.enableDebugLogging) {\n    cleanups.push(enableTracing(machine));\n  }\n  machine.start();\n  return {\n    machine,\n    cleanups,\n    // Observable events that will be emitted by this machine\n    events: {\n      statusDidChange,\n      didConnect,\n      didDisconnect,\n      onMessage: onMessage.observable,\n      onLiveblocksError: onLiveblocksError.observable\n    }\n  };\n}\nvar ManagedSocket = class {\n  constructor(delegates, enableDebugLogging = false, waitForActorId = true) {\n    const { machine, events, cleanups } = createConnectionStateMachine(\n      delegates,\n      { waitForActorId, enableDebugLogging }\n    );\n    this.machine = machine;\n    this.events = events;\n    this.cleanups = cleanups;\n  }\n  getStatus() {\n    try {\n      return toNewConnectionStatus(this.machine);\n    } catch {\n      return \"initial\";\n    }\n  }\n  /**\n   * Returns the current auth authValue.\n   */\n  get authValue() {\n    return this.machine.context.authValue;\n  }\n  /**\n   * Call this method to try to connect to a WebSocket. This only has an effect\n   * if the machine is idle at the moment, otherwise this is a no-op.\n   */\n  connect() {\n    this.machine.send({ type: \"CONNECT\" });\n  }\n  /**\n   * If idle, will try to connect. Otherwise, it will attempt to reconnect to\n   * the socket, potentially obtaining a new authValue first, if needed.\n   */\n  reconnect() {\n    this.machine.send({ type: \"RECONNECT\" });\n  }\n  /**\n   * Call this method to disconnect from the current WebSocket. Is going to be\n   * a no-op if there is no active connection.\n   */\n  disconnect() {\n    this.machine.send({ type: \"DISCONNECT\" });\n  }\n  /**\n   * Call this to stop the machine and run necessary cleanup functions. After\n   * calling destroy(), you can no longer use this instance. Call this before\n   * letting the instance get garbage collected.\n   */\n  destroy() {\n    this.machine.stop();\n    let cleanup;\n    while (cleanup = this.cleanups.pop()) {\n      cleanup();\n    }\n  }\n  /**\n   * Safely send a message to the current WebSocket connection. Will emit a log\n   * message if this is somehow impossible.\n   */\n  send(data) {\n    const socket = this.machine.context?.socket;\n    if (socket === null) {\n      warn(\"Cannot send: not connected yet\", data);\n    } else if (socket.readyState !== 1) {\n      warn(\"Cannot send: WebSocket no longer open\", data);\n    } else {\n      socket.send(data);\n    }\n  }\n  /**\n   * NOTE: Used by the E2E app only, to simulate explicit events.\n   * Not ideal to keep exposed :(\n   */\n  _privateSendMachineEvent(event) {\n    this.machine.send(event);\n  }\n};\n\n// src/protocol/AuthToken.ts\nfunction canWriteStorage(scopes) {\n  return scopes.includes(\"room:write\" /* Write */);\n}\nfunction canComment(scopes) {\n  return scopes.includes(\"comments:write\" /* CommentsWrite */) || scopes.includes(\"room:write\" /* Write */);\n}\nfunction isValidAuthTokenPayload(data) {\n  return isPlainObject(data) && (data.k === \"acc\" /* ACCESS_TOKEN */ || data.k === \"id\" /* ID_TOKEN */ || data.k === \"sec-legacy\" /* SECRET_LEGACY */);\n}\nfunction parseAuthToken(rawTokenString) {\n  const tokenParts = rawTokenString.split(\".\");\n  if (tokenParts.length !== 3) {\n    throw new Error(\"Authentication error: invalid JWT token\");\n  }\n  const payload = tryParseJson(b64decode(tokenParts[1]));\n  if (!(payload && isValidAuthTokenPayload(payload))) {\n    throw new Error(\n      \"Authentication error: expected a valid token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback\"\n    );\n  }\n  return {\n    raw: rawTokenString,\n    parsed: payload\n  };\n}\n\n// src/auth-manager.ts\nfunction createAuthManager(authOptions) {\n  const authentication = prepareAuthentication(authOptions);\n  const seenTokens = /* @__PURE__ */ new Set();\n  const tokens = [];\n  const expiryTimes = [];\n  const requestPromises = /* @__PURE__ */ new Map();\n  function reset() {\n    seenTokens.clear();\n    tokens.length = 0;\n    expiryTimes.length = 0;\n    requestPromises.clear();\n  }\n  function hasCorrespondingScopes(requestedScope, scopes) {\n    if (requestedScope === \"comments:read\") {\n      return scopes.includes(\"comments:read\" /* CommentsRead */) || scopes.includes(\"comments:write\" /* CommentsWrite */) || scopes.includes(\"room:read\" /* Read */) || scopes.includes(\"room:write\" /* Write */);\n    } else if (requestedScope === \"room:read\") {\n      return scopes.includes(\"room:read\" /* Read */) || scopes.includes(\"room:write\" /* Write */);\n    }\n    return false;\n  }\n  function getCachedToken(requestOptions) {\n    const now = Math.ceil(Date.now() / 1e3);\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const token = tokens[i];\n      const expiresAt = expiryTimes[i];\n      if (expiresAt <= now) {\n        tokens.splice(i, 1);\n        expiryTimes.splice(i, 1);\n        continue;\n      }\n      if (token.parsed.k === \"id\" /* ID_TOKEN */) {\n        return token;\n      } else if (token.parsed.k === \"acc\" /* ACCESS_TOKEN */) {\n        if (!requestOptions.roomId && Object.entries(token.parsed.perms).length === 0) {\n          return token;\n        }\n        for (const [resource, scopes] of Object.entries(token.parsed.perms)) {\n          if (!requestOptions.roomId) {\n            if (resource.includes(\"*\") && hasCorrespondingScopes(requestOptions.requestedScope, scopes)) {\n              return token;\n            }\n          } else if (resource.includes(\"*\") && requestOptions.roomId.startsWith(resource.replace(\"*\", \"\")) || requestOptions.roomId === resource && hasCorrespondingScopes(requestOptions.requestedScope, scopes)) {\n            return token;\n          }\n        }\n      }\n    }\n    return void 0;\n  }\n  async function makeAuthRequest(options) {\n    const fetcher = authOptions.polyfills?.fetch ?? (typeof window === \"undefined\" ? void 0 : window.fetch);\n    if (authentication.type === \"private\") {\n      if (fetcher === void 0) {\n        throw new StopRetrying(\n          \"To use Liveblocks client in a non-DOM environment with a url as auth endpoint, you need to provide a fetch polyfill.\"\n        );\n      }\n      const response = await fetchAuthEndpoint(fetcher, authentication.url, {\n        room: options.roomId\n      });\n      const parsed = parseAuthToken(response.token);\n      if (seenTokens.has(parsed.raw)) {\n        throw new StopRetrying(\n          \"The same Liveblocks auth token was issued from the backend before. Caching Liveblocks tokens is not supported.\"\n        );\n      }\n      return parsed;\n    }\n    if (authentication.type === \"custom\") {\n      const response = await authentication.callback(options.roomId);\n      if (response && typeof response === \"object\") {\n        if (typeof response.token === \"string\") {\n          const parsed = parseAuthToken(response.token);\n          return parsed;\n        } else if (typeof response.error === \"string\") {\n          const reason = `Authentication failed: ${\"reason\" in response && typeof response.reason === \"string\" ? response.reason : \"Forbidden\"}`;\n          if (response.error === \"forbidden\") {\n            throw new StopRetrying(reason);\n          } else {\n            throw new Error(reason);\n          }\n        }\n      }\n      throw new Error(\n        'Your authentication callback function should return a token, but it did not. Hint: the return value should look like: { token: \"...\" }'\n      );\n    }\n    throw new Error(\n      \"Unexpected authentication type. Must be private or custom.\"\n    );\n  }\n  async function getAuthValue(requestOptions) {\n    if (authentication.type === \"public\") {\n      return { type: \"public\", publicApiKey: authentication.publicApiKey };\n    }\n    const cachedToken = getCachedToken(requestOptions);\n    if (cachedToken !== void 0) {\n      return { type: \"secret\", token: cachedToken };\n    }\n    let currentPromise;\n    if (requestOptions.roomId) {\n      currentPromise = requestPromises.get(requestOptions.roomId);\n      if (currentPromise === void 0) {\n        currentPromise = makeAuthRequest(requestOptions);\n        requestPromises.set(requestOptions.roomId, currentPromise);\n      }\n    } else {\n      currentPromise = requestPromises.get(\"liveblocks-user-token\");\n      if (currentPromise === void 0) {\n        currentPromise = makeAuthRequest(requestOptions);\n        requestPromises.set(\"liveblocks-user-token\", currentPromise);\n      }\n    }\n    try {\n      const token = await currentPromise;\n      const BUFFER = 30;\n      const expiresAt = Math.floor(Date.now() / 1e3) + (token.parsed.exp - token.parsed.iat) - BUFFER;\n      seenTokens.add(token.raw);\n      if (token.parsed.k !== \"sec-legacy\" /* SECRET_LEGACY */) {\n        tokens.push(token);\n        expiryTimes.push(expiresAt);\n      }\n      return { type: \"secret\", token };\n    } finally {\n      if (requestOptions.roomId) {\n        requestPromises.delete(requestOptions.roomId);\n      } else {\n        requestPromises.delete(\"liveblocks-user-token\");\n      }\n    }\n  }\n  return {\n    reset,\n    getAuthValue\n  };\n}\nfunction prepareAuthentication(authOptions) {\n  const { publicApiKey, authEndpoint } = authOptions;\n  if (authEndpoint !== void 0 && publicApiKey !== void 0) {\n    throw new Error(\n      \"You cannot simultaneously use `publicApiKey` and `authEndpoint` options. Please pick one and leave the other option unspecified. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n    );\n  }\n  if (typeof publicApiKey === \"string\") {\n    if (publicApiKey.startsWith(\"sk_\")) {\n      throw new Error(\n        \"Invalid `publicApiKey` option. The value you passed is a secret key, which should not be used from the client. Please only ever pass a public key here. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    } else if (!publicApiKey.startsWith(\"pk_\")) {\n      throw new Error(\n        \"Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    }\n    return {\n      type: \"public\",\n      publicApiKey\n    };\n  }\n  if (typeof authEndpoint === \"string\") {\n    return {\n      type: \"private\",\n      url: authEndpoint\n    };\n  } else if (typeof authEndpoint === \"function\") {\n    return {\n      type: \"custom\",\n      callback: authEndpoint\n    };\n  } else if (authEndpoint !== void 0) {\n    throw new Error(\n      \"The `authEndpoint` option must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint\"\n    );\n  }\n  throw new Error(\n    \"Invalid Liveblocks client options. Please provide either a `publicApiKey` or `authEndpoint` option. They cannot both be empty. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n  );\n}\nasync function fetchAuthEndpoint(fetch2, endpoint, body) {\n  const res = await fetch2(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) {\n    const reason = `${(await res.text()).trim() || \"reason not provided in auth response\"} (${res.status} returned by POST ${endpoint})`;\n    if (res.status === 401 || res.status === 403) {\n      throw new StopRetrying(`Unauthorized: ${reason}`);\n    } else {\n      throw new Error(`Failed to authenticate: ${reason}`);\n    }\n  }\n  let data;\n  try {\n    data = await res.json();\n  } catch (er) {\n    throw new Error(\n      `Expected a JSON response when doing a POST request on \"${endpoint}\". ${String(\n        er\n      )}`\n    );\n  }\n  if (!isPlainObject(data) || typeof data.token !== \"string\") {\n    throw new Error(\n      `Expected a JSON response of the form \\`{ token: \"...\" }\\` when doing a POST request on \"${endpoint}\", but got ${JSON.stringify(\n        data\n      )}`\n    );\n  }\n  const { token } = data;\n  return { token };\n}\n\n// src/constants.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\n\n// src/internal.ts\nvar kInternal = Symbol();\n\n// src/devtools/bridge.ts\nvar _bridgeActive = false;\nfunction activateBridge(allowed) {\n  _bridgeActive = allowed;\n}\nfunction sendToPanel(message, options) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  const fullMsg = {\n    ...message,\n    source: \"liveblocks-devtools-client\"\n  };\n  if (!(options?.force || _bridgeActive)) {\n    return;\n  }\n  window.postMessage(fullMsg, \"*\");\n}\nvar eventSource = makeEventSource();\nif ( true && typeof window !== \"undefined\") {\n  window.addEventListener(\"message\", (event) => {\n    if (event.source === window && event.data?.source === \"liveblocks-devtools-panel\") {\n      eventSource.notify(event.data);\n    } else {\n    }\n  });\n}\nvar onMessageFromPanel = eventSource.observable;\n\n// src/devtools/index.ts\nvar VERSION = PKG_VERSION || \"dev\";\nvar _devtoolsSetupHasRun = false;\nfunction setupDevTools(getAllRooms) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  if (_devtoolsSetupHasRun) {\n    return;\n  }\n  _devtoolsSetupHasRun = true;\n  onMessageFromPanel.subscribe((msg) => {\n    switch (msg.msg) {\n      case \"connect\": {\n        activateBridge(true);\n        for (const roomId of getAllRooms()) {\n          sendToPanel({\n            msg: \"room::available\",\n            roomId,\n            clientVersion: VERSION\n          });\n        }\n        break;\n      }\n    }\n  });\n  sendToPanel({ msg: \"wake-up-devtools\" }, { force: true });\n}\nvar unsubsByRoomId = /* @__PURE__ */ new Map();\nfunction stopSyncStream(roomId) {\n  const unsubs = unsubsByRoomId.get(roomId) ?? [];\n  unsubsByRoomId.delete(roomId);\n  for (const unsub of unsubs) {\n    unsub();\n  }\n}\nfunction startSyncStream(room) {\n  stopSyncStream(room.id);\n  fullSync(room);\n  unsubsByRoomId.set(room.id, [\n    // When the connection status changes\n    room.events.status.subscribe(() => partialSyncConnection(room)),\n    // When storage initializes, send the update\n    room.events.storageDidLoad.subscribeOnce(() => partialSyncStorage(room)),\n    // Any time storage updates, send the new storage root\n    room.events.storageBatch.subscribe(() => partialSyncStorage(room)),\n    // Any time \"me\" or \"others\" updates, send the new values accordingly\n    room.events.self.subscribe(() => partialSyncMe(room)),\n    room.events.others.subscribe(() => partialSyncOthers(room)),\n    // Any time ydoc is updated, forward the update\n    room.events.ydoc.subscribe((update) => syncYdocUpdate(room, update)),\n    // Any time a custom room event is received, forward it\n    room.events.customEvent.subscribe(\n      (eventData) => forwardEvent(room, eventData)\n    )\n  ]);\n}\nfunction syncYdocUpdate(room, update) {\n  sendToPanel({\n    msg: \"room::sync::ydoc\",\n    roomId: room.id,\n    update\n  });\n}\nvar loadedAt = Date.now();\nvar eventCounter = 0;\nfunction nextEventId() {\n  return `event-${loadedAt}-${eventCounter++}`;\n}\nfunction forwardEvent(room, eventData) {\n  sendToPanel({\n    msg: \"room::events::custom-event\",\n    roomId: room.id,\n    event: {\n      type: \"CustomEvent\",\n      id: nextEventId(),\n      key: \"Event\",\n      connectionId: eventData.connectionId,\n      payload: eventData.event\n    }\n  });\n}\nfunction partialSyncConnection(room) {\n  sendToPanel({\n    msg: \"room::sync::partial\",\n    roomId: room.id,\n    status: room.getStatus()\n  });\n}\nfunction partialSyncStorage(room) {\n  const root = room.getStorageSnapshot();\n  if (root) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      storage: root.toTreeNode(\"root\").payload\n    });\n  }\n}\nfunction partialSyncMe(room) {\n  const me = room[kInternal].getSelf_forDevTools();\n  if (me) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      me\n    });\n  }\n}\nfunction partialSyncOthers(room) {\n  const others = room[kInternal].getOthers_forDevTools();\n  if (others) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      others\n    });\n  }\n}\nfunction fullSync(room) {\n  const root = room.getStorageSnapshot();\n  const me = room[kInternal].getSelf_forDevTools();\n  const others = room[kInternal].getOthers_forDevTools();\n  room.fetchYDoc(\"\");\n  sendToPanel({\n    msg: \"room::sync::full\",\n    roomId: room.id,\n    status: room.getStatus(),\n    storage: root?.toTreeNode(\"root\").payload ?? null,\n    me,\n    others\n  });\n}\nvar roomChannelListeners = /* @__PURE__ */ new Map();\nfunction stopRoomChannelListener(roomId) {\n  const listener = roomChannelListeners.get(roomId);\n  roomChannelListeners.delete(roomId);\n  if (listener) {\n    listener();\n  }\n}\nfunction linkDevTools(roomId, room) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  sendToPanel({ msg: \"room::available\", roomId, clientVersion: VERSION });\n  stopRoomChannelListener(roomId);\n  roomChannelListeners.set(\n    roomId,\n    // Returns the unsubscribe callback, that we store in the\n    // roomChannelListeners registry\n    onMessageFromPanel.subscribe((msg) => {\n      switch (msg.msg) {\n        case \"room::subscribe\": {\n          if (msg.roomId === roomId) {\n            startSyncStream(room);\n          }\n          break;\n        }\n        case \"room::unsubscribe\": {\n          if (msg.roomId === roomId) {\n            stopSyncStream(roomId);\n          }\n          break;\n        }\n      }\n    })\n  );\n}\nfunction unlinkDevTools(roomId) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  stopSyncStream(roomId);\n  stopRoomChannelListener(roomId);\n  sendToPanel({\n    msg: \"room::unavailable\",\n    roomId\n  });\n}\n\n// src/lib/stringify.ts\nfunction stringify(object, ...args) {\n  if (typeof object !== \"object\" || object === null || Array.isArray(object)) {\n    return JSON.stringify(object, ...args);\n  }\n  const sortedObject = Object.keys(object).sort().reduce(\n    (sortedObject2, key) => {\n      sortedObject2[key] = object[key];\n      return sortedObject2;\n    },\n    {}\n  );\n  return JSON.stringify(sortedObject, ...args);\n}\n\n// src/lib/batch.ts\nvar DEFAULT_SIZE = 50;\nvar BatchCall = class {\n  constructor(input) {\n    this.input = input;\n    const { promise, resolve, reject } = Promise_withResolvers();\n    this.promise = promise;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n};\nvar Batch = class {\n  constructor(callback, options) {\n    this.queue = [];\n    this.error = false;\n    this.callback = callback;\n    this.size = options.size ?? DEFAULT_SIZE;\n    this.delay = options.delay;\n  }\n  clearDelayTimeout() {\n    if (this.delayTimeoutId !== void 0) {\n      clearTimeout(this.delayTimeoutId);\n      this.delayTimeoutId = void 0;\n    }\n  }\n  schedule() {\n    if (this.queue.length === this.size) {\n      void this.flush();\n    } else if (this.queue.length === 1) {\n      this.clearDelayTimeout();\n      this.delayTimeoutId = setTimeout(() => void this.flush(), this.delay);\n    }\n  }\n  async flush() {\n    if (this.queue.length === 0) {\n      return;\n    }\n    const calls = this.queue.splice(0);\n    const inputs = calls.map((call) => call.input);\n    try {\n      const results = await this.callback(inputs);\n      this.error = false;\n      calls.forEach((call, index) => {\n        const result = results?.[index];\n        if (!Array.isArray(results)) {\n          call.reject(new Error(\"Callback must return an array.\"));\n        } else if (calls.length !== results.length) {\n          call.reject(\n            new Error(\n              `Callback must return an array of the same length as the number of provided items. Expected ${calls.length}, but got ${results.length}.`\n            )\n          );\n        } else if (result instanceof Error) {\n          call.reject(result);\n        } else {\n          call.resolve(result);\n        }\n      });\n    } catch (error3) {\n      this.error = true;\n      calls.forEach((call) => {\n        call.reject(error3);\n      });\n    }\n  }\n  get(input) {\n    const existingCall = this.queue.find(\n      (call2) => stringify(call2.input) === stringify(input)\n    );\n    if (existingCall) {\n      return existingCall.promise;\n    }\n    const call = new BatchCall(input);\n    this.queue.push(call);\n    this.schedule();\n    return call.promise;\n  }\n  clear() {\n    this.queue = [];\n    this.error = false;\n    this.clearDelayTimeout();\n  }\n};\nfunction createBatchStore(callback, options) {\n  const batch = new Batch(callback, options);\n  const cache = /* @__PURE__ */ new Map();\n  const eventSource2 = makeEventSource();\n  function getCacheKey(args) {\n    return stringify(args);\n  }\n  function setStateAndNotify(cacheKey, state) {\n    cache.set(cacheKey, state);\n    eventSource2.notify();\n  }\n  async function get(input) {\n    const cacheKey = getCacheKey(input);\n    if (cache.has(cacheKey)) {\n      return;\n    }\n    try {\n      setStateAndNotify(cacheKey, { isLoading: true });\n      const result = await batch.get(input);\n      setStateAndNotify(cacheKey, { isLoading: false, data: result });\n    } catch (error3) {\n      setStateAndNotify(cacheKey, {\n        isLoading: false,\n        error: error3\n      });\n    }\n  }\n  function getState(input) {\n    const cacheKey = getCacheKey(input);\n    return cache.get(cacheKey);\n  }\n  return {\n    ...eventSource2.observable,\n    get,\n    getState\n  };\n}\n\n// src/lib/create-store.ts\nfunction createStore(initialState) {\n  let state = initialState;\n  const subscribers = /* @__PURE__ */ new Set();\n  function get() {\n    return state;\n  }\n  function set(callback) {\n    const newState = callback(state);\n    if (state === newState) {\n      return;\n    }\n    state = newState;\n    for (const subscriber of subscribers) {\n      subscriber(state);\n    }\n  }\n  function subscribe(callback) {\n    subscribers.add(callback);\n    callback(state);\n    return () => {\n      subscribers.delete(callback);\n    };\n  }\n  return {\n    get,\n    set,\n    subscribe\n  };\n}\n\n// src/convert-plain-data.ts\nfunction convertToCommentData(data) {\n  const editedAt = data.editedAt ? new Date(data.editedAt) : void 0;\n  const createdAt = new Date(data.createdAt);\n  const reactions = data.reactions.map((reaction) => ({\n    ...reaction,\n    createdAt: new Date(reaction.createdAt)\n  }));\n  if (data.body) {\n    return {\n      ...data,\n      reactions,\n      createdAt,\n      editedAt\n    };\n  } else {\n    const deletedAt = new Date(data.deletedAt);\n    return {\n      ...data,\n      reactions,\n      createdAt,\n      editedAt,\n      deletedAt\n    };\n  }\n}\nfunction convertToThreadData(data) {\n  const updatedAt = data.updatedAt ? new Date(data.updatedAt) : void 0;\n  const createdAt = new Date(data.createdAt);\n  const comments = data.comments.map(\n    (comment) => convertToCommentData(comment)\n  );\n  return {\n    ...data,\n    createdAt,\n    updatedAt,\n    comments\n  };\n}\nfunction convertToCommentUserReaction(data) {\n  return {\n    ...data,\n    createdAt: new Date(data.createdAt)\n  };\n}\nfunction convertToInboxNotificationData(data) {\n  const notifiedAt = new Date(data.notifiedAt);\n  const readAt = data.readAt ? new Date(data.readAt) : null;\n  if (\"activities\" in data) {\n    const activities = data.activities.map((activity) => ({\n      ...activity,\n      createdAt: new Date(activity.createdAt)\n    }));\n    return {\n      ...data,\n      notifiedAt,\n      readAt,\n      activities\n    };\n  }\n  return {\n    ...data,\n    notifiedAt,\n    readAt\n  };\n}\nfunction convertToThreadDeleteInfo(data) {\n  const deletedAt = new Date(data.deletedAt);\n  return {\n    ...data,\n    deletedAt\n  };\n}\nfunction convertToInboxNotificationDeleteInfo(data) {\n  const deletedAt = new Date(data.deletedAt);\n  return {\n    ...data,\n    deletedAt\n  };\n}\n\n// src/lib/url.ts\nfunction toURLSearchParams(params) {\n  const result = new URLSearchParams();\n  for (const [key, value] of Object.entries(params)) {\n    if (value !== void 0 && value !== null) {\n      result.set(key, value.toString());\n    }\n  }\n  return result;\n}\nfunction urljoin(baseUrl, path, params) {\n  const url = new URL(path, baseUrl);\n  if (params !== void 0) {\n    url.search = (params instanceof URLSearchParams ? params : toURLSearchParams(params)).toString();\n  }\n  return url.toString();\n}\n\n// src/notifications.ts\nvar MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY = 50;\nfunction createNotificationsApi({\n  baseUrl,\n  authManager,\n  currentUserIdStore,\n  fetcher\n}) {\n  async function fetchJson(endpoint, options, params) {\n    const authValue = await authManager.getAuthValue({\n      requestedScope: \"comments:read\"\n    });\n    if (authValue.type === \"secret\" && authValue.token.parsed.k === \"acc\" /* ACCESS_TOKEN */) {\n      const userId = authValue.token.parsed.uid;\n      currentUserIdStore.set(() => userId);\n    }\n    const url = urljoin(baseUrl, `/v2/c${endpoint}`, params);\n    const response = await fetcher(url.toString(), {\n      ...options,\n      headers: {\n        ...options?.headers,\n        Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n      }\n    });\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new NotificationsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new NotificationsApiError(\n            response.statusText,\n            response.status\n          );\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  async function getInboxNotifications(options) {\n    const json = await fetchJson(\"/inbox-notifications\", void 0, {\n      limit: options?.limit,\n      since: options?.since?.toISOString()\n    });\n    return {\n      threads: json.threads.map((thread) => convertToThreadData(thread)),\n      inboxNotifications: json.inboxNotifications.map(\n        (notification) => convertToInboxNotificationData(notification)\n      ),\n      deletedThreads: json.deletedThreads.map(\n        (info) => convertToThreadDeleteInfo(info)\n      ),\n      deletedInboxNotifications: json.deletedInboxNotifications.map(\n        (info) => convertToInboxNotificationDeleteInfo(info)\n      ),\n      meta: {\n        requestedAt: new Date(json.meta.requestedAt)\n      }\n    };\n  }\n  async function getUnreadInboxNotificationsCount() {\n    const { count } = await fetchJson(\"/inbox-notifications/count\");\n    return count;\n  }\n  async function markAllInboxNotificationsAsRead() {\n    await fetchJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds: \"all\" })\n    });\n  }\n  async function markInboxNotificationsAsRead(inboxNotificationIds) {\n    await fetchJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds })\n    });\n  }\n  const batchedMarkInboxNotificationsAsRead = new Batch(\n    async (batchedInboxNotificationIds) => {\n      const inboxNotificationIds = batchedInboxNotificationIds.flat();\n      await markInboxNotificationsAsRead(inboxNotificationIds);\n      return inboxNotificationIds;\n    },\n    { delay: MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY }\n  );\n  async function markInboxNotificationAsRead(inboxNotificationId) {\n    await batchedMarkInboxNotificationsAsRead.get(inboxNotificationId);\n  }\n  async function deleteAllInboxNotifications() {\n    await fetchJson(\"/inbox-notifications\", {\n      method: \"DELETE\"\n    });\n  }\n  async function deleteInboxNotification(inboxNotificationId) {\n    await fetchJson(\n      `/inbox-notifications/${encodeURIComponent(inboxNotificationId)}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  return {\n    getInboxNotifications,\n    getUnreadInboxNotificationsCount,\n    markAllInboxNotificationsAsRead,\n    markInboxNotificationAsRead,\n    deleteAllInboxNotifications,\n    deleteInboxNotification\n  };\n}\n\n// src/lib/position.ts\nvar MIN_CODE = 32;\nvar MAX_CODE = 126;\nvar NUM_DIGITS = MAX_CODE - MIN_CODE + 1;\nvar ZERO = nthDigit(0);\nvar ONE = nthDigit(1);\nvar ZERO_NINE = ZERO + nthDigit(-1);\nfunction nthDigit(n) {\n  const code = MIN_CODE + (n < 0 ? NUM_DIGITS + n : n);\n  if (code < MIN_CODE || code > MAX_CODE) {\n    throw new Error(`Invalid n value: ${n}`);\n  }\n  return String.fromCharCode(code);\n}\nfunction makePosition(x, y) {\n  if (x !== void 0 && y !== void 0) {\n    return between(x, y);\n  } else if (x !== void 0) {\n    return after(x);\n  } else if (y !== void 0) {\n    return before(y);\n  } else {\n    return ONE;\n  }\n}\nfunction before(pos) {\n  const lastIndex = pos.length - 1;\n  for (let i = 0; i <= lastIndex; i++) {\n    const code = pos.charCodeAt(i);\n    if (code <= MIN_CODE) {\n      continue;\n    }\n    if (i === lastIndex) {\n      if (code === MIN_CODE + 1) {\n        return pos.substring(0, i) + ZERO_NINE;\n      } else {\n        return pos.substring(0, i) + String.fromCharCode(code - 1);\n      }\n    } else {\n      return pos.substring(0, i + 1);\n    }\n  }\n  return ONE;\n}\nfunction after(pos) {\n  for (let i = 0; i <= pos.length - 1; i++) {\n    const code = pos.charCodeAt(i);\n    if (code >= MAX_CODE) {\n      continue;\n    }\n    return pos.substring(0, i) + String.fromCharCode(code + 1);\n  }\n  return pos + ONE;\n}\nfunction between(lo, hi) {\n  if (lo < hi) {\n    return _between(lo, hi);\n  } else if (lo > hi) {\n    return _between(hi, lo);\n  } else {\n    throw new Error(\"Cannot compute value between two equal positions\");\n  }\n}\nfunction _between(lo, hi) {\n  let index = 0;\n  const loLen = lo.length;\n  const hiLen = hi.length;\n  while (true) {\n    const loCode = index < loLen ? lo.charCodeAt(index) : MIN_CODE;\n    const hiCode = index < hiLen ? hi.charCodeAt(index) : MAX_CODE;\n    if (loCode === hiCode) {\n      index++;\n      continue;\n    }\n    if (hiCode - loCode === 1) {\n      const size = index + 1;\n      let prefix = lo.substring(0, size);\n      if (prefix.length < size) {\n        prefix += ZERO.repeat(size - prefix.length);\n      }\n      const suffix = lo.substring(size);\n      const nines = \"\";\n      return prefix + _between(suffix, nines);\n    } else {\n      return takeN(lo, index) + String.fromCharCode(hiCode + loCode >> 1);\n    }\n  }\n}\nfunction takeN(pos, n) {\n  return n < pos.length ? pos.substring(0, n) : pos + ZERO.repeat(n - pos.length);\n}\nvar MIN_NON_ZERO_CODE = MIN_CODE + 1;\nfunction isPos(str) {\n  if (str === \"\") {\n    return false;\n  }\n  const lastIdx = str.length - 1;\n  const last = str.charCodeAt(lastIdx);\n  if (last < MIN_NON_ZERO_CODE || last > MAX_CODE) {\n    return false;\n  }\n  for (let i = 0; i < lastIdx; i++) {\n    const code = str.charCodeAt(i);\n    if (code < MIN_CODE || code > MAX_CODE) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction convertToPos(str) {\n  const codes = [];\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i);\n    codes.push(code < MIN_CODE ? MIN_CODE : code > MAX_CODE ? MAX_CODE : code);\n  }\n  while (codes.length > 0 && codes[codes.length - 1] === MIN_CODE) {\n    codes.length--;\n  }\n  return codes.length > 0 ? String.fromCharCode(...codes) : (\n    // Edge case: the str was a 0-only string, which is invalid. Default back to .1\n    ONE\n  );\n}\nfunction asPos(str) {\n  return isPos(str) ? str : convertToPos(str);\n}\n\n// src/protocol/Op.ts\nvar OpCode = /* @__PURE__ */ ((OpCode2) => {\n  OpCode2[OpCode2[\"INIT\"] = 0] = \"INIT\";\n  OpCode2[OpCode2[\"SET_PARENT_KEY\"] = 1] = \"SET_PARENT_KEY\";\n  OpCode2[OpCode2[\"CREATE_LIST\"] = 2] = \"CREATE_LIST\";\n  OpCode2[OpCode2[\"UPDATE_OBJECT\"] = 3] = \"UPDATE_OBJECT\";\n  OpCode2[OpCode2[\"CREATE_OBJECT\"] = 4] = \"CREATE_OBJECT\";\n  OpCode2[OpCode2[\"DELETE_CRDT\"] = 5] = \"DELETE_CRDT\";\n  OpCode2[OpCode2[\"DELETE_OBJECT_KEY\"] = 6] = \"DELETE_OBJECT_KEY\";\n  OpCode2[OpCode2[\"CREATE_MAP\"] = 7] = \"CREATE_MAP\";\n  OpCode2[OpCode2[\"CREATE_REGISTER\"] = 8] = \"CREATE_REGISTER\";\n  return OpCode2;\n})(OpCode || {});\nfunction ackOp(opId) {\n  return {\n    type: 5 /* DELETE_CRDT */,\n    id: \"ACK\",\n    // (H)ACK\n    opId\n  };\n}\nfunction isAckOp(op) {\n  return op.type === 5 /* DELETE_CRDT */ && op.id === \"ACK\";\n}\n\n// src/crdts/AbstractCrdt.ts\nfunction crdtAsLiveNode(value) {\n  return value;\n}\nfunction HasParent(node, key, pos = asPos(key)) {\n  return Object.freeze({ type: \"HasParent\", node, key, pos });\n}\nvar NoParent = Object.freeze({ type: \"NoParent\" });\nfunction Orphaned(oldKey, oldPos = asPos(oldKey)) {\n  return Object.freeze({ type: \"Orphaned\", oldKey, oldPos });\n}\nvar AbstractCrdt = class {\n  constructor() {\n    /** @internal */\n    this._parent = NoParent;\n  }\n  /** @internal */\n  _getParentKeyOrThrow() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        throw new Error(\"Parent key is missing\");\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  get _parentPos() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.pos;\n      case \"NoParent\":\n        throw new Error(\"Parent key is missing\");\n      case \"Orphaned\":\n        return this.parent.oldPos;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  get _pool() {\n    return this.__pool;\n  }\n  get roomId() {\n    return this.__pool ? this.__pool.roomId : null;\n  }\n  /** @internal */\n  get _id() {\n    return this.__id;\n  }\n  /** @internal */\n  get parent() {\n    return this._parent;\n  }\n  /** @internal */\n  get _parentKey() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        return null;\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  _apply(op, _isLocal) {\n    switch (op.type) {\n      case 5 /* DELETE_CRDT */: {\n        if (this.parent.type === \"HasParent\") {\n          return this.parent.node._detachChild(crdtAsLiveNode(this));\n        }\n        return { modified: false };\n      }\n    }\n    return { modified: false };\n  }\n  /** @internal */\n  _setParentLink(newParentNode, newParentKey) {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        if (this.parent.node !== newParentNode) {\n          throw new Error(\"Cannot set parent: node already has a parent\");\n        } else {\n          this._parent = HasParent(newParentNode, newParentKey);\n          return;\n        }\n      case \"Orphaned\":\n      case \"NoParent\": {\n        this._parent = HasParent(newParentNode, newParentKey);\n        return;\n      }\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  _attach(id, pool) {\n    if (this.__id || this.__pool) {\n      throw new Error(\"Cannot attach node: already attached\");\n    }\n    pool.addNode(id, crdtAsLiveNode(this));\n    this.__id = id;\n    this.__pool = pool;\n  }\n  /** @internal */\n  _detach() {\n    if (this.__pool && this.__id) {\n      this.__pool.deleteNode(this.__id);\n    }\n    switch (this.parent.type) {\n      case \"HasParent\": {\n        this._parent = Orphaned(this.parent.key, this.parent.pos);\n        break;\n      }\n      case \"NoParent\": {\n        this._parent = NoParent;\n        break;\n      }\n      case \"Orphaned\": {\n        break;\n      }\n      default:\n        assertNever(this.parent, \"Unknown state\");\n    }\n    this.__pool = void 0;\n  }\n  /**\n   * @internal\n   *\n   * Clear the Immutable cache, so that the next call to `.toImmutable()` will\n   * recompute the equivalent Immutable value again.  Call this after every\n   * mutation to the Live node.\n   */\n  invalidate() {\n    if (this._cachedImmutable !== void 0 || this._cachedTreeNode !== void 0) {\n      this._cachedImmutable = void 0;\n      this._cachedTreeNode = void 0;\n      if (this.parent.type === \"HasParent\") {\n        this.parent.node.invalidate();\n      }\n    }\n  }\n  /**\n   * @internal\n   *\n   * Return an snapshot of this Live tree for use in DevTools.\n   */\n  toTreeNode(key) {\n    if (this._cachedTreeNode === void 0 || this._cachedTreeNodeKey !== key) {\n      this._cachedTreeNodeKey = key;\n      this._cachedTreeNode = this._toTreeNode(key);\n    }\n    return this._cachedTreeNode;\n  }\n  /**\n   * Return an immutable snapshot of this Live node and its children.\n   */\n  toImmutable() {\n    if (this._cachedImmutable === void 0) {\n      this._cachedImmutable = this._toImmutable();\n    }\n    return this._cachedImmutable;\n  }\n};\n\n// src/protocol/SerializedCrdt.ts\nvar CrdtType = /* @__PURE__ */ ((CrdtType2) => {\n  CrdtType2[CrdtType2[\"OBJECT\"] = 0] = \"OBJECT\";\n  CrdtType2[CrdtType2[\"LIST\"] = 1] = \"LIST\";\n  CrdtType2[CrdtType2[\"MAP\"] = 2] = \"MAP\";\n  CrdtType2[CrdtType2[\"REGISTER\"] = 3] = \"REGISTER\";\n  return CrdtType2;\n})(CrdtType || {});\nfunction isRootCrdt(crdt) {\n  return crdt.type === 0 /* OBJECT */ && !isChildCrdt(crdt);\n}\nfunction isChildCrdt(crdt) {\n  return crdt.parentId !== void 0 && crdt.parentKey !== void 0;\n}\n\n// src/lib/nanoid.ts\nfunction nanoid(length = 7) {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./;[]~!@#$%&*()_+=-\";\n  const len = alphabet.length;\n  return Array.from(\n    { length },\n    () => alphabet.charAt(Math.floor(Math.random() * len))\n  ).join(\"\");\n}\n\n// src/crdts/LiveRegister.ts\nvar LiveRegister = class _LiveRegister extends AbstractCrdt {\n  constructor(data) {\n    super();\n    this._data = data;\n  }\n  get data() {\n    return this._data;\n  }\n  /** @internal */\n  static _deserialize([id, item], _parentToChildren, pool) {\n    const register = new _LiveRegister(item.data);\n    register._attach(id, pool);\n    return register;\n  }\n  /** @internal */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\n        \"Cannot serialize register if parentId or parentKey is undefined\"\n      );\n    }\n    return [\n      {\n        type: 8 /* CREATE_REGISTER */,\n        opId: pool?.generateOpId(),\n        id: this._id,\n        parentId,\n        parentKey,\n        data: this.data\n      }\n    ];\n  }\n  /** @internal */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveRegister if parent is missing\");\n    }\n    return {\n      type: 3 /* REGISTER */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key,\n      data: this.data\n    };\n  }\n  /** @internal */\n  _attachChild(_op) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @internal */\n  _detachChild(_crdt) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"Json\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: this._data\n    };\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._data;\n  }\n  clone() {\n    return deepClone(this.data);\n  }\n};\n\n// src/crdts/LiveList.ts\nfunction compareNodePosition(itemA, itemB) {\n  const posA = itemA._parentPos;\n  const posB = itemB._parentPos;\n  return posA === posB ? 0 : posA < posB ? -1 : 1;\n}\nvar LiveList = class _LiveList extends AbstractCrdt {\n  constructor(items) {\n    super();\n    this._items = [];\n    this._implicitlyDeletedItems = /* @__PURE__ */ new WeakSet();\n    this._unacknowledgedSets = /* @__PURE__ */ new Map();\n    let position = void 0;\n    for (const item of items) {\n      const newPosition = makePosition(position);\n      const node = lsonToLiveNode(item);\n      node._setParentLink(this, newPosition);\n      this._items.push(node);\n      position = newPosition;\n    }\n  }\n  /** @internal */\n  static _deserialize([id], parentToChildren, pool) {\n    const list = new _LiveList([]);\n    list._attach(id, pool);\n    const children = parentToChildren.get(id);\n    if (children === void 0) {\n      return list;\n    }\n    for (const [id2, crdt] of children) {\n      const child = deserialize([id2, crdt], parentToChildren, pool);\n      child._setParentLink(list, crdt.parentKey);\n      list._insertAndSort(child);\n    }\n    return list;\n  }\n  /**\n   * @internal\n   * This function assumes that the resulting ops will be sent to the server if they have an 'opId'\n   * so we mutate _unacknowledgedSets to avoid potential flickering\n   * https://github.com/liveblocks/liveblocks/pull/1177\n   *\n   * This is quite unintuitive and should disappear as soon as\n   * we introduce an explicit LiveList.Set operation\n   */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const ops = [];\n    const op = {\n      id: this._id,\n      opId: pool?.generateOpId(),\n      type: 2 /* CREATE_LIST */,\n      parentId,\n      parentKey\n    };\n    ops.push(op);\n    for (const item of this._items) {\n      const parentKey2 = item._getParentKeyOrThrow();\n      const childOps = HACK_addIntentAndDeletedIdToOperation(\n        item._toOps(this._id, parentKey2, pool),\n        void 0\n      );\n      const childOpId = childOps[0].opId;\n      if (childOpId !== void 0) {\n        this._unacknowledgedSets.set(parentKey2, childOpId);\n      }\n      ops.push(...childOps);\n    }\n    return ops;\n  }\n  /**\n   * @internal\n   *\n   * Adds a new item into the sorted list, in the correct position.\n   */\n  _insertAndSort(item) {\n    this._items.push(item);\n    this._sortItems();\n  }\n  /** @internal */\n  _sortItems() {\n    this._items.sort(compareNodePosition);\n    this.invalidate();\n  }\n  /** @internal */\n  _indexOfPosition(position) {\n    return this._items.findIndex(\n      (item) => item._getParentKeyOrThrow() === position\n    );\n  }\n  /** @internal */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const item of this._items) {\n      item._attach(pool.generateId(), pool);\n    }\n  }\n  /** @internal */\n  _detach() {\n    super._detach();\n    for (const item of this._items) {\n      item._detach();\n    }\n  }\n  /** @internal */\n  _applySetRemote(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    child._attach(id, this._pool);\n    child._setParentLink(this, key);\n    const deletedId = op.deletedId;\n    const indexOfItemWithSamePosition = this._indexOfPosition(key);\n    if (indexOfItemWithSamePosition !== -1) {\n      const itemWithSamePosition = this._items[indexOfItemWithSamePosition];\n      if (itemWithSamePosition._id === deletedId) {\n        itemWithSamePosition._detach();\n        this._items[indexOfItemWithSamePosition] = child;\n        return {\n          modified: makeUpdate(this, [\n            setDelta(indexOfItemWithSamePosition, child)\n          ]),\n          reverse: []\n        };\n      } else {\n        this._implicitlyDeletedItems.add(itemWithSamePosition);\n        this._items[indexOfItemWithSamePosition] = child;\n        const delta = [\n          setDelta(indexOfItemWithSamePosition, child)\n        ];\n        const deleteDelta2 = this._detachItemAssociatedToSetOperation(\n          op.deletedId\n        );\n        if (deleteDelta2) {\n          delta.push(deleteDelta2);\n        }\n        return {\n          modified: makeUpdate(this, delta),\n          reverse: []\n        };\n      }\n    } else {\n      const updates = [];\n      const deleteDelta2 = this._detachItemAssociatedToSetOperation(\n        op.deletedId\n      );\n      if (deleteDelta2) {\n        updates.push(deleteDelta2);\n      }\n      this._insertAndSort(child);\n      updates.push(insertDelta(this._indexOfPosition(key), child));\n      return {\n        reverse: [],\n        modified: makeUpdate(this, updates)\n      };\n    }\n  }\n  /** @internal */\n  _applySetAck(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const delta = [];\n    const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n    if (deletedDelta) {\n      delta.push(deletedDelta);\n    }\n    const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);\n    if (unacknowledgedOpId !== void 0) {\n      if (unacknowledgedOpId !== op.opId) {\n        return delta.length === 0 ? { modified: false } : { modified: makeUpdate(this, delta), reverse: [] };\n      } else {\n        this._unacknowledgedSets.delete(op.parentKey);\n      }\n    }\n    const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey);\n    const existingItem = this._items.find((item) => item._id === op.id);\n    if (existingItem !== void 0) {\n      if (existingItem._parentKey === op.parentKey) {\n        return {\n          modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n          reverse: []\n        };\n      }\n      if (indexOfItemWithSamePosition !== -1) {\n        this._implicitlyDeletedItems.add(\n          this._items[indexOfItemWithSamePosition]\n        );\n        this._items.splice(indexOfItemWithSamePosition, 1);\n        delta.push(deleteDelta(indexOfItemWithSamePosition));\n      }\n      const previousIndex = this._items.indexOf(existingItem);\n      existingItem._setParentLink(this, op.parentKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(existingItem);\n      if (newIndex !== previousIndex) {\n        delta.push(moveDelta(previousIndex, newIndex, existingItem));\n      }\n      return {\n        modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n        reverse: []\n      };\n    } else {\n      const orphan = this._pool.getNode(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, op.parentKey);\n        this._implicitlyDeletedItems.delete(orphan);\n        this._insertAndSort(orphan);\n        const recreatedItemIndex = this._items.indexOf(orphan);\n        return {\n          modified: makeUpdate(this, [\n            // If there is an item at this position, update is a set, else it's an insert\n            indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),\n            ...delta\n          ]),\n          reverse: []\n        };\n      } else {\n        if (indexOfItemWithSamePosition !== -1) {\n          this._items.splice(indexOfItemWithSamePosition, 1);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(\n          op,\n          op.parentKey\n        );\n        return {\n          modified: makeUpdate(this, [\n            // If there is an item at this position, update is a set, else it's an insert\n            indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),\n            ...delta\n          ]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /**\n   * Returns the update delta of the deletion or null\n   * @internal\n   */\n  _detachItemAssociatedToSetOperation(deletedId) {\n    if (deletedId === void 0 || this._pool === void 0) {\n      return null;\n    }\n    const deletedItem = this._pool.getNode(deletedId);\n    if (deletedItem === void 0) {\n      return null;\n    }\n    const result = this._detachChild(deletedItem);\n    if (result.modified === false) {\n      return null;\n    }\n    return result.modified.updates[0];\n  }\n  /** @internal */\n  _applyRemoteInsert(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const key = asPos(op.parentKey);\n    const existingItemIndex = this._indexOfPosition(key);\n    if (existingItemIndex !== -1) {\n      this._shiftItemPosition(existingItemIndex, key);\n    }\n    const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n    return {\n      modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n      reverse: []\n    };\n  }\n  /** @internal */\n  _applyInsertAck(op) {\n    const existingItem = this._items.find((item) => item._id === op.id);\n    const key = asPos(op.parentKey);\n    const itemIndexAtPosition = this._indexOfPosition(key);\n    if (existingItem) {\n      if (existingItem._parentKey === key) {\n        return {\n          modified: false\n        };\n      } else {\n        const oldPositionIndex = this._items.indexOf(existingItem);\n        if (itemIndexAtPosition !== -1) {\n          this._shiftItemPosition(itemIndexAtPosition, key);\n        }\n        existingItem._setParentLink(this, key);\n        this._sortItems();\n        const newIndex = this._indexOfPosition(key);\n        if (newIndex === oldPositionIndex) {\n          return { modified: false };\n        }\n        return {\n          modified: makeUpdate(this, [\n            moveDelta(oldPositionIndex, newIndex, existingItem)\n          ]),\n          reverse: []\n        };\n      }\n    } else {\n      const orphan = nn(this._pool).getNode(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, key);\n        this._implicitlyDeletedItems.delete(orphan);\n        this._insertAndSort(orphan);\n        const newIndex = this._indexOfPosition(key);\n        return {\n          modified: makeUpdate(this, [insertDelta(newIndex, orphan)]),\n          reverse: []\n        };\n      } else {\n        if (itemIndexAtPosition !== -1) {\n          this._shiftItemPosition(itemIndexAtPosition, key);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n        return {\n          modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /** @internal */\n  _applyInsertUndoRedo(op) {\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    if (this._pool?.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    child._attach(id, nn(this._pool));\n    child._setParentLink(this, key);\n    const existingItemIndex = this._indexOfPosition(key);\n    let newKey = key;\n    if (existingItemIndex !== -1) {\n      const before2 = this._items[existingItemIndex]?._parentPos;\n      const after2 = this._items[existingItemIndex + 1]?._parentPos;\n      newKey = makePosition(before2, after2);\n      child._setParentLink(this, newKey);\n    }\n    this._insertAndSort(child);\n    const newIndex = this._indexOfPosition(newKey);\n    return {\n      modified: makeUpdate(this, [insertDelta(newIndex, child)]),\n      reverse: [{ type: 5 /* DELETE_CRDT */, id }]\n    };\n  }\n  /** @internal */\n  _applySetUndoRedo(op) {\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    if (this._pool?.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    this._unacknowledgedSets.set(key, nn(op.opId));\n    const indexOfItemWithSameKey = this._indexOfPosition(key);\n    child._attach(id, nn(this._pool));\n    child._setParentLink(this, key);\n    const newKey = key;\n    if (indexOfItemWithSameKey !== -1) {\n      const existingItem = this._items[indexOfItemWithSameKey];\n      existingItem._detach();\n      this._items[indexOfItemWithSameKey] = child;\n      const reverse = HACK_addIntentAndDeletedIdToOperation(\n        existingItem._toOps(nn(this._id), key, this._pool),\n        op.id\n      );\n      const delta = [setDelta(indexOfItemWithSameKey, child)];\n      const deletedDelta = this._detachItemAssociatedToSetOperation(\n        op.deletedId\n      );\n      if (deletedDelta) {\n        delta.push(deletedDelta);\n      }\n      return {\n        modified: makeUpdate(this, delta),\n        reverse\n      };\n    } else {\n      this._insertAndSort(child);\n      this._detachItemAssociatedToSetOperation(op.deletedId);\n      const newIndex = this._indexOfPosition(newKey);\n      return {\n        reverse: [{ type: 5 /* DELETE_CRDT */, id }],\n        modified: makeUpdate(this, [insertDelta(newIndex, child)])\n      };\n    }\n  }\n  /** @internal */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    let result;\n    if (op.intent === \"set\") {\n      if (source === 1 /* REMOTE */) {\n        result = this._applySetRemote(op);\n      } else if (source === 2 /* ACK */) {\n        result = this._applySetAck(op);\n      } else {\n        result = this._applySetUndoRedo(op);\n      }\n    } else {\n      if (source === 1 /* REMOTE */) {\n        result = this._applyRemoteInsert(op);\n      } else if (source === 2 /* ACK */) {\n        result = this._applyInsertAck(op);\n      } else {\n        result = this._applyInsertUndoRedo(op);\n      }\n    }\n    if (result.modified !== false) {\n      this.invalidate();\n    }\n    return result;\n  }\n  /** @internal */\n  _detachChild(child) {\n    if (child) {\n      const parentKey = nn(child._parentKey);\n      const reverse = child._toOps(nn(this._id), parentKey, this._pool);\n      const indexToDelete = this._items.indexOf(child);\n      if (indexToDelete === -1) {\n        return {\n          modified: false\n        };\n      }\n      this._items.splice(indexToDelete, 1);\n      this.invalidate();\n      child._detach();\n      return {\n        modified: makeUpdate(this, [deleteDelta(indexToDelete)]),\n        reverse\n      };\n    }\n    return { modified: false };\n  }\n  /** @internal */\n  _applySetChildKeyRemote(newKey, child) {\n    if (this._implicitlyDeletedItems.has(child)) {\n      this._implicitlyDeletedItems.delete(child);\n      child._setParentLink(this, newKey);\n      this._insertAndSort(child);\n      const newIndex = this._items.indexOf(child);\n      return {\n        modified: makeUpdate(this, [insertDelta(newIndex, child)]),\n        reverse: []\n      };\n    }\n    const previousKey = child._parentKey;\n    if (newKey === previousKey) {\n      return {\n        modified: false\n      };\n    }\n    const existingItemIndex = this._indexOfPosition(newKey);\n    if (existingItemIndex === -1) {\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (newIndex === previousIndex) {\n        return {\n          modified: false\n        };\n      }\n      return {\n        modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n        reverse: []\n      };\n    } else {\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n      );\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (newIndex === previousIndex) {\n        return {\n          modified: false\n        };\n      }\n      return {\n        modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n        reverse: []\n      };\n    }\n  }\n  /** @internal */\n  _applySetChildKeyAck(newKey, child) {\n    const previousKey = nn(child._parentKey);\n    if (this._implicitlyDeletedItems.has(child)) {\n      const existingItemIndex = this._indexOfPosition(newKey);\n      this._implicitlyDeletedItems.delete(child);\n      if (existingItemIndex !== -1) {\n        this._items[existingItemIndex]._setParentLink(\n          this,\n          makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n        );\n      }\n      child._setParentLink(this, newKey);\n      this._insertAndSort(child);\n      return {\n        modified: false\n      };\n    } else {\n      if (newKey === previousKey) {\n        return {\n          modified: false\n        };\n      }\n      const previousIndex = this._items.indexOf(child);\n      const existingItemIndex = this._indexOfPosition(newKey);\n      if (existingItemIndex !== -1) {\n        this._items[existingItemIndex]._setParentLink(\n          this,\n          makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n        );\n      }\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (previousIndex === newIndex) {\n        return {\n          modified: false\n        };\n      } else {\n        return {\n          modified: makeUpdate(this, [\n            moveDelta(previousIndex, newIndex, child)\n          ]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /** @internal */\n  _applySetChildKeyUndoRedo(newKey, child) {\n    const previousKey = nn(child._parentKey);\n    const previousIndex = this._items.indexOf(child);\n    const existingItemIndex = this._indexOfPosition(newKey);\n    if (existingItemIndex !== -1) {\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n      );\n    }\n    child._setParentLink(this, newKey);\n    this._sortItems();\n    const newIndex = this._items.indexOf(child);\n    if (previousIndex === newIndex) {\n      return {\n        modified: false\n      };\n    }\n    return {\n      modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n      reverse: [\n        {\n          type: 1 /* SET_PARENT_KEY */,\n          id: nn(child._id),\n          parentKey: previousKey\n        }\n      ]\n    };\n  }\n  /** @internal */\n  _setChildKey(newKey, child, source) {\n    if (source === 1 /* REMOTE */) {\n      return this._applySetChildKeyRemote(newKey, child);\n    } else if (source === 2 /* ACK */) {\n      return this._applySetChildKeyAck(newKey, child);\n    } else {\n      return this._applySetChildKeyUndoRedo(newKey, child);\n    }\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n  /** @internal */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveList if parent is missing\");\n    }\n    return {\n      type: 1 /* LIST */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key\n    };\n  }\n  /**\n   * Returns the number of elements.\n   */\n  get length() {\n    return this._items.length;\n  }\n  /**\n   * Adds one element to the end of the LiveList.\n   * @param element The element to add to the end of the LiveList.\n   */\n  push(element) {\n    this._pool?.assertStorageIsWritable();\n    return this.insert(element, this.length);\n  }\n  /**\n   * Inserts one element at a specified index.\n   * @param element The element to insert.\n   * @param index The index at which you want to insert the element.\n   */\n  insert(element, index) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index > this._items.length) {\n      throw new Error(\n        `Cannot insert list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length}`\n      );\n    }\n    const before2 = this._items[index - 1] ? this._items[index - 1]._parentPos : void 0;\n    const after2 = this._items[index] ? this._items[index]._parentPos : void 0;\n    const position = makePosition(before2, after2);\n    const value = lsonToLiveNode(element);\n    value._setParentLink(this, position);\n    this._insertAndSort(value);\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      value._attach(id, this._pool);\n      this._pool.dispatch(\n        value._toOps(this._id, position, this._pool),\n        [{ type: 5 /* DELETE_CRDT */, id }],\n        /* @__PURE__ */ new Map([\n          [this._id, makeUpdate(this, [insertDelta(index, value)])]\n        ])\n      );\n    }\n  }\n  /**\n   * Move one element from one index to another.\n   * @param index The index of the element to move\n   * @param targetIndex The index where the element should be after moving.\n   */\n  move(index, targetIndex) {\n    this._pool?.assertStorageIsWritable();\n    if (targetIndex < 0) {\n      throw new Error(\"targetIndex cannot be less than 0\");\n    }\n    if (targetIndex >= this._items.length) {\n      throw new Error(\n        \"targetIndex cannot be greater or equal than the list length\"\n      );\n    }\n    if (index < 0) {\n      throw new Error(\"index cannot be less than 0\");\n    }\n    if (index >= this._items.length) {\n      throw new Error(\"index cannot be greater or equal than the list length\");\n    }\n    let beforePosition = null;\n    let afterPosition = null;\n    if (index < targetIndex) {\n      afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._parentPos;\n      beforePosition = this._items[targetIndex]._parentPos;\n    } else {\n      afterPosition = this._items[targetIndex]._parentPos;\n      beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._parentPos;\n    }\n    const position = makePosition(beforePosition, afterPosition);\n    const item = this._items[index];\n    const previousPosition = item._getParentKeyOrThrow();\n    item._setParentLink(this, position);\n    this._sortItems();\n    if (this._pool && this._id) {\n      const storageUpdates = /* @__PURE__ */ new Map([\n        [this._id, makeUpdate(this, [moveDelta(index, targetIndex, item)])]\n      ]);\n      this._pool.dispatch(\n        [\n          {\n            type: 1 /* SET_PARENT_KEY */,\n            id: nn(item._id),\n            opId: this._pool.generateOpId(),\n            parentKey: position\n          }\n        ],\n        [\n          {\n            type: 1 /* SET_PARENT_KEY */,\n            id: nn(item._id),\n            parentKey: previousPosition\n          }\n        ],\n        storageUpdates\n      );\n    }\n  }\n  /**\n   * Deletes an element at the specified index\n   * @param index The index of the element to delete\n   */\n  delete(index) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index >= this._items.length) {\n      throw new Error(\n        `Cannot delete list item at index \"${index}\". index should be between 0 and ${this._items.length - 1}`\n      );\n    }\n    const item = this._items[index];\n    item._detach();\n    this._items.splice(index, 1);\n    this.invalidate();\n    if (this._pool) {\n      const childRecordId = item._id;\n      if (childRecordId) {\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(\n          nn(this._id),\n          makeUpdate(this, [deleteDelta(index)])\n        );\n        this._pool.dispatch(\n          [\n            {\n              id: childRecordId,\n              opId: this._pool.generateOpId(),\n              type: 5 /* DELETE_CRDT */\n            }\n          ],\n          item._toOps(nn(this._id), item._getParentKeyOrThrow()),\n          storageUpdates\n        );\n      }\n    }\n  }\n  clear() {\n    this._pool?.assertStorageIsWritable();\n    if (this._pool) {\n      const ops = [];\n      const reverseOps = [];\n      const updateDelta = [];\n      for (const item of this._items) {\n        item._detach();\n        const childId = item._id;\n        if (childId) {\n          ops.push({\n            type: 5 /* DELETE_CRDT */,\n            id: childId,\n            opId: this._pool.generateOpId()\n          });\n          reverseOps.push(\n            ...item._toOps(nn(this._id), item._getParentKeyOrThrow())\n          );\n          updateDelta.push(deleteDelta(0));\n        }\n      }\n      this._items = [];\n      this.invalidate();\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta));\n      this._pool.dispatch(ops, reverseOps, storageUpdates);\n    } else {\n      for (const item of this._items) {\n        item._detach();\n      }\n      this._items = [];\n      this.invalidate();\n    }\n  }\n  set(index, item) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index >= this._items.length) {\n      throw new Error(\n        `Cannot set list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length - 1}`\n      );\n    }\n    const existingItem = this._items[index];\n    const position = existingItem._getParentKeyOrThrow();\n    const existingId = existingItem._id;\n    existingItem._detach();\n    const value = lsonToLiveNode(item);\n    value._setParentLink(this, position);\n    this._items[index] = value;\n    this.invalidate();\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      value._attach(id, this._pool);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(this._id, makeUpdate(this, [setDelta(index, value)]));\n      const ops = HACK_addIntentAndDeletedIdToOperation(\n        value._toOps(this._id, position, this._pool),\n        existingId\n      );\n      this._unacknowledgedSets.set(position, nn(ops[0].opId));\n      const reverseOps = HACK_addIntentAndDeletedIdToOperation(\n        existingItem._toOps(this._id, position, void 0),\n        id\n      );\n      this._pool.dispatch(ops, reverseOps, storageUpdates);\n    }\n  }\n  /**\n   * Returns an Array of all the elements in the LiveList.\n   */\n  toArray() {\n    return this._items.map(\n      (entry) => liveNodeToLson(entry)\n      //                               ^^^^^^^^\n      //                               FIXME! This isn't safe.\n    );\n  }\n  /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   * @param predicate Function to test for each element, taking two arguments (the element and its index).\n   * @returns true if the predicate function returns a truthy value for every element. Otherwise, false.\n   */\n  every(predicate) {\n    return this.toArray().every(predicate);\n  }\n  /**\n   * Creates an array with all elements that pass the test implemented by the provided function.\n   * @param predicate Function to test each element of the LiveList. Return a value that coerces to true to keep the element, or to false otherwise.\n   * @returns An array with the elements that pass the test.\n   */\n  filter(predicate) {\n    return this.toArray().filter(predicate);\n  }\n  /**\n   * Returns the first element that satisfies the provided testing function.\n   * @param predicate Function to execute on each value.\n   * @returns The value of the first element in the LiveList that satisfies the provided testing function. Otherwise, undefined is returned.\n   */\n  find(predicate) {\n    return this.toArray().find(predicate);\n  }\n  /**\n   * Returns the index of the first element in the LiveList that satisfies the provided testing function.\n   * @param predicate Function to execute on each value until the function returns true, indicating that the satisfying element was found.\n   * @returns The index of the first element in the LiveList that passes the test. Otherwise, -1.\n   */\n  findIndex(predicate) {\n    return this.toArray().findIndex(predicate);\n  }\n  /**\n   * Executes a provided function once for each element.\n   * @param callbackfn Function to execute on each element.\n   */\n  forEach(callbackfn) {\n    return this.toArray().forEach(callbackfn);\n  }\n  /**\n   * Get the element at the specified index.\n   * @param index The index on the element to get.\n   * @returns The element at the specified index or undefined.\n   */\n  get(index) {\n    if (index < 0 || index >= this._items.length) {\n      return void 0;\n    }\n    return liveNodeToLson(this._items[index]);\n  }\n  /**\n   * Returns the first index at which a given element can be found in the LiveList, or -1 if it is not present.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index to start the search at.\n   * @returns The first index of the element in the LiveList; -1 if not found.\n   */\n  indexOf(searchElement, fromIndex) {\n    return this.toArray().indexOf(searchElement, fromIndex);\n  }\n  /**\n   * Returns the last index at which a given element can be found in the LiveList, or -1 if it is not present. The LiveLsit is searched backwards, starting at fromIndex.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index at which to start searching backwards.\n   * @returns\n   */\n  lastIndexOf(searchElement, fromIndex) {\n    return this.toArray().lastIndexOf(searchElement, fromIndex);\n  }\n  /**\n   * Creates an array populated with the results of calling a provided function on every element.\n   * @param callback Function that is called for every element.\n   * @returns An array with each element being the result of the callback function.\n   */\n  map(callback) {\n    return this._items.map(\n      (entry, i) => callback(\n        liveNodeToLson(entry),\n        //                    ^^^^^^^^\n        //                    FIXME! This isn't safe.\n        i\n      )\n    );\n  }\n  /**\n   * Tests whether at least one element in the LiveList passes the test implemented by the provided function.\n   * @param predicate Function to test for each element.\n   * @returns true if the callback function returns a truthy value for at least one element. Otherwise, false.\n   */\n  some(predicate) {\n    return this.toArray().some(predicate);\n  }\n  [Symbol.iterator]() {\n    return new LiveListIterator(this._items);\n  }\n  /** @internal */\n  _createAttachItemAndSort(op, key) {\n    const newItem = creationOpToLiveNode(op);\n    newItem._attach(op.id, nn(this._pool));\n    newItem._setParentLink(this, key);\n    this._insertAndSort(newItem);\n    const newIndex = this._indexOfPosition(key);\n    return { newItem, newIndex };\n  }\n  /** @internal */\n  _shiftItemPosition(index, key) {\n    const shiftedPosition = makePosition(\n      key,\n      this._items.length > index + 1 ? this._items[index + 1]?._parentPos : void 0\n    );\n    this._items[index]._setParentLink(this, shiftedPosition);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"LiveList\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: this._items.map(\n        (item, index) => item.toTreeNode(index.toString())\n      )\n    };\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = this._items.map((node) => node.toImmutable());\n    return  false ? 0 : Object.freeze(result);\n  }\n  clone() {\n    return new _LiveList(this._items.map((item) => item.clone()));\n  }\n};\nvar LiveListIterator = class {\n  constructor(items) {\n    this._innerIterator = items[Symbol.iterator]();\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n  next() {\n    const result = this._innerIterator.next();\n    if (result.done) {\n      return {\n        done: true,\n        value: void 0\n      };\n    }\n    const value = liveNodeToLson(result.value);\n    return { value };\n  }\n};\nfunction makeUpdate(liveList, deltaUpdates) {\n  return {\n    node: liveList,\n    type: \"LiveList\",\n    updates: deltaUpdates\n  };\n}\nfunction setDelta(index, item) {\n  return {\n    index,\n    type: \"set\",\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction deleteDelta(index) {\n  return {\n    index,\n    type: \"delete\"\n  };\n}\nfunction insertDelta(index, item) {\n  return {\n    index,\n    type: \"insert\",\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction moveDelta(previousIndex, index, item) {\n  return {\n    index,\n    type: \"move\",\n    previousIndex,\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction HACK_addIntentAndDeletedIdToOperation(ops, deletedId) {\n  return ops.map((op, index) => {\n    if (index === 0) {\n      const firstOp = op;\n      return {\n        ...firstOp,\n        intent: \"set\",\n        deletedId\n      };\n    } else {\n      return op;\n    }\n  });\n}\n\n// src/lib/freeze.ts\nvar freeze =  false ? (\n  /* istanbul ignore next */\n  0\n) : Object.freeze;\n\n// src/crdts/LiveMap.ts\nvar LiveMap = class _LiveMap extends AbstractCrdt {\n  constructor(entries2) {\n    super();\n    this.unacknowledgedSet = /* @__PURE__ */ new Map();\n    if (entries2) {\n      const mappedEntries = [];\n      for (const [key, value] of entries2) {\n        const node = lsonToLiveNode(value);\n        node._setParentLink(this, key);\n        mappedEntries.push([key, node]);\n      }\n      this._map = new Map(mappedEntries);\n    } else {\n      this._map = /* @__PURE__ */ new Map();\n    }\n  }\n  /**\n   * @internal\n   */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const ops = [];\n    const op = {\n      id: this._id,\n      opId: pool?.generateOpId(),\n      type: 7 /* CREATE_MAP */,\n      parentId,\n      parentKey\n    };\n    ops.push(op);\n    for (const [key, value] of this._map) {\n      ops.push(...value._toOps(this._id, key, pool));\n    }\n    return ops;\n  }\n  /**\n   * @internal\n   */\n  static _deserialize([id, _item], parentToChildren, pool) {\n    const map = new _LiveMap();\n    map._attach(id, pool);\n    const children = parentToChildren.get(id);\n    if (children === void 0) {\n      return map;\n    }\n    for (const [id2, crdt] of children) {\n      const child = deserialize([id2, crdt], parentToChildren, pool);\n      child._setParentLink(map, crdt.parentKey);\n      map._map.set(crdt.parentKey, child);\n      map.invalidate();\n    }\n    return map;\n  }\n  /**\n   * @internal\n   */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const [_key, value] of this._map) {\n      if (isLiveNode(value)) {\n        value._attach(pool.generateId(), pool);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, parentKey, opId } = op;\n    const key = parentKey;\n    const child = creationOpToLiveNode(op);\n    if (this._pool.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    if (source === 2 /* ACK */) {\n      const lastUpdateOpId = this.unacknowledgedSet.get(key);\n      if (lastUpdateOpId === opId) {\n        this.unacknowledgedSet.delete(key);\n        return { modified: false };\n      } else if (lastUpdateOpId !== void 0) {\n        return { modified: false };\n      }\n    } else if (source === 1 /* REMOTE */) {\n      this.unacknowledgedSet.delete(key);\n    }\n    const previousValue = this._map.get(key);\n    let reverse;\n    if (previousValue) {\n      const thisId = nn(this._id);\n      reverse = previousValue._toOps(thisId, key);\n      previousValue._detach();\n    } else {\n      reverse = [{ type: 5 /* DELETE_CRDT */, id }];\n    }\n    child._setParentLink(this, key);\n    child._attach(id, this._pool);\n    this._map.set(key, child);\n    this.invalidate();\n    return {\n      modified: {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"update\" } }\n      },\n      reverse\n    };\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    super._detach();\n    for (const item of this._map.values()) {\n      item._detach();\n    }\n  }\n  /**\n   * @internal\n   */\n  _detachChild(child) {\n    const id = nn(this._id);\n    const parentKey = nn(child._parentKey);\n    const reverse = child._toOps(id, parentKey, this._pool);\n    for (const [key, value] of this._map) {\n      if (value === child) {\n        this._map.delete(key);\n        this.invalidate();\n      }\n    }\n    child._detach();\n    const storageUpdate = {\n      node: this,\n      type: \"LiveMap\",\n      updates: { [parentKey]: { type: \"delete\" } }\n    };\n    return { modified: storageUpdate, reverse };\n  }\n  /**\n   * @internal\n   */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveMap if parent is missing\");\n    }\n    return {\n      type: 2 /* MAP */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key\n    };\n  }\n  /**\n   * Returns a specified element from the LiveMap.\n   * @param key The key of the element to return.\n   * @returns The element associated with the specified key, or undefined if the key can't be found in the LiveMap.\n   */\n  get(key) {\n    const value = this._map.get(key);\n    if (value === void 0) {\n      return void 0;\n    }\n    return liveNodeToLson(value);\n  }\n  /**\n   * Adds or updates an element with a specified key and a value.\n   * @param key The key of the element to add. Should be a string.\n   * @param value The value of the element to add. Should be serializable to JSON.\n   */\n  set(key, value) {\n    this._pool?.assertStorageIsWritable();\n    const oldValue = this._map.get(key);\n    if (oldValue) {\n      oldValue._detach();\n    }\n    const item = lsonToLiveNode(value);\n    item._setParentLink(this, key);\n    this._map.set(key, item);\n    this.invalidate();\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      item._attach(id, this._pool);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(this._id, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"update\" } }\n      });\n      const ops = item._toOps(this._id, key, this._pool);\n      this.unacknowledgedSet.set(key, nn(ops[0].opId));\n      this._pool.dispatch(\n        item._toOps(this._id, key, this._pool),\n        oldValue ? oldValue._toOps(this._id, key) : [{ type: 5 /* DELETE_CRDT */, id }],\n        storageUpdates\n      );\n    }\n  }\n  /**\n   * Returns the number of elements in the LiveMap.\n   */\n  get size() {\n    return this._map.size;\n  }\n  /**\n   * Returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key The key of the element to test for presence.\n   */\n  has(key) {\n    return this._map.has(key);\n  }\n  /**\n   * Removes the specified element by key.\n   * @param key The key of the element to remove.\n   * @returns true if an element existed and has been removed, or false if the element does not exist.\n   */\n  delete(key) {\n    this._pool?.assertStorageIsWritable();\n    const item = this._map.get(key);\n    if (item === void 0) {\n      return false;\n    }\n    item._detach();\n    this._map.delete(key);\n    this.invalidate();\n    if (this._pool && item._id) {\n      const thisId = nn(this._id);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(thisId, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"delete\" } }\n      });\n      this._pool.dispatch(\n        [\n          {\n            type: 5 /* DELETE_CRDT */,\n            id: item._id,\n            opId: this._pool.generateOpId()\n          }\n        ],\n        item._toOps(thisId, key),\n        storageUpdates\n      );\n    }\n    return true;\n  }\n  /**\n   * Returns a new Iterator object that contains the [key, value] pairs for each element.\n   */\n  entries() {\n    const innerIterator = this._map.entries();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) {\n          return {\n            done: true,\n            value: void 0\n          };\n        }\n        const entry = iteratorValue.value;\n        const key = entry[0];\n        const value = liveNodeToLson(iteratorValue.value[1]);\n        return {\n          value: [key, value]\n        };\n      }\n    };\n  }\n  /**\n   * Same function object as the initial value of the entries method.\n   */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Returns a new Iterator object that contains the keys for each element.\n   */\n  keys() {\n    return this._map.keys();\n  }\n  /**\n   * Returns a new Iterator object that contains the values for each element.\n   */\n  values() {\n    const innerIterator = this._map.values();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) {\n          return {\n            done: true,\n            value: void 0\n          };\n        }\n        const value = liveNodeToLson(iteratorValue.value);\n        return { value };\n      }\n    };\n  }\n  /**\n   * Executes a provided function once per each key/value pair in the Map object, in insertion order.\n   * @param callback Function to execute for each entry in the map.\n   */\n  forEach(callback) {\n    for (const entry of this) {\n      callback(entry[1], entry[0], this);\n    }\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"LiveMap\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: Array.from(this._map.entries()).map(\n        ([key2, val]) => val.toTreeNode(key2)\n      )\n    };\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = /* @__PURE__ */ new Map();\n    for (const [key, value] of this._map) {\n      result.set(key, value.toImmutable());\n    }\n    return freeze(result);\n  }\n  clone() {\n    return new _LiveMap(\n      Array.from(this._map).map(([key, node]) => [key, node.clone()])\n    );\n  }\n};\n\n// src/crdts/LiveObject.ts\nvar LiveObject = class _LiveObject extends AbstractCrdt {\n  /** @internal */\n  static _buildRootAndParentToChildren(items) {\n    const parentToChildren = /* @__PURE__ */ new Map();\n    let root = null;\n    for (const [id, crdt] of items) {\n      if (isRootCrdt(crdt)) {\n        root = [id, crdt];\n      } else {\n        const tuple = [id, crdt];\n        const children = parentToChildren.get(crdt.parentId);\n        if (children !== void 0) {\n          children.push(tuple);\n        } else {\n          parentToChildren.set(crdt.parentId, [tuple]);\n        }\n      }\n    }\n    if (root === null) {\n      throw new Error(\"Root can't be null\");\n    }\n    return [root, parentToChildren];\n  }\n  /** @internal */\n  static _fromItems(items, pool) {\n    const [root, parentToChildren] = _LiveObject._buildRootAndParentToChildren(items);\n    return _LiveObject._deserialize(\n      root,\n      parentToChildren,\n      pool\n    );\n  }\n  constructor(obj = {}) {\n    super();\n    this._propToLastUpdate = /* @__PURE__ */ new Map();\n    const o = compactObject(obj);\n    for (const key of Object.keys(o)) {\n      const value = o[key];\n      if (isLiveNode(value)) {\n        value._setParentLink(this, key);\n      }\n    }\n    this._map = new Map(Object.entries(o));\n  }\n  /** @internal */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const opId = pool?.generateOpId();\n    const ops = [];\n    const op = {\n      type: 4 /* CREATE_OBJECT */,\n      id: this._id,\n      opId,\n      parentId,\n      parentKey,\n      data: {}\n    };\n    ops.push(op);\n    for (const [key, value] of this._map) {\n      if (isLiveNode(value)) {\n        ops.push(...value._toOps(this._id, key, pool));\n      } else {\n        op.data[key] = value;\n      }\n    }\n    return ops;\n  }\n  /** @internal */\n  static _deserialize([id, item], parentToChildren, pool) {\n    const liveObj = new _LiveObject(item.data);\n    liveObj._attach(id, pool);\n    return this._deserializeChildren(liveObj, parentToChildren, pool);\n  }\n  /** @internal */\n  static _deserializeChildren(liveObj, parentToChildren, pool) {\n    const children = parentToChildren.get(nn(liveObj._id));\n    if (children === void 0) {\n      return liveObj;\n    }\n    for (const [id, crdt] of children) {\n      const child = deserializeToLson([id, crdt], parentToChildren, pool);\n      if (isLiveStructure(child)) {\n        child._setParentLink(liveObj, crdt.parentKey);\n      }\n      liveObj._map.set(crdt.parentKey, child);\n      liveObj.invalidate();\n    }\n    return liveObj;\n  }\n  /** @internal */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const [_key, value] of this._map) {\n      if (isLiveNode(value)) {\n        value._attach(pool.generateId(), pool);\n      }\n    }\n  }\n  /** @internal */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, opId, parentKey: key } = op;\n    const child = creationOpToLson(op);\n    if (this._pool.getNode(id) !== void 0) {\n      if (this._propToLastUpdate.get(key) === opId) {\n        this._propToLastUpdate.delete(key);\n      }\n      return { modified: false };\n    }\n    if (source === 0 /* UNDOREDO_RECONNECT */) {\n      this._propToLastUpdate.set(key, nn(opId));\n    } else if (this._propToLastUpdate.get(key) === void 0) {\n    } else if (this._propToLastUpdate.get(key) === opId) {\n      this._propToLastUpdate.delete(key);\n      return { modified: false };\n    } else {\n      return { modified: false };\n    }\n    const thisId = nn(this._id);\n    const previousValue = this._map.get(key);\n    let reverse;\n    if (isLiveNode(previousValue)) {\n      reverse = previousValue._toOps(thisId, key);\n      previousValue._detach();\n    } else if (previousValue === void 0) {\n      reverse = [{ type: 6 /* DELETE_OBJECT_KEY */, id: thisId, key }];\n    } else {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          id: thisId,\n          data: { [key]: previousValue }\n        }\n      ];\n    }\n    this._map.set(key, child);\n    this.invalidate();\n    if (isLiveStructure(child)) {\n      child._setParentLink(this, key);\n      child._attach(id, this._pool);\n    }\n    return {\n      reverse,\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: { [key]: { type: \"update\" } }\n      }\n    };\n  }\n  /** @internal */\n  _detachChild(child) {\n    if (child) {\n      const id = nn(this._id);\n      const parentKey = nn(child._parentKey);\n      const reverse = child._toOps(id, parentKey, this._pool);\n      for (const [key, value] of this._map) {\n        if (value === child) {\n          this._map.delete(key);\n          this.invalidate();\n        }\n      }\n      child._detach();\n      const storageUpdate = {\n        node: this,\n        type: \"LiveObject\",\n        updates: {\n          [parentKey]: { type: \"delete\" }\n        }\n      };\n      return { modified: storageUpdate, reverse };\n    }\n    return { modified: false };\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    super._detach();\n    for (const value of this._map.values()) {\n      if (isLiveNode(value)) {\n        value._detach();\n      }\n    }\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    if (op.type === 3 /* UPDATE_OBJECT */) {\n      return this._applyUpdate(op, isLocal);\n    } else if (op.type === 6 /* DELETE_OBJECT_KEY */) {\n      return this._applyDeleteObjectKey(op, isLocal);\n    }\n    return super._apply(op, isLocal);\n  }\n  /**\n   * @internal\n   */\n  _serialize() {\n    const data = {};\n    for (const [key, value] of this._map) {\n      if (!isLiveNode(value)) {\n        data[key] = value;\n      }\n    }\n    if (this.parent.type === \"HasParent\" && this.parent.node._id) {\n      return {\n        type: 0 /* OBJECT */,\n        parentId: this.parent.node._id,\n        parentKey: this.parent.key,\n        data\n      };\n    } else {\n      return {\n        type: 0 /* OBJECT */,\n        data\n      };\n    }\n  }\n  /** @internal */\n  _applyUpdate(op, isLocal) {\n    let isModified = false;\n    const id = nn(this._id);\n    const reverse = [];\n    const reverseUpdate = {\n      type: 3 /* UPDATE_OBJECT */,\n      id,\n      data: {}\n    };\n    for (const key in op.data) {\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        reverse.push(...oldValue._toOps(id, key));\n        oldValue._detach();\n      } else if (oldValue !== void 0) {\n        reverseUpdate.data[key] = oldValue;\n      } else if (oldValue === void 0) {\n        reverse.push({ type: 6 /* DELETE_OBJECT_KEY */, id, key });\n      }\n    }\n    const updateDelta = {};\n    for (const key in op.data) {\n      const value = op.data[key];\n      if (value === void 0) {\n        continue;\n      }\n      if (isLocal) {\n        this._propToLastUpdate.set(key, nn(op.opId));\n      } else if (this._propToLastUpdate.get(key) === void 0) {\n        isModified = true;\n      } else if (this._propToLastUpdate.get(key) === op.opId) {\n        this._propToLastUpdate.delete(key);\n        continue;\n      } else {\n        continue;\n      }\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        oldValue._detach();\n      }\n      isModified = true;\n      updateDelta[key] = { type: \"update\" };\n      this._map.set(key, value);\n      this.invalidate();\n    }\n    if (Object.keys(reverseUpdate.data).length !== 0) {\n      reverse.unshift(reverseUpdate);\n    }\n    return isModified ? {\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: updateDelta\n      },\n      reverse\n    } : { modified: false };\n  }\n  /** @internal */\n  _applyDeleteObjectKey(op, isLocal) {\n    const key = op.key;\n    if (this._map.has(key) === false) {\n      return { modified: false };\n    }\n    if (!isLocal && this._propToLastUpdate.get(key) !== void 0) {\n      return { modified: false };\n    }\n    const oldValue = this._map.get(key);\n    const id = nn(this._id);\n    let reverse = [];\n    if (isLiveNode(oldValue)) {\n      reverse = oldValue._toOps(id, op.key);\n      oldValue._detach();\n    } else if (oldValue !== void 0) {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          id,\n          data: { [key]: oldValue }\n        }\n      ];\n    }\n    this._map.delete(key);\n    this.invalidate();\n    return {\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: { [op.key]: { type: \"delete\" } }\n      },\n      reverse\n    };\n  }\n  /**\n   * Transform the LiveObject into a javascript object\n   */\n  toObject() {\n    return Object.fromEntries(this._map);\n  }\n  /**\n   * Adds or updates a property with a specified key and a value.\n   * @param key The key of the property to add\n   * @param value The value of the property to add\n   */\n  set(key, value) {\n    this._pool?.assertStorageIsWritable();\n    this.update({ [key]: value });\n  }\n  /**\n   * Returns a specified property from the LiveObject.\n   * @param key The key of the property to get\n   */\n  get(key) {\n    return this._map.get(key);\n  }\n  /**\n   * Deletes a key from the LiveObject\n   * @param key The key of the property to delete\n   */\n  delete(key) {\n    this._pool?.assertStorageIsWritable();\n    const keyAsString = key;\n    const oldValue = this._map.get(keyAsString);\n    if (oldValue === void 0) {\n      return;\n    }\n    if (this._pool === void 0 || this._id === void 0) {\n      if (isLiveNode(oldValue)) {\n        oldValue._detach();\n      }\n      this._map.delete(keyAsString);\n      this.invalidate();\n      return;\n    }\n    let reverse;\n    if (isLiveNode(oldValue)) {\n      oldValue._detach();\n      reverse = oldValue._toOps(this._id, keyAsString);\n    } else {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          data: { [keyAsString]: oldValue },\n          id: this._id\n        }\n      ];\n    }\n    this._map.delete(keyAsString);\n    this.invalidate();\n    const storageUpdates = /* @__PURE__ */ new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: { [key]: { type: \"delete\" } }\n    });\n    this._pool.dispatch(\n      [\n        {\n          type: 6 /* DELETE_OBJECT_KEY */,\n          key: keyAsString,\n          id: this._id,\n          opId: this._pool.generateOpId()\n        }\n      ],\n      reverse,\n      storageUpdates\n    );\n  }\n  /**\n   * Adds or updates multiple properties at once with an object.\n   * @param patch The object used to overrides properties\n   */\n  update(patch) {\n    this._pool?.assertStorageIsWritable();\n    if (this._pool === void 0 || this._id === void 0) {\n      for (const key in patch) {\n        const newValue = patch[key];\n        if (newValue === void 0) {\n          continue;\n        }\n        const oldValue = this._map.get(key);\n        if (isLiveNode(oldValue)) {\n          oldValue._detach();\n        }\n        if (isLiveNode(newValue)) {\n          newValue._setParentLink(this, key);\n        }\n        this._map.set(key, newValue);\n        this.invalidate();\n      }\n      return;\n    }\n    const ops = [];\n    const reverseOps = [];\n    const opId = this._pool.generateOpId();\n    const updatedProps = {};\n    const reverseUpdateOp = {\n      id: this._id,\n      type: 3 /* UPDATE_OBJECT */,\n      data: {}\n    };\n    const updateDelta = {};\n    for (const key in patch) {\n      const newValue = patch[key];\n      if (newValue === void 0) {\n        continue;\n      }\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        reverseOps.push(...oldValue._toOps(this._id, key));\n        oldValue._detach();\n      } else if (oldValue === void 0) {\n        reverseOps.push({ type: 6 /* DELETE_OBJECT_KEY */, id: this._id, key });\n      } else {\n        reverseUpdateOp.data[key] = oldValue;\n      }\n      if (isLiveNode(newValue)) {\n        newValue._setParentLink(this, key);\n        newValue._attach(this._pool.generateId(), this._pool);\n        const newAttachChildOps = newValue._toOps(this._id, key, this._pool);\n        const createCrdtOp = newAttachChildOps.find(\n          (op) => op.parentId === this._id\n        );\n        if (createCrdtOp) {\n          this._propToLastUpdate.set(key, nn(createCrdtOp.opId));\n        }\n        ops.push(...newAttachChildOps);\n      } else {\n        updatedProps[key] = newValue;\n        this._propToLastUpdate.set(key, opId);\n      }\n      this._map.set(key, newValue);\n      this.invalidate();\n      updateDelta[key] = { type: \"update\" };\n    }\n    if (Object.keys(reverseUpdateOp.data).length !== 0) {\n      reverseOps.unshift(reverseUpdateOp);\n    }\n    if (Object.keys(updatedProps).length !== 0) {\n      ops.unshift({\n        opId,\n        id: this._id,\n        type: 3 /* UPDATE_OBJECT */,\n        data: updatedProps\n      });\n    }\n    const storageUpdates = /* @__PURE__ */ new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: updateDelta\n    });\n    this._pool.dispatch(ops, reverseOps, storageUpdates);\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  toTreeNode(key) {\n    return super.toTreeNode(key);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    const nodeId = this._id ?? nanoid();\n    return {\n      type: \"LiveObject\",\n      id: nodeId,\n      key,\n      payload: Array.from(this._map.entries()).map(\n        ([key2, value]) => isLiveNode(value) ? value.toTreeNode(key2) : { type: \"Json\", id: `${nodeId}:${key2}`, key: key2, payload: value }\n      )\n    };\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = {};\n    for (const [key, val] of this._map) {\n      result[key] = isLiveStructure(val) ? val.toImmutable() : val;\n    }\n    return  false ? 0 : Object.freeze(result);\n  }\n  clone() {\n    return new _LiveObject(\n      Object.fromEntries(\n        Array.from(this._map).map(([key, value]) => [\n          key,\n          isLiveStructure(value) ? value.clone() : deepClone(value)\n        ])\n      )\n    );\n  }\n};\n\n// src/crdts/liveblocks-helpers.ts\nfunction creationOpToLiveNode(op) {\n  return lsonToLiveNode(creationOpToLson(op));\n}\nfunction creationOpToLson(op) {\n  switch (op.type) {\n    case 8 /* CREATE_REGISTER */:\n      return op.data;\n    case 4 /* CREATE_OBJECT */:\n      return new LiveObject(op.data);\n    case 7 /* CREATE_MAP */:\n      return new LiveMap();\n    case 2 /* CREATE_LIST */:\n      return new LiveList([]);\n    default:\n      return assertNever(op, \"Unknown creation Op\");\n  }\n}\nfunction isSameNodeOrChildOf(node, parent) {\n  if (node === parent) {\n    return true;\n  }\n  if (node.parent.type === \"HasParent\") {\n    return isSameNodeOrChildOf(node.parent.node, parent);\n  }\n  return false;\n}\nfunction deserialize([id, crdt], parentToChildren, pool) {\n  switch (crdt.type) {\n    case 0 /* OBJECT */: {\n      return LiveObject._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 1 /* LIST */: {\n      return LiveList._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 2 /* MAP */: {\n      return LiveMap._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 3 /* REGISTER */: {\n      return LiveRegister._deserialize([id, crdt], parentToChildren, pool);\n    }\n    default: {\n      throw new Error(\"Unexpected CRDT type\");\n    }\n  }\n}\nfunction deserializeToLson([id, crdt], parentToChildren, pool) {\n  switch (crdt.type) {\n    case 0 /* OBJECT */: {\n      return LiveObject._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 1 /* LIST */: {\n      return LiveList._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 2 /* MAP */: {\n      return LiveMap._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 3 /* REGISTER */: {\n      return crdt.data;\n    }\n    default: {\n      throw new Error(\"Unexpected CRDT type\");\n    }\n  }\n}\nfunction isLiveStructure(value) {\n  return isLiveList(value) || isLiveMap(value) || isLiveObject(value);\n}\nfunction isLiveNode(value) {\n  return isLiveStructure(value) || isLiveRegister(value);\n}\nfunction isLiveList(value) {\n  return value instanceof LiveList;\n}\nfunction isLiveMap(value) {\n  return value instanceof LiveMap;\n}\nfunction isLiveObject(value) {\n  return value instanceof LiveObject;\n}\nfunction isLiveRegister(value) {\n  return value instanceof LiveRegister;\n}\nfunction cloneLson(value) {\n  return value === void 0 ? void 0 : isLiveStructure(value) ? value.clone() : deepClone(value);\n}\nfunction liveNodeToLson(obj) {\n  if (obj instanceof LiveRegister) {\n    return obj.data;\n  } else if (obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject) {\n    return obj;\n  } else {\n    return assertNever(obj, \"Unknown AbstractCrdt\");\n  }\n}\nfunction lsonToLiveNode(value) {\n  if (value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList) {\n    return value;\n  } else {\n    return new LiveRegister(value);\n  }\n}\nfunction getTreesDiffOperations(currentItems, newItems) {\n  const ops = [];\n  currentItems.forEach((_, id) => {\n    if (!newItems.get(id)) {\n      ops.push({\n        type: 5 /* DELETE_CRDT */,\n        id\n      });\n    }\n  });\n  newItems.forEach((crdt, id) => {\n    const currentCrdt = currentItems.get(id);\n    if (currentCrdt) {\n      if (crdt.type === 0 /* OBJECT */) {\n        if (currentCrdt.type !== 0 /* OBJECT */ || JSON.stringify(crdt.data) !== JSON.stringify(currentCrdt.data)) {\n          ops.push({\n            type: 3 /* UPDATE_OBJECT */,\n            id,\n            data: crdt.data\n          });\n        }\n      }\n      if (crdt.parentKey !== currentCrdt.parentKey) {\n        ops.push({\n          type: 1 /* SET_PARENT_KEY */,\n          id,\n          parentKey: nn(crdt.parentKey, \"Parent key must not be missing\")\n        });\n      }\n    } else {\n      switch (crdt.type) {\n        case 3 /* REGISTER */:\n          ops.push({\n            type: 8 /* CREATE_REGISTER */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey,\n            data: crdt.data\n          });\n          break;\n        case 1 /* LIST */:\n          ops.push({\n            type: 2 /* CREATE_LIST */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey\n          });\n          break;\n        case 0 /* OBJECT */:\n          if (crdt.parentId === void 0 || crdt.parentKey === void 0) {\n            throw new Error(\n              \"Internal error. Cannot serialize storage root into an operation\"\n            );\n          }\n          ops.push({\n            type: 4 /* CREATE_OBJECT */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey,\n            data: crdt.data\n          });\n          break;\n        case 2 /* MAP */:\n          ops.push({\n            type: 7 /* CREATE_MAP */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey\n          });\n          break;\n      }\n    }\n  });\n  return ops;\n}\nfunction mergeObjectStorageUpdates(first, second) {\n  const updates = first.updates;\n  for (const [key, value] of entries(second.updates)) {\n    updates[key] = value;\n  }\n  return {\n    ...second,\n    updates\n  };\n}\nfunction mergeMapStorageUpdates(first, second) {\n  const updates = first.updates;\n  for (const [key, value] of entries(second.updates)) {\n    updates[key] = value;\n  }\n  return {\n    ...second,\n    updates\n  };\n}\nfunction mergeListStorageUpdates(first, second) {\n  const updates = first.updates;\n  return {\n    ...second,\n    updates: updates.concat(second.updates)\n  };\n}\nfunction mergeStorageUpdates(first, second) {\n  if (first === void 0) {\n    return second;\n  }\n  if (first.type === \"LiveObject\" && second.type === \"LiveObject\") {\n    return mergeObjectStorageUpdates(first, second);\n  } else if (first.type === \"LiveMap\" && second.type === \"LiveMap\") {\n    return mergeMapStorageUpdates(first, second);\n  } else if (first.type === \"LiveList\" && second.type === \"LiveList\") {\n    return mergeListStorageUpdates(first, second);\n  } else {\n  }\n  return second;\n}\nfunction isPlain(value) {\n  const type = typeof value;\n  return value === void 0 || value === null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(value) || isPlainObject(value);\n}\nfunction findNonSerializableValue(value, path = \"\") {\n  if (!isPlain) {\n    return {\n      path: path || \"root\",\n      value\n    };\n  }\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  for (const [key, nestedValue] of Object.entries(value)) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (!isPlain(nestedValue)) {\n      return {\n        path: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === \"object\") {\n      const nonSerializableNestedValue = findNonSerializableValue(\n        nestedValue,\n        nestedPath\n      );\n      if (nonSerializableNestedValue) {\n        return nonSerializableNestedValue;\n      }\n    }\n  }\n  return false;\n}\n\n// src/lib/debug.ts\nfunction captureStackTrace(msg, traceRoot) {\n  const errorLike = { name: msg };\n  if (typeof Error.captureStackTrace !== \"function\") {\n    return void 0;\n  }\n  Error.captureStackTrace(errorLike, traceRoot);\n  return errorLike.stack;\n}\n\n// src/lib/Json.ts\nfunction isJsonScalar(data) {\n  return data === null || typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\";\n}\nfunction isJsonArray(data) {\n  return Array.isArray(data);\n}\nfunction isJsonObject(data) {\n  return !isJsonScalar(data) && !isJsonArray(data);\n}\n\n// src/lib/objectToQuery.ts\nvar identifierRegex = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\nfunction objectToQuery(obj) {\n  let filterList = [];\n  const entries2 = Object.entries(obj);\n  const keyValuePairs = [];\n  const keyValuePairsWithOperator = [];\n  const indexedKeys = [];\n  entries2.forEach(([key, value]) => {\n    if (!identifierRegex.test(key)) {\n      throw new Error(\"Key must only contain letters, numbers, _\");\n    }\n    if (isSimpleValue(value)) {\n      keyValuePairs.push([key, value]);\n    } else if (isValueWithOperator(value)) {\n      keyValuePairsWithOperator.push([key, value]);\n    } else if (typeof value === \"object\" && !(\"startsWith\" in value)) {\n      indexedKeys.push([key, value]);\n    }\n  });\n  filterList = [\n    ...getFiltersFromKeyValuePairs(keyValuePairs),\n    ...getFiltersFromKeyValuePairsWithOperator(keyValuePairsWithOperator)\n  ];\n  indexedKeys.forEach(([key, value]) => {\n    const nestedEntries = Object.entries(value);\n    const nKeyValuePairs = [];\n    const nKeyValuePairsWithOperator = [];\n    nestedEntries.forEach(([nestedKey, nestedValue]) => {\n      if (isStringEmpty(nestedKey)) {\n        throw new Error(\"Key cannot be empty\");\n      }\n      if (isSimpleValue(nestedValue)) {\n        nKeyValuePairs.push([formatFilterKey(key, nestedKey), nestedValue]);\n      } else if (isValueWithOperator(nestedValue)) {\n        nKeyValuePairsWithOperator.push([\n          formatFilterKey(key, nestedKey),\n          nestedValue\n        ]);\n      }\n    });\n    filterList = [\n      ...filterList,\n      ...getFiltersFromKeyValuePairs(nKeyValuePairs),\n      ...getFiltersFromKeyValuePairsWithOperator(nKeyValuePairsWithOperator)\n    ];\n  });\n  return filterList.map(\n    ({ key, operator, value }) => formatFilter(key, operator, formatFilterValue(value))\n  ).join(\" AND \");\n}\nvar getFiltersFromKeyValuePairs = (keyValuePairs) => {\n  const filters = [];\n  keyValuePairs.forEach(([key, value]) => {\n    filters.push({\n      key,\n      operator: \":\",\n      value\n    });\n  });\n  return filters;\n};\nvar getFiltersFromKeyValuePairsWithOperator = (keyValuePairsWithOperator) => {\n  const filters = [];\n  keyValuePairsWithOperator.forEach(([key, value]) => {\n    if (\"startsWith\" in value && typeof value.startsWith === \"string\") {\n      filters.push({\n        key,\n        operator: \"^\",\n        value: value.startsWith\n      });\n    }\n  });\n  return filters;\n};\nvar isSimpleValue = (value) => {\n  if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n    return true;\n  }\n  return false;\n};\nvar isValueWithOperator = (value) => {\n  if (typeof value === \"object\" && value !== null && \"startsWith\" in value) {\n    return true;\n  }\n  return false;\n};\nvar formatFilter = (key, operator, value) => {\n  return `${key}${operator}${value}`;\n};\nvar formatFilterKey = (key, nestedKey) => {\n  if (nestedKey) {\n    return `${key}[${JSON.stringify(nestedKey)}]`;\n  }\n  return key;\n};\nvar formatFilterValue = (value) => {\n  if (typeof value === \"string\") {\n    if (isStringEmpty(value)) {\n      throw new Error(\"Value cannot be empty\");\n    }\n    return JSON.stringify(value);\n  }\n  return value.toString();\n};\nvar isStringEmpty = (value) => {\n  return !value || value.toString().trim() === \"\";\n};\n\n// src/protocol/ClientMsg.ts\nvar ClientMsgCode = /* @__PURE__ */ ((ClientMsgCode2) => {\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n  ClientMsgCode2[ClientMsgCode2[\"BROADCAST_EVENT\"] = 103] = \"BROADCAST_EVENT\";\n  ClientMsgCode2[ClientMsgCode2[\"FETCH_STORAGE\"] = 200] = \"FETCH_STORAGE\";\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n  ClientMsgCode2[ClientMsgCode2[\"FETCH_YDOC\"] = 300] = \"FETCH_YDOC\";\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_YDOC\"] = 301] = \"UPDATE_YDOC\";\n  return ClientMsgCode2;\n})(ClientMsgCode || {});\n\n// src/refs/ImmutableRef.ts\nfunction merge(target, patch) {\n  let updated = false;\n  const newValue = { ...target };\n  Object.keys(patch).forEach((k) => {\n    const key = k;\n    const val = patch[key];\n    if (newValue[key] !== val) {\n      if (val === void 0) {\n        delete newValue[key];\n      } else {\n        newValue[key] = val;\n      }\n      updated = true;\n    }\n  });\n  return updated ? newValue : target;\n}\nvar ImmutableRef = class {\n  constructor() {\n    this._ev = makeEventSource();\n  }\n  get didInvalidate() {\n    return this._ev.observable;\n  }\n  invalidate() {\n    if (this._cache !== void 0) {\n      this._cache = void 0;\n      this._ev.notify();\n    }\n  }\n  get current() {\n    return this._cache ?? (this._cache = this._toImmutable());\n  }\n};\n\n// src/refs/OthersRef.ts\nfunction makeUser(conn, presence) {\n  const { connectionId, id, info } = conn;\n  const canWrite = canWriteStorage(conn.scopes);\n  return freeze(\n    compactObject({\n      connectionId,\n      id,\n      info,\n      canWrite,\n      canComment: canComment(conn.scopes),\n      isReadOnly: !canWrite,\n      // Deprecated, kept for backward-compatibility\n      presence\n    })\n  );\n}\nvar OthersRef = class extends ImmutableRef {\n  //\n  // --------------------------------------------------------------\n  //\n  constructor() {\n    super();\n    this._connections = /* @__PURE__ */ new Map();\n    this._presences = /* @__PURE__ */ new Map();\n    this._users = /* @__PURE__ */ new Map();\n  }\n  connectionIds() {\n    return this._connections.keys();\n  }\n  /** @internal */\n  _toImmutable() {\n    const users = compact(\n      Array.from(this._presences.keys()).map(\n        (connectionId) => this.getUser(Number(connectionId))\n      )\n    );\n    return users;\n  }\n  clearOthers() {\n    this._connections = /* @__PURE__ */ new Map();\n    this._presences = /* @__PURE__ */ new Map();\n    this._users = /* @__PURE__ */ new Map();\n    this.invalidate();\n  }\n  /** @internal */\n  _getUser(connectionId) {\n    const conn = this._connections.get(connectionId);\n    const presence = this._presences.get(connectionId);\n    if (conn !== void 0 && presence !== void 0) {\n      return makeUser(conn, presence);\n    }\n    return void 0;\n  }\n  getUser(connectionId) {\n    const cachedUser = this._users.get(connectionId);\n    if (cachedUser) {\n      return cachedUser;\n    }\n    const computedUser = this._getUser(connectionId);\n    if (computedUser) {\n      this._users.set(connectionId, computedUser);\n      return computedUser;\n    }\n    return void 0;\n  }\n  /** @internal */\n  _invalidateUser(connectionId) {\n    if (this._users.has(connectionId)) {\n      this._users.delete(connectionId);\n    }\n    this.invalidate();\n  }\n  /**\n   * Records a known connection. This records the connection ID and the\n   * associated metadata.\n   */\n  setConnection(connectionId, metaUserId, metaUserInfo, scopes) {\n    this._connections.set(\n      connectionId,\n      freeze({\n        connectionId,\n        id: metaUserId,\n        info: metaUserInfo,\n        scopes\n      })\n    );\n    if (this._presences.has(connectionId)) {\n      this._invalidateUser(connectionId);\n    }\n  }\n  /**\n   * Removes a known connectionId. Removes both the connection's metadata and\n   * the presence information.\n   */\n  removeConnection(connectionId) {\n    this._connections.delete(connectionId);\n    this._presences.delete(connectionId);\n    this._invalidateUser(connectionId);\n  }\n  /**\n   * Stores a new user from a full presence update. If the user already exists,\n   * its known presence data is overwritten.\n   */\n  setOther(connectionId, presence) {\n    this._presences.set(connectionId, freeze(compactObject(presence)));\n    if (this._connections.has(connectionId)) {\n      this._invalidateUser(connectionId);\n    }\n  }\n  /**\n   * Patches the presence data for an existing \"other\". If we don't know the\n   * initial presence data for this user yet, discard this patch and await the\n   * full .setOther() call first.\n   */\n  patchOther(connectionId, patch) {\n    const oldPresence = this._presences.get(connectionId);\n    if (oldPresence === void 0) {\n      return;\n    }\n    const newPresence = merge(oldPresence, patch);\n    if (oldPresence !== newPresence) {\n      this._presences.set(connectionId, freeze(newPresence));\n      this._invalidateUser(connectionId);\n    }\n  }\n};\n\n// src/refs/PatchableRef.ts\nvar PatchableRef = class extends ImmutableRef {\n  constructor(data) {\n    super();\n    this._data = freeze(compactObject(data));\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._data;\n  }\n  /**\n   * Patches the current object.\n   */\n  patch(patch) {\n    const oldData = this._data;\n    const newData = merge(oldData, patch);\n    if (oldData !== newData) {\n      this._data = freeze(newData);\n      this.invalidate();\n    }\n  }\n};\n\n// src/refs/ValueRef.ts\nvar ValueRef = class extends ImmutableRef {\n  constructor(initialValue) {\n    super();\n    this._value = freeze(initialValue);\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._value;\n  }\n  set(newValue) {\n    this._value = freeze(newValue);\n    this.invalidate();\n  }\n};\nvar DerivedRef = class extends ImmutableRef {\n  constructor(...args) {\n    super();\n    const transformFn = args.pop();\n    const otherRefs = args;\n    this._refs = otherRefs;\n    this._refs.forEach((ref) => {\n      ref.didInvalidate.subscribe(() => this.invalidate());\n    });\n    this._transform = transformFn;\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._transform(\n      ...this._refs.map((ref) => ref.current)\n    );\n  }\n};\n\n// src/room.ts\nvar MAX_SOCKET_MESSAGE_SIZE = 1024 * 1024 - 1024;\nfunction makeIdFactory(connectionId) {\n  let count = 0;\n  return () => `${connectionId}:${count++}`;\n}\nfunction userToTreeNode(key, user) {\n  return {\n    type: \"User\",\n    id: `${user.connectionId}`,\n    key,\n    payload: {\n      connectionId: user.connectionId,\n      id: user.id,\n      info: user.info,\n      presence: user.presence,\n      isReadOnly: !user.canWrite\n    }\n  };\n}\nfunction installBackgroundTabSpy() {\n  const doc = typeof document !== \"undefined\" ? document : void 0;\n  const inBackgroundSince = { current: null };\n  function onVisibilityChange() {\n    if (doc?.visibilityState === \"hidden\") {\n      inBackgroundSince.current = inBackgroundSince.current ?? Date.now();\n    } else {\n      inBackgroundSince.current = null;\n    }\n  }\n  doc?.addEventListener(\"visibilitychange\", onVisibilityChange);\n  const unsub = () => {\n    doc?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n  };\n  return [inBackgroundSince, unsub];\n}\nvar CommentsApiError = class extends Error {\n  constructor(message, status, details) {\n    super(message);\n    this.message = message;\n    this.status = status;\n    this.details = details;\n  }\n};\nfunction createCommentsApi(roomId, getAuthValue, fetchClientApi) {\n  async function fetchCommentsApi(endpoint, params, options) {\n    const authValue = await getAuthValue();\n    return fetchClientApi(roomId, endpoint, authValue, options, params);\n  }\n  async function fetchJson(endpoint, options, params) {\n    const response = await fetchCommentsApi(endpoint, params, options);\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new CommentsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new CommentsApiError(response.statusText, response.status);\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  async function getThreads(options) {\n    let query;\n    if (options?.query) {\n      query = objectToQuery(options.query);\n    }\n    const response = await fetchCommentsApi(\n      \"/threads\",\n      {\n        since: options?.since?.toISOString(),\n        query\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return {\n        threads: json.data.map((thread) => convertToThreadData(thread)),\n        inboxNotifications: json.inboxNotifications.map(\n          (notification) => convertToInboxNotificationData(notification)\n        ),\n        deletedThreads: json.deletedThreads.map(\n          (info) => convertToThreadDeleteInfo(info)\n        ),\n        deletedInboxNotifications: json.deletedInboxNotifications.map(\n          (info) => convertToInboxNotificationDeleteInfo(info)\n        ),\n        meta: {\n          requestedAt: new Date(json.meta.requestedAt)\n        }\n      };\n    } else if (response.status === 404) {\n      return {\n        threads: [],\n        inboxNotifications: [],\n        deletedThreads: [],\n        deletedInboxNotifications: [],\n        meta: {\n          requestedAt: /* @__PURE__ */ new Date()\n        }\n      };\n    } else {\n      throw new Error(\"There was an error while getting threads.\");\n    }\n  }\n  async function getThread({ threadId }) {\n    const response = await fetchCommentsApi(\n      `/thread-with-notification/${threadId}`\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return {\n        thread: convertToThreadData(json.thread),\n        inboxNotification: json.inboxNotification ? convertToInboxNotificationData(json.inboxNotification) : void 0\n      };\n    } else if (response.status === 404) {\n      return;\n    } else {\n      throw new Error(`There was an error while getting thread ${threadId}.`);\n    }\n  }\n  async function createThread({\n    metadata,\n    body,\n    commentId,\n    threadId\n  }) {\n    const thread = await fetchJson(\"/threads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: threadId,\n        comment: {\n          id: commentId,\n          body\n        },\n        metadata\n      })\n    });\n    return convertToThreadData(thread);\n  }\n  async function deleteThread({ threadId }) {\n    await fetchJson(`/threads/${encodeURIComponent(threadId)}`, {\n      method: \"DELETE\"\n    });\n  }\n  async function editThreadMetadata({\n    metadata,\n    threadId\n  }) {\n    return await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/metadata`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(metadata)\n      }\n    );\n  }\n  async function markThreadAsResolved({ threadId }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/mark-as-resolved`,\n      {\n        method: \"POST\"\n      }\n    );\n  }\n  async function markThreadAsUnresolved({ threadId }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/mark-as-unresolved`,\n      {\n        method: \"POST\"\n      }\n    );\n  }\n  async function createComment({\n    threadId,\n    commentId,\n    body\n  }) {\n    const comment = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          id: commentId,\n          body\n        })\n      }\n    );\n    return convertToCommentData(comment);\n  }\n  async function editComment({\n    threadId,\n    commentId,\n    body\n  }) {\n    const comment = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          body\n        })\n      }\n    );\n    return convertToCommentData(comment);\n  }\n  async function deleteComment2({\n    threadId,\n    commentId\n  }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  async function addReaction2({\n    threadId,\n    commentId,\n    emoji\n  }) {\n    const reaction = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}/reactions`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ emoji })\n      }\n    );\n    return convertToCommentUserReaction(reaction);\n  }\n  async function removeReaction2({\n    threadId,\n    commentId,\n    emoji\n  }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}/reactions/${encodeURIComponent(emoji)}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  return {\n    getThreads,\n    getThread,\n    createThread,\n    deleteThread,\n    editThreadMetadata,\n    markThreadAsResolved,\n    markThreadAsUnresolved,\n    createComment,\n    editComment,\n    deleteComment: deleteComment2,\n    addReaction: addReaction2,\n    removeReaction: removeReaction2\n  };\n}\nvar MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY2 = 50;\nfunction createRoom(options, config) {\n  const initialPresence = options.initialPresence;\n  const initialStorage = options.initialStorage;\n  const [inBackgroundSince, uninstallBgTabSpy] = installBackgroundTabSpy();\n  const delegates = {\n    ...config.delegates,\n    // A connection is allowed to go into \"zombie state\" only if all of the\n    // following conditions apply:\n    //\n    // - The `backgroundKeepAliveTimeout` client option is configured\n    // - The browser window has been in the background for at least\n    //   `backgroundKeepAliveTimeout` milliseconds\n    // - There are no pending changes\n    //\n    canZombie() {\n      return config.backgroundKeepAliveTimeout !== void 0 && inBackgroundSince.current !== null && Date.now() > inBackgroundSince.current + config.backgroundKeepAliveTimeout && getStorageStatus() !== \"synchronizing\";\n    }\n  };\n  const managedSocket = new ManagedSocket(\n    delegates,\n    config.enableDebugLogging\n  );\n  const context = {\n    buffer: {\n      flushTimerID: void 0,\n      lastFlushedAt: 0,\n      presenceUpdates: (\n        // Queue up the initial presence message as a Full Presence™ update\n        {\n          type: \"full\",\n          data: initialPresence\n        }\n      ),\n      messages: [],\n      storageOperations: []\n    },\n    staticSessionInfo: new ValueRef(null),\n    dynamicSessionInfo: new ValueRef(null),\n    myPresence: new PatchableRef(initialPresence),\n    others: new OthersRef(),\n    initialStorage,\n    idFactory: null,\n    // Storage\n    clock: 0,\n    opClock: 0,\n    nodes: /* @__PURE__ */ new Map(),\n    root: void 0,\n    undoStack: [],\n    redoStack: [],\n    pausedHistory: null,\n    activeBatch: null,\n    unacknowledgedOps: /* @__PURE__ */ new Map(),\n    // Debug\n    opStackTraces:  true ? /* @__PURE__ */ new Map() : 0\n  };\n  const doNotBatchUpdates = (cb) => cb();\n  const batchUpdates = config.unstable_batchedUpdates ?? doNotBatchUpdates;\n  let lastTokenKey;\n  function onStatusDidChange(newStatus) {\n    const authValue = managedSocket.authValue;\n    if (authValue !== null) {\n      const tokenKey = getAuthBearerHeaderFromAuthValue(authValue);\n      if (tokenKey !== lastTokenKey) {\n        lastTokenKey = tokenKey;\n        if (authValue.type === \"secret\") {\n          const token = authValue.token.parsed;\n          context.staticSessionInfo.set({\n            userId: token.k === \"sec-legacy\" /* SECRET_LEGACY */ ? token.id : token.uid,\n            userInfo: token.k === \"sec-legacy\" /* SECRET_LEGACY */ ? token.info : token.ui\n          });\n        } else {\n          context.staticSessionInfo.set({\n            userId: void 0,\n            userInfo: void 0\n          });\n        }\n      }\n    }\n    batchUpdates(() => {\n      eventHub.status.notify(newStatus);\n      notifySelfChanged(doNotBatchUpdates);\n    });\n  }\n  let _connectionLossTimerId;\n  let _hasLostConnection = false;\n  function handleConnectionLossEvent(newStatus) {\n    if (newStatus === \"reconnecting\") {\n      _connectionLossTimerId = setTimeout(() => {\n        batchUpdates(() => {\n          eventHub.lostConnection.notify(\"lost\");\n          _hasLostConnection = true;\n          context.others.clearOthers();\n          notify({ others: [{ type: \"reset\" }] }, doNotBatchUpdates);\n        });\n      }, config.lostConnectionTimeout);\n    } else {\n      clearTimeout(_connectionLossTimerId);\n      if (_hasLostConnection) {\n        if (newStatus === \"disconnected\") {\n          batchUpdates(() => {\n            eventHub.lostConnection.notify(\"failed\");\n          });\n        } else {\n          batchUpdates(() => {\n            eventHub.lostConnection.notify(\"restored\");\n          });\n        }\n        _hasLostConnection = false;\n      }\n    }\n  }\n  function onDidConnect() {\n    context.buffer.presenceUpdates = {\n      type: \"full\",\n      data: (\n        // Because context.me.current is a readonly object, we'll have to\n        // make a copy here. Otherwise, type errors happen later when\n        // \"patching\" my presence.\n        { ...context.myPresence.current }\n      )\n    };\n    if (_getStorage$ !== null) {\n      refreshStorage({ flush: false });\n    }\n    flushNowOrSoon();\n  }\n  function onDidDisconnect() {\n    clearTimeout(context.buffer.flushTimerID);\n  }\n  managedSocket.events.onMessage.subscribe(handleServerMessage);\n  managedSocket.events.statusDidChange.subscribe(onStatusDidChange);\n  managedSocket.events.statusDidChange.subscribe(handleConnectionLossEvent);\n  managedSocket.events.didConnect.subscribe(onDidConnect);\n  managedSocket.events.didDisconnect.subscribe(onDidDisconnect);\n  managedSocket.events.onLiveblocksError.subscribe((err) => {\n    batchUpdates(() => {\n      if (true) {\n        error2(\n          `Connection to websocket server closed. Reason: ${err.message} (code: ${err.code}).`\n        );\n      }\n      eventHub.error.notify(err);\n    });\n  });\n  const pool = {\n    roomId: config.roomId,\n    getNode: (id) => context.nodes.get(id),\n    addNode: (id, node) => void context.nodes.set(id, node),\n    deleteNode: (id) => void context.nodes.delete(id),\n    generateId: () => `${getConnectionId()}:${context.clock++}`,\n    generateOpId: () => `${getConnectionId()}:${context.opClock++}`,\n    dispatch(ops, reverse, storageUpdates) {\n      const activeBatch = context.activeBatch;\n      if (true) {\n        const stackTrace = captureStackTrace(\"Storage mutation\", this.dispatch);\n        if (stackTrace) {\n          for (const op of ops) {\n            if (op.opId) {\n              nn(context.opStackTraces).set(op.opId, stackTrace);\n            }\n          }\n        }\n      }\n      if (activeBatch) {\n        for (const op of ops) {\n          activeBatch.ops.push(op);\n        }\n        for (const [key, value] of storageUpdates) {\n          activeBatch.updates.storageUpdates.set(\n            key,\n            mergeStorageUpdates(\n              activeBatch.updates.storageUpdates.get(key),\n              value\n            )\n          );\n        }\n        activeBatch.reverseOps.unshift(...reverse);\n      } else {\n        batchUpdates(() => {\n          addToUndoStack(reverse, doNotBatchUpdates);\n          context.redoStack.length = 0;\n          dispatchOps(ops);\n          notify({ storageUpdates }, doNotBatchUpdates);\n        });\n      }\n    },\n    assertStorageIsWritable: () => {\n      const scopes = context.dynamicSessionInfo.current?.scopes;\n      if (scopes === void 0) {\n        return;\n      }\n      const canWrite = canWriteStorage(scopes);\n      if (!canWrite) {\n        throw new Error(\n          \"Cannot write to storage with a read only user, please ensure the user has write permissions\"\n        );\n      }\n    }\n  };\n  const eventHub = {\n    status: makeEventSource(),\n    // New/recommended API\n    lostConnection: makeEventSource(),\n    customEvent: makeEventSource(),\n    self: makeEventSource(),\n    myPresence: makeEventSource(),\n    others: makeEventSource(),\n    error: makeEventSource(),\n    storageBatch: makeEventSource(),\n    history: makeEventSource(),\n    storageDidLoad: makeEventSource(),\n    storageStatus: makeEventSource(),\n    ydoc: makeEventSource(),\n    comments: makeEventSource()\n  };\n  async function fetchClientApi(roomId, endpoint, authValue, options2, params) {\n    const url = urljoin(\n      config.baseUrl,\n      `/v2/c/rooms/${encodeURIComponent(roomId)}${endpoint}`,\n      params\n    );\n    const fetcher = config.polyfills?.fetch || /* istanbul ignore next */\n    fetch;\n    return await fetcher(url, {\n      ...options2,\n      headers: {\n        ...options2?.headers,\n        Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n      }\n    });\n  }\n  async function streamFetch(authValue, roomId) {\n    return fetchClientApi(roomId, \"/storage\", authValue, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  async function httpPostToRoom(endpoint, body) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(config.roomId, endpoint, managedSocket.authValue, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n  }\n  async function createTextMention(userId, mentionId) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(\n      config.roomId,\n      \"/text-mentions\",\n      managedSocket.authValue,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          mentionId\n        })\n      }\n    );\n  }\n  async function deleteTextMention(mentionId) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(\n      config.roomId,\n      `/text-mentions/${mentionId}`,\n      managedSocket.authValue,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  async function reportTextEditor(type, rootKey) {\n    const authValue = await delegates.authenticate();\n    return fetchClientApi(config.roomId, \"/text-metadata\", authValue, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        type,\n        rootKey\n      })\n    });\n  }\n  function sendMessages(messages) {\n    const serializedPayload = JSON.stringify(messages);\n    const nonce = context.dynamicSessionInfo.current?.nonce;\n    if (config.unstable_fallbackToHTTP && nonce) {\n      const size = new TextEncoder().encode(serializedPayload).length;\n      if (size > MAX_SOCKET_MESSAGE_SIZE) {\n        void httpPostToRoom(\"/send-message\", { nonce, messages }).then(\n          (resp) => {\n            if (!resp.ok && resp.status === 403) {\n              managedSocket.reconnect();\n            }\n          }\n        );\n        warn(\n          \"Message was too large for websockets and sent over HTTP instead\"\n        );\n        return;\n      }\n    }\n    managedSocket.send(serializedPayload);\n  }\n  const self = new DerivedRef(\n    context.staticSessionInfo,\n    context.dynamicSessionInfo,\n    context.myPresence,\n    (staticSession, dynamicSession, myPresence) => {\n      if (staticSession === null || dynamicSession === null) {\n        return null;\n      } else {\n        const canWrite = canWriteStorage(dynamicSession.scopes);\n        return {\n          connectionId: dynamicSession.actor,\n          id: staticSession.userId,\n          info: staticSession.userInfo,\n          presence: myPresence,\n          canWrite,\n          canComment: canComment(dynamicSession.scopes)\n        };\n      }\n    }\n  );\n  let _lastSelf;\n  function notifySelfChanged(batchedUpdatesWrapper) {\n    const currSelf = self.current;\n    if (currSelf !== null && currSelf !== _lastSelf) {\n      batchedUpdatesWrapper(() => {\n        eventHub.self.notify(currSelf);\n      });\n      _lastSelf = currSelf;\n    }\n  }\n  const selfAsTreeNode = new DerivedRef(\n    self,\n    (me) => me !== null ? userToTreeNode(\"Me\", me) : null\n  );\n  function createOrUpdateRootFromMessage(message, batchedUpdatesWrapper) {\n    if (message.items.length === 0) {\n      throw new Error(\"Internal error: cannot load storage without items\");\n    }\n    if (context.root !== void 0) {\n      updateRoot(message.items, batchedUpdatesWrapper);\n    } else {\n      context.root = LiveObject._fromItems(message.items, pool);\n    }\n    const canWrite = self.current?.canWrite ?? true;\n    const stackSizeBefore = context.undoStack.length;\n    for (const key in context.initialStorage) {\n      if (context.root.get(key) === void 0) {\n        if (canWrite) {\n          context.root.set(key, cloneLson(context.initialStorage[key]));\n        } else {\n          warn(\n            `Attempted to populate missing storage key '${key}', but current user has no write access`\n          );\n        }\n      }\n    }\n    context.undoStack.length = stackSizeBefore;\n  }\n  function updateRoot(items, batchedUpdatesWrapper) {\n    if (context.root === void 0) {\n      return;\n    }\n    const currentItems = /* @__PURE__ */ new Map();\n    for (const [id, node] of context.nodes) {\n      currentItems.set(id, node._serialize());\n    }\n    const ops = getTreesDiffOperations(currentItems, new Map(items));\n    const result = applyOps(ops, false);\n    notify(result.updates, batchedUpdatesWrapper);\n  }\n  function _addToRealUndoStack(historyOps, batchedUpdatesWrapper) {\n    if (context.undoStack.length >= 50) {\n      context.undoStack.shift();\n    }\n    context.undoStack.push(historyOps);\n    onHistoryChange(batchedUpdatesWrapper);\n  }\n  function addToUndoStack(historyOps, batchedUpdatesWrapper) {\n    if (context.pausedHistory !== null) {\n      context.pausedHistory.unshift(...historyOps);\n    } else {\n      _addToRealUndoStack(historyOps, batchedUpdatesWrapper);\n    }\n  }\n  function notify(updates, batchedUpdatesWrapper) {\n    const storageUpdates = updates.storageUpdates;\n    const othersUpdates = updates.others;\n    batchedUpdatesWrapper(() => {\n      if (othersUpdates !== void 0 && othersUpdates.length > 0) {\n        const others = context.others.current;\n        for (const event of othersUpdates) {\n          eventHub.others.notify({ ...event, others });\n        }\n      }\n      if (updates.presence ?? false) {\n        notifySelfChanged(doNotBatchUpdates);\n        eventHub.myPresence.notify(context.myPresence.current);\n      }\n      if (storageUpdates !== void 0 && storageUpdates.size > 0) {\n        const updates2 = Array.from(storageUpdates.values());\n        eventHub.storageBatch.notify(updates2);\n      }\n      notifyStorageStatus();\n    });\n  }\n  function getConnectionId() {\n    const info = context.dynamicSessionInfo.current;\n    if (info) {\n      return info.actor;\n    }\n    throw new Error(\n      \"Internal. Tried to get connection id but connection was never open\"\n    );\n  }\n  function applyOps(rawOps, isLocal) {\n    const output = {\n      reverse: [],\n      storageUpdates: /* @__PURE__ */ new Map(),\n      presence: false\n    };\n    const createdNodeIds = /* @__PURE__ */ new Set();\n    const ops = rawOps.map((op) => {\n      if (op.type !== \"presence\" && !op.opId) {\n        return { ...op, opId: pool.generateOpId() };\n      } else {\n        return op;\n      }\n    });\n    for (const op of ops) {\n      if (op.type === \"presence\") {\n        const reverse = {\n          type: \"presence\",\n          data: {}\n        };\n        for (const key in op.data) {\n          reverse.data[key] = context.myPresence.current[key];\n        }\n        context.myPresence.patch(op.data);\n        if (context.buffer.presenceUpdates === null) {\n          context.buffer.presenceUpdates = { type: \"partial\", data: op.data };\n        } else {\n          for (const key in op.data) {\n            context.buffer.presenceUpdates.data[key] = op.data[key];\n          }\n        }\n        output.reverse.unshift(reverse);\n        output.presence = true;\n      } else {\n        let source;\n        if (isLocal) {\n          source = 0 /* UNDOREDO_RECONNECT */;\n        } else {\n          const opId = nn(op.opId);\n          if (true) {\n            nn(context.opStackTraces).delete(opId);\n          }\n          const deleted = context.unacknowledgedOps.delete(opId);\n          source = deleted ? 2 /* ACK */ : 1 /* REMOTE */;\n        }\n        const applyOpResult = applyOp(op, source);\n        if (applyOpResult.modified) {\n          const nodeId = applyOpResult.modified.node._id;\n          if (!(nodeId && createdNodeIds.has(nodeId))) {\n            output.storageUpdates.set(\n              nn(applyOpResult.modified.node._id),\n              mergeStorageUpdates(\n                output.storageUpdates.get(nn(applyOpResult.modified.node._id)),\n                applyOpResult.modified\n              )\n            );\n            output.reverse.unshift(...applyOpResult.reverse);\n          }\n          if (op.type === 2 /* CREATE_LIST */ || op.type === 7 /* CREATE_MAP */ || op.type === 4 /* CREATE_OBJECT */) {\n            createdNodeIds.add(nn(op.id));\n          }\n        }\n      }\n    }\n    return {\n      ops,\n      reverse: output.reverse,\n      updates: {\n        storageUpdates: output.storageUpdates,\n        presence: output.presence\n      }\n    };\n  }\n  function applyOp(op, source) {\n    if (isAckOp(op)) {\n      return { modified: false };\n    }\n    switch (op.type) {\n      case 6 /* DELETE_OBJECT_KEY */:\n      case 3 /* UPDATE_OBJECT */:\n      case 5 /* DELETE_CRDT */: {\n        const node = context.nodes.get(op.id);\n        if (node === void 0) {\n          return { modified: false };\n        }\n        return node._apply(op, source === 0 /* UNDOREDO_RECONNECT */);\n      }\n      case 1 /* SET_PARENT_KEY */: {\n        const node = context.nodes.get(op.id);\n        if (node === void 0) {\n          return { modified: false };\n        }\n        if (node.parent.type === \"HasParent\" && isLiveList(node.parent.node)) {\n          return node.parent.node._setChildKey(\n            asPos(op.parentKey),\n            node,\n            source\n          );\n        }\n        return { modified: false };\n      }\n      case 4 /* CREATE_OBJECT */:\n      case 2 /* CREATE_LIST */:\n      case 7 /* CREATE_MAP */:\n      case 8 /* CREATE_REGISTER */: {\n        if (op.parentId === void 0) {\n          return { modified: false };\n        }\n        const parentNode = context.nodes.get(op.parentId);\n        if (parentNode === void 0) {\n          return { modified: false };\n        }\n        return parentNode._attachChild(op, source);\n      }\n    }\n  }\n  function updatePresence(patch, options2) {\n    const oldValues = {};\n    if (context.buffer.presenceUpdates === null) {\n      context.buffer.presenceUpdates = {\n        type: \"partial\",\n        data: {}\n      };\n    }\n    for (const key in patch) {\n      const overrideValue = patch[key];\n      if (overrideValue === void 0) {\n        continue;\n      }\n      context.buffer.presenceUpdates.data[key] = overrideValue;\n      oldValues[key] = context.myPresence.current[key];\n    }\n    context.myPresence.patch(patch);\n    if (context.activeBatch) {\n      if (options2?.addToHistory) {\n        context.activeBatch.reverseOps.unshift({\n          type: \"presence\",\n          data: oldValues\n        });\n      }\n      context.activeBatch.updates.presence = true;\n    } else {\n      flushNowOrSoon();\n      batchUpdates(() => {\n        if (options2?.addToHistory) {\n          addToUndoStack(\n            [{ type: \"presence\", data: oldValues }],\n            doNotBatchUpdates\n          );\n        }\n        notify({ presence: true }, doNotBatchUpdates);\n      });\n    }\n  }\n  function onUpdatePresenceMessage(message) {\n    if (message.targetActor !== void 0) {\n      const oldUser = context.others.getUser(message.actor);\n      context.others.setOther(message.actor, message.data);\n      const newUser = context.others.getUser(message.actor);\n      if (oldUser === void 0 && newUser !== void 0) {\n        return { type: \"enter\", user: newUser };\n      }\n    } else {\n      context.others.patchOther(message.actor, message.data), message;\n    }\n    const user = context.others.getUser(message.actor);\n    if (user) {\n      return {\n        type: \"update\",\n        updates: message.data,\n        user\n      };\n    } else {\n      return void 0;\n    }\n  }\n  function onUserLeftMessage(message) {\n    const user = context.others.getUser(message.actor);\n    if (user) {\n      context.others.removeConnection(message.actor);\n      return { type: \"leave\", user };\n    }\n    return null;\n  }\n  function onRoomStateMessage(message, batchedUpdatesWrapper) {\n    context.dynamicSessionInfo.set({\n      actor: message.actor,\n      nonce: message.nonce,\n      scopes: message.scopes\n    });\n    context.idFactory = makeIdFactory(message.actor);\n    notifySelfChanged(batchedUpdatesWrapper);\n    for (const connectionId of context.others.connectionIds()) {\n      const user = message.users[connectionId];\n      if (user === void 0) {\n        context.others.removeConnection(connectionId);\n      }\n    }\n    for (const key in message.users) {\n      const user = message.users[key];\n      const connectionId = Number(key);\n      context.others.setConnection(\n        connectionId,\n        user.id,\n        user.info,\n        user.scopes\n      );\n    }\n    return { type: \"reset\" };\n  }\n  function canUndo() {\n    return context.undoStack.length > 0;\n  }\n  function canRedo() {\n    return context.redoStack.length > 0;\n  }\n  function onHistoryChange(batchedUpdatesWrapper) {\n    batchedUpdatesWrapper(() => {\n      eventHub.history.notify({ canUndo: canUndo(), canRedo: canRedo() });\n    });\n  }\n  function onUserJoinedMessage(message) {\n    context.others.setConnection(\n      message.actor,\n      message.id,\n      message.info,\n      message.scopes\n    );\n    context.buffer.messages.push({\n      type: 100 /* UPDATE_PRESENCE */,\n      data: context.myPresence.current,\n      targetActor: message.actor\n    });\n    flushNowOrSoon();\n    const user = context.others.getUser(message.actor);\n    return user ? { type: \"enter\", user } : void 0;\n  }\n  function parseServerMessage(data) {\n    if (!isJsonObject(data)) {\n      return null;\n    }\n    return data;\n  }\n  function parseServerMessages(text) {\n    const data = tryParseJson(text);\n    if (data === void 0) {\n      return null;\n    } else if (isJsonArray(data)) {\n      return compact(data.map((item) => parseServerMessage(item)));\n    } else {\n      return compact([parseServerMessage(data)]);\n    }\n  }\n  function applyAndSendOps(offlineOps, batchedUpdatesWrapper) {\n    if (offlineOps.size === 0) {\n      return;\n    }\n    const messages = [];\n    const ops = Array.from(offlineOps.values());\n    const result = applyOps(ops, true);\n    messages.push({\n      type: 201 /* UPDATE_STORAGE */,\n      ops: result.ops\n    });\n    notify(result.updates, batchedUpdatesWrapper);\n    sendMessages(messages);\n  }\n  function handleServerMessage(event) {\n    if (typeof event.data !== \"string\") {\n      return;\n    }\n    const messages = parseServerMessages(event.data);\n    if (messages === null || messages.length === 0) {\n      return;\n    }\n    const updates = {\n      storageUpdates: /* @__PURE__ */ new Map(),\n      others: []\n    };\n    batchUpdates(() => {\n      for (const message of messages) {\n        switch (message.type) {\n          case 101 /* USER_JOINED */: {\n            const userJoinedUpdate = onUserJoinedMessage(message);\n            if (userJoinedUpdate) {\n              updates.others.push(userJoinedUpdate);\n            }\n            break;\n          }\n          case 100 /* UPDATE_PRESENCE */: {\n            const othersPresenceUpdate = onUpdatePresenceMessage(message);\n            if (othersPresenceUpdate) {\n              updates.others.push(othersPresenceUpdate);\n            }\n            break;\n          }\n          case 103 /* BROADCASTED_EVENT */: {\n            const others = context.others.current;\n            eventHub.customEvent.notify({\n              connectionId: message.actor,\n              user: message.actor < 0 ? null : others.find((u) => u.connectionId === message.actor) ?? null,\n              event: message.event\n            });\n            break;\n          }\n          case 102 /* USER_LEFT */: {\n            const event2 = onUserLeftMessage(message);\n            if (event2) {\n              updates.others.push(event2);\n            }\n            break;\n          }\n          case 300 /* UPDATE_YDOC */: {\n            eventHub.ydoc.notify(message);\n            break;\n          }\n          case 104 /* ROOM_STATE */: {\n            updates.others.push(onRoomStateMessage(message, doNotBatchUpdates));\n            break;\n          }\n          case 200 /* INITIAL_STORAGE_STATE */: {\n            processInitialStorage(message);\n            break;\n          }\n          case 201 /* UPDATE_STORAGE */: {\n            const applyResult = applyOps(message.ops, false);\n            for (const [key, value] of applyResult.updates.storageUpdates) {\n              updates.storageUpdates.set(\n                key,\n                mergeStorageUpdates(updates.storageUpdates.get(key), value)\n              );\n            }\n            break;\n          }\n          case 299 /* REJECT_STORAGE_OP */: {\n            errorWithTitle(\n              \"Storage mutation rejection error\",\n              message.reason\n            );\n            if (true) {\n              const traces = /* @__PURE__ */ new Set();\n              for (const opId of message.opIds) {\n                const trace = context.opStackTraces?.get(opId);\n                if (trace) {\n                  traces.add(trace);\n                }\n              }\n              if (traces.size > 0) {\n                warnWithTitle(\n                  \"The following function calls caused the rejected storage mutations:\",\n                  `\n\n${Array.from(traces).join(\"\\n\\n\")}`\n                );\n              }\n              throw new Error(\n                `Storage mutations rejected by server: ${message.reason}`\n              );\n            }\n            break;\n          }\n          case 400 /* THREAD_CREATED */:\n          case 407 /* THREAD_DELETED */:\n          case 401 /* THREAD_METADATA_UPDATED */:\n          case 408 /* THREAD_UPDATED */:\n          case 405 /* COMMENT_REACTION_ADDED */:\n          case 406 /* COMMENT_REACTION_REMOVED */:\n          case 402 /* COMMENT_CREATED */:\n          case 403 /* COMMENT_EDITED */:\n          case 404 /* COMMENT_DELETED */: {\n            eventHub.comments.notify(message);\n            break;\n          }\n        }\n      }\n      notify(updates, doNotBatchUpdates);\n    });\n  }\n  function flushNowOrSoon() {\n    const storageOps = context.buffer.storageOperations;\n    if (storageOps.length > 0) {\n      for (const op of storageOps) {\n        context.unacknowledgedOps.set(nn(op.opId), op);\n      }\n      notifyStorageStatus();\n    }\n    if (managedSocket.getStatus() !== \"connected\") {\n      context.buffer.storageOperations = [];\n      return;\n    }\n    const now = Date.now();\n    const elapsedMillis = now - context.buffer.lastFlushedAt;\n    if (elapsedMillis >= config.throttleDelay) {\n      const messagesToFlush = serializeBuffer();\n      if (messagesToFlush.length === 0) {\n        return;\n      }\n      sendMessages(messagesToFlush);\n      context.buffer = {\n        flushTimerID: void 0,\n        lastFlushedAt: now,\n        messages: [],\n        storageOperations: [],\n        presenceUpdates: null\n      };\n    } else {\n      clearTimeout(context.buffer.flushTimerID);\n      context.buffer.flushTimerID = setTimeout(\n        flushNowOrSoon,\n        config.throttleDelay - elapsedMillis\n      );\n    }\n  }\n  function serializeBuffer() {\n    const messages = [];\n    if (context.buffer.presenceUpdates) {\n      messages.push(\n        context.buffer.presenceUpdates.type === \"full\" ? {\n          type: 100 /* UPDATE_PRESENCE */,\n          // Populating the `targetActor` field turns this message into\n          // a Full Presence™ update message (not a patch), which will get\n          // interpreted by other clients as such.\n          targetActor: -1,\n          data: context.buffer.presenceUpdates.data\n        } : {\n          type: 100 /* UPDATE_PRESENCE */,\n          data: context.buffer.presenceUpdates.data\n        }\n      );\n    }\n    for (const event of context.buffer.messages) {\n      messages.push(event);\n    }\n    if (context.buffer.storageOperations.length > 0) {\n      messages.push({\n        type: 201 /* UPDATE_STORAGE */,\n        ops: context.buffer.storageOperations\n      });\n    }\n    return messages;\n  }\n  function updateYDoc(update, guid) {\n    const clientMsg = {\n      type: 301 /* UPDATE_YDOC */,\n      update,\n      guid\n    };\n    context.buffer.messages.push(clientMsg);\n    eventHub.ydoc.notify(clientMsg);\n    flushNowOrSoon();\n  }\n  function broadcastEvent(event, options2 = {\n    shouldQueueEventIfNotReady: false\n  }) {\n    if (managedSocket.getStatus() !== \"connected\" && !options2.shouldQueueEventIfNotReady) {\n      return;\n    }\n    context.buffer.messages.push({\n      type: 103 /* BROADCAST_EVENT */,\n      event\n    });\n    flushNowOrSoon();\n  }\n  function dispatchOps(ops) {\n    const { storageOperations } = context.buffer;\n    for (const op of ops) {\n      storageOperations.push(op);\n    }\n    flushNowOrSoon();\n  }\n  let _getStorage$ = null;\n  let _resolveStoragePromise = null;\n  function processInitialStorage(message) {\n    const unacknowledgedOps = new Map(context.unacknowledgedOps);\n    createOrUpdateRootFromMessage(message, doNotBatchUpdates);\n    applyAndSendOps(unacknowledgedOps, doNotBatchUpdates);\n    _resolveStoragePromise?.();\n    notifyStorageStatus();\n    eventHub.storageDidLoad.notify();\n  }\n  async function streamStorage() {\n    if (!managedSocket.authValue) {\n      return;\n    }\n    const result = await streamFetch(managedSocket.authValue, config.roomId);\n    const items = await result.json();\n    processInitialStorage({ type: 200 /* INITIAL_STORAGE_STATE */, items });\n  }\n  function refreshStorage(options2) {\n    const messages = context.buffer.messages;\n    if (config.unstable_streamData) {\n      void streamStorage();\n    } else if (!messages.some((msg) => msg.type === 200 /* FETCH_STORAGE */)) {\n      messages.push({ type: 200 /* FETCH_STORAGE */ });\n    }\n    if (options2.flush) {\n      flushNowOrSoon();\n    }\n  }\n  function startLoadingStorage() {\n    if (_getStorage$ === null) {\n      refreshStorage({ flush: true });\n      _getStorage$ = new Promise((resolve) => {\n        _resolveStoragePromise = resolve;\n      });\n      notifyStorageStatus();\n    }\n    return _getStorage$;\n  }\n  function getStorageSnapshot() {\n    const root = context.root;\n    if (root !== void 0) {\n      return root;\n    } else {\n      void startLoadingStorage();\n      return null;\n    }\n  }\n  async function getStorage() {\n    if (context.root !== void 0) {\n      return Promise.resolve({\n        root: context.root\n      });\n    }\n    await startLoadingStorage();\n    return {\n      root: nn(context.root)\n    };\n  }\n  function fetchYDoc(vector, guid) {\n    if (!context.buffer.messages.find((m) => {\n      return m.type === 300 /* FETCH_YDOC */ && m.vector === vector && m.guid === guid;\n    })) {\n      context.buffer.messages.push({\n        type: 300 /* FETCH_YDOC */,\n        vector,\n        guid\n      });\n    }\n    flushNowOrSoon();\n  }\n  function undo() {\n    if (context.activeBatch) {\n      throw new Error(\"undo is not allowed during a batch\");\n    }\n    const historyOps = context.undoStack.pop();\n    if (historyOps === void 0) {\n      return;\n    }\n    context.pausedHistory = null;\n    const result = applyOps(historyOps, true);\n    batchUpdates(() => {\n      notify(result.updates, doNotBatchUpdates);\n      context.redoStack.push(result.reverse);\n      onHistoryChange(doNotBatchUpdates);\n    });\n    for (const op of result.ops) {\n      if (op.type !== \"presence\") {\n        context.buffer.storageOperations.push(op);\n      }\n    }\n    flushNowOrSoon();\n  }\n  function redo() {\n    if (context.activeBatch) {\n      throw new Error(\"redo is not allowed during a batch\");\n    }\n    const historyOps = context.redoStack.pop();\n    if (historyOps === void 0) {\n      return;\n    }\n    context.pausedHistory = null;\n    const result = applyOps(historyOps, true);\n    batchUpdates(() => {\n      notify(result.updates, doNotBatchUpdates);\n      context.undoStack.push(result.reverse);\n      onHistoryChange(doNotBatchUpdates);\n    });\n    for (const op of result.ops) {\n      if (op.type !== \"presence\") {\n        context.buffer.storageOperations.push(op);\n      }\n    }\n    flushNowOrSoon();\n  }\n  function clear() {\n    context.undoStack.length = 0;\n    context.redoStack.length = 0;\n  }\n  function batch(callback) {\n    if (context.activeBatch) {\n      return callback();\n    }\n    let returnValue = void 0;\n    batchUpdates(() => {\n      context.activeBatch = {\n        ops: [],\n        updates: {\n          storageUpdates: /* @__PURE__ */ new Map(),\n          presence: false,\n          others: []\n        },\n        reverseOps: []\n      };\n      try {\n        returnValue = callback();\n      } finally {\n        const currentBatch = context.activeBatch;\n        context.activeBatch = null;\n        if (currentBatch.reverseOps.length > 0) {\n          addToUndoStack(currentBatch.reverseOps, doNotBatchUpdates);\n        }\n        if (currentBatch.ops.length > 0) {\n          context.redoStack.length = 0;\n        }\n        if (currentBatch.ops.length > 0) {\n          dispatchOps(currentBatch.ops);\n        }\n        notify(currentBatch.updates, doNotBatchUpdates);\n        flushNowOrSoon();\n      }\n    });\n    return returnValue;\n  }\n  function pauseHistory() {\n    if (context.pausedHistory === null) {\n      context.pausedHistory = [];\n    }\n  }\n  function resumeHistory() {\n    const historyOps = context.pausedHistory;\n    context.pausedHistory = null;\n    if (historyOps !== null && historyOps.length > 0) {\n      _addToRealUndoStack(historyOps, batchUpdates);\n    }\n  }\n  function getStorageStatus() {\n    if (context.root === void 0) {\n      return _getStorage$ === null ? \"not-loaded\" : \"loading\";\n    } else {\n      return context.unacknowledgedOps.size === 0 ? \"synchronized\" : \"synchronizing\";\n    }\n  }\n  let _lastStorageStatus = getStorageStatus();\n  function notifyStorageStatus() {\n    const storageStatus = getStorageStatus();\n    if (_lastStorageStatus !== storageStatus) {\n      _lastStorageStatus = storageStatus;\n      eventHub.storageStatus.notify(storageStatus);\n    }\n  }\n  function isPresenceReady() {\n    return self.current !== null;\n  }\n  async function waitUntilPresenceReady() {\n    while (!isPresenceReady()) {\n      const { promise, resolve } = Promise_withResolvers();\n      const unsub1 = events.self.subscribeOnce(resolve);\n      const unsub2 = events.status.subscribeOnce(resolve);\n      await promise;\n      unsub1();\n      unsub2();\n    }\n  }\n  function isStorageReady() {\n    return getStorageSnapshot() !== null;\n  }\n  async function waitUntilStorageReady() {\n    while (!isStorageReady()) {\n      await getStorage();\n    }\n  }\n  const others_forDevTools = new DerivedRef(\n    context.others,\n    (others) => others.map((other, index) => userToTreeNode(`Other ${index}`, other))\n  );\n  const events = {\n    status: eventHub.status.observable,\n    lostConnection: eventHub.lostConnection.observable,\n    customEvent: eventHub.customEvent.observable,\n    others: eventHub.others.observable,\n    self: eventHub.self.observable,\n    myPresence: eventHub.myPresence.observable,\n    error: eventHub.error.observable,\n    /** @deprecated */\n    storage: eventHub.storageBatch.observable,\n    storageBatch: eventHub.storageBatch.observable,\n    history: eventHub.history.observable,\n    storageDidLoad: eventHub.storageDidLoad.observable,\n    storageStatus: eventHub.storageStatus.observable,\n    ydoc: eventHub.ydoc.observable,\n    comments: eventHub.comments.observable\n  };\n  const commentsApi = createCommentsApi(\n    config.roomId,\n    delegates.authenticate,\n    fetchClientApi\n  );\n  async function fetchNotificationsJson(endpoint, options2) {\n    const authValue = await delegates.authenticate();\n    const response = await fetchClientApi(\n      config.roomId,\n      endpoint,\n      authValue,\n      options2\n    );\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new NotificationsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new NotificationsApiError(\n            response.statusText,\n            response.status\n          );\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  function getRoomNotificationSettings() {\n    return fetchNotificationsJson(\n      \"/notification-settings\"\n    );\n  }\n  function updateRoomNotificationSettings(settings) {\n    return fetchNotificationsJson(\n      \"/notification-settings\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(settings),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n  }\n  async function markInboxNotificationsAsRead(inboxNotificationIds) {\n    await fetchNotificationsJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds })\n    });\n  }\n  const batchedMarkInboxNotificationsAsRead = new Batch(\n    async (batchedInboxNotificationIds) => {\n      const inboxNotificationIds = batchedInboxNotificationIds.flat();\n      await markInboxNotificationsAsRead(inboxNotificationIds);\n      return inboxNotificationIds;\n    },\n    { delay: MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY2 }\n  );\n  async function markInboxNotificationAsRead(inboxNotificationId) {\n    await batchedMarkInboxNotificationsAsRead.get(inboxNotificationId);\n  }\n  return Object.defineProperty(\n    {\n      [kInternal]: {\n        get presenceBuffer() {\n          return deepClone(context.buffer.presenceUpdates?.data ?? null);\n        },\n        // prettier-ignore\n        get undoStack() {\n          return deepClone(context.undoStack);\n        },\n        // prettier-ignore\n        get nodeCount() {\n          return context.nodes.size;\n        },\n        // prettier-ignore\n        // send metadata when using a text editor\n        reportTextEditor,\n        // create a text mention when using a text editor\n        createTextMention,\n        // delete a text mention when using a text editor\n        deleteTextMention,\n        // Support for the Liveblocks browser extension\n        getSelf_forDevTools: () => selfAsTreeNode.current,\n        getOthers_forDevTools: () => others_forDevTools.current,\n        // prettier-ignore\n        simulate: {\n          // These exist only for our E2E testing app\n          explicitClose: (event) => managedSocket._privateSendMachineEvent({ type: \"EXPLICIT_SOCKET_CLOSE\", event }),\n          rawSend: (data) => managedSocket.send(data)\n        },\n        comments: {\n          ...commentsApi\n        },\n        notifications: {\n          getRoomNotificationSettings,\n          updateRoomNotificationSettings,\n          markInboxNotificationAsRead\n        }\n      },\n      id: config.roomId,\n      subscribe: makeClassicSubscribeFn(events),\n      connect: () => managedSocket.connect(),\n      reconnect: () => managedSocket.reconnect(),\n      disconnect: () => managedSocket.disconnect(),\n      destroy: () => {\n        uninstallBgTabSpy();\n        managedSocket.destroy();\n      },\n      // Presence\n      updatePresence,\n      updateYDoc,\n      broadcastEvent,\n      // Storage\n      batch,\n      history: {\n        undo,\n        redo,\n        canUndo,\n        canRedo,\n        clear,\n        pause: pauseHistory,\n        resume: resumeHistory\n      },\n      fetchYDoc,\n      getStorage,\n      getStorageSnapshot,\n      getStorageStatus,\n      isPresenceReady,\n      isStorageReady,\n      waitUntilPresenceReady: memoizeOnSuccess(waitUntilPresenceReady),\n      waitUntilStorageReady: memoizeOnSuccess(waitUntilStorageReady),\n      events,\n      // Core\n      getStatus: () => managedSocket.getStatus(),\n      getSelf: () => self.current,\n      // Presence\n      getPresence: () => context.myPresence.current,\n      getOthers: () => context.others.current\n    },\n    // Explictly make the internal field non-enumerable, to avoid aggressive\n    // freezing when used with Immer\n    kInternal,\n    { enumerable: false }\n  );\n}\nfunction makeClassicSubscribeFn(events) {\n  function subscribeToLiveStructureDeeply(node, callback) {\n    return events.storageBatch.subscribe((updates) => {\n      const relatedUpdates = updates.filter(\n        (update) => isSameNodeOrChildOf(update.node, node)\n      );\n      if (relatedUpdates.length > 0) {\n        callback(relatedUpdates);\n      }\n    });\n  }\n  function subscribeToLiveStructureShallowly(node, callback) {\n    return events.storageBatch.subscribe((updates) => {\n      for (const update of updates) {\n        if (update.node._id === node._id) {\n          callback(update.node);\n        }\n      }\n    });\n  }\n  function subscribe(first, second, options) {\n    if (typeof first === \"string\" && isRoomEventName(first)) {\n      if (typeof second !== \"function\") {\n        throw new Error(\"Second argument must be a callback function\");\n      }\n      const callback = second;\n      switch (first) {\n        case \"event\":\n          return events.customEvent.subscribe(\n            callback\n          );\n        case \"my-presence\":\n          return events.myPresence.subscribe(callback);\n        case \"others\": {\n          const cb = callback;\n          return events.others.subscribe((event) => {\n            const { others, ...internalEvent } = event;\n            return cb(others, internalEvent);\n          });\n        }\n        case \"error\":\n          return events.error.subscribe(callback);\n        case \"status\":\n          return events.status.subscribe(callback);\n        case \"lost-connection\":\n          return events.lostConnection.subscribe(\n            callback\n          );\n        case \"history\":\n          return events.history.subscribe(callback);\n        case \"storage-status\":\n          return events.storageStatus.subscribe(\n            callback\n          );\n        default:\n          return assertNever(\n            first,\n            `\"${String(first)}\" is not a valid event name`\n          );\n      }\n    }\n    if (second === void 0 || typeof first === \"function\") {\n      if (typeof first === \"function\") {\n        const storageCallback = first;\n        return events.storageBatch.subscribe(storageCallback);\n      } else {\n        throw new Error(\"Please specify a listener callback\");\n      }\n    }\n    if (isLiveNode(first)) {\n      const node = first;\n      if (options?.isDeep) {\n        const storageCallback = second;\n        return subscribeToLiveStructureDeeply(node, storageCallback);\n      } else {\n        const nodeCallback = second;\n        return subscribeToLiveStructureShallowly(node, nodeCallback);\n      }\n    }\n    throw new Error(\n      `${String(first)} is not a value that can be subscribed to.`\n    );\n  }\n  return subscribe;\n}\nfunction isRoomEventName(value) {\n  return value === \"my-presence\" || value === \"others\" || value === \"event\" || value === \"error\" || value === \"history\" || value === \"status\" || value === \"storage-status\" || value === \"lost-connection\" || value === \"connection\";\n}\nfunction makeAuthDelegateForRoom(roomId, authManager) {\n  return async () => {\n    return authManager.getAuthValue({ requestedScope: \"room:read\", roomId });\n  };\n}\nfunction makeCreateSocketDelegateForRoom(roomId, baseUrl, WebSocketPolyfill) {\n  return (authValue) => {\n    const ws = WebSocketPolyfill ?? (typeof WebSocket === \"undefined\" ? void 0 : WebSocket);\n    if (ws === void 0) {\n      throw new StopRetrying(\n        \"To use Liveblocks client in a non-DOM environment, you need to provide a WebSocket polyfill.\"\n      );\n    }\n    const url = new URL(baseUrl);\n    url.protocol = url.protocol === \"http:\" ? \"ws\" : \"wss\";\n    url.pathname = \"/v7\";\n    url.searchParams.set(\"roomId\", roomId);\n    if (authValue.type === \"secret\") {\n      url.searchParams.set(\"tok\", authValue.token.raw);\n    } else if (authValue.type === \"public\") {\n      url.searchParams.set(\"pubkey\", authValue.publicApiKey);\n    } else {\n      return assertNever(authValue, \"Unhandled case\");\n    }\n    url.searchParams.set(\"version\", PKG_VERSION || \"dev\");\n    return new ws(url.toString());\n  };\n}\n\n// src/store.ts\nfunction createClientStore() {\n  const store = createStore({\n    threads: {},\n    queries: {},\n    optimisticUpdates: [],\n    inboxNotifications: {},\n    notificationSettings: {}\n  });\n  const optimisticUpdatesEventSource = makeEventSource();\n  return {\n    ...store,\n    deleteThread(threadId) {\n      store.set((state) => {\n        return {\n          ...state,\n          threads: deleteKeyImmutable(state.threads, threadId),\n          inboxNotifications: Object.fromEntries(\n            Object.entries(state.inboxNotifications).filter(\n              ([_id, notification]) => notification.kind === \"thread\" && notification.threadId === threadId\n            )\n          )\n        };\n      });\n    },\n    updateThreadAndNotification(thread, inboxNotification) {\n      store.set((state) => {\n        const existingThread = state.threads[thread.id];\n        return {\n          ...state,\n          threads: existingThread === void 0 || compareThreads(thread, existingThread) === 1 ? { ...state.threads, [thread.id]: thread } : state.threads,\n          inboxNotifications: inboxNotification === void 0 ? state.inboxNotifications : {\n            ...state.inboxNotifications,\n            [inboxNotification.id]: inboxNotification\n          }\n        };\n      });\n    },\n    updateThreadsAndNotifications(threads, inboxNotifications, deletedThreads, deletedInboxNotifications, queryKey) {\n      store.set((state) => ({\n        ...state,\n        threads: applyThreadUpdates(state.threads, {\n          newThreads: threads,\n          deletedThreads\n        }),\n        inboxNotifications: applyNotificationsUpdates(\n          state.inboxNotifications,\n          {\n            newInboxNotifications: inboxNotifications,\n            deletedNotifications: deletedInboxNotifications\n          }\n        ),\n        queries: queryKey !== void 0 ? {\n          ...state.queries,\n          [queryKey]: { isLoading: false, data: void 0 }\n        } : state.queries\n      }));\n    },\n    updateRoomInboxNotificationSettings(roomId, settings, queryKey) {\n      store.set((state) => ({\n        ...state,\n        notificationSettings: {\n          ...state.notificationSettings,\n          [roomId]: settings\n        },\n        queries: {\n          ...state.queries,\n          [queryKey]: { isLoading: false, data: void 0 }\n        }\n      }));\n    },\n    pushOptimisticUpdate(optimisticUpdate) {\n      optimisticUpdatesEventSource.notify(optimisticUpdate);\n      store.set((state) => ({\n        ...state,\n        optimisticUpdates: [...state.optimisticUpdates, optimisticUpdate]\n      }));\n    },\n    setQueryState(queryKey, queryState) {\n      store.set((state) => ({\n        ...state,\n        queries: {\n          ...state.queries,\n          [queryKey]: queryState\n        }\n      }));\n    },\n    optimisticUpdatesEventSource\n  };\n}\nfunction deleteKeyImmutable(record, key) {\n  if (Object.prototype.hasOwnProperty.call(record, key)) {\n    const { [key]: _toDelete, ...rest } = record;\n    return rest;\n  }\n  return record;\n}\nfunction compareThreads(thread1, thread2) {\n  if (thread1.updatedAt && thread2.updatedAt) {\n    return thread1.updatedAt > thread2.updatedAt ? 1 : thread1.updatedAt < thread2.updatedAt ? -1 : 0;\n  } else if (thread1.updatedAt || thread2.updatedAt) {\n    return thread1.updatedAt ? 1 : -1;\n  }\n  if (thread1.createdAt > thread2.createdAt) {\n    return 1;\n  } else if (thread1.createdAt < thread2.createdAt) {\n    return -1;\n  }\n  return 0;\n}\nfunction applyOptimisticUpdates(state) {\n  const result = {\n    threads: {\n      ...state.threads\n    },\n    inboxNotifications: {\n      ...state.inboxNotifications\n    },\n    notificationSettings: {\n      ...state.notificationSettings\n    }\n  };\n  for (const optimisticUpdate of state.optimisticUpdates) {\n    switch (optimisticUpdate.type) {\n      case \"create-thread\": {\n        result.threads[optimisticUpdate.thread.id] = optimisticUpdate.thread;\n        break;\n      }\n      case \"edit-thread-metadata\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        if (thread.updatedAt !== void 0 && thread.updatedAt > optimisticUpdate.updatedAt) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          updatedAt: optimisticUpdate.updatedAt,\n          metadata: {\n            ...thread.metadata,\n            ...optimisticUpdate.metadata\n          }\n        };\n        break;\n      }\n      case \"mark-thread-as-resolved\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          resolved: true\n        };\n        break;\n      }\n      case \"mark-thread-as-unresolved\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          resolved: false\n        };\n        break;\n      }\n      case \"create-comment\": {\n        const thread = result.threads[optimisticUpdate.comment.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = upsertComment(\n          thread,\n          optimisticUpdate.comment\n        );\n        const inboxNotification = Object.values(result.inboxNotifications).find(\n          (notification) => notification.kind === \"thread\" && notification.threadId === thread.id\n        );\n        if (inboxNotification === void 0) {\n          break;\n        }\n        result.inboxNotifications[inboxNotification.id] = {\n          ...inboxNotification,\n          notifiedAt: optimisticUpdate.comment.createdAt,\n          readAt: optimisticUpdate.comment.createdAt\n        };\n        break;\n      }\n      case \"edit-comment\": {\n        const thread = result.threads[optimisticUpdate.comment.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = upsertComment(\n          thread,\n          optimisticUpdate.comment\n        );\n        break;\n      }\n      case \"delete-comment\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = deleteComment(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.deletedAt\n        );\n        break;\n      }\n      case \"delete-thread\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[optimisticUpdate.threadId] = {\n          ...result.threads[optimisticUpdate.threadId],\n          deletedAt: optimisticUpdate.deletedAt,\n          updatedAt: optimisticUpdate.deletedAt,\n          comments: []\n        };\n        break;\n      }\n      case \"add-reaction\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = addReaction(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.reaction\n        );\n        break;\n      }\n      case \"remove-reaction\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = removeReaction(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.emoji,\n          optimisticUpdate.userId,\n          optimisticUpdate.removedAt\n        );\n        break;\n      }\n      case \"mark-inbox-notification-as-read\": {\n        result.inboxNotifications[optimisticUpdate.inboxNotificationId] = {\n          ...state.inboxNotifications[optimisticUpdate.inboxNotificationId],\n          readAt: optimisticUpdate.readAt\n        };\n        break;\n      }\n      case \"mark-all-inbox-notifications-as-read\": {\n        for (const id in result.inboxNotifications) {\n          result.inboxNotifications[id] = {\n            ...result.inboxNotifications[id],\n            readAt: optimisticUpdate.readAt\n          };\n        }\n        break;\n      }\n      case \"delete-inbox-notification\": {\n        const {\n          [optimisticUpdate.inboxNotificationId]: _,\n          ...inboxNotifications\n        } = result.inboxNotifications;\n        result.inboxNotifications = inboxNotifications;\n        break;\n      }\n      case \"delete-all-inbox-notifications\": {\n        result.inboxNotifications = {};\n        break;\n      }\n      case \"update-notification-settings\": {\n        result.notificationSettings[optimisticUpdate.roomId] = {\n          ...result.notificationSettings[optimisticUpdate.roomId],\n          ...optimisticUpdate.settings\n        };\n      }\n    }\n  }\n  return result;\n}\nfunction applyThreadUpdates(existingThreads, updates) {\n  const updatedThreads = { ...existingThreads };\n  updates.newThreads.forEach((thread) => {\n    const existingThread = updatedThreads[thread.id];\n    if (existingThread) {\n      const result = compareThreads(existingThread, thread);\n      if (result === 1) return;\n    }\n    updatedThreads[thread.id] = thread;\n  });\n  updates.deletedThreads.forEach(({ id, deletedAt }) => {\n    const existingThread = updatedThreads[id];\n    if (existingThread === void 0) return;\n    existingThread.deletedAt = deletedAt;\n    existingThread.updatedAt = deletedAt;\n    existingThread.comments = [];\n  });\n  return updatedThreads;\n}\nfunction applyNotificationsUpdates(existingInboxNotifications, updates) {\n  const updatedInboxNotifications = { ...existingInboxNotifications };\n  updates.newInboxNotifications.forEach((notification) => {\n    const existingNotification = updatedInboxNotifications[notification.id];\n    if (existingNotification) {\n      const result = compareInboxNotifications(\n        existingNotification,\n        notification\n      );\n      if (result === 1) return;\n    }\n    updatedInboxNotifications[notification.id] = notification;\n  });\n  updates.deletedNotifications.forEach(\n    ({ id }) => delete updatedInboxNotifications[id]\n  );\n  return updatedInboxNotifications;\n}\nfunction compareInboxNotifications(inboxNotificationA, inboxNotificationB) {\n  if (inboxNotificationA.notifiedAt > inboxNotificationB.notifiedAt) {\n    return 1;\n  } else if (inboxNotificationA.notifiedAt < inboxNotificationB.notifiedAt) {\n    return -1;\n  }\n  if (inboxNotificationA.readAt && inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt > inboxNotificationB.readAt ? 1 : inboxNotificationA.readAt < inboxNotificationB.readAt ? -1 : 0;\n  } else if (inboxNotificationA.readAt || inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt ? 1 : -1;\n  }\n  return 0;\n}\nfunction upsertComment(thread, comment) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  if (comment.threadId !== thread.id) {\n    warn(\n      `Comment ${comment.id} does not belong to thread ${thread.id}`\n    );\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (existingComment2) => existingComment2.id === comment.id\n  );\n  if (existingComment === void 0) {\n    const updatedAt = new Date(\n      Math.max(thread.updatedAt?.getTime() || 0, comment.createdAt.getTime())\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt,\n      comments: [...thread.comments, comment]\n    };\n    return updatedThread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  if (existingComment.editedAt === void 0 || comment.editedAt === void 0 || existingComment.editedAt <= comment.editedAt) {\n    const updatedComments = thread.comments.map(\n      (existingComment2) => existingComment2.id === comment.id ? comment : existingComment2\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt: new Date(\n        Math.max(\n          thread.updatedAt?.getTime() || 0,\n          comment.editedAt?.getTime() || comment.createdAt.getTime()\n        )\n      ),\n      comments: updatedComments\n    };\n    return updatedThread;\n  }\n  return thread;\n}\nfunction deleteComment(thread, commentId, deletedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      deletedAt,\n      body: void 0\n    } : comment\n  );\n  if (!updatedComments.some((comment) => comment.deletedAt === void 0)) {\n    return {\n      ...thread,\n      deletedAt,\n      updatedAt: deletedAt,\n      comments: []\n    };\n  }\n  return {\n    ...thread,\n    updatedAt: deletedAt,\n    comments: updatedComments\n  };\n}\nfunction addReaction(thread, commentId, reaction) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: upsertReaction(comment.reactions, reaction)\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(reaction.createdAt.getTime(), thread.updatedAt?.getTime() || 0)\n    ),\n    comments: updatedComments\n  };\n}\nfunction removeReaction(thread, commentId, emoji, userId, removedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: comment.reactions.map(\n        (reaction) => reaction.emoji === emoji ? {\n          ...reaction,\n          users: reaction.users.filter((user) => user.id !== userId)\n        } : reaction\n      ).filter((reaction) => reaction.users.length > 0)\n      // Remove reactions with no users left\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(removedAt.getTime(), thread.updatedAt?.getTime() || 0)\n    ),\n    comments: updatedComments\n  };\n}\nfunction upsertReaction(reactions, reaction) {\n  const existingReaction = reactions.find(\n    (existingReaction2) => existingReaction2.emoji === reaction.emoji\n  );\n  if (existingReaction === void 0) {\n    return [\n      ...reactions,\n      {\n        emoji: reaction.emoji,\n        createdAt: reaction.createdAt,\n        users: [{ id: reaction.userId }]\n      }\n    ];\n  }\n  if (existingReaction.users.some((user) => user.id === reaction.userId) === false) {\n    return reactions.map(\n      (existingReaction2) => existingReaction2.emoji === reaction.emoji ? {\n        ...existingReaction2,\n        users: [...existingReaction2.users, { id: reaction.userId }]\n      } : existingReaction2\n    );\n  }\n  return reactions;\n}\n\n// src/client.ts\nvar MIN_THROTTLE = 16;\nvar MAX_THROTTLE = 1e3;\nvar DEFAULT_THROTTLE = 100;\nvar MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT = 15e3;\nvar MIN_LOST_CONNECTION_TIMEOUT = 200;\nvar RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT = 1e3;\nvar MAX_LOST_CONNECTION_TIMEOUT = 3e4;\nvar DEFAULT_LOST_CONNECTION_TIMEOUT = 5e3;\nvar RESOLVE_USERS_BATCH_DELAY = 50;\nvar RESOLVE_ROOMS_INFO_BATCH_DELAY = 50;\nfunction getBaseUrl(baseUrl) {\n  if (typeof baseUrl === \"string\" && baseUrl.startsWith(\"http\")) {\n    return baseUrl;\n  } else {\n    return DEFAULT_BASE_URL;\n  }\n}\nfunction getAuthBearerHeaderFromAuthValue(authValue) {\n  if (authValue.type === \"public\") {\n    return authValue.publicApiKey;\n  } else {\n    return authValue.token.raw;\n  }\n}\nfunction createClient(options) {\n  const clientOptions = options;\n  const throttleDelay = getThrottle(clientOptions.throttle ?? DEFAULT_THROTTLE);\n  const lostConnectionTimeout = getLostConnectionTimeout(\n    clientOptions.lostConnectionTimeout ?? DEFAULT_LOST_CONNECTION_TIMEOUT\n  );\n  const backgroundKeepAliveTimeout = getBackgroundKeepAliveTimeout(\n    clientOptions.backgroundKeepAliveTimeout\n  );\n  const baseUrl = getBaseUrl(clientOptions.baseUrl);\n  const authManager = createAuthManager(options);\n  const roomsById = /* @__PURE__ */ new Map();\n  function teardownRoom(room) {\n    unlinkDevTools(room.id);\n    roomsById.delete(room.id);\n    room.destroy();\n  }\n  function leaseRoom(details) {\n    const leave = () => {\n      const self = leave;\n      if (!details.unsubs.delete(self)) {\n        warn(\n          \"This leave function was already called. Calling it more than once has no effect.\"\n        );\n      } else {\n        if (details.unsubs.size === 0) {\n          teardownRoom(details.room);\n        }\n      }\n    };\n    details.unsubs.add(leave);\n    return {\n      room: details.room,\n      leave\n    };\n  }\n  function enterRoom(roomId, ...args) {\n    const existing = roomsById.get(roomId);\n    if (existing !== void 0) {\n      return leaseRoom(existing);\n    }\n    const options2 = args[0] ?? {};\n    const initialPresence = (typeof options2.initialPresence === \"function\" ? options2.initialPresence(roomId) : options2.initialPresence) ?? {};\n    const initialStorage = (typeof options2.initialStorage === \"function\" ? options2.initialStorage(roomId) : options2.initialStorage) ?? {};\n    const newRoom = createRoom(\n      { initialPresence, initialStorage },\n      {\n        roomId,\n        throttleDelay,\n        lostConnectionTimeout,\n        backgroundKeepAliveTimeout,\n        polyfills: clientOptions.polyfills,\n        delegates: clientOptions.mockedDelegates ?? {\n          createSocket: makeCreateSocketDelegateForRoom(\n            roomId,\n            baseUrl,\n            clientOptions.polyfills?.WebSocket\n          ),\n          authenticate: makeAuthDelegateForRoom(roomId, authManager)\n        },\n        enableDebugLogging: clientOptions.enableDebugLogging,\n        unstable_batchedUpdates: options2?.unstable_batchedUpdates,\n        baseUrl,\n        unstable_fallbackToHTTP: !!clientOptions.unstable_fallbackToHTTP,\n        unstable_streamData: !!clientOptions.unstable_streamData\n      }\n    );\n    const newRoomDetails = {\n      room: newRoom,\n      unsubs: /* @__PURE__ */ new Set()\n    };\n    roomsById.set(roomId, newRoomDetails);\n    setupDevTools(() => Array.from(roomsById.keys()));\n    linkDevTools(roomId, newRoom);\n    const shouldConnect = options2.autoConnect ?? true;\n    if (shouldConnect) {\n      if (typeof atob === \"undefined\") {\n        if (clientOptions.polyfills?.atob === void 0) {\n          throw new Error(\n            \"You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill\"\n          );\n        }\n        global.atob = clientOptions.polyfills.atob;\n      }\n      newRoom.connect();\n    }\n    return leaseRoom(newRoomDetails);\n  }\n  function getRoom(roomId) {\n    const room = roomsById.get(roomId)?.room;\n    return room ? room : null;\n  }\n  function logout() {\n    authManager.reset();\n    for (const { room } of roomsById.values()) {\n      if (!isIdle(room.getStatus())) {\n        room.reconnect();\n      }\n    }\n  }\n  const currentUserIdStore = createStore(null);\n  const {\n    getInboxNotifications,\n    getUnreadInboxNotificationsCount,\n    markAllInboxNotificationsAsRead,\n    markInboxNotificationAsRead,\n    deleteAllInboxNotifications,\n    deleteInboxNotification\n  } = createNotificationsApi({\n    baseUrl,\n    fetcher: clientOptions.polyfills?.fetch || /* istanbul ignore next */\n    fetch,\n    authManager,\n    currentUserIdStore\n  });\n  const cacheStore = createClientStore();\n  const resolveUsers = clientOptions.resolveUsers;\n  const warnIfNoResolveUsers = createDevelopmentWarning(\n    () => !resolveUsers,\n    \"Set the resolveUsers option in createClient to specify user info.\"\n  );\n  const usersStore = createBatchStore(\n    async (batchedUserIds) => {\n      const userIds = batchedUserIds.flat();\n      const users = await resolveUsers?.({ userIds });\n      warnIfNoResolveUsers();\n      return users ?? userIds.map(() => void 0);\n    },\n    { delay: RESOLVE_USERS_BATCH_DELAY }\n  );\n  const resolveRoomsInfo = clientOptions.resolveRoomsInfo;\n  const warnIfNoResolveRoomsInfo = createDevelopmentWarning(\n    () => !resolveRoomsInfo,\n    \"Set the resolveRoomsInfo option in createClient to specify room info.\"\n  );\n  const roomsInfoStore = createBatchStore(\n    async (batchedRoomIds) => {\n      const roomIds = batchedRoomIds.flat();\n      const roomsInfo = await resolveRoomsInfo?.({ roomIds });\n      warnIfNoResolveRoomsInfo();\n      return roomsInfo ?? roomIds.map(() => void 0);\n    },\n    { delay: RESOLVE_ROOMS_INFO_BATCH_DELAY }\n  );\n  return Object.defineProperty(\n    {\n      enterRoom,\n      getRoom,\n      logout,\n      // Internal\n      [kInternal]: {\n        notifications: {\n          getInboxNotifications,\n          getUnreadInboxNotificationsCount,\n          markAllInboxNotificationsAsRead,\n          markInboxNotificationAsRead,\n          deleteAllInboxNotifications,\n          deleteInboxNotification\n        },\n        currentUserIdStore,\n        resolveMentionSuggestions: clientOptions.resolveMentionSuggestions,\n        cacheStore,\n        usersStore,\n        roomsInfoStore,\n        getRoomIds() {\n          return Array.from(roomsById.keys());\n        }\n      }\n    },\n    kInternal,\n    {\n      enumerable: false\n    }\n  );\n}\nvar NotificationsApiError = class extends Error {\n  constructor(message, status, details) {\n    super(message);\n    this.message = message;\n    this.status = status;\n    this.details = details;\n  }\n};\nfunction checkBounds(option, value, min, max, recommendedMin) {\n  if (typeof value !== \"number\" || value < min || max !== void 0 && value > max) {\n    throw new Error(\n      max !== void 0 ? `${option} should be between ${recommendedMin ?? min} and ${max}.` : `${option} should be at least ${recommendedMin ?? min}.`\n    );\n  }\n  return value;\n}\nfunction getBackgroundKeepAliveTimeout(value) {\n  if (value === void 0) return void 0;\n  return checkBounds(\n    \"backgroundKeepAliveTimeout\",\n    value,\n    MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT\n  );\n}\nfunction getThrottle(value) {\n  return checkBounds(\"throttle\", value, MIN_THROTTLE, MAX_THROTTLE);\n}\nfunction getLostConnectionTimeout(value) {\n  return checkBounds(\n    \"lostConnectionTimeout\",\n    value,\n    MIN_LOST_CONNECTION_TIMEOUT,\n    MAX_LOST_CONNECTION_TIMEOUT,\n    RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT\n  );\n}\nfunction createDevelopmentWarning(condition, ...args) {\n  let hasWarned = false;\n  if (true) {\n    return () => {\n      if (!hasWarned && (typeof condition === \"function\" ? condition() : condition)) {\n        warn(...args);\n        hasWarned = true;\n      }\n    };\n  } else {}\n}\n\n// src/comments/comment-body.ts\nfunction isCommentBodyParagraph(element) {\n  return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyText(element) {\n  return !(\"type\" in element) && \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n  return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n  return \"type\" in element && element.type === \"link\";\n}\nvar commentBodyElementsGuards = {\n  paragraph: isCommentBodyParagraph,\n  text: isCommentBodyText,\n  link: isCommentBodyLink,\n  mention: isCommentBodyMention\n};\nvar commentBodyElementsTypes = {\n  paragraph: \"block\",\n  text: \"inline\",\n  link: \"inline\",\n  mention: \"inline\"\n};\nfunction traverseCommentBody(body, elementOrVisitor, possiblyVisitor) {\n  if (!body || !body?.content) {\n    return;\n  }\n  const element = typeof elementOrVisitor === \"string\" ? elementOrVisitor : void 0;\n  const type = element ? commentBodyElementsTypes[element] : \"all\";\n  const guard = element ? commentBodyElementsGuards[element] : () => true;\n  const visitor = typeof elementOrVisitor === \"function\" ? elementOrVisitor : possiblyVisitor;\n  for (const block of body.content) {\n    if (type === \"all\" || type === \"block\") {\n      if (guard(block)) {\n        visitor?.(block);\n      }\n    }\n    if (type === \"all\" || type === \"inline\") {\n      for (const inline of block.children) {\n        if (guard(inline)) {\n          visitor?.(inline);\n        }\n      }\n    }\n  }\n}\nfunction getMentionedIdsFromCommentBody(body) {\n  const mentionedIds = /* @__PURE__ */ new Set();\n  traverseCommentBody(\n    body,\n    \"mention\",\n    (mention) => mentionedIds.add(mention.id)\n  );\n  return Array.from(mentionedIds);\n}\nasync function resolveUsersInCommentBody(body, resolveUsers) {\n  const resolvedUsers = /* @__PURE__ */ new Map();\n  if (!resolveUsers) {\n    return resolvedUsers;\n  }\n  const userIds = getMentionedIdsFromCommentBody(body);\n  const users = await resolveUsers({\n    userIds\n  });\n  for (const [index, userId] of userIds.entries()) {\n    const user = users?.[index];\n    if (user) {\n      resolvedUsers.set(userId, user);\n    }\n  }\n  return resolvedUsers;\n}\nvar htmlEscapables = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar htmlEscapablesRegex = new RegExp(\n  Object.keys(htmlEscapables).map((entity) => `\\\\${entity}`).join(\"|\"),\n  \"g\"\n);\nfunction htmlSafe(value) {\n  return new HtmlSafeString([String(value)], []);\n}\nfunction joinHtml(strings) {\n  if (strings.length <= 0) {\n    return new HtmlSafeString([\"\"], []);\n  }\n  return new HtmlSafeString(\n    [\"\", ...Array(strings.length - 1).fill(\"\"), \"\"],\n    strings\n  );\n}\nfunction escapeHtml(value) {\n  if (value instanceof HtmlSafeString) {\n    return value.toString();\n  }\n  if (Array.isArray(value)) {\n    return joinHtml(value).toString();\n  }\n  return String(value).replace(\n    htmlEscapablesRegex,\n    (character) => htmlEscapables[character]\n  );\n}\nvar HtmlSafeString = class {\n  constructor(strings, values) {\n    this._strings = strings;\n    this._values = values;\n  }\n  toString() {\n    return this._strings.reduce((result, str, i) => {\n      return result + escapeHtml(nn(this._values[i - 1])) + str;\n    });\n  }\n};\nfunction html(strings, ...values) {\n  return new HtmlSafeString(strings, values);\n}\nvar markdownEscapables = {\n  _: \"\\\\_\",\n  \"*\": \"\\\\*\",\n  \"#\": \"\\\\#\",\n  \"`\": \"\\\\`\",\n  \"~\": \"\\\\~\",\n  \"!\": \"\\\\!\",\n  \"|\": \"\\\\|\",\n  \"(\": \"\\\\(\",\n  \")\": \"\\\\)\",\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"[\": \"\\\\[\",\n  \"]\": \"\\\\]\"\n};\nvar markdownEscapablesRegex = new RegExp(\n  Object.keys(markdownEscapables).map((entity) => `\\\\${entity}`).join(\"|\"),\n  \"g\"\n);\nfunction joinMarkdown(strings) {\n  if (strings.length <= 0) {\n    return new MarkdownSafeString([\"\"], []);\n  }\n  return new MarkdownSafeString(\n    [\"\", ...Array(strings.length - 1).fill(\"\"), \"\"],\n    strings\n  );\n}\nfunction escapeMarkdown(value) {\n  if (value instanceof MarkdownSafeString) {\n    return value.toString();\n  }\n  if (Array.isArray(value)) {\n    return joinMarkdown(value).toString();\n  }\n  return String(value).replace(\n    markdownEscapablesRegex,\n    (character) => markdownEscapables[character]\n  );\n}\nvar MarkdownSafeString = class {\n  constructor(strings, values) {\n    this._strings = strings;\n    this._values = values;\n  }\n  toString() {\n    return this._strings.reduce((result, str, i) => {\n      return result + escapeMarkdown(nn(this._values[i - 1])) + str;\n    });\n  }\n};\nfunction markdown(strings, ...values) {\n  return new MarkdownSafeString(strings, values);\n}\nfunction toAbsoluteUrl(url) {\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n    return url;\n  } else if (url.startsWith(\"www.\")) {\n    return \"https://\" + url;\n  }\n  return;\n}\nvar stringifyCommentBodyPlainElements = {\n  paragraph: ({ children }) => children,\n  text: ({ element }) => element.text,\n  link: ({ element }) => element.text ?? element.url,\n  mention: ({ element, user }) => {\n    return `@${user?.name ?? element.id}`;\n  }\n};\nvar stringifyCommentBodyHtmlElements = {\n  paragraph: ({ children }) => {\n    return children ? html`<p>${htmlSafe(children)}</p>` : children;\n  },\n  text: ({ element }) => {\n    let children = element.text;\n    if (!children) {\n      return children;\n    }\n    if (element.bold) {\n      children = html`<strong>${children}</strong>`;\n    }\n    if (element.italic) {\n      children = html`<em>${children}</em>`;\n    }\n    if (element.strikethrough) {\n      children = html`<s>${children}</s>`;\n    }\n    if (element.code) {\n      children = html`<code>${children}</code>`;\n    }\n    return children;\n  },\n  link: ({ element, href }) => {\n    return html`<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\">${element.text ?? element.url}</a>`;\n  },\n  mention: ({ element, user }) => {\n    return html`<span data-mention>@${user?.name ?? element.id}</span>`;\n  }\n};\nvar stringifyCommentBodyMarkdownElements = {\n  paragraph: ({ children }) => {\n    return children;\n  },\n  text: ({ element }) => {\n    let children = element.text;\n    if (!children) {\n      return children;\n    }\n    if (element.bold) {\n      children = markdown`**${children}**`;\n    }\n    if (element.italic) {\n      children = markdown`_${children}_`;\n    }\n    if (element.strikethrough) {\n      children = markdown`~~${children}~~`;\n    }\n    if (element.code) {\n      children = markdown`\\`${children}\\``;\n    }\n    return children;\n  },\n  link: ({ element, href }) => {\n    return markdown`[${element.text ?? element.url}](${href})`;\n  },\n  mention: ({ element, user }) => {\n    return markdown`@${user?.name ?? element.id}`;\n  }\n};\nasync function stringifyCommentBody(body, options) {\n  const format = options?.format ?? \"plain\";\n  const separator = options?.separator ?? (format === \"markdown\" ? \"\\n\\n\" : \"\\n\");\n  const elements = {\n    ...format === \"html\" ? stringifyCommentBodyHtmlElements : format === \"markdown\" ? stringifyCommentBodyMarkdownElements : stringifyCommentBodyPlainElements,\n    ...options?.elements\n  };\n  const resolvedUsers = await resolveUsersInCommentBody(\n    body,\n    options?.resolveUsers\n  );\n  const blocks = body.content.flatMap((block, blockIndex) => {\n    switch (block.type) {\n      case \"paragraph\": {\n        const inlines = block.children.flatMap((inline, inlineIndex) => {\n          if (isCommentBodyMention(inline)) {\n            return inline.id ? [\n              elements.mention(\n                {\n                  element: inline,\n                  user: resolvedUsers.get(inline.id)\n                },\n                inlineIndex\n              )\n            ] : [];\n          }\n          if (isCommentBodyLink(inline)) {\n            return [\n              elements.link(\n                {\n                  element: inline,\n                  href: toAbsoluteUrl(inline.url) ?? inline.url\n                },\n                inlineIndex\n              )\n            ];\n          }\n          if (isCommentBodyText(inline)) {\n            return [elements.text({ element: inline }, inlineIndex)];\n          }\n          return [];\n        });\n        return [\n          elements.paragraph(\n            { element: block, children: inlines.join(\"\") },\n            blockIndex\n          )\n        ];\n      }\n      default:\n        return [];\n    }\n  });\n  return blocks.join(separator);\n}\n\n// src/crdts/utils.ts\nfunction toPlainLson(lson) {\n  if (lson instanceof LiveObject) {\n    return {\n      liveblocksType: \"LiveObject\",\n      data: Object.fromEntries(\n        Object.entries(lson.toObject()).flatMap(\n          ([key, value]) => value !== void 0 ? [[key, toPlainLson(value)]] : []\n        )\n      )\n    };\n  } else if (lson instanceof LiveMap) {\n    return {\n      liveblocksType: \"LiveMap\",\n      data: Object.fromEntries(\n        [...lson].map(([key, value]) => [key, toPlainLson(value)])\n      )\n    };\n  } else if (lson instanceof LiveList) {\n    return {\n      liveblocksType: \"LiveList\",\n      data: [...lson].map((item) => toPlainLson(item))\n    };\n  } else {\n    return lson;\n  }\n}\n\n// src/immutable.ts\nfunction lsonObjectToJson(obj) {\n  const result = {};\n  for (const key in obj) {\n    const val = obj[key];\n    if (val !== void 0) {\n      result[key] = lsonToJson(val);\n    }\n  }\n  return result;\n}\nfunction liveObjectToJson(liveObject) {\n  return lsonObjectToJson(liveObject.toObject());\n}\nfunction liveMapToJson(map) {\n  const result = {};\n  for (const [key, value] of map.entries()) {\n    result[key] = lsonToJson(value);\n  }\n  return result;\n}\nfunction lsonListToJson(value) {\n  return value.map(lsonToJson);\n}\nfunction liveListToJson(value) {\n  return lsonListToJson(value.toArray());\n}\nfunction lsonToJson(value) {\n  if (value instanceof LiveObject) {\n    return liveObjectToJson(value);\n  } else if (value instanceof LiveList) {\n    return liveListToJson(value);\n  } else if (value instanceof LiveMap) {\n    return liveMapToJson(value);\n  } else if (value instanceof LiveRegister) {\n    return value.data;\n  }\n  if (Array.isArray(value)) {\n    return lsonListToJson(value);\n  } else if (isPlainObject(value)) {\n    return lsonObjectToJson(value);\n  }\n  return value;\n}\nfunction deepLiveify(value) {\n  if (Array.isArray(value)) {\n    return new LiveList(value.map(deepLiveify));\n  } else if (isPlainObject(value)) {\n    const init = {};\n    for (const key in value) {\n      const val = value[key];\n      if (val === void 0) {\n        continue;\n      }\n      init[key] = deepLiveify(val);\n    }\n    return new LiveObject(init);\n  } else {\n    return value;\n  }\n}\nfunction patchLiveList(liveList, prev, next) {\n  let i = 0;\n  let prevEnd = prev.length - 1;\n  let nextEnd = next.length - 1;\n  let prevNode = prev[0];\n  let nextNode = next[0];\n  outer: {\n    while (prevNode === nextNode) {\n      ++i;\n      if (i > prevEnd || i > nextEnd) {\n        break outer;\n      }\n      prevNode = prev[i];\n      nextNode = next[i];\n    }\n    prevNode = prev[prevEnd];\n    nextNode = next[nextEnd];\n    while (prevNode === nextNode) {\n      prevEnd--;\n      nextEnd--;\n      if (i > prevEnd || i > nextEnd) {\n        break outer;\n      }\n      prevNode = prev[prevEnd];\n      nextNode = next[nextEnd];\n    }\n  }\n  if (i > prevEnd) {\n    if (i <= nextEnd) {\n      while (i <= nextEnd) {\n        liveList.insert(deepLiveify(next[i]), i);\n        i++;\n      }\n    }\n  } else if (i > nextEnd) {\n    let localI = i;\n    while (localI <= prevEnd) {\n      liveList.delete(i);\n      localI++;\n    }\n  } else {\n    while (i <= prevEnd && i <= nextEnd) {\n      prevNode = prev[i];\n      nextNode = next[i];\n      const liveListNode = liveList.get(i);\n      if (isLiveObject(liveListNode) && isPlainObject(prevNode) && isPlainObject(nextNode)) {\n        patchLiveObject(liveListNode, prevNode, nextNode);\n      } else {\n        liveList.set(i, deepLiveify(nextNode));\n      }\n      i++;\n    }\n    while (i <= nextEnd) {\n      liveList.insert(deepLiveify(next[i]), i);\n      i++;\n    }\n    let localI = i;\n    while (localI <= prevEnd) {\n      liveList.delete(i);\n      localI++;\n    }\n  }\n}\nfunction patchLiveObjectKey(liveObject, key, prev, next) {\n  if (true) {\n    const nonSerializableValue = findNonSerializableValue(next);\n    if (nonSerializableValue) {\n      error2(\n        `New state path: '${nonSerializableValue.path}' value: '${String(\n          nonSerializableValue.value\n        )}' is not serializable.\nOnly serializable value can be synced with Liveblocks.`\n      );\n      return;\n    }\n  }\n  const value = liveObject.get(key);\n  if (next === void 0) {\n    liveObject.delete(key);\n  } else if (value === void 0) {\n    liveObject.set(key, deepLiveify(next));\n  } else if (prev === next) {\n    return;\n  } else if (isLiveList(value) && Array.isArray(prev) && Array.isArray(next)) {\n    patchLiveList(value, prev, next);\n  } else if (isLiveObject(value) && isPlainObject(prev) && isPlainObject(next)) {\n    patchLiveObject(value, prev, next);\n  } else {\n    liveObject.set(key, deepLiveify(next));\n  }\n}\nfunction patchLiveObject(root, prev, next) {\n  const updates = {};\n  for (const key in next) {\n    patchLiveObjectKey(root, key, prev[key], next[key]);\n  }\n  for (const key in prev) {\n    if (next[key] === void 0) {\n      root.delete(key);\n    }\n  }\n  if (Object.keys(updates).length > 0) {\n    root.update(updates);\n  }\n}\nfunction getParentsPath(node) {\n  const path = [];\n  while (node.parent.type === \"HasParent\") {\n    if (isLiveList(node.parent.node)) {\n      path.push(node.parent.node._indexOfPosition(node.parent.key));\n    } else {\n      path.push(node.parent.key);\n    }\n    node = node.parent.node;\n  }\n  return path;\n}\nfunction legacy_patchImmutableObject(state, updates) {\n  return updates.reduce(\n    (state2, update) => legacy_patchImmutableObjectWithUpdate(state2, update),\n    state\n  );\n}\nfunction legacy_patchImmutableObjectWithUpdate(state, update) {\n  const path = getParentsPath(update.node);\n  return legacy_patchImmutableNode(state, path, update);\n}\nfunction legacy_patchImmutableNode(state, path, update) {\n  const pathItem = path.pop();\n  if (pathItem === void 0) {\n    switch (update.type) {\n      case \"LiveObject\": {\n        if (!isJsonObject(state)) {\n          throw new Error(\n            \"Internal: received update on LiveObject but state was not an object\"\n          );\n        }\n        const newState = Object.assign({}, state);\n        for (const key in update.updates) {\n          if (update.updates[key]?.type === \"update\") {\n            const val = update.node.get(key);\n            if (val !== void 0) {\n              newState[key] = lsonToJson(val);\n            }\n          } else if (update.updates[key]?.type === \"delete\") {\n            delete newState[key];\n          }\n        }\n        return newState;\n      }\n      case \"LiveList\": {\n        if (!Array.isArray(state)) {\n          throw new Error(\n            \"Internal: received update on LiveList but state was not an array\"\n          );\n        }\n        let newState = state.map((x) => x);\n        for (const listUpdate of update.updates) {\n          if (listUpdate.type === \"set\") {\n            newState = newState.map(\n              (item, index) => index === listUpdate.index ? lsonToJson(listUpdate.item) : item\n            );\n          } else if (listUpdate.type === \"insert\") {\n            if (listUpdate.index === newState.length) {\n              newState.push(lsonToJson(listUpdate.item));\n            } else {\n              newState = [\n                ...newState.slice(0, listUpdate.index),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index)\n              ];\n            }\n          } else if (listUpdate.type === \"delete\") {\n            newState.splice(listUpdate.index, 1);\n          } else if (listUpdate.type === \"move\") {\n            if (listUpdate.previousIndex > listUpdate.index) {\n              newState = [\n                ...newState.slice(0, listUpdate.index),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index, listUpdate.previousIndex),\n                ...newState.slice(listUpdate.previousIndex + 1)\n              ];\n            } else {\n              newState = [\n                ...newState.slice(0, listUpdate.previousIndex),\n                ...newState.slice(\n                  listUpdate.previousIndex + 1,\n                  listUpdate.index + 1\n                ),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index + 1)\n              ];\n            }\n          }\n        }\n        return newState;\n      }\n      case \"LiveMap\": {\n        if (!isJsonObject(state)) {\n          throw new Error(\n            \"Internal: received update on LiveMap but state was not an object\"\n          );\n        }\n        const newState = Object.assign({}, state);\n        for (const key in update.updates) {\n          if (update.updates[key]?.type === \"update\") {\n            const value = update.node.get(key);\n            if (value !== void 0) {\n              newState[key] = lsonToJson(value);\n            }\n          } else if (update.updates[key]?.type === \"delete\") {\n            delete newState[key];\n          }\n        }\n        return newState;\n      }\n    }\n  }\n  if (Array.isArray(state)) {\n    const newArray = [...state];\n    newArray[pathItem] = legacy_patchImmutableNode(\n      state[pathItem],\n      path,\n      update\n    );\n    return newArray;\n  } else if (isJsonObject(state)) {\n    const node = state[pathItem];\n    if (node === void 0) {\n      return state;\n    } else {\n      const stateAsObj = state;\n      return {\n        ...stateAsObj,\n        [pathItem]: legacy_patchImmutableNode(node, path, update)\n      };\n    }\n  } else {\n    return state;\n  }\n}\n\n// src/lib/deprecation.ts\nvar _emittedDeprecationWarnings = /* @__PURE__ */ new Set();\nfunction deprecate(message, key = message) {\n  if (true) {\n    if (!_emittedDeprecationWarnings.has(key)) {\n      _emittedDeprecationWarnings.add(key);\n      errorWithTitle(\"Deprecation warning\", message);\n    }\n  }\n}\nfunction deprecateIf(condition, message, key = message) {\n  if (true) {\n    if (condition) {\n      deprecate(message, key);\n    }\n  }\n}\nfunction throwUsageError(message) {\n  if (true) {\n    const usageError = new Error(message);\n    usageError.name = \"Usage error\";\n    errorWithTitle(\"Usage error\", message);\n    throw usageError;\n  }\n}\nfunction errorIf(condition, message) {\n  if (true) {\n    if (condition) {\n      throwUsageError(message);\n    }\n  }\n}\n\n// src/lib/Poller.ts\nfunction makePoller(callback) {\n  let context = {\n    state: \"stopped\",\n    timeoutHandle: null,\n    interval: null,\n    lastScheduledAt: null,\n    remainingInterval: null\n  };\n  function poll() {\n    if (context.state === \"running\") {\n      schedule(context.interval);\n    }\n    void callback();\n  }\n  function schedule(interval) {\n    context = {\n      state: \"running\",\n      interval: context.state !== \"stopped\" ? context.interval : interval,\n      lastScheduledAt: performance.now(),\n      timeoutHandle: setTimeout(poll, interval),\n      remainingInterval: null\n    };\n  }\n  function scheduleRemaining(remaining) {\n    if (context.state !== \"paused\") {\n      return;\n    }\n    context = {\n      state: \"running\",\n      interval: context.interval,\n      lastScheduledAt: context.lastScheduledAt,\n      timeoutHandle: setTimeout(poll, remaining),\n      remainingInterval: null\n    };\n  }\n  function start(interval) {\n    if (context.state === \"running\") {\n      return;\n    }\n    schedule(interval);\n  }\n  function restart(interval) {\n    stop();\n    start(interval);\n  }\n  function pause() {\n    if (context.state !== \"running\") {\n      return;\n    }\n    clearTimeout(context.timeoutHandle);\n    context = {\n      state: \"paused\",\n      interval: context.interval,\n      lastScheduledAt: context.lastScheduledAt,\n      timeoutHandle: null,\n      remainingInterval: context.interval - (performance.now() - context.lastScheduledAt)\n    };\n  }\n  function resume() {\n    if (context.state !== \"paused\") {\n      return;\n    }\n    scheduleRemaining(context.remainingInterval);\n  }\n  function stop() {\n    if (context.state === \"stopped\") {\n      return;\n    }\n    if (context.timeoutHandle) {\n      clearTimeout(context.timeoutHandle);\n    }\n    context = {\n      state: \"stopped\",\n      interval: null,\n      lastScheduledAt: null,\n      timeoutHandle: null,\n      remainingInterval: null\n    };\n  }\n  return {\n    start,\n    restart,\n    pause,\n    resume,\n    stop\n  };\n}\n\n// src/lib/shallow.ts\nfunction shallowArray(xs, ys) {\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (!Object.is(xs[i], ys[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction shallowObj(objA, objB) {\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null || Object.prototype.toString.call(objA) !== \"[object Object]\" || Object.prototype.toString.call(objB) !== \"[object Object]\") {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n  return keysA.every(\n    (key) => Object.prototype.hasOwnProperty.call(objB, key) && Object.is(objA[key], objB[key])\n  );\n}\nfunction shallow(a, b) {\n  if (Object.is(a, b)) {\n    return true;\n  }\n  const isArrayA = Array.isArray(a);\n  const isArrayB = Array.isArray(b);\n  if (isArrayA || isArrayB) {\n    if (!isArrayA || !isArrayB) {\n      return false;\n    }\n    return shallowArray(a, b);\n  }\n  return shallowObj(a, b);\n}\n\n// src/index.ts\ndetectDupes(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@liveblocks/core/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@liveblocks/core/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/core/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientMsgCode: () => (/* binding */ ClientMsgCode),\n/* harmony export */   CommentsApiError: () => (/* binding */ CommentsApiError),\n/* harmony export */   CrdtType: () => (/* binding */ CrdtType),\n/* harmony export */   LiveList: () => (/* binding */ LiveList),\n/* harmony export */   LiveMap: () => (/* binding */ LiveMap),\n/* harmony export */   LiveObject: () => (/* binding */ LiveObject),\n/* harmony export */   NotificationsApiError: () => (/* binding */ NotificationsApiError),\n/* harmony export */   OpCode: () => (/* binding */ OpCode),\n/* harmony export */   ServerMsgCode: () => (/* binding */ ServerMsgCode),\n/* harmony export */   WebsocketCloseCodes: () => (/* binding */ WebsocketCloseCodes),\n/* harmony export */   ackOp: () => (/* binding */ ackOp),\n/* harmony export */   addReaction: () => (/* binding */ addReaction),\n/* harmony export */   applyOptimisticUpdates: () => (/* binding */ applyOptimisticUpdates),\n/* harmony export */   asPos: () => (/* binding */ asPos),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   b64decode: () => (/* binding */ b64decode),\n/* harmony export */   cloneLson: () => (/* binding */ cloneLson),\n/* harmony export */   console: () => (/* binding */ fancy_console_exports),\n/* harmony export */   convertToCommentData: () => (/* binding */ convertToCommentData),\n/* harmony export */   convertToCommentUserReaction: () => (/* binding */ convertToCommentUserReaction),\n/* harmony export */   convertToInboxNotificationData: () => (/* binding */ convertToInboxNotificationData),\n/* harmony export */   convertToThreadData: () => (/* binding */ convertToThreadData),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   deleteComment: () => (/* binding */ deleteComment),\n/* harmony export */   deprecate: () => (/* binding */ deprecate),\n/* harmony export */   deprecateIf: () => (/* binding */ deprecateIf),\n/* harmony export */   detectDupes: () => (/* binding */ detectDupes),\n/* harmony export */   errorIf: () => (/* binding */ errorIf),\n/* harmony export */   freeze: () => (/* binding */ freeze),\n/* harmony export */   getMentionedIdsFromCommentBody: () => (/* binding */ getMentionedIdsFromCommentBody),\n/* harmony export */   isChildCrdt: () => (/* binding */ isChildCrdt),\n/* harmony export */   isJsonArray: () => (/* binding */ isJsonArray),\n/* harmony export */   isJsonObject: () => (/* binding */ isJsonObject),\n/* harmony export */   isJsonScalar: () => (/* binding */ isJsonScalar),\n/* harmony export */   isLiveNode: () => (/* binding */ isLiveNode),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRootCrdt: () => (/* binding */ isRootCrdt),\n/* harmony export */   kInternal: () => (/* binding */ kInternal),\n/* harmony export */   legacy_patchImmutableObject: () => (/* binding */ legacy_patchImmutableObject),\n/* harmony export */   lsonToJson: () => (/* binding */ lsonToJson),\n/* harmony export */   makeEventSource: () => (/* binding */ makeEventSource),\n/* harmony export */   makePoller: () => (/* binding */ makePoller),\n/* harmony export */   makePosition: () => (/* binding */ makePosition),\n/* harmony export */   memoizeOnSuccess: () => (/* binding */ memoizeOnSuccess),\n/* harmony export */   nn: () => (/* binding */ nn),\n/* harmony export */   objectToQuery: () => (/* binding */ objectToQuery),\n/* harmony export */   patchLiveObjectKey: () => (/* binding */ patchLiveObjectKey),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   removeReaction: () => (/* binding */ removeReaction),\n/* harmony export */   shallow: () => (/* binding */ shallow),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   stringifyCommentBody: () => (/* binding */ stringifyCommentBody),\n/* harmony export */   throwUsageError: () => (/* binding */ throwUsageError),\n/* harmony export */   toPlainLson: () => (/* binding */ toPlainLson),\n/* harmony export */   tryParseJson: () => (/* binding */ tryParseJson),\n/* harmony export */   upsertComment: () => (/* binding */ upsertComment),\n/* harmony export */   wait: () => (/* binding */ wait),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/core\";\nvar PKG_VERSION = \"2.3.0\";\nvar PKG_FORMAT = \"esm\";\n\n// src/dupe-detection.ts\nvar g = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {};\nvar crossLinkedDocs = \"https://liveblocks.io/docs/errors/cross-linked\";\nvar dupesDocs = \"https://liveblocks.io/docs/errors/dupes\";\nvar SPACE = \" \";\nfunction error(msg) {\n  if (false) {} else {\n    throw new Error(msg);\n  }\n}\nfunction detectDupes(pkgName, pkgVersion, pkgFormat) {\n  const pkgId = Symbol.for(pkgName);\n  const pkgBuildInfo = pkgFormat ? `${pkgVersion || \"dev\"} (${pkgFormat})` : pkgVersion || \"dev\";\n  if (!g[pkgId]) {\n    g[pkgId] = pkgBuildInfo;\n  } else if (g[pkgId] === pkgBuildInfo) {\n  } else {\n    const msg = [\n      `Multiple copies of Liveblocks are being loaded in your project. This will cause issues! See ${dupesDocs + SPACE}`,\n      \"\",\n      \"Conflicts:\",\n      `- ${pkgName} ${g[pkgId]} (already loaded)`,\n      `- ${pkgName} ${pkgBuildInfo} (trying to load this now)`\n    ].join(\"\\n\");\n    error(msg);\n  }\n  if (pkgVersion && PKG_VERSION && pkgVersion !== PKG_VERSION) {\n    error(\n      [\n        `Cross-linked versions of Liveblocks found, which will cause issues! See ${crossLinkedDocs + SPACE}`,\n        \"\",\n        \"Conflicts:\",\n        `- ${PKG_NAME} is at ${PKG_VERSION}`,\n        `- ${pkgName} is at ${pkgVersion}`,\n        \"\",\n        \"Always upgrade all Liveblocks packages to the same version number.\"\n      ].join(\"\\n\")\n    );\n  }\n}\n\n// src/lib/assert.ts\nfunction assertNever(_value, errmsg) {\n  throw new Error(errmsg);\n}\nfunction assert(condition, errmsg) {\n  if (true) {\n    if (!condition) {\n      const err = new Error(errmsg);\n      err.name = \"Assertion failure\";\n      throw err;\n    }\n  }\n}\nfunction nn(value, errmsg = \"Expected value to be non-nullable\") {\n  assert(value !== null && value !== void 0, errmsg);\n  return value;\n}\n\n// src/lib/controlledPromise.ts\nfunction controlledPromise() {\n  let resolve;\n  let reject;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return [promise, resolve, reject];\n}\nfunction Promise_withResolvers() {\n  const [promise, resolve, reject] = controlledPromise();\n  return { promise, resolve, reject };\n}\n\n// src/lib/EventSource.ts\nfunction makeEventSource() {\n  const _onetimeObservers = /* @__PURE__ */ new Set();\n  const _observers = /* @__PURE__ */ new Set();\n  let _buffer = null;\n  function pause() {\n    _buffer = [];\n  }\n  function unpause() {\n    if (_buffer === null) {\n      return;\n    }\n    for (const event of _buffer) {\n      notify(event);\n    }\n    _buffer = null;\n  }\n  function subscribe(callback) {\n    _observers.add(callback);\n    return () => _observers.delete(callback);\n  }\n  function subscribeOnce(callback) {\n    _onetimeObservers.add(callback);\n    return () => _onetimeObservers.delete(callback);\n  }\n  async function waitUntil(predicate) {\n    let unsub;\n    return new Promise((res) => {\n      unsub = subscribe((event) => {\n        if (predicate === void 0 || predicate(event)) {\n          res(event);\n        }\n      });\n    }).finally(() => unsub?.());\n  }\n  function notifyOrBuffer(event) {\n    if (_buffer !== null) {\n      _buffer.push(event);\n    } else {\n      notify(event);\n    }\n  }\n  function notify(event) {\n    _onetimeObservers.forEach((callback) => callback(event));\n    _onetimeObservers.clear();\n    _observers.forEach((callback) => callback(event));\n  }\n  function clear() {\n    _onetimeObservers.clear();\n    _observers.clear();\n  }\n  function count() {\n    return _onetimeObservers.size + _observers.size;\n  }\n  return {\n    // Private/internal control over event emission\n    notify: notifyOrBuffer,\n    subscribe,\n    subscribeOnce,\n    clear,\n    count,\n    waitUntil,\n    pause,\n    unpause,\n    // Publicly exposable subscription API\n    observable: {\n      subscribe,\n      subscribeOnce,\n      waitUntil\n    }\n  };\n}\n\n// src/lib/fancy-console.ts\nvar fancy_console_exports = {};\n__export(fancy_console_exports, {\n  error: () => error2,\n  errorWithTitle: () => errorWithTitle,\n  warn: () => warn,\n  warnWithTitle: () => warnWithTitle\n});\nvar badge = \"background:#0e0d12;border-radius:9999px;color:#fff;padding:3px 7px;font-family:sans-serif;font-weight:600;\";\nvar bold = \"font-weight:600\";\nfunction wrap(method) {\n  return typeof window === \"undefined\" || \"development\" === \"test\" ? console[method] : (\n    /* istanbul ignore next */\n    (message, ...args) => console[method](\"%cLiveblocks\", badge, message, ...args)\n  );\n}\nvar warn = wrap(\"warn\");\nvar error2 = wrap(\"error\");\nfunction wrapWithTitle(method) {\n  return typeof window === \"undefined\" || \"development\" === \"test\" ? console[method] : (\n    /* istanbul ignore next */\n    (title, message, ...args) => console[method](\n      `%cLiveblocks%c ${title}`,\n      badge,\n      bold,\n      message,\n      ...args\n    )\n  );\n}\nvar warnWithTitle = wrapWithTitle(\"warn\");\nvar errorWithTitle = wrapWithTitle(\"error\");\n\n// src/lib/fsm.ts\nfunction distance(state1, state2) {\n  if (state1 === state2) {\n    return [0, 0];\n  }\n  const chunks1 = state1.split(\".\");\n  const chunks2 = state2.split(\".\");\n  const minLen = Math.min(chunks1.length, chunks2.length);\n  let shared = 0;\n  for (; shared < minLen; shared++) {\n    if (chunks1[shared] !== chunks2[shared]) {\n      break;\n    }\n  }\n  const up = chunks1.length - shared;\n  const down = chunks2.length - shared;\n  return [up, down];\n}\nfunction patterns(targetState, levels) {\n  const parts = targetState.split(\".\");\n  if (levels < 1 || levels > parts.length + 1) {\n    throw new Error(\"Invalid number of levels\");\n  }\n  const result = [];\n  if (levels > parts.length) {\n    result.push(\"*\");\n  }\n  for (let i = parts.length - levels + 1; i < parts.length; i++) {\n    const slice = parts.slice(0, i);\n    if (slice.length > 0) {\n      result.push(slice.join(\".\") + \".*\");\n    }\n  }\n  result.push(targetState);\n  return result;\n}\nvar SafeContext = class {\n  constructor(initialContext) {\n    this.curr = initialContext;\n  }\n  get current() {\n    return this.curr;\n  }\n  /**\n   * Call a callback function that allows patching of the context, by\n   * calling `context.patch()`. Patching is only allowed for the duration\n   * of this window.\n   */\n  allowPatching(callback) {\n    const self = this;\n    let allowed = true;\n    const patchableContext = {\n      ...this.curr,\n      patch(patch) {\n        if (allowed) {\n          self.curr = Object.assign({}, self.curr, patch);\n          for (const pair of Object.entries(patch)) {\n            const [key, value] = pair;\n            if (key !== \"patch\") {\n              this[key] = value;\n            }\n          }\n        } else {\n          throw new Error(\"Can no longer patch stale context\");\n        }\n      }\n    };\n    callback(patchableContext);\n    allowed = false;\n    return;\n  }\n};\nvar nextId = 1;\nvar FSM = class {\n  /**\n   * Returns the initial state, which is defined by the first call made to\n   * .addState().\n   */\n  get initialState() {\n    const result = this.states.values()[Symbol.iterator]().next();\n    if (result.done) {\n      throw new Error(\"No states defined yet\");\n    } else {\n      return result.value;\n    }\n  }\n  get currentState() {\n    if (this.currentStateOrNull === null) {\n      if (this.runningState === 0 /* NOT_STARTED_YET */) {\n        throw new Error(\"Not started yet\");\n      } else {\n        throw new Error(\"Already stopped\");\n      }\n    }\n    return this.currentStateOrNull;\n  }\n  /**\n   * Starts the machine by entering the initial state.\n   */\n  start() {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"State machine has already started\");\n    }\n    this.runningState = 1 /* STARTED */;\n    this.currentStateOrNull = this.initialState;\n    this.enter(null);\n    return this;\n  }\n  /**\n   * Stops the state machine. Stopping the state machine will call exit\n   * handlers for the current state, but not enter a new state.\n   */\n  stop() {\n    if (this.runningState !== 1 /* STARTED */) {\n      throw new Error(\"Cannot stop a state machine that hasn't started yet\");\n    }\n    this.exit(null);\n    this.runningState = 2 /* STOPPED */;\n    this.currentStateOrNull = null;\n  }\n  constructor(initialContext) {\n    this.id = nextId++;\n    this.runningState = 0 /* NOT_STARTED_YET */;\n    this.currentStateOrNull = null;\n    this.states = /* @__PURE__ */ new Set();\n    this.enterFns = /* @__PURE__ */ new Map();\n    this.cleanupStack = [];\n    this.knownEventTypes = /* @__PURE__ */ new Set();\n    this.allowedTransitions = /* @__PURE__ */ new Map();\n    this.currentContext = new SafeContext(initialContext);\n    this.eventHub = {\n      didReceiveEvent: makeEventSource(),\n      willTransition: makeEventSource(),\n      didIgnoreEvent: makeEventSource(),\n      willExitState: makeEventSource(),\n      didEnterState: makeEventSource()\n    };\n    this.events = {\n      didReceiveEvent: this.eventHub.didReceiveEvent.observable,\n      willTransition: this.eventHub.willTransition.observable,\n      didIgnoreEvent: this.eventHub.didIgnoreEvent.observable,\n      willExitState: this.eventHub.willExitState.observable,\n      didEnterState: this.eventHub.didEnterState.observable\n    };\n  }\n  get context() {\n    return this.currentContext.current;\n  }\n  /**\n   * Define an explicit finite state in the state machine.\n   */\n  addState(state) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    }\n    this.states.add(state);\n    return this;\n  }\n  onEnter(nameOrPattern, enterFn) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    } else if (this.enterFns.has(nameOrPattern)) {\n      throw new Error(\n        // TODO We _currently_ don't support multiple .onEnters() for the same\n        // state, but this is not a fundamental limitation. Just not\n        // implemented yet. If we wanted to, we could make this an array.\n        `enter/exit function for ${nameOrPattern} already exists`\n      );\n    }\n    this.enterFns.set(nameOrPattern, enterFn);\n    return this;\n  }\n  onEnterAsync(nameOrPattern, promiseFn, onOK, onError) {\n    return this.onEnter(nameOrPattern, () => {\n      const abortController = new AbortController();\n      const signal = abortController.signal;\n      let done = false;\n      void promiseFn(this.currentContext.current, signal).then(\n        // On OK\n        (data) => {\n          if (!signal.aborted) {\n            done = true;\n            this.transition({ type: \"ASYNC_OK\", data }, onOK);\n          }\n        },\n        // On Error\n        (reason) => {\n          if (!signal.aborted) {\n            done = true;\n            this.transition({ type: \"ASYNC_ERROR\", reason }, onError);\n          }\n        }\n      );\n      return () => {\n        if (!done) {\n          abortController.abort();\n        }\n      };\n    });\n  }\n  getStatesMatching(nameOrPattern) {\n    const matches = [];\n    if (nameOrPattern === \"*\") {\n      for (const state of this.states) {\n        matches.push(state);\n      }\n    } else if (nameOrPattern.endsWith(\".*\")) {\n      const prefix = nameOrPattern.slice(0, -1);\n      for (const state of this.states) {\n        if (state.startsWith(prefix)) {\n          matches.push(state);\n        }\n      }\n    } else {\n      const name = nameOrPattern;\n      if (this.states.has(name)) {\n        matches.push(name);\n      }\n    }\n    if (matches.length === 0) {\n      throw new Error(`No states match ${JSON.stringify(nameOrPattern)}`);\n    }\n    return matches;\n  }\n  /**\n   * Define all allowed outgoing transitions for a state.\n   *\n   * The targets for each event can be defined as a function which returns the\n   * next state to transition to. These functions can look at the `event` or\n   * `context` params to conditionally decide which next state to transition\n   * to.\n   *\n   * If you set it to `null`, then the transition will be explicitly forbidden\n   * and throw an error. If you don't define a target for a transition, then\n   * such events will get ignored.\n   */\n  addTransitions(nameOrPattern, mapping) {\n    if (this.runningState !== 0 /* NOT_STARTED_YET */) {\n      throw new Error(\"Already started\");\n    }\n    for (const srcState of this.getStatesMatching(nameOrPattern)) {\n      let map = this.allowedTransitions.get(srcState);\n      if (map === void 0) {\n        map = /* @__PURE__ */ new Map();\n        this.allowedTransitions.set(srcState, map);\n      }\n      for (const [type, target_] of Object.entries(mapping)) {\n        if (map.has(type)) {\n          throw new Error(\n            `Trying to set transition \"${type}\" on \"${srcState}\" (via \"${nameOrPattern}\"), but a transition already exists there.`\n          );\n        }\n        const target = target_;\n        this.knownEventTypes.add(type);\n        if (target !== void 0) {\n          const targetFn = typeof target === \"function\" ? target : () => target;\n          map.set(type, targetFn);\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * Like `.addTransition()`, but takes an (anonymous) transition whenever the\n   * timer fires.\n   *\n   * @param stateOrPattern The state name, or state group pattern name.\n   * @param after          Number of milliseconds after which to take the\n   *                       transition. If in the mean time, another transition\n   *                       is taken, the timer will get cancelled.\n   * @param target     The target state to go to.\n   */\n  addTimedTransition(stateOrPattern, after2, target) {\n    return this.onEnter(stateOrPattern, () => {\n      const ms = typeof after2 === \"function\" ? after2(this.currentContext.current) : after2;\n      const timeoutID = setTimeout(() => {\n        this.transition({ type: \"TIMER\" }, target);\n      }, ms);\n      return () => {\n        clearTimeout(timeoutID);\n      };\n    });\n  }\n  getTargetFn(eventName) {\n    return this.allowedTransitions.get(this.currentState)?.get(eventName);\n  }\n  /**\n   * Exits the current state, and executes any necessary cleanup functions.\n   * Call this before changing the current state to the next state.\n   *\n   * @param levels Defines how many \"levels\" of nesting will be\n   * exited. For example, if you transition from `foo.bar.qux` to\n   * `foo.bar.baz`, then the level is 1. But if you transition from\n   * `foo.bar.qux` to `bla.bla`, then the level is 3.\n   * If `null`, it will exit all levels.\n   */\n  exit(levels) {\n    this.eventHub.willExitState.notify(this.currentState);\n    this.currentContext.allowPatching((patchableContext) => {\n      levels = levels ?? this.cleanupStack.length;\n      for (let i = 0; i < levels; i++) {\n        this.cleanupStack.pop()?.(patchableContext);\n      }\n    });\n  }\n  /**\n   * Enters the current state, and executes any necessary onEnter handlers.\n   * Call this directly _after_ setting the current state to the next state.\n   */\n  enter(levels) {\n    const enterPatterns = patterns(\n      this.currentState,\n      levels ?? this.currentState.split(\".\").length + 1\n    );\n    this.currentContext.allowPatching((patchableContext) => {\n      for (const pattern of enterPatterns) {\n        const enterFn = this.enterFns.get(pattern);\n        const cleanupFn = enterFn?.(patchableContext);\n        if (typeof cleanupFn === \"function\") {\n          this.cleanupStack.push(cleanupFn);\n        } else {\n          this.cleanupStack.push(null);\n        }\n      }\n    });\n    this.eventHub.didEnterState.notify(this.currentState);\n  }\n  /**\n   * Sends an event to the machine, which may cause an internal state\n   * transition to happen. When that happens, will trigger side effects.\n   */\n  send(event) {\n    if (!this.knownEventTypes.has(event.type)) {\n      throw new Error(`Invalid event ${JSON.stringify(event.type)}`);\n    }\n    if (this.runningState === 2 /* STOPPED */) {\n      return;\n    }\n    const targetFn = this.getTargetFn(event.type);\n    if (targetFn !== void 0) {\n      return this.transition(event, targetFn);\n    } else {\n      this.eventHub.didIgnoreEvent.notify(event);\n    }\n  }\n  transition(event, target) {\n    this.eventHub.didReceiveEvent.notify(event);\n    const oldState = this.currentState;\n    const targetFn = typeof target === \"function\" ? target : () => target;\n    const nextTarget = targetFn(event, this.currentContext.current);\n    let nextState;\n    let effects = void 0;\n    if (nextTarget === null) {\n      this.eventHub.didIgnoreEvent.notify(event);\n      return;\n    }\n    if (typeof nextTarget === \"string\") {\n      nextState = nextTarget;\n    } else {\n      nextState = nextTarget.target;\n      effects = Array.isArray(nextTarget.effect) ? nextTarget.effect : [nextTarget.effect];\n    }\n    if (!this.states.has(nextState)) {\n      throw new Error(`Invalid next state name: ${JSON.stringify(nextState)}`);\n    }\n    this.eventHub.willTransition.notify({ from: oldState, to: nextState });\n    const [up, down] = distance(this.currentState, nextState);\n    if (up > 0) {\n      this.exit(up);\n    }\n    this.currentStateOrNull = nextState;\n    if (effects !== void 0) {\n      const effectsToRun = effects;\n      this.currentContext.allowPatching((patchableContext) => {\n        for (const effect of effectsToRun) {\n          if (typeof effect === \"function\") {\n            effect(patchableContext, event);\n          } else {\n            patchableContext.patch(effect);\n          }\n        }\n      });\n    }\n    if (down > 0) {\n      this.enter(down);\n    }\n  }\n};\n\n// src/lib/utils.ts\nfunction raise(msg) {\n  throw new Error(msg);\n}\nfunction isPlainObject(blob) {\n  return blob !== null && typeof blob === \"object\" && Object.prototype.toString.call(blob) === \"[object Object]\";\n}\nfunction entries(obj) {\n  return Object.entries(obj);\n}\nfunction tryParseJson(rawMessage) {\n  try {\n    return JSON.parse(rawMessage);\n  } catch (e) {\n    return void 0;\n  }\n}\nfunction deepClone(value) {\n  return JSON.parse(JSON.stringify(value));\n}\nfunction b64decode(b64value) {\n  try {\n    const formattedValue = b64value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const decodedValue = decodeURIComponent(\n      atob(formattedValue).split(\"\").map(function(c) {\n        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(\"\")\n    );\n    return decodedValue;\n  } catch (err) {\n    return atob(b64value);\n  }\n}\nfunction compact(items) {\n  return items.filter(\n    (item) => item !== null && item !== void 0\n  );\n}\nfunction compactObject(obj) {\n  const newObj = { ...obj };\n  Object.keys(obj).forEach((k) => {\n    const key = k;\n    if (newObj[key] === void 0) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n}\nfunction wait(millis) {\n  return new Promise((res) => setTimeout(res, millis));\n}\nasync function withTimeout(promise, millis, errmsg) {\n  let timerID;\n  const timer$ = new Promise((_, reject) => {\n    timerID = setTimeout(() => {\n      reject(new Error(errmsg));\n    }, millis);\n  });\n  return Promise.race([promise, timer$]).finally(() => clearTimeout(timerID));\n}\nfunction memoizeOnSuccess(factoryFn) {\n  let cached = null;\n  return () => {\n    if (cached === null) {\n      cached = factoryFn().catch((err) => {\n        setTimeout(() => {\n          cached = null;\n        }, 5e3);\n        throw err;\n      });\n    }\n    return cached;\n  };\n}\n\n// src/protocol/ServerMsg.ts\nvar ServerMsgCode = /* @__PURE__ */ ((ServerMsgCode2) => {\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n  ServerMsgCode2[ServerMsgCode2[\"USER_JOINED\"] = 101] = \"USER_JOINED\";\n  ServerMsgCode2[ServerMsgCode2[\"USER_LEFT\"] = 102] = \"USER_LEFT\";\n  ServerMsgCode2[ServerMsgCode2[\"BROADCASTED_EVENT\"] = 103] = \"BROADCASTED_EVENT\";\n  ServerMsgCode2[ServerMsgCode2[\"ROOM_STATE\"] = 104] = \"ROOM_STATE\";\n  ServerMsgCode2[ServerMsgCode2[\"INITIAL_STORAGE_STATE\"] = 200] = \"INITIAL_STORAGE_STATE\";\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n  ServerMsgCode2[ServerMsgCode2[\"REJECT_STORAGE_OP\"] = 299] = \"REJECT_STORAGE_OP\";\n  ServerMsgCode2[ServerMsgCode2[\"UPDATE_YDOC\"] = 300] = \"UPDATE_YDOC\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_CREATED\"] = 400] = \"THREAD_CREATED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_DELETED\"] = 407] = \"THREAD_DELETED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_METADATA_UPDATED\"] = 401] = \"THREAD_METADATA_UPDATED\";\n  ServerMsgCode2[ServerMsgCode2[\"THREAD_UPDATED\"] = 408] = \"THREAD_UPDATED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_CREATED\"] = 402] = \"COMMENT_CREATED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_EDITED\"] = 403] = \"COMMENT_EDITED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_DELETED\"] = 404] = \"COMMENT_DELETED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_ADDED\"] = 405] = \"COMMENT_REACTION_ADDED\";\n  ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_REMOVED\"] = 406] = \"COMMENT_REACTION_REMOVED\";\n  return ServerMsgCode2;\n})(ServerMsgCode || {});\n\n// src/types/IWebSocket.ts\nvar WebsocketCloseCodes = /* @__PURE__ */ ((WebsocketCloseCodes2) => {\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_NORMAL\"] = 1e3] = \"CLOSE_NORMAL\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_ABNORMAL\"] = 1006] = \"CLOSE_ABNORMAL\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"UNEXPECTED_CONDITION\"] = 1011] = \"UNEXPECTED_CONDITION\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"TRY_AGAIN_LATER\"] = 1013] = \"TRY_AGAIN_LATER\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"INVALID_MESSAGE_FORMAT\"] = 4e3] = \"INVALID_MESSAGE_FORMAT\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"NOT_ALLOWED\"] = 4001] = \"NOT_ALLOWED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\"] = 4002] = \"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\"] = 4003] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\"] = 4004] = \"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\"] = 4005] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"ROOM_ID_UPDATED\"] = 4006] = \"ROOM_ID_UPDATED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"KICKED\"] = 4100] = \"KICKED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"TOKEN_EXPIRED\"] = 4109] = \"TOKEN_EXPIRED\";\n  WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_WITHOUT_RETRY\"] = 4999] = \"CLOSE_WITHOUT_RETRY\";\n  return WebsocketCloseCodes2;\n})(WebsocketCloseCodes || {});\nfunction shouldDisconnect(code) {\n  return code === 4999 /* CLOSE_WITHOUT_RETRY */ || code >= 4e3 && code < 4100;\n}\nfunction shouldReauth(code) {\n  return code >= 4100 && code < 4200;\n}\nfunction shouldRetryWithoutReauth(code) {\n  return code === 1013 /* TRY_AGAIN_LATER */ || code >= 4200 && code < 4300;\n}\n\n// src/connection.ts\nfunction isIdle(status) {\n  return status === \"initial\" || status === \"disconnected\";\n}\nfunction toNewConnectionStatus(machine) {\n  const state = machine.currentState;\n  switch (state) {\n    case \"@ok.connected\":\n    case \"@ok.awaiting-pong\":\n      return \"connected\";\n    case \"@idle.initial\":\n      return \"initial\";\n    case \"@auth.busy\":\n    case \"@auth.backoff\":\n    case \"@connecting.busy\":\n    case \"@connecting.backoff\":\n    case \"@idle.zombie\":\n      return machine.context.successCount > 0 ? \"reconnecting\" : \"connecting\";\n    case \"@idle.failed\":\n      return \"disconnected\";\n    default:\n      return assertNever(state, \"Unknown state\");\n  }\n}\nvar BACKOFF_DELAYS = [250, 500, 1e3, 2e3, 4e3, 8e3, 1e4];\nvar RESET_DELAY = BACKOFF_DELAYS[0] - 1;\nvar BACKOFF_DELAYS_SLOW = [2e3, 3e4, 6e4, 3e5];\nvar HEARTBEAT_INTERVAL = 3e4;\nvar PONG_TIMEOUT = 2e3;\nvar AUTH_TIMEOUT = 1e4;\nvar SOCKET_CONNECT_TIMEOUT = 1e4;\nvar StopRetrying = class extends Error {\n  constructor(reason) {\n    super(reason);\n  }\n};\nvar LiveblocksError = class extends Error {\n  /** @internal */\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n};\nfunction nextBackoffDelay(currentDelay, delays) {\n  return delays.find((delay) => delay > currentDelay) ?? delays[delays.length - 1];\n}\nfunction increaseBackoffDelay(context) {\n  context.patch({\n    backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS)\n  });\n}\nfunction increaseBackoffDelayAggressively(context) {\n  context.patch({\n    backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS_SLOW)\n  });\n}\nfunction resetSuccessCount(context) {\n  context.patch({ successCount: 0 });\n}\nfunction log(level, message) {\n  const logger = level === 2 /* ERROR */ ? error2 : level === 1 /* WARN */ ? warn : (\n    /* black hole */\n    () => {\n    }\n  );\n  return () => {\n    logger(message);\n  };\n}\nfunction logPrematureErrorOrCloseEvent(e) {\n  const conn = \"Connection to Liveblocks websocket server\";\n  return (ctx) => {\n    if (e instanceof Error) {\n      warn(`${conn} could not be established. ${String(e)}`);\n    } else {\n      warn(\n        isCloseEvent(e) ? `${conn} closed prematurely (code: ${e.code}). Retrying in ${ctx.backoffDelay}ms.` : `${conn} could not be established.`\n      );\n    }\n  };\n}\nfunction logCloseEvent(event) {\n  const details = [`code: ${event.code}`];\n  if (event.reason) {\n    details.push(`reason: ${event.reason}`);\n  }\n  return (ctx) => {\n    warn(\n      `Connection to Liveblocks websocket server closed (${details.join(\", \")}). Retrying in ${ctx.backoffDelay}ms.`\n    );\n  };\n}\nvar logPermanentClose = log(\n  1 /* WARN */,\n  \"Connection to WebSocket closed permanently. Won't retry.\"\n);\nfunction isCloseEvent(error3) {\n  return !(error3 instanceof Error) && error3.type === \"close\";\n}\nfunction enableTracing(machine) {\n  const start = (/* @__PURE__ */ new Date()).getTime();\n  function log2(...args) {\n    warn(\n      `${(((/* @__PURE__ */ new Date()).getTime() - start) / 1e3).toFixed(2)} [FSM #${machine.id}]`,\n      ...args\n    );\n  }\n  const unsubs = [\n    machine.events.didReceiveEvent.subscribe((e) => log2(`Event ${e.type}`)),\n    machine.events.willTransition.subscribe(\n      ({ from, to }) => log2(\"Transitioning\", from, \"\\u2192\", to)\n    ),\n    machine.events.didIgnoreEvent.subscribe(\n      (e) => log2(\"Ignored event\", e.type, e, \"(current state won't handle it)\")\n    )\n    // machine.events.willExitState.subscribe((s) => log(\"Exiting state\", s)),\n    // machine.events.didEnterState.subscribe((s) => log(\"Entering state\", s)),\n  ];\n  return () => {\n    for (const unsub of unsubs) {\n      unsub();\n    }\n  };\n}\nfunction defineConnectivityEvents(machine) {\n  const statusDidChange = makeEventSource();\n  const didConnect = makeEventSource();\n  const didDisconnect = makeEventSource();\n  let lastStatus = null;\n  const unsubscribe = machine.events.didEnterState.subscribe(() => {\n    const currStatus = toNewConnectionStatus(machine);\n    if (currStatus !== lastStatus) {\n      statusDidChange.notify(currStatus);\n    }\n    if (lastStatus === \"connected\" && currStatus !== \"connected\") {\n      didDisconnect.notify();\n    } else if (lastStatus !== \"connected\" && currStatus === \"connected\") {\n      didConnect.notify();\n    }\n    lastStatus = currStatus;\n  });\n  return {\n    statusDidChange: statusDidChange.observable,\n    didConnect: didConnect.observable,\n    didDisconnect: didDisconnect.observable,\n    unsubscribe\n  };\n}\nvar assign = (patch) => (ctx) => ctx.patch(patch);\nfunction createConnectionStateMachine(delegates, options) {\n  const onMessage = makeEventSource();\n  onMessage.pause();\n  const onLiveblocksError = makeEventSource();\n  function fireErrorEvent(errmsg, errcode) {\n    return () => {\n      const err = new LiveblocksError(errmsg, errcode);\n      onLiveblocksError.notify(err);\n    };\n  }\n  const initialContext = {\n    successCount: 0,\n    authValue: null,\n    socket: null,\n    backoffDelay: RESET_DELAY\n  };\n  const machine = new FSM(initialContext).addState(\"@idle.initial\").addState(\"@idle.failed\").addState(\"@idle.zombie\").addState(\"@auth.busy\").addState(\"@auth.backoff\").addState(\"@connecting.busy\").addState(\"@connecting.backoff\").addState(\"@ok.connected\").addState(\"@ok.awaiting-pong\");\n  machine.addTransitions(\"*\", {\n    RECONNECT: {\n      target: \"@auth.backoff\",\n      effect: [increaseBackoffDelay, resetSuccessCount]\n    },\n    DISCONNECT: \"@idle.initial\"\n  });\n  machine.onEnter(\"@idle.*\", resetSuccessCount).addTransitions(\"@idle.*\", {\n    CONNECT: (_, ctx) => (\n      // If we still have a known authValue, try to reconnect to the socket directly,\n      // otherwise, try to obtain a new authValue\n      ctx.authValue !== null ? \"@connecting.busy\" : \"@auth.busy\"\n    )\n  });\n  machine.addTransitions(\"@auth.backoff\", {\n    NAVIGATOR_ONLINE: {\n      target: \"@auth.busy\",\n      effect: assign({ backoffDelay: RESET_DELAY })\n    }\n  }).addTimedTransition(\n    \"@auth.backoff\",\n    (ctx) => ctx.backoffDelay,\n    \"@auth.busy\"\n  ).onEnterAsync(\n    \"@auth.busy\",\n    () => withTimeout(\n      delegates.authenticate(),\n      AUTH_TIMEOUT,\n      \"Timed out during auth\"\n    ),\n    // On successful authentication\n    (okEvent) => ({\n      target: \"@connecting.busy\",\n      effect: assign({\n        authValue: okEvent.data\n      })\n    }),\n    // Auth failed\n    (failedEvent) => {\n      if (failedEvent.reason instanceof StopRetrying) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            log(2 /* ERROR */, failedEvent.reason.message),\n            fireErrorEvent(failedEvent.reason.message, -1)\n          ]\n        };\n      }\n      return {\n        target: \"@auth.backoff\",\n        effect: [\n          increaseBackoffDelay,\n          log(\n            2 /* ERROR */,\n            `Authentication failed: ${failedEvent.reason instanceof Error ? failedEvent.reason.message : String(failedEvent.reason)}`\n          )\n        ]\n      };\n    }\n  );\n  const onSocketError = (event) => machine.send({ type: \"EXPLICIT_SOCKET_ERROR\", event });\n  const onSocketClose = (event) => machine.send({ type: \"EXPLICIT_SOCKET_CLOSE\", event });\n  const onSocketMessage = (event) => event.data === \"pong\" ? machine.send({ type: \"PONG\" }) : onMessage.notify(event);\n  function teardownSocket(socket) {\n    if (socket) {\n      socket.removeEventListener(\"error\", onSocketError);\n      socket.removeEventListener(\"close\", onSocketClose);\n      socket.removeEventListener(\"message\", onSocketMessage);\n      socket.close();\n    }\n  }\n  machine.addTransitions(\"@connecting.backoff\", {\n    NAVIGATOR_ONLINE: {\n      target: \"@connecting.busy\",\n      effect: assign({ backoffDelay: RESET_DELAY })\n    }\n  }).addTimedTransition(\n    \"@connecting.backoff\",\n    (ctx) => ctx.backoffDelay,\n    \"@connecting.busy\"\n  ).onEnterAsync(\n    \"@connecting.busy\",\n    //\n    // Use the \"createSocket\" delegate function (provided to the\n    // ManagedSocket) to create the actual WebSocket connection instance.\n    // Then, set up all the necessary event listeners, and wait for the\n    // \"open\" event to occur.\n    //\n    // When the \"open\" event happens, we're ready to transition to the\n    // OK state. This is done by resolving the Promise.\n    //\n    async (ctx, signal) => {\n      let capturedPrematureEvent = null;\n      let unconfirmedSocket = null;\n      const connect$ = new Promise(\n        (resolve, rej) => {\n          if (ctx.authValue === null) {\n            throw new Error(\"No auth authValue\");\n          }\n          const socket = delegates.createSocket(ctx.authValue);\n          unconfirmedSocket = socket;\n          function reject(event) {\n            capturedPrematureEvent = event;\n            socket.removeEventListener(\"message\", onSocketMessage);\n            rej(event);\n          }\n          const [actor$, didReceiveActor] = controlledPromise();\n          if (!options.waitForActorId) {\n            didReceiveActor();\n          }\n          function waitForActorId(event) {\n            const serverMsg = tryParseJson(event.data);\n            if (serverMsg?.type === 104 /* ROOM_STATE */) {\n              didReceiveActor();\n            }\n          }\n          socket.addEventListener(\"message\", onSocketMessage);\n          if (options.waitForActorId) {\n            socket.addEventListener(\"message\", waitForActorId);\n          }\n          socket.addEventListener(\"error\", reject);\n          socket.addEventListener(\"close\", reject);\n          socket.addEventListener(\"open\", () => {\n            socket.addEventListener(\"error\", onSocketError);\n            socket.addEventListener(\"close\", onSocketClose);\n            const unsub = () => {\n              socket.removeEventListener(\"error\", reject);\n              socket.removeEventListener(\"close\", reject);\n              socket.removeEventListener(\"message\", waitForActorId);\n            };\n            void actor$.then(() => {\n              resolve([socket, unsub]);\n            });\n          });\n        }\n      );\n      return withTimeout(\n        connect$,\n        SOCKET_CONNECT_TIMEOUT,\n        \"Timed out during websocket connection\"\n      ).then(\n        //\n        // Part 3:\n        // By now, our \"open\" event has fired, and the promise has been\n        // resolved. Two possible scenarios:\n        //\n        // 1. The happy path. Most likely.\n        // 2. Uh-oh. A premature close/error event has been observed. Let's\n        //    reject the promise after all.\n        //\n        // Any close/error event that will get scheduled after this point\n        // onwards, will be caught in the OK state, and dealt with\n        // accordingly.\n        //\n        ([socket, unsub]) => {\n          unsub();\n          if (signal.aborted) {\n            throw new Error(\"Aborted\");\n          }\n          if (capturedPrematureEvent) {\n            throw capturedPrematureEvent;\n          }\n          return socket;\n        }\n      ).catch((e) => {\n        teardownSocket(unconfirmedSocket);\n        throw e;\n      });\n    },\n    // Only transition to OK state after a successfully opened WebSocket connection\n    (okEvent) => ({\n      target: \"@ok.connected\",\n      effect: assign({\n        socket: okEvent.data,\n        backoffDelay: RESET_DELAY\n      })\n    }),\n    // If the WebSocket connection cannot be established\n    (failure) => {\n      const err = failure.reason;\n      if (err instanceof StopRetrying) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            log(2 /* ERROR */, err.message),\n            fireErrorEvent(err.message, -1)\n          ]\n        };\n      }\n      if (isCloseEvent(err)) {\n        if (err.code === 4109 /* TOKEN_EXPIRED */) {\n          return \"@auth.busy\";\n        }\n        if (shouldRetryWithoutReauth(err.code)) {\n          return {\n            target: \"@connecting.backoff\",\n            effect: [\n              increaseBackoffDelayAggressively,\n              logPrematureErrorOrCloseEvent(err)\n            ]\n          };\n        }\n        if (shouldDisconnect(err.code)) {\n          return {\n            target: \"@idle.failed\",\n            effect: [\n              log(2 /* ERROR */, err.reason),\n              fireErrorEvent(err.reason, err.code)\n            ]\n          };\n        }\n      }\n      return {\n        target: \"@auth.backoff\",\n        effect: [increaseBackoffDelay, logPrematureErrorOrCloseEvent(err)]\n      };\n    }\n  );\n  const sendHeartbeat = {\n    target: \"@ok.awaiting-pong\",\n    effect: (ctx) => {\n      ctx.socket?.send(\"ping\");\n    }\n  };\n  const maybeHeartbeat = () => {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const canZombie = doc?.visibilityState === \"hidden\" && delegates.canZombie();\n    return canZombie ? \"@idle.zombie\" : sendHeartbeat;\n  };\n  machine.addTimedTransition(\"@ok.connected\", HEARTBEAT_INTERVAL, maybeHeartbeat).addTransitions(\"@ok.connected\", {\n    NAVIGATOR_OFFLINE: maybeHeartbeat,\n    // Don't take the browser's word for it when it says it's offline. Do a ping/pong to make sure.\n    WINDOW_GOT_FOCUS: sendHeartbeat\n  });\n  machine.addTransitions(\"@idle.zombie\", {\n    WINDOW_GOT_FOCUS: \"@connecting.backoff\"\n    // When in zombie state, the client will try to wake up automatically when the window regains focus\n  });\n  machine.onEnter(\"@ok.*\", (ctx) => {\n    ctx.patch({ successCount: ctx.successCount + 1 });\n    const timerID = setTimeout(\n      // On the next tick, start delivering all messages that have already\n      // been received, and continue synchronous delivery of all future\n      // incoming messages.\n      onMessage.unpause,\n      0\n    );\n    return (ctx2) => {\n      teardownSocket(ctx2.socket);\n      ctx2.patch({ socket: null });\n      clearTimeout(timerID);\n      onMessage.pause();\n    };\n  }).addTransitions(\"@ok.awaiting-pong\", { PONG: \"@ok.connected\" }).addTimedTransition(\"@ok.awaiting-pong\", PONG_TIMEOUT, {\n    target: \"@connecting.busy\",\n    // Log implicit connection loss and drop the current open socket\n    effect: log(\n      1 /* WARN */,\n      \"Received no pong from server, assume implicit connection loss.\"\n    )\n  }).addTransitions(\"@ok.*\", {\n    // When a socket receives an error, this can cause the closing of the\n    // socket, or not. So always check to see if the socket is still OPEN or\n    // not. When still OPEN, don't transition.\n    EXPLICIT_SOCKET_ERROR: (_, context) => {\n      if (context.socket?.readyState === 1) {\n        return null;\n      }\n      return {\n        target: \"@connecting.backoff\",\n        effect: increaseBackoffDelay\n      };\n    },\n    EXPLICIT_SOCKET_CLOSE: (e) => {\n      if (shouldDisconnect(e.event.code)) {\n        return {\n          target: \"@idle.failed\",\n          effect: [\n            logPermanentClose,\n            fireErrorEvent(e.event.reason, e.event.code)\n          ]\n        };\n      }\n      if (shouldReauth(e.event.code)) {\n        if (e.event.code === 4109 /* TOKEN_EXPIRED */) {\n          return \"@auth.busy\";\n        } else {\n          return {\n            target: \"@auth.backoff\",\n            effect: [increaseBackoffDelay, logCloseEvent(e.event)]\n          };\n        }\n      }\n      if (shouldRetryWithoutReauth(e.event.code)) {\n        return {\n          target: \"@connecting.backoff\",\n          effect: [increaseBackoffDelayAggressively, logCloseEvent(e.event)]\n        };\n      }\n      return {\n        target: \"@connecting.backoff\",\n        effect: [increaseBackoffDelay, logCloseEvent(e.event)]\n      };\n    }\n  });\n  if (typeof document !== \"undefined\") {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const win = typeof window !== \"undefined\" ? window : void 0;\n    const root = win ?? doc;\n    machine.onEnter(\"*\", (ctx) => {\n      function onNetworkOffline() {\n        machine.send({ type: \"NAVIGATOR_OFFLINE\" });\n      }\n      function onNetworkBackOnline() {\n        machine.send({ type: \"NAVIGATOR_ONLINE\" });\n      }\n      function onVisibilityChange() {\n        if (doc?.visibilityState === \"visible\") {\n          machine.send({ type: \"WINDOW_GOT_FOCUS\" });\n        }\n      }\n      win?.addEventListener(\"online\", onNetworkBackOnline);\n      win?.addEventListener(\"offline\", onNetworkOffline);\n      root?.addEventListener(\"visibilitychange\", onVisibilityChange);\n      return () => {\n        root?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n        win?.removeEventListener(\"online\", onNetworkBackOnline);\n        win?.removeEventListener(\"offline\", onNetworkOffline);\n        teardownSocket(ctx.socket);\n      };\n    });\n  }\n  const cleanups = [];\n  const { statusDidChange, didConnect, didDisconnect, unsubscribe } = defineConnectivityEvents(machine);\n  cleanups.push(unsubscribe);\n  if (options.enableDebugLogging) {\n    cleanups.push(enableTracing(machine));\n  }\n  machine.start();\n  return {\n    machine,\n    cleanups,\n    // Observable events that will be emitted by this machine\n    events: {\n      statusDidChange,\n      didConnect,\n      didDisconnect,\n      onMessage: onMessage.observable,\n      onLiveblocksError: onLiveblocksError.observable\n    }\n  };\n}\nvar ManagedSocket = class {\n  constructor(delegates, enableDebugLogging = false, waitForActorId = true) {\n    const { machine, events, cleanups } = createConnectionStateMachine(\n      delegates,\n      { waitForActorId, enableDebugLogging }\n    );\n    this.machine = machine;\n    this.events = events;\n    this.cleanups = cleanups;\n  }\n  getStatus() {\n    try {\n      return toNewConnectionStatus(this.machine);\n    } catch {\n      return \"initial\";\n    }\n  }\n  /**\n   * Returns the current auth authValue.\n   */\n  get authValue() {\n    return this.machine.context.authValue;\n  }\n  /**\n   * Call this method to try to connect to a WebSocket. This only has an effect\n   * if the machine is idle at the moment, otherwise this is a no-op.\n   */\n  connect() {\n    this.machine.send({ type: \"CONNECT\" });\n  }\n  /**\n   * If idle, will try to connect. Otherwise, it will attempt to reconnect to\n   * the socket, potentially obtaining a new authValue first, if needed.\n   */\n  reconnect() {\n    this.machine.send({ type: \"RECONNECT\" });\n  }\n  /**\n   * Call this method to disconnect from the current WebSocket. Is going to be\n   * a no-op if there is no active connection.\n   */\n  disconnect() {\n    this.machine.send({ type: \"DISCONNECT\" });\n  }\n  /**\n   * Call this to stop the machine and run necessary cleanup functions. After\n   * calling destroy(), you can no longer use this instance. Call this before\n   * letting the instance get garbage collected.\n   */\n  destroy() {\n    this.machine.stop();\n    let cleanup;\n    while (cleanup = this.cleanups.pop()) {\n      cleanup();\n    }\n  }\n  /**\n   * Safely send a message to the current WebSocket connection. Will emit a log\n   * message if this is somehow impossible.\n   */\n  send(data) {\n    const socket = this.machine.context?.socket;\n    if (socket === null) {\n      warn(\"Cannot send: not connected yet\", data);\n    } else if (socket.readyState !== 1) {\n      warn(\"Cannot send: WebSocket no longer open\", data);\n    } else {\n      socket.send(data);\n    }\n  }\n  /**\n   * NOTE: Used by the E2E app only, to simulate explicit events.\n   * Not ideal to keep exposed :(\n   */\n  _privateSendMachineEvent(event) {\n    this.machine.send(event);\n  }\n};\n\n// src/protocol/AuthToken.ts\nfunction canWriteStorage(scopes) {\n  return scopes.includes(\"room:write\" /* Write */);\n}\nfunction canComment(scopes) {\n  return scopes.includes(\"comments:write\" /* CommentsWrite */) || scopes.includes(\"room:write\" /* Write */);\n}\nfunction isValidAuthTokenPayload(data) {\n  return isPlainObject(data) && (data.k === \"acc\" /* ACCESS_TOKEN */ || data.k === \"id\" /* ID_TOKEN */ || data.k === \"sec-legacy\" /* SECRET_LEGACY */);\n}\nfunction parseAuthToken(rawTokenString) {\n  const tokenParts = rawTokenString.split(\".\");\n  if (tokenParts.length !== 3) {\n    throw new Error(\"Authentication error: invalid JWT token\");\n  }\n  const payload = tryParseJson(b64decode(tokenParts[1]));\n  if (!(payload && isValidAuthTokenPayload(payload))) {\n    throw new Error(\n      \"Authentication error: expected a valid token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback\"\n    );\n  }\n  return {\n    raw: rawTokenString,\n    parsed: payload\n  };\n}\n\n// src/auth-manager.ts\nfunction createAuthManager(authOptions) {\n  const authentication = prepareAuthentication(authOptions);\n  const seenTokens = /* @__PURE__ */ new Set();\n  const tokens = [];\n  const expiryTimes = [];\n  const requestPromises = /* @__PURE__ */ new Map();\n  function reset() {\n    seenTokens.clear();\n    tokens.length = 0;\n    expiryTimes.length = 0;\n    requestPromises.clear();\n  }\n  function hasCorrespondingScopes(requestedScope, scopes) {\n    if (requestedScope === \"comments:read\") {\n      return scopes.includes(\"comments:read\" /* CommentsRead */) || scopes.includes(\"comments:write\" /* CommentsWrite */) || scopes.includes(\"room:read\" /* Read */) || scopes.includes(\"room:write\" /* Write */);\n    } else if (requestedScope === \"room:read\") {\n      return scopes.includes(\"room:read\" /* Read */) || scopes.includes(\"room:write\" /* Write */);\n    }\n    return false;\n  }\n  function getCachedToken(requestOptions) {\n    const now = Math.ceil(Date.now() / 1e3);\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const token = tokens[i];\n      const expiresAt = expiryTimes[i];\n      if (expiresAt <= now) {\n        tokens.splice(i, 1);\n        expiryTimes.splice(i, 1);\n        continue;\n      }\n      if (token.parsed.k === \"id\" /* ID_TOKEN */) {\n        return token;\n      } else if (token.parsed.k === \"acc\" /* ACCESS_TOKEN */) {\n        if (!requestOptions.roomId && Object.entries(token.parsed.perms).length === 0) {\n          return token;\n        }\n        for (const [resource, scopes] of Object.entries(token.parsed.perms)) {\n          if (!requestOptions.roomId) {\n            if (resource.includes(\"*\") && hasCorrespondingScopes(requestOptions.requestedScope, scopes)) {\n              return token;\n            }\n          } else if (resource.includes(\"*\") && requestOptions.roomId.startsWith(resource.replace(\"*\", \"\")) || requestOptions.roomId === resource && hasCorrespondingScopes(requestOptions.requestedScope, scopes)) {\n            return token;\n          }\n        }\n      }\n    }\n    return void 0;\n  }\n  async function makeAuthRequest(options) {\n    const fetcher = authOptions.polyfills?.fetch ?? (typeof window === \"undefined\" ? void 0 : window.fetch);\n    if (authentication.type === \"private\") {\n      if (fetcher === void 0) {\n        throw new StopRetrying(\n          \"To use Liveblocks client in a non-DOM environment with a url as auth endpoint, you need to provide a fetch polyfill.\"\n        );\n      }\n      const response = await fetchAuthEndpoint(fetcher, authentication.url, {\n        room: options.roomId\n      });\n      const parsed = parseAuthToken(response.token);\n      if (seenTokens.has(parsed.raw)) {\n        throw new StopRetrying(\n          \"The same Liveblocks auth token was issued from the backend before. Caching Liveblocks tokens is not supported.\"\n        );\n      }\n      return parsed;\n    }\n    if (authentication.type === \"custom\") {\n      const response = await authentication.callback(options.roomId);\n      if (response && typeof response === \"object\") {\n        if (typeof response.token === \"string\") {\n          const parsed = parseAuthToken(response.token);\n          return parsed;\n        } else if (typeof response.error === \"string\") {\n          const reason = `Authentication failed: ${\"reason\" in response && typeof response.reason === \"string\" ? response.reason : \"Forbidden\"}`;\n          if (response.error === \"forbidden\") {\n            throw new StopRetrying(reason);\n          } else {\n            throw new Error(reason);\n          }\n        }\n      }\n      throw new Error(\n        'Your authentication callback function should return a token, but it did not. Hint: the return value should look like: { token: \"...\" }'\n      );\n    }\n    throw new Error(\n      \"Unexpected authentication type. Must be private or custom.\"\n    );\n  }\n  async function getAuthValue(requestOptions) {\n    if (authentication.type === \"public\") {\n      return { type: \"public\", publicApiKey: authentication.publicApiKey };\n    }\n    const cachedToken = getCachedToken(requestOptions);\n    if (cachedToken !== void 0) {\n      return { type: \"secret\", token: cachedToken };\n    }\n    let currentPromise;\n    if (requestOptions.roomId) {\n      currentPromise = requestPromises.get(requestOptions.roomId);\n      if (currentPromise === void 0) {\n        currentPromise = makeAuthRequest(requestOptions);\n        requestPromises.set(requestOptions.roomId, currentPromise);\n      }\n    } else {\n      currentPromise = requestPromises.get(\"liveblocks-user-token\");\n      if (currentPromise === void 0) {\n        currentPromise = makeAuthRequest(requestOptions);\n        requestPromises.set(\"liveblocks-user-token\", currentPromise);\n      }\n    }\n    try {\n      const token = await currentPromise;\n      const BUFFER = 30;\n      const expiresAt = Math.floor(Date.now() / 1e3) + (token.parsed.exp - token.parsed.iat) - BUFFER;\n      seenTokens.add(token.raw);\n      if (token.parsed.k !== \"sec-legacy\" /* SECRET_LEGACY */) {\n        tokens.push(token);\n        expiryTimes.push(expiresAt);\n      }\n      return { type: \"secret\", token };\n    } finally {\n      if (requestOptions.roomId) {\n        requestPromises.delete(requestOptions.roomId);\n      } else {\n        requestPromises.delete(\"liveblocks-user-token\");\n      }\n    }\n  }\n  return {\n    reset,\n    getAuthValue\n  };\n}\nfunction prepareAuthentication(authOptions) {\n  const { publicApiKey, authEndpoint } = authOptions;\n  if (authEndpoint !== void 0 && publicApiKey !== void 0) {\n    throw new Error(\n      \"You cannot simultaneously use `publicApiKey` and `authEndpoint` options. Please pick one and leave the other option unspecified. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n    );\n  }\n  if (typeof publicApiKey === \"string\") {\n    if (publicApiKey.startsWith(\"sk_\")) {\n      throw new Error(\n        \"Invalid `publicApiKey` option. The value you passed is a secret key, which should not be used from the client. Please only ever pass a public key here. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    } else if (!publicApiKey.startsWith(\"pk_\")) {\n      throw new Error(\n        \"Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    }\n    return {\n      type: \"public\",\n      publicApiKey\n    };\n  }\n  if (typeof authEndpoint === \"string\") {\n    return {\n      type: \"private\",\n      url: authEndpoint\n    };\n  } else if (typeof authEndpoint === \"function\") {\n    return {\n      type: \"custom\",\n      callback: authEndpoint\n    };\n  } else if (authEndpoint !== void 0) {\n    throw new Error(\n      \"The `authEndpoint` option must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint\"\n    );\n  }\n  throw new Error(\n    \"Invalid Liveblocks client options. Please provide either a `publicApiKey` or `authEndpoint` option. They cannot both be empty. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n  );\n}\nasync function fetchAuthEndpoint(fetch2, endpoint, body) {\n  const res = await fetch2(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) {\n    const reason = `${(await res.text()).trim() || \"reason not provided in auth response\"} (${res.status} returned by POST ${endpoint})`;\n    if (res.status === 401 || res.status === 403) {\n      throw new StopRetrying(`Unauthorized: ${reason}`);\n    } else {\n      throw new Error(`Failed to authenticate: ${reason}`);\n    }\n  }\n  let data;\n  try {\n    data = await res.json();\n  } catch (er) {\n    throw new Error(\n      `Expected a JSON response when doing a POST request on \"${endpoint}\". ${String(\n        er\n      )}`\n    );\n  }\n  if (!isPlainObject(data) || typeof data.token !== \"string\") {\n    throw new Error(\n      `Expected a JSON response of the form \\`{ token: \"...\" }\\` when doing a POST request on \"${endpoint}\", but got ${JSON.stringify(\n        data\n      )}`\n    );\n  }\n  const { token } = data;\n  return { token };\n}\n\n// src/constants.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\n\n// src/internal.ts\nvar kInternal = Symbol();\n\n// src/devtools/bridge.ts\nvar _bridgeActive = false;\nfunction activateBridge(allowed) {\n  _bridgeActive = allowed;\n}\nfunction sendToPanel(message, options) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  const fullMsg = {\n    ...message,\n    source: \"liveblocks-devtools-client\"\n  };\n  if (!(options?.force || _bridgeActive)) {\n    return;\n  }\n  window.postMessage(fullMsg, \"*\");\n}\nvar eventSource = makeEventSource();\nif ( true && typeof window !== \"undefined\") {\n  window.addEventListener(\"message\", (event) => {\n    if (event.source === window && event.data?.source === \"liveblocks-devtools-panel\") {\n      eventSource.notify(event.data);\n    } else {\n    }\n  });\n}\nvar onMessageFromPanel = eventSource.observable;\n\n// src/devtools/index.ts\nvar VERSION = PKG_VERSION || \"dev\";\nvar _devtoolsSetupHasRun = false;\nfunction setupDevTools(getAllRooms) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  if (_devtoolsSetupHasRun) {\n    return;\n  }\n  _devtoolsSetupHasRun = true;\n  onMessageFromPanel.subscribe((msg) => {\n    switch (msg.msg) {\n      case \"connect\": {\n        activateBridge(true);\n        for (const roomId of getAllRooms()) {\n          sendToPanel({\n            msg: \"room::available\",\n            roomId,\n            clientVersion: VERSION\n          });\n        }\n        break;\n      }\n    }\n  });\n  sendToPanel({ msg: \"wake-up-devtools\" }, { force: true });\n}\nvar unsubsByRoomId = /* @__PURE__ */ new Map();\nfunction stopSyncStream(roomId) {\n  const unsubs = unsubsByRoomId.get(roomId) ?? [];\n  unsubsByRoomId.delete(roomId);\n  for (const unsub of unsubs) {\n    unsub();\n  }\n}\nfunction startSyncStream(room) {\n  stopSyncStream(room.id);\n  fullSync(room);\n  unsubsByRoomId.set(room.id, [\n    // When the connection status changes\n    room.events.status.subscribe(() => partialSyncConnection(room)),\n    // When storage initializes, send the update\n    room.events.storageDidLoad.subscribeOnce(() => partialSyncStorage(room)),\n    // Any time storage updates, send the new storage root\n    room.events.storageBatch.subscribe(() => partialSyncStorage(room)),\n    // Any time \"me\" or \"others\" updates, send the new values accordingly\n    room.events.self.subscribe(() => partialSyncMe(room)),\n    room.events.others.subscribe(() => partialSyncOthers(room)),\n    // Any time ydoc is updated, forward the update\n    room.events.ydoc.subscribe((update) => syncYdocUpdate(room, update)),\n    // Any time a custom room event is received, forward it\n    room.events.customEvent.subscribe(\n      (eventData) => forwardEvent(room, eventData)\n    )\n  ]);\n}\nfunction syncYdocUpdate(room, update) {\n  sendToPanel({\n    msg: \"room::sync::ydoc\",\n    roomId: room.id,\n    update\n  });\n}\nvar loadedAt = Date.now();\nvar eventCounter = 0;\nfunction nextEventId() {\n  return `event-${loadedAt}-${eventCounter++}`;\n}\nfunction forwardEvent(room, eventData) {\n  sendToPanel({\n    msg: \"room::events::custom-event\",\n    roomId: room.id,\n    event: {\n      type: \"CustomEvent\",\n      id: nextEventId(),\n      key: \"Event\",\n      connectionId: eventData.connectionId,\n      payload: eventData.event\n    }\n  });\n}\nfunction partialSyncConnection(room) {\n  sendToPanel({\n    msg: \"room::sync::partial\",\n    roomId: room.id,\n    status: room.getStatus()\n  });\n}\nfunction partialSyncStorage(room) {\n  const root = room.getStorageSnapshot();\n  if (root) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      storage: root.toTreeNode(\"root\").payload\n    });\n  }\n}\nfunction partialSyncMe(room) {\n  const me = room[kInternal].getSelf_forDevTools();\n  if (me) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      me\n    });\n  }\n}\nfunction partialSyncOthers(room) {\n  const others = room[kInternal].getOthers_forDevTools();\n  if (others) {\n    sendToPanel({\n      msg: \"room::sync::partial\",\n      roomId: room.id,\n      others\n    });\n  }\n}\nfunction fullSync(room) {\n  const root = room.getStorageSnapshot();\n  const me = room[kInternal].getSelf_forDevTools();\n  const others = room[kInternal].getOthers_forDevTools();\n  room.fetchYDoc(\"\");\n  sendToPanel({\n    msg: \"room::sync::full\",\n    roomId: room.id,\n    status: room.getStatus(),\n    storage: root?.toTreeNode(\"root\").payload ?? null,\n    me,\n    others\n  });\n}\nvar roomChannelListeners = /* @__PURE__ */ new Map();\nfunction stopRoomChannelListener(roomId) {\n  const listener = roomChannelListeners.get(roomId);\n  roomChannelListeners.delete(roomId);\n  if (listener) {\n    listener();\n  }\n}\nfunction linkDevTools(roomId, room) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  sendToPanel({ msg: \"room::available\", roomId, clientVersion: VERSION });\n  stopRoomChannelListener(roomId);\n  roomChannelListeners.set(\n    roomId,\n    // Returns the unsubscribe callback, that we store in the\n    // roomChannelListeners registry\n    onMessageFromPanel.subscribe((msg) => {\n      switch (msg.msg) {\n        case \"room::subscribe\": {\n          if (msg.roomId === roomId) {\n            startSyncStream(room);\n          }\n          break;\n        }\n        case \"room::unsubscribe\": {\n          if (msg.roomId === roomId) {\n            stopSyncStream(roomId);\n          }\n          break;\n        }\n      }\n    })\n  );\n}\nfunction unlinkDevTools(roomId) {\n  if ( false || typeof window === \"undefined\") {\n    return;\n  }\n  stopSyncStream(roomId);\n  stopRoomChannelListener(roomId);\n  sendToPanel({\n    msg: \"room::unavailable\",\n    roomId\n  });\n}\n\n// src/lib/stringify.ts\nfunction stringify(object, ...args) {\n  if (typeof object !== \"object\" || object === null || Array.isArray(object)) {\n    return JSON.stringify(object, ...args);\n  }\n  const sortedObject = Object.keys(object).sort().reduce(\n    (sortedObject2, key) => {\n      sortedObject2[key] = object[key];\n      return sortedObject2;\n    },\n    {}\n  );\n  return JSON.stringify(sortedObject, ...args);\n}\n\n// src/lib/batch.ts\nvar DEFAULT_SIZE = 50;\nvar BatchCall = class {\n  constructor(input) {\n    this.input = input;\n    const { promise, resolve, reject } = Promise_withResolvers();\n    this.promise = promise;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n};\nvar Batch = class {\n  constructor(callback, options) {\n    this.queue = [];\n    this.error = false;\n    this.callback = callback;\n    this.size = options.size ?? DEFAULT_SIZE;\n    this.delay = options.delay;\n  }\n  clearDelayTimeout() {\n    if (this.delayTimeoutId !== void 0) {\n      clearTimeout(this.delayTimeoutId);\n      this.delayTimeoutId = void 0;\n    }\n  }\n  schedule() {\n    if (this.queue.length === this.size) {\n      void this.flush();\n    } else if (this.queue.length === 1) {\n      this.clearDelayTimeout();\n      this.delayTimeoutId = setTimeout(() => void this.flush(), this.delay);\n    }\n  }\n  async flush() {\n    if (this.queue.length === 0) {\n      return;\n    }\n    const calls = this.queue.splice(0);\n    const inputs = calls.map((call) => call.input);\n    try {\n      const results = await this.callback(inputs);\n      this.error = false;\n      calls.forEach((call, index) => {\n        const result = results?.[index];\n        if (!Array.isArray(results)) {\n          call.reject(new Error(\"Callback must return an array.\"));\n        } else if (calls.length !== results.length) {\n          call.reject(\n            new Error(\n              `Callback must return an array of the same length as the number of provided items. Expected ${calls.length}, but got ${results.length}.`\n            )\n          );\n        } else if (result instanceof Error) {\n          call.reject(result);\n        } else {\n          call.resolve(result);\n        }\n      });\n    } catch (error3) {\n      this.error = true;\n      calls.forEach((call) => {\n        call.reject(error3);\n      });\n    }\n  }\n  get(input) {\n    const existingCall = this.queue.find(\n      (call2) => stringify(call2.input) === stringify(input)\n    );\n    if (existingCall) {\n      return existingCall.promise;\n    }\n    const call = new BatchCall(input);\n    this.queue.push(call);\n    this.schedule();\n    return call.promise;\n  }\n  clear() {\n    this.queue = [];\n    this.error = false;\n    this.clearDelayTimeout();\n  }\n};\nfunction createBatchStore(callback, options) {\n  const batch = new Batch(callback, options);\n  const cache = /* @__PURE__ */ new Map();\n  const eventSource2 = makeEventSource();\n  function getCacheKey(args) {\n    return stringify(args);\n  }\n  function setStateAndNotify(cacheKey, state) {\n    cache.set(cacheKey, state);\n    eventSource2.notify();\n  }\n  async function get(input) {\n    const cacheKey = getCacheKey(input);\n    if (cache.has(cacheKey)) {\n      return;\n    }\n    try {\n      setStateAndNotify(cacheKey, { isLoading: true });\n      const result = await batch.get(input);\n      setStateAndNotify(cacheKey, { isLoading: false, data: result });\n    } catch (error3) {\n      setStateAndNotify(cacheKey, {\n        isLoading: false,\n        error: error3\n      });\n    }\n  }\n  function getState(input) {\n    const cacheKey = getCacheKey(input);\n    return cache.get(cacheKey);\n  }\n  return {\n    ...eventSource2.observable,\n    get,\n    getState\n  };\n}\n\n// src/lib/create-store.ts\nfunction createStore(initialState) {\n  let state = initialState;\n  const subscribers = /* @__PURE__ */ new Set();\n  function get() {\n    return state;\n  }\n  function set(callback) {\n    const newState = callback(state);\n    if (state === newState) {\n      return;\n    }\n    state = newState;\n    for (const subscriber of subscribers) {\n      subscriber(state);\n    }\n  }\n  function subscribe(callback) {\n    subscribers.add(callback);\n    callback(state);\n    return () => {\n      subscribers.delete(callback);\n    };\n  }\n  return {\n    get,\n    set,\n    subscribe\n  };\n}\n\n// src/convert-plain-data.ts\nfunction convertToCommentData(data) {\n  const editedAt = data.editedAt ? new Date(data.editedAt) : void 0;\n  const createdAt = new Date(data.createdAt);\n  const reactions = data.reactions.map((reaction) => ({\n    ...reaction,\n    createdAt: new Date(reaction.createdAt)\n  }));\n  if (data.body) {\n    return {\n      ...data,\n      reactions,\n      createdAt,\n      editedAt\n    };\n  } else {\n    const deletedAt = new Date(data.deletedAt);\n    return {\n      ...data,\n      reactions,\n      createdAt,\n      editedAt,\n      deletedAt\n    };\n  }\n}\nfunction convertToThreadData(data) {\n  const updatedAt = data.updatedAt ? new Date(data.updatedAt) : void 0;\n  const createdAt = new Date(data.createdAt);\n  const comments = data.comments.map(\n    (comment) => convertToCommentData(comment)\n  );\n  return {\n    ...data,\n    createdAt,\n    updatedAt,\n    comments\n  };\n}\nfunction convertToCommentUserReaction(data) {\n  return {\n    ...data,\n    createdAt: new Date(data.createdAt)\n  };\n}\nfunction convertToInboxNotificationData(data) {\n  const notifiedAt = new Date(data.notifiedAt);\n  const readAt = data.readAt ? new Date(data.readAt) : null;\n  if (\"activities\" in data) {\n    const activities = data.activities.map((activity) => ({\n      ...activity,\n      createdAt: new Date(activity.createdAt)\n    }));\n    return {\n      ...data,\n      notifiedAt,\n      readAt,\n      activities\n    };\n  }\n  return {\n    ...data,\n    notifiedAt,\n    readAt\n  };\n}\nfunction convertToThreadDeleteInfo(data) {\n  const deletedAt = new Date(data.deletedAt);\n  return {\n    ...data,\n    deletedAt\n  };\n}\nfunction convertToInboxNotificationDeleteInfo(data) {\n  const deletedAt = new Date(data.deletedAt);\n  return {\n    ...data,\n    deletedAt\n  };\n}\n\n// src/lib/url.ts\nfunction toURLSearchParams(params) {\n  const result = new URLSearchParams();\n  for (const [key, value] of Object.entries(params)) {\n    if (value !== void 0 && value !== null) {\n      result.set(key, value.toString());\n    }\n  }\n  return result;\n}\nfunction urljoin(baseUrl, path, params) {\n  const url = new URL(path, baseUrl);\n  if (params !== void 0) {\n    url.search = (params instanceof URLSearchParams ? params : toURLSearchParams(params)).toString();\n  }\n  return url.toString();\n}\n\n// src/notifications.ts\nvar MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY = 50;\nfunction createNotificationsApi({\n  baseUrl,\n  authManager,\n  currentUserIdStore,\n  fetcher\n}) {\n  async function fetchJson(endpoint, options, params) {\n    const authValue = await authManager.getAuthValue({\n      requestedScope: \"comments:read\"\n    });\n    if (authValue.type === \"secret\" && authValue.token.parsed.k === \"acc\" /* ACCESS_TOKEN */) {\n      const userId = authValue.token.parsed.uid;\n      currentUserIdStore.set(() => userId);\n    }\n    const url = urljoin(baseUrl, `/v2/c${endpoint}`, params);\n    const response = await fetcher(url.toString(), {\n      ...options,\n      headers: {\n        ...options?.headers,\n        Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n      }\n    });\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new NotificationsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new NotificationsApiError(\n            response.statusText,\n            response.status\n          );\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  async function getInboxNotifications(options) {\n    const json = await fetchJson(\"/inbox-notifications\", void 0, {\n      limit: options?.limit,\n      since: options?.since?.toISOString()\n    });\n    return {\n      threads: json.threads.map((thread) => convertToThreadData(thread)),\n      inboxNotifications: json.inboxNotifications.map(\n        (notification) => convertToInboxNotificationData(notification)\n      ),\n      deletedThreads: json.deletedThreads.map(\n        (info) => convertToThreadDeleteInfo(info)\n      ),\n      deletedInboxNotifications: json.deletedInboxNotifications.map(\n        (info) => convertToInboxNotificationDeleteInfo(info)\n      ),\n      meta: {\n        requestedAt: new Date(json.meta.requestedAt)\n      }\n    };\n  }\n  async function getUnreadInboxNotificationsCount() {\n    const { count } = await fetchJson(\"/inbox-notifications/count\");\n    return count;\n  }\n  async function markAllInboxNotificationsAsRead() {\n    await fetchJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds: \"all\" })\n    });\n  }\n  async function markInboxNotificationsAsRead(inboxNotificationIds) {\n    await fetchJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds })\n    });\n  }\n  const batchedMarkInboxNotificationsAsRead = new Batch(\n    async (batchedInboxNotificationIds) => {\n      const inboxNotificationIds = batchedInboxNotificationIds.flat();\n      await markInboxNotificationsAsRead(inboxNotificationIds);\n      return inboxNotificationIds;\n    },\n    { delay: MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY }\n  );\n  async function markInboxNotificationAsRead(inboxNotificationId) {\n    await batchedMarkInboxNotificationsAsRead.get(inboxNotificationId);\n  }\n  async function deleteAllInboxNotifications() {\n    await fetchJson(\"/inbox-notifications\", {\n      method: \"DELETE\"\n    });\n  }\n  async function deleteInboxNotification(inboxNotificationId) {\n    await fetchJson(\n      `/inbox-notifications/${encodeURIComponent(inboxNotificationId)}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  return {\n    getInboxNotifications,\n    getUnreadInboxNotificationsCount,\n    markAllInboxNotificationsAsRead,\n    markInboxNotificationAsRead,\n    deleteAllInboxNotifications,\n    deleteInboxNotification\n  };\n}\n\n// src/lib/position.ts\nvar MIN_CODE = 32;\nvar MAX_CODE = 126;\nvar NUM_DIGITS = MAX_CODE - MIN_CODE + 1;\nvar ZERO = nthDigit(0);\nvar ONE = nthDigit(1);\nvar ZERO_NINE = ZERO + nthDigit(-1);\nfunction nthDigit(n) {\n  const code = MIN_CODE + (n < 0 ? NUM_DIGITS + n : n);\n  if (code < MIN_CODE || code > MAX_CODE) {\n    throw new Error(`Invalid n value: ${n}`);\n  }\n  return String.fromCharCode(code);\n}\nfunction makePosition(x, y) {\n  if (x !== void 0 && y !== void 0) {\n    return between(x, y);\n  } else if (x !== void 0) {\n    return after(x);\n  } else if (y !== void 0) {\n    return before(y);\n  } else {\n    return ONE;\n  }\n}\nfunction before(pos) {\n  const lastIndex = pos.length - 1;\n  for (let i = 0; i <= lastIndex; i++) {\n    const code = pos.charCodeAt(i);\n    if (code <= MIN_CODE) {\n      continue;\n    }\n    if (i === lastIndex) {\n      if (code === MIN_CODE + 1) {\n        return pos.substring(0, i) + ZERO_NINE;\n      } else {\n        return pos.substring(0, i) + String.fromCharCode(code - 1);\n      }\n    } else {\n      return pos.substring(0, i + 1);\n    }\n  }\n  return ONE;\n}\nfunction after(pos) {\n  for (let i = 0; i <= pos.length - 1; i++) {\n    const code = pos.charCodeAt(i);\n    if (code >= MAX_CODE) {\n      continue;\n    }\n    return pos.substring(0, i) + String.fromCharCode(code + 1);\n  }\n  return pos + ONE;\n}\nfunction between(lo, hi) {\n  if (lo < hi) {\n    return _between(lo, hi);\n  } else if (lo > hi) {\n    return _between(hi, lo);\n  } else {\n    throw new Error(\"Cannot compute value between two equal positions\");\n  }\n}\nfunction _between(lo, hi) {\n  let index = 0;\n  const loLen = lo.length;\n  const hiLen = hi.length;\n  while (true) {\n    const loCode = index < loLen ? lo.charCodeAt(index) : MIN_CODE;\n    const hiCode = index < hiLen ? hi.charCodeAt(index) : MAX_CODE;\n    if (loCode === hiCode) {\n      index++;\n      continue;\n    }\n    if (hiCode - loCode === 1) {\n      const size = index + 1;\n      let prefix = lo.substring(0, size);\n      if (prefix.length < size) {\n        prefix += ZERO.repeat(size - prefix.length);\n      }\n      const suffix = lo.substring(size);\n      const nines = \"\";\n      return prefix + _between(suffix, nines);\n    } else {\n      return takeN(lo, index) + String.fromCharCode(hiCode + loCode >> 1);\n    }\n  }\n}\nfunction takeN(pos, n) {\n  return n < pos.length ? pos.substring(0, n) : pos + ZERO.repeat(n - pos.length);\n}\nvar MIN_NON_ZERO_CODE = MIN_CODE + 1;\nfunction isPos(str) {\n  if (str === \"\") {\n    return false;\n  }\n  const lastIdx = str.length - 1;\n  const last = str.charCodeAt(lastIdx);\n  if (last < MIN_NON_ZERO_CODE || last > MAX_CODE) {\n    return false;\n  }\n  for (let i = 0; i < lastIdx; i++) {\n    const code = str.charCodeAt(i);\n    if (code < MIN_CODE || code > MAX_CODE) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction convertToPos(str) {\n  const codes = [];\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i);\n    codes.push(code < MIN_CODE ? MIN_CODE : code > MAX_CODE ? MAX_CODE : code);\n  }\n  while (codes.length > 0 && codes[codes.length - 1] === MIN_CODE) {\n    codes.length--;\n  }\n  return codes.length > 0 ? String.fromCharCode(...codes) : (\n    // Edge case: the str was a 0-only string, which is invalid. Default back to .1\n    ONE\n  );\n}\nfunction asPos(str) {\n  return isPos(str) ? str : convertToPos(str);\n}\n\n// src/protocol/Op.ts\nvar OpCode = /* @__PURE__ */ ((OpCode2) => {\n  OpCode2[OpCode2[\"INIT\"] = 0] = \"INIT\";\n  OpCode2[OpCode2[\"SET_PARENT_KEY\"] = 1] = \"SET_PARENT_KEY\";\n  OpCode2[OpCode2[\"CREATE_LIST\"] = 2] = \"CREATE_LIST\";\n  OpCode2[OpCode2[\"UPDATE_OBJECT\"] = 3] = \"UPDATE_OBJECT\";\n  OpCode2[OpCode2[\"CREATE_OBJECT\"] = 4] = \"CREATE_OBJECT\";\n  OpCode2[OpCode2[\"DELETE_CRDT\"] = 5] = \"DELETE_CRDT\";\n  OpCode2[OpCode2[\"DELETE_OBJECT_KEY\"] = 6] = \"DELETE_OBJECT_KEY\";\n  OpCode2[OpCode2[\"CREATE_MAP\"] = 7] = \"CREATE_MAP\";\n  OpCode2[OpCode2[\"CREATE_REGISTER\"] = 8] = \"CREATE_REGISTER\";\n  return OpCode2;\n})(OpCode || {});\nfunction ackOp(opId) {\n  return {\n    type: 5 /* DELETE_CRDT */,\n    id: \"ACK\",\n    // (H)ACK\n    opId\n  };\n}\nfunction isAckOp(op) {\n  return op.type === 5 /* DELETE_CRDT */ && op.id === \"ACK\";\n}\n\n// src/crdts/AbstractCrdt.ts\nfunction crdtAsLiveNode(value) {\n  return value;\n}\nfunction HasParent(node, key, pos = asPos(key)) {\n  return Object.freeze({ type: \"HasParent\", node, key, pos });\n}\nvar NoParent = Object.freeze({ type: \"NoParent\" });\nfunction Orphaned(oldKey, oldPos = asPos(oldKey)) {\n  return Object.freeze({ type: \"Orphaned\", oldKey, oldPos });\n}\nvar AbstractCrdt = class {\n  constructor() {\n    /** @internal */\n    this._parent = NoParent;\n  }\n  /** @internal */\n  _getParentKeyOrThrow() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        throw new Error(\"Parent key is missing\");\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  get _parentPos() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.pos;\n      case \"NoParent\":\n        throw new Error(\"Parent key is missing\");\n      case \"Orphaned\":\n        return this.parent.oldPos;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  get _pool() {\n    return this.__pool;\n  }\n  get roomId() {\n    return this.__pool ? this.__pool.roomId : null;\n  }\n  /** @internal */\n  get _id() {\n    return this.__id;\n  }\n  /** @internal */\n  get parent() {\n    return this._parent;\n  }\n  /** @internal */\n  get _parentKey() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        return null;\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  _apply(op, _isLocal) {\n    switch (op.type) {\n      case 5 /* DELETE_CRDT */: {\n        if (this.parent.type === \"HasParent\") {\n          return this.parent.node._detachChild(crdtAsLiveNode(this));\n        }\n        return { modified: false };\n      }\n    }\n    return { modified: false };\n  }\n  /** @internal */\n  _setParentLink(newParentNode, newParentKey) {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        if (this.parent.node !== newParentNode) {\n          throw new Error(\"Cannot set parent: node already has a parent\");\n        } else {\n          this._parent = HasParent(newParentNode, newParentKey);\n          return;\n        }\n      case \"Orphaned\":\n      case \"NoParent\": {\n        this._parent = HasParent(newParentNode, newParentKey);\n        return;\n      }\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  /** @internal */\n  _attach(id, pool) {\n    if (this.__id || this.__pool) {\n      throw new Error(\"Cannot attach node: already attached\");\n    }\n    pool.addNode(id, crdtAsLiveNode(this));\n    this.__id = id;\n    this.__pool = pool;\n  }\n  /** @internal */\n  _detach() {\n    if (this.__pool && this.__id) {\n      this.__pool.deleteNode(this.__id);\n    }\n    switch (this.parent.type) {\n      case \"HasParent\": {\n        this._parent = Orphaned(this.parent.key, this.parent.pos);\n        break;\n      }\n      case \"NoParent\": {\n        this._parent = NoParent;\n        break;\n      }\n      case \"Orphaned\": {\n        break;\n      }\n      default:\n        assertNever(this.parent, \"Unknown state\");\n    }\n    this.__pool = void 0;\n  }\n  /**\n   * @internal\n   *\n   * Clear the Immutable cache, so that the next call to `.toImmutable()` will\n   * recompute the equivalent Immutable value again.  Call this after every\n   * mutation to the Live node.\n   */\n  invalidate() {\n    if (this._cachedImmutable !== void 0 || this._cachedTreeNode !== void 0) {\n      this._cachedImmutable = void 0;\n      this._cachedTreeNode = void 0;\n      if (this.parent.type === \"HasParent\") {\n        this.parent.node.invalidate();\n      }\n    }\n  }\n  /**\n   * @internal\n   *\n   * Return an snapshot of this Live tree for use in DevTools.\n   */\n  toTreeNode(key) {\n    if (this._cachedTreeNode === void 0 || this._cachedTreeNodeKey !== key) {\n      this._cachedTreeNodeKey = key;\n      this._cachedTreeNode = this._toTreeNode(key);\n    }\n    return this._cachedTreeNode;\n  }\n  /**\n   * Return an immutable snapshot of this Live node and its children.\n   */\n  toImmutable() {\n    if (this._cachedImmutable === void 0) {\n      this._cachedImmutable = this._toImmutable();\n    }\n    return this._cachedImmutable;\n  }\n};\n\n// src/protocol/SerializedCrdt.ts\nvar CrdtType = /* @__PURE__ */ ((CrdtType2) => {\n  CrdtType2[CrdtType2[\"OBJECT\"] = 0] = \"OBJECT\";\n  CrdtType2[CrdtType2[\"LIST\"] = 1] = \"LIST\";\n  CrdtType2[CrdtType2[\"MAP\"] = 2] = \"MAP\";\n  CrdtType2[CrdtType2[\"REGISTER\"] = 3] = \"REGISTER\";\n  return CrdtType2;\n})(CrdtType || {});\nfunction isRootCrdt(crdt) {\n  return crdt.type === 0 /* OBJECT */ && !isChildCrdt(crdt);\n}\nfunction isChildCrdt(crdt) {\n  return crdt.parentId !== void 0 && crdt.parentKey !== void 0;\n}\n\n// src/lib/nanoid.ts\nfunction nanoid(length = 7) {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./;[]~!@#$%&*()_+=-\";\n  const len = alphabet.length;\n  return Array.from(\n    { length },\n    () => alphabet.charAt(Math.floor(Math.random() * len))\n  ).join(\"\");\n}\n\n// src/crdts/LiveRegister.ts\nvar LiveRegister = class _LiveRegister extends AbstractCrdt {\n  constructor(data) {\n    super();\n    this._data = data;\n  }\n  get data() {\n    return this._data;\n  }\n  /** @internal */\n  static _deserialize([id, item], _parentToChildren, pool) {\n    const register = new _LiveRegister(item.data);\n    register._attach(id, pool);\n    return register;\n  }\n  /** @internal */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\n        \"Cannot serialize register if parentId or parentKey is undefined\"\n      );\n    }\n    return [\n      {\n        type: 8 /* CREATE_REGISTER */,\n        opId: pool?.generateOpId(),\n        id: this._id,\n        parentId,\n        parentKey,\n        data: this.data\n      }\n    ];\n  }\n  /** @internal */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveRegister if parent is missing\");\n    }\n    return {\n      type: 3 /* REGISTER */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key,\n      data: this.data\n    };\n  }\n  /** @internal */\n  _attachChild(_op) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @internal */\n  _detachChild(_crdt) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"Json\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: this._data\n    };\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._data;\n  }\n  clone() {\n    return deepClone(this.data);\n  }\n};\n\n// src/crdts/LiveList.ts\nfunction compareNodePosition(itemA, itemB) {\n  const posA = itemA._parentPos;\n  const posB = itemB._parentPos;\n  return posA === posB ? 0 : posA < posB ? -1 : 1;\n}\nvar LiveList = class _LiveList extends AbstractCrdt {\n  constructor(items) {\n    super();\n    this._items = [];\n    this._implicitlyDeletedItems = /* @__PURE__ */ new WeakSet();\n    this._unacknowledgedSets = /* @__PURE__ */ new Map();\n    let position = void 0;\n    for (const item of items) {\n      const newPosition = makePosition(position);\n      const node = lsonToLiveNode(item);\n      node._setParentLink(this, newPosition);\n      this._items.push(node);\n      position = newPosition;\n    }\n  }\n  /** @internal */\n  static _deserialize([id], parentToChildren, pool) {\n    const list = new _LiveList([]);\n    list._attach(id, pool);\n    const children = parentToChildren.get(id);\n    if (children === void 0) {\n      return list;\n    }\n    for (const [id2, crdt] of children) {\n      const child = deserialize([id2, crdt], parentToChildren, pool);\n      child._setParentLink(list, crdt.parentKey);\n      list._insertAndSort(child);\n    }\n    return list;\n  }\n  /**\n   * @internal\n   * This function assumes that the resulting ops will be sent to the server if they have an 'opId'\n   * so we mutate _unacknowledgedSets to avoid potential flickering\n   * https://github.com/liveblocks/liveblocks/pull/1177\n   *\n   * This is quite unintuitive and should disappear as soon as\n   * we introduce an explicit LiveList.Set operation\n   */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const ops = [];\n    const op = {\n      id: this._id,\n      opId: pool?.generateOpId(),\n      type: 2 /* CREATE_LIST */,\n      parentId,\n      parentKey\n    };\n    ops.push(op);\n    for (const item of this._items) {\n      const parentKey2 = item._getParentKeyOrThrow();\n      const childOps = HACK_addIntentAndDeletedIdToOperation(\n        item._toOps(this._id, parentKey2, pool),\n        void 0\n      );\n      const childOpId = childOps[0].opId;\n      if (childOpId !== void 0) {\n        this._unacknowledgedSets.set(parentKey2, childOpId);\n      }\n      ops.push(...childOps);\n    }\n    return ops;\n  }\n  /**\n   * @internal\n   *\n   * Adds a new item into the sorted list, in the correct position.\n   */\n  _insertAndSort(item) {\n    this._items.push(item);\n    this._sortItems();\n  }\n  /** @internal */\n  _sortItems() {\n    this._items.sort(compareNodePosition);\n    this.invalidate();\n  }\n  /** @internal */\n  _indexOfPosition(position) {\n    return this._items.findIndex(\n      (item) => item._getParentKeyOrThrow() === position\n    );\n  }\n  /** @internal */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const item of this._items) {\n      item._attach(pool.generateId(), pool);\n    }\n  }\n  /** @internal */\n  _detach() {\n    super._detach();\n    for (const item of this._items) {\n      item._detach();\n    }\n  }\n  /** @internal */\n  _applySetRemote(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    child._attach(id, this._pool);\n    child._setParentLink(this, key);\n    const deletedId = op.deletedId;\n    const indexOfItemWithSamePosition = this._indexOfPosition(key);\n    if (indexOfItemWithSamePosition !== -1) {\n      const itemWithSamePosition = this._items[indexOfItemWithSamePosition];\n      if (itemWithSamePosition._id === deletedId) {\n        itemWithSamePosition._detach();\n        this._items[indexOfItemWithSamePosition] = child;\n        return {\n          modified: makeUpdate(this, [\n            setDelta(indexOfItemWithSamePosition, child)\n          ]),\n          reverse: []\n        };\n      } else {\n        this._implicitlyDeletedItems.add(itemWithSamePosition);\n        this._items[indexOfItemWithSamePosition] = child;\n        const delta = [\n          setDelta(indexOfItemWithSamePosition, child)\n        ];\n        const deleteDelta2 = this._detachItemAssociatedToSetOperation(\n          op.deletedId\n        );\n        if (deleteDelta2) {\n          delta.push(deleteDelta2);\n        }\n        return {\n          modified: makeUpdate(this, delta),\n          reverse: []\n        };\n      }\n    } else {\n      const updates = [];\n      const deleteDelta2 = this._detachItemAssociatedToSetOperation(\n        op.deletedId\n      );\n      if (deleteDelta2) {\n        updates.push(deleteDelta2);\n      }\n      this._insertAndSort(child);\n      updates.push(insertDelta(this._indexOfPosition(key), child));\n      return {\n        reverse: [],\n        modified: makeUpdate(this, updates)\n      };\n    }\n  }\n  /** @internal */\n  _applySetAck(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const delta = [];\n    const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n    if (deletedDelta) {\n      delta.push(deletedDelta);\n    }\n    const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);\n    if (unacknowledgedOpId !== void 0) {\n      if (unacknowledgedOpId !== op.opId) {\n        return delta.length === 0 ? { modified: false } : { modified: makeUpdate(this, delta), reverse: [] };\n      } else {\n        this._unacknowledgedSets.delete(op.parentKey);\n      }\n    }\n    const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey);\n    const existingItem = this._items.find((item) => item._id === op.id);\n    if (existingItem !== void 0) {\n      if (existingItem._parentKey === op.parentKey) {\n        return {\n          modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n          reverse: []\n        };\n      }\n      if (indexOfItemWithSamePosition !== -1) {\n        this._implicitlyDeletedItems.add(\n          this._items[indexOfItemWithSamePosition]\n        );\n        this._items.splice(indexOfItemWithSamePosition, 1);\n        delta.push(deleteDelta(indexOfItemWithSamePosition));\n      }\n      const previousIndex = this._items.indexOf(existingItem);\n      existingItem._setParentLink(this, op.parentKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(existingItem);\n      if (newIndex !== previousIndex) {\n        delta.push(moveDelta(previousIndex, newIndex, existingItem));\n      }\n      return {\n        modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n        reverse: []\n      };\n    } else {\n      const orphan = this._pool.getNode(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, op.parentKey);\n        this._implicitlyDeletedItems.delete(orphan);\n        this._insertAndSort(orphan);\n        const recreatedItemIndex = this._items.indexOf(orphan);\n        return {\n          modified: makeUpdate(this, [\n            // If there is an item at this position, update is a set, else it's an insert\n            indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),\n            ...delta\n          ]),\n          reverse: []\n        };\n      } else {\n        if (indexOfItemWithSamePosition !== -1) {\n          this._items.splice(indexOfItemWithSamePosition, 1);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(\n          op,\n          op.parentKey\n        );\n        return {\n          modified: makeUpdate(this, [\n            // If there is an item at this position, update is a set, else it's an insert\n            indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),\n            ...delta\n          ]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /**\n   * Returns the update delta of the deletion or null\n   * @internal\n   */\n  _detachItemAssociatedToSetOperation(deletedId) {\n    if (deletedId === void 0 || this._pool === void 0) {\n      return null;\n    }\n    const deletedItem = this._pool.getNode(deletedId);\n    if (deletedItem === void 0) {\n      return null;\n    }\n    const result = this._detachChild(deletedItem);\n    if (result.modified === false) {\n      return null;\n    }\n    return result.modified.updates[0];\n  }\n  /** @internal */\n  _applyRemoteInsert(op) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const key = asPos(op.parentKey);\n    const existingItemIndex = this._indexOfPosition(key);\n    if (existingItemIndex !== -1) {\n      this._shiftItemPosition(existingItemIndex, key);\n    }\n    const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n    return {\n      modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n      reverse: []\n    };\n  }\n  /** @internal */\n  _applyInsertAck(op) {\n    const existingItem = this._items.find((item) => item._id === op.id);\n    const key = asPos(op.parentKey);\n    const itemIndexAtPosition = this._indexOfPosition(key);\n    if (existingItem) {\n      if (existingItem._parentKey === key) {\n        return {\n          modified: false\n        };\n      } else {\n        const oldPositionIndex = this._items.indexOf(existingItem);\n        if (itemIndexAtPosition !== -1) {\n          this._shiftItemPosition(itemIndexAtPosition, key);\n        }\n        existingItem._setParentLink(this, key);\n        this._sortItems();\n        const newIndex = this._indexOfPosition(key);\n        if (newIndex === oldPositionIndex) {\n          return { modified: false };\n        }\n        return {\n          modified: makeUpdate(this, [\n            moveDelta(oldPositionIndex, newIndex, existingItem)\n          ]),\n          reverse: []\n        };\n      }\n    } else {\n      const orphan = nn(this._pool).getNode(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, key);\n        this._implicitlyDeletedItems.delete(orphan);\n        this._insertAndSort(orphan);\n        const newIndex = this._indexOfPosition(key);\n        return {\n          modified: makeUpdate(this, [insertDelta(newIndex, orphan)]),\n          reverse: []\n        };\n      } else {\n        if (itemIndexAtPosition !== -1) {\n          this._shiftItemPosition(itemIndexAtPosition, key);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n        return {\n          modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /** @internal */\n  _applyInsertUndoRedo(op) {\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    if (this._pool?.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    child._attach(id, nn(this._pool));\n    child._setParentLink(this, key);\n    const existingItemIndex = this._indexOfPosition(key);\n    let newKey = key;\n    if (existingItemIndex !== -1) {\n      const before2 = this._items[existingItemIndex]?._parentPos;\n      const after2 = this._items[existingItemIndex + 1]?._parentPos;\n      newKey = makePosition(before2, after2);\n      child._setParentLink(this, newKey);\n    }\n    this._insertAndSort(child);\n    const newIndex = this._indexOfPosition(newKey);\n    return {\n      modified: makeUpdate(this, [insertDelta(newIndex, child)]),\n      reverse: [{ type: 5 /* DELETE_CRDT */, id }]\n    };\n  }\n  /** @internal */\n  _applySetUndoRedo(op) {\n    const { id, parentKey: key } = op;\n    const child = creationOpToLiveNode(op);\n    if (this._pool?.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    this._unacknowledgedSets.set(key, nn(op.opId));\n    const indexOfItemWithSameKey = this._indexOfPosition(key);\n    child._attach(id, nn(this._pool));\n    child._setParentLink(this, key);\n    const newKey = key;\n    if (indexOfItemWithSameKey !== -1) {\n      const existingItem = this._items[indexOfItemWithSameKey];\n      existingItem._detach();\n      this._items[indexOfItemWithSameKey] = child;\n      const reverse = HACK_addIntentAndDeletedIdToOperation(\n        existingItem._toOps(nn(this._id), key, this._pool),\n        op.id\n      );\n      const delta = [setDelta(indexOfItemWithSameKey, child)];\n      const deletedDelta = this._detachItemAssociatedToSetOperation(\n        op.deletedId\n      );\n      if (deletedDelta) {\n        delta.push(deletedDelta);\n      }\n      return {\n        modified: makeUpdate(this, delta),\n        reverse\n      };\n    } else {\n      this._insertAndSort(child);\n      this._detachItemAssociatedToSetOperation(op.deletedId);\n      const newIndex = this._indexOfPosition(newKey);\n      return {\n        reverse: [{ type: 5 /* DELETE_CRDT */, id }],\n        modified: makeUpdate(this, [insertDelta(newIndex, child)])\n      };\n    }\n  }\n  /** @internal */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    let result;\n    if (op.intent === \"set\") {\n      if (source === 1 /* REMOTE */) {\n        result = this._applySetRemote(op);\n      } else if (source === 2 /* ACK */) {\n        result = this._applySetAck(op);\n      } else {\n        result = this._applySetUndoRedo(op);\n      }\n    } else {\n      if (source === 1 /* REMOTE */) {\n        result = this._applyRemoteInsert(op);\n      } else if (source === 2 /* ACK */) {\n        result = this._applyInsertAck(op);\n      } else {\n        result = this._applyInsertUndoRedo(op);\n      }\n    }\n    if (result.modified !== false) {\n      this.invalidate();\n    }\n    return result;\n  }\n  /** @internal */\n  _detachChild(child) {\n    if (child) {\n      const parentKey = nn(child._parentKey);\n      const reverse = child._toOps(nn(this._id), parentKey, this._pool);\n      const indexToDelete = this._items.indexOf(child);\n      if (indexToDelete === -1) {\n        return {\n          modified: false\n        };\n      }\n      this._items.splice(indexToDelete, 1);\n      this.invalidate();\n      child._detach();\n      return {\n        modified: makeUpdate(this, [deleteDelta(indexToDelete)]),\n        reverse\n      };\n    }\n    return { modified: false };\n  }\n  /** @internal */\n  _applySetChildKeyRemote(newKey, child) {\n    if (this._implicitlyDeletedItems.has(child)) {\n      this._implicitlyDeletedItems.delete(child);\n      child._setParentLink(this, newKey);\n      this._insertAndSort(child);\n      const newIndex = this._items.indexOf(child);\n      return {\n        modified: makeUpdate(this, [insertDelta(newIndex, child)]),\n        reverse: []\n      };\n    }\n    const previousKey = child._parentKey;\n    if (newKey === previousKey) {\n      return {\n        modified: false\n      };\n    }\n    const existingItemIndex = this._indexOfPosition(newKey);\n    if (existingItemIndex === -1) {\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (newIndex === previousIndex) {\n        return {\n          modified: false\n        };\n      }\n      return {\n        modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n        reverse: []\n      };\n    } else {\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n      );\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (newIndex === previousIndex) {\n        return {\n          modified: false\n        };\n      }\n      return {\n        modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n        reverse: []\n      };\n    }\n  }\n  /** @internal */\n  _applySetChildKeyAck(newKey, child) {\n    const previousKey = nn(child._parentKey);\n    if (this._implicitlyDeletedItems.has(child)) {\n      const existingItemIndex = this._indexOfPosition(newKey);\n      this._implicitlyDeletedItems.delete(child);\n      if (existingItemIndex !== -1) {\n        this._items[existingItemIndex]._setParentLink(\n          this,\n          makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n        );\n      }\n      child._setParentLink(this, newKey);\n      this._insertAndSort(child);\n      return {\n        modified: false\n      };\n    } else {\n      if (newKey === previousKey) {\n        return {\n          modified: false\n        };\n      }\n      const previousIndex = this._items.indexOf(child);\n      const existingItemIndex = this._indexOfPosition(newKey);\n      if (existingItemIndex !== -1) {\n        this._items[existingItemIndex]._setParentLink(\n          this,\n          makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n        );\n      }\n      child._setParentLink(this, newKey);\n      this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      if (previousIndex === newIndex) {\n        return {\n          modified: false\n        };\n      } else {\n        return {\n          modified: makeUpdate(this, [\n            moveDelta(previousIndex, newIndex, child)\n          ]),\n          reverse: []\n        };\n      }\n    }\n  }\n  /** @internal */\n  _applySetChildKeyUndoRedo(newKey, child) {\n    const previousKey = nn(child._parentKey);\n    const previousIndex = this._items.indexOf(child);\n    const existingItemIndex = this._indexOfPosition(newKey);\n    if (existingItemIndex !== -1) {\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos)\n      );\n    }\n    child._setParentLink(this, newKey);\n    this._sortItems();\n    const newIndex = this._items.indexOf(child);\n    if (previousIndex === newIndex) {\n      return {\n        modified: false\n      };\n    }\n    return {\n      modified: makeUpdate(this, [moveDelta(previousIndex, newIndex, child)]),\n      reverse: [\n        {\n          type: 1 /* SET_PARENT_KEY */,\n          id: nn(child._id),\n          parentKey: previousKey\n        }\n      ]\n    };\n  }\n  /** @internal */\n  _setChildKey(newKey, child, source) {\n    if (source === 1 /* REMOTE */) {\n      return this._applySetChildKeyRemote(newKey, child);\n    } else if (source === 2 /* ACK */) {\n      return this._applySetChildKeyAck(newKey, child);\n    } else {\n      return this._applySetChildKeyUndoRedo(newKey, child);\n    }\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n  /** @internal */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveList if parent is missing\");\n    }\n    return {\n      type: 1 /* LIST */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key\n    };\n  }\n  /**\n   * Returns the number of elements.\n   */\n  get length() {\n    return this._items.length;\n  }\n  /**\n   * Adds one element to the end of the LiveList.\n   * @param element The element to add to the end of the LiveList.\n   */\n  push(element) {\n    this._pool?.assertStorageIsWritable();\n    return this.insert(element, this.length);\n  }\n  /**\n   * Inserts one element at a specified index.\n   * @param element The element to insert.\n   * @param index The index at which you want to insert the element.\n   */\n  insert(element, index) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index > this._items.length) {\n      throw new Error(\n        `Cannot insert list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length}`\n      );\n    }\n    const before2 = this._items[index - 1] ? this._items[index - 1]._parentPos : void 0;\n    const after2 = this._items[index] ? this._items[index]._parentPos : void 0;\n    const position = makePosition(before2, after2);\n    const value = lsonToLiveNode(element);\n    value._setParentLink(this, position);\n    this._insertAndSort(value);\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      value._attach(id, this._pool);\n      this._pool.dispatch(\n        value._toOps(this._id, position, this._pool),\n        [{ type: 5 /* DELETE_CRDT */, id }],\n        /* @__PURE__ */ new Map([\n          [this._id, makeUpdate(this, [insertDelta(index, value)])]\n        ])\n      );\n    }\n  }\n  /**\n   * Move one element from one index to another.\n   * @param index The index of the element to move\n   * @param targetIndex The index where the element should be after moving.\n   */\n  move(index, targetIndex) {\n    this._pool?.assertStorageIsWritable();\n    if (targetIndex < 0) {\n      throw new Error(\"targetIndex cannot be less than 0\");\n    }\n    if (targetIndex >= this._items.length) {\n      throw new Error(\n        \"targetIndex cannot be greater or equal than the list length\"\n      );\n    }\n    if (index < 0) {\n      throw new Error(\"index cannot be less than 0\");\n    }\n    if (index >= this._items.length) {\n      throw new Error(\"index cannot be greater or equal than the list length\");\n    }\n    let beforePosition = null;\n    let afterPosition = null;\n    if (index < targetIndex) {\n      afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._parentPos;\n      beforePosition = this._items[targetIndex]._parentPos;\n    } else {\n      afterPosition = this._items[targetIndex]._parentPos;\n      beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._parentPos;\n    }\n    const position = makePosition(beforePosition, afterPosition);\n    const item = this._items[index];\n    const previousPosition = item._getParentKeyOrThrow();\n    item._setParentLink(this, position);\n    this._sortItems();\n    if (this._pool && this._id) {\n      const storageUpdates = /* @__PURE__ */ new Map([\n        [this._id, makeUpdate(this, [moveDelta(index, targetIndex, item)])]\n      ]);\n      this._pool.dispatch(\n        [\n          {\n            type: 1 /* SET_PARENT_KEY */,\n            id: nn(item._id),\n            opId: this._pool.generateOpId(),\n            parentKey: position\n          }\n        ],\n        [\n          {\n            type: 1 /* SET_PARENT_KEY */,\n            id: nn(item._id),\n            parentKey: previousPosition\n          }\n        ],\n        storageUpdates\n      );\n    }\n  }\n  /**\n   * Deletes an element at the specified index\n   * @param index The index of the element to delete\n   */\n  delete(index) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index >= this._items.length) {\n      throw new Error(\n        `Cannot delete list item at index \"${index}\". index should be between 0 and ${this._items.length - 1}`\n      );\n    }\n    const item = this._items[index];\n    item._detach();\n    this._items.splice(index, 1);\n    this.invalidate();\n    if (this._pool) {\n      const childRecordId = item._id;\n      if (childRecordId) {\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(\n          nn(this._id),\n          makeUpdate(this, [deleteDelta(index)])\n        );\n        this._pool.dispatch(\n          [\n            {\n              id: childRecordId,\n              opId: this._pool.generateOpId(),\n              type: 5 /* DELETE_CRDT */\n            }\n          ],\n          item._toOps(nn(this._id), item._getParentKeyOrThrow()),\n          storageUpdates\n        );\n      }\n    }\n  }\n  clear() {\n    this._pool?.assertStorageIsWritable();\n    if (this._pool) {\n      const ops = [];\n      const reverseOps = [];\n      const updateDelta = [];\n      for (const item of this._items) {\n        item._detach();\n        const childId = item._id;\n        if (childId) {\n          ops.push({\n            type: 5 /* DELETE_CRDT */,\n            id: childId,\n            opId: this._pool.generateOpId()\n          });\n          reverseOps.push(\n            ...item._toOps(nn(this._id), item._getParentKeyOrThrow())\n          );\n          updateDelta.push(deleteDelta(0));\n        }\n      }\n      this._items = [];\n      this.invalidate();\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta));\n      this._pool.dispatch(ops, reverseOps, storageUpdates);\n    } else {\n      for (const item of this._items) {\n        item._detach();\n      }\n      this._items = [];\n      this.invalidate();\n    }\n  }\n  set(index, item) {\n    this._pool?.assertStorageIsWritable();\n    if (index < 0 || index >= this._items.length) {\n      throw new Error(\n        `Cannot set list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length - 1}`\n      );\n    }\n    const existingItem = this._items[index];\n    const position = existingItem._getParentKeyOrThrow();\n    const existingId = existingItem._id;\n    existingItem._detach();\n    const value = lsonToLiveNode(item);\n    value._setParentLink(this, position);\n    this._items[index] = value;\n    this.invalidate();\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      value._attach(id, this._pool);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(this._id, makeUpdate(this, [setDelta(index, value)]));\n      const ops = HACK_addIntentAndDeletedIdToOperation(\n        value._toOps(this._id, position, this._pool),\n        existingId\n      );\n      this._unacknowledgedSets.set(position, nn(ops[0].opId));\n      const reverseOps = HACK_addIntentAndDeletedIdToOperation(\n        existingItem._toOps(this._id, position, void 0),\n        id\n      );\n      this._pool.dispatch(ops, reverseOps, storageUpdates);\n    }\n  }\n  /**\n   * Returns an Array of all the elements in the LiveList.\n   */\n  toArray() {\n    return this._items.map(\n      (entry) => liveNodeToLson(entry)\n      //                               ^^^^^^^^\n      //                               FIXME! This isn't safe.\n    );\n  }\n  /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   * @param predicate Function to test for each element, taking two arguments (the element and its index).\n   * @returns true if the predicate function returns a truthy value for every element. Otherwise, false.\n   */\n  every(predicate) {\n    return this.toArray().every(predicate);\n  }\n  /**\n   * Creates an array with all elements that pass the test implemented by the provided function.\n   * @param predicate Function to test each element of the LiveList. Return a value that coerces to true to keep the element, or to false otherwise.\n   * @returns An array with the elements that pass the test.\n   */\n  filter(predicate) {\n    return this.toArray().filter(predicate);\n  }\n  /**\n   * Returns the first element that satisfies the provided testing function.\n   * @param predicate Function to execute on each value.\n   * @returns The value of the first element in the LiveList that satisfies the provided testing function. Otherwise, undefined is returned.\n   */\n  find(predicate) {\n    return this.toArray().find(predicate);\n  }\n  /**\n   * Returns the index of the first element in the LiveList that satisfies the provided testing function.\n   * @param predicate Function to execute on each value until the function returns true, indicating that the satisfying element was found.\n   * @returns The index of the first element in the LiveList that passes the test. Otherwise, -1.\n   */\n  findIndex(predicate) {\n    return this.toArray().findIndex(predicate);\n  }\n  /**\n   * Executes a provided function once for each element.\n   * @param callbackfn Function to execute on each element.\n   */\n  forEach(callbackfn) {\n    return this.toArray().forEach(callbackfn);\n  }\n  /**\n   * Get the element at the specified index.\n   * @param index The index on the element to get.\n   * @returns The element at the specified index or undefined.\n   */\n  get(index) {\n    if (index < 0 || index >= this._items.length) {\n      return void 0;\n    }\n    return liveNodeToLson(this._items[index]);\n  }\n  /**\n   * Returns the first index at which a given element can be found in the LiveList, or -1 if it is not present.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index to start the search at.\n   * @returns The first index of the element in the LiveList; -1 if not found.\n   */\n  indexOf(searchElement, fromIndex) {\n    return this.toArray().indexOf(searchElement, fromIndex);\n  }\n  /**\n   * Returns the last index at which a given element can be found in the LiveList, or -1 if it is not present. The LiveLsit is searched backwards, starting at fromIndex.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index at which to start searching backwards.\n   * @returns\n   */\n  lastIndexOf(searchElement, fromIndex) {\n    return this.toArray().lastIndexOf(searchElement, fromIndex);\n  }\n  /**\n   * Creates an array populated with the results of calling a provided function on every element.\n   * @param callback Function that is called for every element.\n   * @returns An array with each element being the result of the callback function.\n   */\n  map(callback) {\n    return this._items.map(\n      (entry, i) => callback(\n        liveNodeToLson(entry),\n        //                    ^^^^^^^^\n        //                    FIXME! This isn't safe.\n        i\n      )\n    );\n  }\n  /**\n   * Tests whether at least one element in the LiveList passes the test implemented by the provided function.\n   * @param predicate Function to test for each element.\n   * @returns true if the callback function returns a truthy value for at least one element. Otherwise, false.\n   */\n  some(predicate) {\n    return this.toArray().some(predicate);\n  }\n  [Symbol.iterator]() {\n    return new LiveListIterator(this._items);\n  }\n  /** @internal */\n  _createAttachItemAndSort(op, key) {\n    const newItem = creationOpToLiveNode(op);\n    newItem._attach(op.id, nn(this._pool));\n    newItem._setParentLink(this, key);\n    this._insertAndSort(newItem);\n    const newIndex = this._indexOfPosition(key);\n    return { newItem, newIndex };\n  }\n  /** @internal */\n  _shiftItemPosition(index, key) {\n    const shiftedPosition = makePosition(\n      key,\n      this._items.length > index + 1 ? this._items[index + 1]?._parentPos : void 0\n    );\n    this._items[index]._setParentLink(this, shiftedPosition);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"LiveList\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: this._items.map(\n        (item, index) => item.toTreeNode(index.toString())\n      )\n    };\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = this._items.map((node) => node.toImmutable());\n    return  false ? 0 : Object.freeze(result);\n  }\n  clone() {\n    return new _LiveList(this._items.map((item) => item.clone()));\n  }\n};\nvar LiveListIterator = class {\n  constructor(items) {\n    this._innerIterator = items[Symbol.iterator]();\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n  next() {\n    const result = this._innerIterator.next();\n    if (result.done) {\n      return {\n        done: true,\n        value: void 0\n      };\n    }\n    const value = liveNodeToLson(result.value);\n    return { value };\n  }\n};\nfunction makeUpdate(liveList, deltaUpdates) {\n  return {\n    node: liveList,\n    type: \"LiveList\",\n    updates: deltaUpdates\n  };\n}\nfunction setDelta(index, item) {\n  return {\n    index,\n    type: \"set\",\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction deleteDelta(index) {\n  return {\n    index,\n    type: \"delete\"\n  };\n}\nfunction insertDelta(index, item) {\n  return {\n    index,\n    type: \"insert\",\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction moveDelta(previousIndex, index, item) {\n  return {\n    index,\n    type: \"move\",\n    previousIndex,\n    item: item instanceof LiveRegister ? item.data : item\n  };\n}\nfunction HACK_addIntentAndDeletedIdToOperation(ops, deletedId) {\n  return ops.map((op, index) => {\n    if (index === 0) {\n      const firstOp = op;\n      return {\n        ...firstOp,\n        intent: \"set\",\n        deletedId\n      };\n    } else {\n      return op;\n    }\n  });\n}\n\n// src/lib/freeze.ts\nvar freeze =  false ? (\n  /* istanbul ignore next */\n  0\n) : Object.freeze;\n\n// src/crdts/LiveMap.ts\nvar LiveMap = class _LiveMap extends AbstractCrdt {\n  constructor(entries2) {\n    super();\n    this.unacknowledgedSet = /* @__PURE__ */ new Map();\n    if (entries2) {\n      const mappedEntries = [];\n      for (const [key, value] of entries2) {\n        const node = lsonToLiveNode(value);\n        node._setParentLink(this, key);\n        mappedEntries.push([key, node]);\n      }\n      this._map = new Map(mappedEntries);\n    } else {\n      this._map = /* @__PURE__ */ new Map();\n    }\n  }\n  /**\n   * @internal\n   */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const ops = [];\n    const op = {\n      id: this._id,\n      opId: pool?.generateOpId(),\n      type: 7 /* CREATE_MAP */,\n      parentId,\n      parentKey\n    };\n    ops.push(op);\n    for (const [key, value] of this._map) {\n      ops.push(...value._toOps(this._id, key, pool));\n    }\n    return ops;\n  }\n  /**\n   * @internal\n   */\n  static _deserialize([id, _item], parentToChildren, pool) {\n    const map = new _LiveMap();\n    map._attach(id, pool);\n    const children = parentToChildren.get(id);\n    if (children === void 0) {\n      return map;\n    }\n    for (const [id2, crdt] of children) {\n      const child = deserialize([id2, crdt], parentToChildren, pool);\n      child._setParentLink(map, crdt.parentKey);\n      map._map.set(crdt.parentKey, child);\n      map.invalidate();\n    }\n    return map;\n  }\n  /**\n   * @internal\n   */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const [_key, value] of this._map) {\n      if (isLiveNode(value)) {\n        value._attach(pool.generateId(), pool);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, parentKey, opId } = op;\n    const key = parentKey;\n    const child = creationOpToLiveNode(op);\n    if (this._pool.getNode(id) !== void 0) {\n      return { modified: false };\n    }\n    if (source === 2 /* ACK */) {\n      const lastUpdateOpId = this.unacknowledgedSet.get(key);\n      if (lastUpdateOpId === opId) {\n        this.unacknowledgedSet.delete(key);\n        return { modified: false };\n      } else if (lastUpdateOpId !== void 0) {\n        return { modified: false };\n      }\n    } else if (source === 1 /* REMOTE */) {\n      this.unacknowledgedSet.delete(key);\n    }\n    const previousValue = this._map.get(key);\n    let reverse;\n    if (previousValue) {\n      const thisId = nn(this._id);\n      reverse = previousValue._toOps(thisId, key);\n      previousValue._detach();\n    } else {\n      reverse = [{ type: 5 /* DELETE_CRDT */, id }];\n    }\n    child._setParentLink(this, key);\n    child._attach(id, this._pool);\n    this._map.set(key, child);\n    this.invalidate();\n    return {\n      modified: {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"update\" } }\n      },\n      reverse\n    };\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    super._detach();\n    for (const item of this._map.values()) {\n      item._detach();\n    }\n  }\n  /**\n   * @internal\n   */\n  _detachChild(child) {\n    const id = nn(this._id);\n    const parentKey = nn(child._parentKey);\n    const reverse = child._toOps(id, parentKey, this._pool);\n    for (const [key, value] of this._map) {\n      if (value === child) {\n        this._map.delete(key);\n        this.invalidate();\n      }\n    }\n    child._detach();\n    const storageUpdate = {\n      node: this,\n      type: \"LiveMap\",\n      updates: { [parentKey]: { type: \"delete\" } }\n    };\n    return { modified: storageUpdate, reverse };\n  }\n  /**\n   * @internal\n   */\n  _serialize() {\n    if (this.parent.type !== \"HasParent\") {\n      throw new Error(\"Cannot serialize LiveMap if parent is missing\");\n    }\n    return {\n      type: 2 /* MAP */,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key\n    };\n  }\n  /**\n   * Returns a specified element from the LiveMap.\n   * @param key The key of the element to return.\n   * @returns The element associated with the specified key, or undefined if the key can't be found in the LiveMap.\n   */\n  get(key) {\n    const value = this._map.get(key);\n    if (value === void 0) {\n      return void 0;\n    }\n    return liveNodeToLson(value);\n  }\n  /**\n   * Adds or updates an element with a specified key and a value.\n   * @param key The key of the element to add. Should be a string.\n   * @param value The value of the element to add. Should be serializable to JSON.\n   */\n  set(key, value) {\n    this._pool?.assertStorageIsWritable();\n    const oldValue = this._map.get(key);\n    if (oldValue) {\n      oldValue._detach();\n    }\n    const item = lsonToLiveNode(value);\n    item._setParentLink(this, key);\n    this._map.set(key, item);\n    this.invalidate();\n    if (this._pool && this._id) {\n      const id = this._pool.generateId();\n      item._attach(id, this._pool);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(this._id, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"update\" } }\n      });\n      const ops = item._toOps(this._id, key, this._pool);\n      this.unacknowledgedSet.set(key, nn(ops[0].opId));\n      this._pool.dispatch(\n        item._toOps(this._id, key, this._pool),\n        oldValue ? oldValue._toOps(this._id, key) : [{ type: 5 /* DELETE_CRDT */, id }],\n        storageUpdates\n      );\n    }\n  }\n  /**\n   * Returns the number of elements in the LiveMap.\n   */\n  get size() {\n    return this._map.size;\n  }\n  /**\n   * Returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key The key of the element to test for presence.\n   */\n  has(key) {\n    return this._map.has(key);\n  }\n  /**\n   * Removes the specified element by key.\n   * @param key The key of the element to remove.\n   * @returns true if an element existed and has been removed, or false if the element does not exist.\n   */\n  delete(key) {\n    this._pool?.assertStorageIsWritable();\n    const item = this._map.get(key);\n    if (item === void 0) {\n      return false;\n    }\n    item._detach();\n    this._map.delete(key);\n    this.invalidate();\n    if (this._pool && item._id) {\n      const thisId = nn(this._id);\n      const storageUpdates = /* @__PURE__ */ new Map();\n      storageUpdates.set(thisId, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"delete\" } }\n      });\n      this._pool.dispatch(\n        [\n          {\n            type: 5 /* DELETE_CRDT */,\n            id: item._id,\n            opId: this._pool.generateOpId()\n          }\n        ],\n        item._toOps(thisId, key),\n        storageUpdates\n      );\n    }\n    return true;\n  }\n  /**\n   * Returns a new Iterator object that contains the [key, value] pairs for each element.\n   */\n  entries() {\n    const innerIterator = this._map.entries();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) {\n          return {\n            done: true,\n            value: void 0\n          };\n        }\n        const entry = iteratorValue.value;\n        const key = entry[0];\n        const value = liveNodeToLson(iteratorValue.value[1]);\n        return {\n          value: [key, value]\n        };\n      }\n    };\n  }\n  /**\n   * Same function object as the initial value of the entries method.\n   */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Returns a new Iterator object that contains the keys for each element.\n   */\n  keys() {\n    return this._map.keys();\n  }\n  /**\n   * Returns a new Iterator object that contains the values for each element.\n   */\n  values() {\n    const innerIterator = this._map.values();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) {\n          return {\n            done: true,\n            value: void 0\n          };\n        }\n        const value = liveNodeToLson(iteratorValue.value);\n        return { value };\n      }\n    };\n  }\n  /**\n   * Executes a provided function once per each key/value pair in the Map object, in insertion order.\n   * @param callback Function to execute for each entry in the map.\n   */\n  forEach(callback) {\n    for (const entry of this) {\n      callback(entry[1], entry[0], this);\n    }\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    return {\n      type: \"LiveMap\",\n      id: this._id ?? nanoid(),\n      key,\n      payload: Array.from(this._map.entries()).map(\n        ([key2, val]) => val.toTreeNode(key2)\n      )\n    };\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = /* @__PURE__ */ new Map();\n    for (const [key, value] of this._map) {\n      result.set(key, value.toImmutable());\n    }\n    return freeze(result);\n  }\n  clone() {\n    return new _LiveMap(\n      Array.from(this._map).map(([key, node]) => [key, node.clone()])\n    );\n  }\n};\n\n// src/crdts/LiveObject.ts\nvar LiveObject = class _LiveObject extends AbstractCrdt {\n  /** @internal */\n  static _buildRootAndParentToChildren(items) {\n    const parentToChildren = /* @__PURE__ */ new Map();\n    let root = null;\n    for (const [id, crdt] of items) {\n      if (isRootCrdt(crdt)) {\n        root = [id, crdt];\n      } else {\n        const tuple = [id, crdt];\n        const children = parentToChildren.get(crdt.parentId);\n        if (children !== void 0) {\n          children.push(tuple);\n        } else {\n          parentToChildren.set(crdt.parentId, [tuple]);\n        }\n      }\n    }\n    if (root === null) {\n      throw new Error(\"Root can't be null\");\n    }\n    return [root, parentToChildren];\n  }\n  /** @internal */\n  static _fromItems(items, pool) {\n    const [root, parentToChildren] = _LiveObject._buildRootAndParentToChildren(items);\n    return _LiveObject._deserialize(\n      root,\n      parentToChildren,\n      pool\n    );\n  }\n  constructor(obj = {}) {\n    super();\n    this._propToLastUpdate = /* @__PURE__ */ new Map();\n    const o = compactObject(obj);\n    for (const key of Object.keys(o)) {\n      const value = o[key];\n      if (isLiveNode(value)) {\n        value._setParentLink(this, key);\n      }\n    }\n    this._map = new Map(Object.entries(o));\n  }\n  /** @internal */\n  _toOps(parentId, parentKey, pool) {\n    if (this._id === void 0) {\n      throw new Error(\"Cannot serialize item is not attached\");\n    }\n    const opId = pool?.generateOpId();\n    const ops = [];\n    const op = {\n      type: 4 /* CREATE_OBJECT */,\n      id: this._id,\n      opId,\n      parentId,\n      parentKey,\n      data: {}\n    };\n    ops.push(op);\n    for (const [key, value] of this._map) {\n      if (isLiveNode(value)) {\n        ops.push(...value._toOps(this._id, key, pool));\n      } else {\n        op.data[key] = value;\n      }\n    }\n    return ops;\n  }\n  /** @internal */\n  static _deserialize([id, item], parentToChildren, pool) {\n    const liveObj = new _LiveObject(item.data);\n    liveObj._attach(id, pool);\n    return this._deserializeChildren(liveObj, parentToChildren, pool);\n  }\n  /** @internal */\n  static _deserializeChildren(liveObj, parentToChildren, pool) {\n    const children = parentToChildren.get(nn(liveObj._id));\n    if (children === void 0) {\n      return liveObj;\n    }\n    for (const [id, crdt] of children) {\n      const child = deserializeToLson([id, crdt], parentToChildren, pool);\n      if (isLiveStructure(child)) {\n        child._setParentLink(liveObj, crdt.parentKey);\n      }\n      liveObj._map.set(crdt.parentKey, child);\n      liveObj.invalidate();\n    }\n    return liveObj;\n  }\n  /** @internal */\n  _attach(id, pool) {\n    super._attach(id, pool);\n    for (const [_key, value] of this._map) {\n      if (isLiveNode(value)) {\n        value._attach(pool.generateId(), pool);\n      }\n    }\n  }\n  /** @internal */\n  _attachChild(op, source) {\n    if (this._pool === void 0) {\n      throw new Error(\"Can't attach child if managed pool is not present\");\n    }\n    const { id, opId, parentKey: key } = op;\n    const child = creationOpToLson(op);\n    if (this._pool.getNode(id) !== void 0) {\n      if (this._propToLastUpdate.get(key) === opId) {\n        this._propToLastUpdate.delete(key);\n      }\n      return { modified: false };\n    }\n    if (source === 0 /* UNDOREDO_RECONNECT */) {\n      this._propToLastUpdate.set(key, nn(opId));\n    } else if (this._propToLastUpdate.get(key) === void 0) {\n    } else if (this._propToLastUpdate.get(key) === opId) {\n      this._propToLastUpdate.delete(key);\n      return { modified: false };\n    } else {\n      return { modified: false };\n    }\n    const thisId = nn(this._id);\n    const previousValue = this._map.get(key);\n    let reverse;\n    if (isLiveNode(previousValue)) {\n      reverse = previousValue._toOps(thisId, key);\n      previousValue._detach();\n    } else if (previousValue === void 0) {\n      reverse = [{ type: 6 /* DELETE_OBJECT_KEY */, id: thisId, key }];\n    } else {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          id: thisId,\n          data: { [key]: previousValue }\n        }\n      ];\n    }\n    this._map.set(key, child);\n    this.invalidate();\n    if (isLiveStructure(child)) {\n      child._setParentLink(this, key);\n      child._attach(id, this._pool);\n    }\n    return {\n      reverse,\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: { [key]: { type: \"update\" } }\n      }\n    };\n  }\n  /** @internal */\n  _detachChild(child) {\n    if (child) {\n      const id = nn(this._id);\n      const parentKey = nn(child._parentKey);\n      const reverse = child._toOps(id, parentKey, this._pool);\n      for (const [key, value] of this._map) {\n        if (value === child) {\n          this._map.delete(key);\n          this.invalidate();\n        }\n      }\n      child._detach();\n      const storageUpdate = {\n        node: this,\n        type: \"LiveObject\",\n        updates: {\n          [parentKey]: { type: \"delete\" }\n        }\n      };\n      return { modified: storageUpdate, reverse };\n    }\n    return { modified: false };\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    super._detach();\n    for (const value of this._map.values()) {\n      if (isLiveNode(value)) {\n        value._detach();\n      }\n    }\n  }\n  /** @internal */\n  _apply(op, isLocal) {\n    if (op.type === 3 /* UPDATE_OBJECT */) {\n      return this._applyUpdate(op, isLocal);\n    } else if (op.type === 6 /* DELETE_OBJECT_KEY */) {\n      return this._applyDeleteObjectKey(op, isLocal);\n    }\n    return super._apply(op, isLocal);\n  }\n  /**\n   * @internal\n   */\n  _serialize() {\n    const data = {};\n    for (const [key, value] of this._map) {\n      if (!isLiveNode(value)) {\n        data[key] = value;\n      }\n    }\n    if (this.parent.type === \"HasParent\" && this.parent.node._id) {\n      return {\n        type: 0 /* OBJECT */,\n        parentId: this.parent.node._id,\n        parentKey: this.parent.key,\n        data\n      };\n    } else {\n      return {\n        type: 0 /* OBJECT */,\n        data\n      };\n    }\n  }\n  /** @internal */\n  _applyUpdate(op, isLocal) {\n    let isModified = false;\n    const id = nn(this._id);\n    const reverse = [];\n    const reverseUpdate = {\n      type: 3 /* UPDATE_OBJECT */,\n      id,\n      data: {}\n    };\n    for (const key in op.data) {\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        reverse.push(...oldValue._toOps(id, key));\n        oldValue._detach();\n      } else if (oldValue !== void 0) {\n        reverseUpdate.data[key] = oldValue;\n      } else if (oldValue === void 0) {\n        reverse.push({ type: 6 /* DELETE_OBJECT_KEY */, id, key });\n      }\n    }\n    const updateDelta = {};\n    for (const key in op.data) {\n      const value = op.data[key];\n      if (value === void 0) {\n        continue;\n      }\n      if (isLocal) {\n        this._propToLastUpdate.set(key, nn(op.opId));\n      } else if (this._propToLastUpdate.get(key) === void 0) {\n        isModified = true;\n      } else if (this._propToLastUpdate.get(key) === op.opId) {\n        this._propToLastUpdate.delete(key);\n        continue;\n      } else {\n        continue;\n      }\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        oldValue._detach();\n      }\n      isModified = true;\n      updateDelta[key] = { type: \"update\" };\n      this._map.set(key, value);\n      this.invalidate();\n    }\n    if (Object.keys(reverseUpdate.data).length !== 0) {\n      reverse.unshift(reverseUpdate);\n    }\n    return isModified ? {\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: updateDelta\n      },\n      reverse\n    } : { modified: false };\n  }\n  /** @internal */\n  _applyDeleteObjectKey(op, isLocal) {\n    const key = op.key;\n    if (this._map.has(key) === false) {\n      return { modified: false };\n    }\n    if (!isLocal && this._propToLastUpdate.get(key) !== void 0) {\n      return { modified: false };\n    }\n    const oldValue = this._map.get(key);\n    const id = nn(this._id);\n    let reverse = [];\n    if (isLiveNode(oldValue)) {\n      reverse = oldValue._toOps(id, op.key);\n      oldValue._detach();\n    } else if (oldValue !== void 0) {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          id,\n          data: { [key]: oldValue }\n        }\n      ];\n    }\n    this._map.delete(key);\n    this.invalidate();\n    return {\n      modified: {\n        node: this,\n        type: \"LiveObject\",\n        updates: { [op.key]: { type: \"delete\" } }\n      },\n      reverse\n    };\n  }\n  /**\n   * Transform the LiveObject into a javascript object\n   */\n  toObject() {\n    return Object.fromEntries(this._map);\n  }\n  /**\n   * Adds or updates a property with a specified key and a value.\n   * @param key The key of the property to add\n   * @param value The value of the property to add\n   */\n  set(key, value) {\n    this._pool?.assertStorageIsWritable();\n    this.update({ [key]: value });\n  }\n  /**\n   * Returns a specified property from the LiveObject.\n   * @param key The key of the property to get\n   */\n  get(key) {\n    return this._map.get(key);\n  }\n  /**\n   * Deletes a key from the LiveObject\n   * @param key The key of the property to delete\n   */\n  delete(key) {\n    this._pool?.assertStorageIsWritable();\n    const keyAsString = key;\n    const oldValue = this._map.get(keyAsString);\n    if (oldValue === void 0) {\n      return;\n    }\n    if (this._pool === void 0 || this._id === void 0) {\n      if (isLiveNode(oldValue)) {\n        oldValue._detach();\n      }\n      this._map.delete(keyAsString);\n      this.invalidate();\n      return;\n    }\n    let reverse;\n    if (isLiveNode(oldValue)) {\n      oldValue._detach();\n      reverse = oldValue._toOps(this._id, keyAsString);\n    } else {\n      reverse = [\n        {\n          type: 3 /* UPDATE_OBJECT */,\n          data: { [keyAsString]: oldValue },\n          id: this._id\n        }\n      ];\n    }\n    this._map.delete(keyAsString);\n    this.invalidate();\n    const storageUpdates = /* @__PURE__ */ new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: { [key]: { type: \"delete\" } }\n    });\n    this._pool.dispatch(\n      [\n        {\n          type: 6 /* DELETE_OBJECT_KEY */,\n          key: keyAsString,\n          id: this._id,\n          opId: this._pool.generateOpId()\n        }\n      ],\n      reverse,\n      storageUpdates\n    );\n  }\n  /**\n   * Adds or updates multiple properties at once with an object.\n   * @param patch The object used to overrides properties\n   */\n  update(patch) {\n    this._pool?.assertStorageIsWritable();\n    if (this._pool === void 0 || this._id === void 0) {\n      for (const key in patch) {\n        const newValue = patch[key];\n        if (newValue === void 0) {\n          continue;\n        }\n        const oldValue = this._map.get(key);\n        if (isLiveNode(oldValue)) {\n          oldValue._detach();\n        }\n        if (isLiveNode(newValue)) {\n          newValue._setParentLink(this, key);\n        }\n        this._map.set(key, newValue);\n        this.invalidate();\n      }\n      return;\n    }\n    const ops = [];\n    const reverseOps = [];\n    const opId = this._pool.generateOpId();\n    const updatedProps = {};\n    const reverseUpdateOp = {\n      id: this._id,\n      type: 3 /* UPDATE_OBJECT */,\n      data: {}\n    };\n    const updateDelta = {};\n    for (const key in patch) {\n      const newValue = patch[key];\n      if (newValue === void 0) {\n        continue;\n      }\n      const oldValue = this._map.get(key);\n      if (isLiveNode(oldValue)) {\n        reverseOps.push(...oldValue._toOps(this._id, key));\n        oldValue._detach();\n      } else if (oldValue === void 0) {\n        reverseOps.push({ type: 6 /* DELETE_OBJECT_KEY */, id: this._id, key });\n      } else {\n        reverseUpdateOp.data[key] = oldValue;\n      }\n      if (isLiveNode(newValue)) {\n        newValue._setParentLink(this, key);\n        newValue._attach(this._pool.generateId(), this._pool);\n        const newAttachChildOps = newValue._toOps(this._id, key, this._pool);\n        const createCrdtOp = newAttachChildOps.find(\n          (op) => op.parentId === this._id\n        );\n        if (createCrdtOp) {\n          this._propToLastUpdate.set(key, nn(createCrdtOp.opId));\n        }\n        ops.push(...newAttachChildOps);\n      } else {\n        updatedProps[key] = newValue;\n        this._propToLastUpdate.set(key, opId);\n      }\n      this._map.set(key, newValue);\n      this.invalidate();\n      updateDelta[key] = { type: \"update\" };\n    }\n    if (Object.keys(reverseUpdateOp.data).length !== 0) {\n      reverseOps.unshift(reverseUpdateOp);\n    }\n    if (Object.keys(updatedProps).length !== 0) {\n      ops.unshift({\n        opId,\n        id: this._id,\n        type: 3 /* UPDATE_OBJECT */,\n        data: updatedProps\n      });\n    }\n    const storageUpdates = /* @__PURE__ */ new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: updateDelta\n    });\n    this._pool.dispatch(ops, reverseOps, storageUpdates);\n  }\n  toImmutable() {\n    return super.toImmutable();\n  }\n  /** @internal */\n  toTreeNode(key) {\n    return super.toTreeNode(key);\n  }\n  /** @internal */\n  _toTreeNode(key) {\n    const nodeId = this._id ?? nanoid();\n    return {\n      type: \"LiveObject\",\n      id: nodeId,\n      key,\n      payload: Array.from(this._map.entries()).map(\n        ([key2, value]) => isLiveNode(value) ? value.toTreeNode(key2) : { type: \"Json\", id: `${nodeId}:${key2}`, key: key2, payload: value }\n      )\n    };\n  }\n  /** @internal */\n  _toImmutable() {\n    const result = {};\n    for (const [key, val] of this._map) {\n      result[key] = isLiveStructure(val) ? val.toImmutable() : val;\n    }\n    return  false ? 0 : Object.freeze(result);\n  }\n  clone() {\n    return new _LiveObject(\n      Object.fromEntries(\n        Array.from(this._map).map(([key, value]) => [\n          key,\n          isLiveStructure(value) ? value.clone() : deepClone(value)\n        ])\n      )\n    );\n  }\n};\n\n// src/crdts/liveblocks-helpers.ts\nfunction creationOpToLiveNode(op) {\n  return lsonToLiveNode(creationOpToLson(op));\n}\nfunction creationOpToLson(op) {\n  switch (op.type) {\n    case 8 /* CREATE_REGISTER */:\n      return op.data;\n    case 4 /* CREATE_OBJECT */:\n      return new LiveObject(op.data);\n    case 7 /* CREATE_MAP */:\n      return new LiveMap();\n    case 2 /* CREATE_LIST */:\n      return new LiveList([]);\n    default:\n      return assertNever(op, \"Unknown creation Op\");\n  }\n}\nfunction isSameNodeOrChildOf(node, parent) {\n  if (node === parent) {\n    return true;\n  }\n  if (node.parent.type === \"HasParent\") {\n    return isSameNodeOrChildOf(node.parent.node, parent);\n  }\n  return false;\n}\nfunction deserialize([id, crdt], parentToChildren, pool) {\n  switch (crdt.type) {\n    case 0 /* OBJECT */: {\n      return LiveObject._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 1 /* LIST */: {\n      return LiveList._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 2 /* MAP */: {\n      return LiveMap._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 3 /* REGISTER */: {\n      return LiveRegister._deserialize([id, crdt], parentToChildren, pool);\n    }\n    default: {\n      throw new Error(\"Unexpected CRDT type\");\n    }\n  }\n}\nfunction deserializeToLson([id, crdt], parentToChildren, pool) {\n  switch (crdt.type) {\n    case 0 /* OBJECT */: {\n      return LiveObject._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 1 /* LIST */: {\n      return LiveList._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 2 /* MAP */: {\n      return LiveMap._deserialize([id, crdt], parentToChildren, pool);\n    }\n    case 3 /* REGISTER */: {\n      return crdt.data;\n    }\n    default: {\n      throw new Error(\"Unexpected CRDT type\");\n    }\n  }\n}\nfunction isLiveStructure(value) {\n  return isLiveList(value) || isLiveMap(value) || isLiveObject(value);\n}\nfunction isLiveNode(value) {\n  return isLiveStructure(value) || isLiveRegister(value);\n}\nfunction isLiveList(value) {\n  return value instanceof LiveList;\n}\nfunction isLiveMap(value) {\n  return value instanceof LiveMap;\n}\nfunction isLiveObject(value) {\n  return value instanceof LiveObject;\n}\nfunction isLiveRegister(value) {\n  return value instanceof LiveRegister;\n}\nfunction cloneLson(value) {\n  return value === void 0 ? void 0 : isLiveStructure(value) ? value.clone() : deepClone(value);\n}\nfunction liveNodeToLson(obj) {\n  if (obj instanceof LiveRegister) {\n    return obj.data;\n  } else if (obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject) {\n    return obj;\n  } else {\n    return assertNever(obj, \"Unknown AbstractCrdt\");\n  }\n}\nfunction lsonToLiveNode(value) {\n  if (value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList) {\n    return value;\n  } else {\n    return new LiveRegister(value);\n  }\n}\nfunction getTreesDiffOperations(currentItems, newItems) {\n  const ops = [];\n  currentItems.forEach((_, id) => {\n    if (!newItems.get(id)) {\n      ops.push({\n        type: 5 /* DELETE_CRDT */,\n        id\n      });\n    }\n  });\n  newItems.forEach((crdt, id) => {\n    const currentCrdt = currentItems.get(id);\n    if (currentCrdt) {\n      if (crdt.type === 0 /* OBJECT */) {\n        if (currentCrdt.type !== 0 /* OBJECT */ || JSON.stringify(crdt.data) !== JSON.stringify(currentCrdt.data)) {\n          ops.push({\n            type: 3 /* UPDATE_OBJECT */,\n            id,\n            data: crdt.data\n          });\n        }\n      }\n      if (crdt.parentKey !== currentCrdt.parentKey) {\n        ops.push({\n          type: 1 /* SET_PARENT_KEY */,\n          id,\n          parentKey: nn(crdt.parentKey, \"Parent key must not be missing\")\n        });\n      }\n    } else {\n      switch (crdt.type) {\n        case 3 /* REGISTER */:\n          ops.push({\n            type: 8 /* CREATE_REGISTER */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey,\n            data: crdt.data\n          });\n          break;\n        case 1 /* LIST */:\n          ops.push({\n            type: 2 /* CREATE_LIST */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey\n          });\n          break;\n        case 0 /* OBJECT */:\n          if (crdt.parentId === void 0 || crdt.parentKey === void 0) {\n            throw new Error(\n              \"Internal error. Cannot serialize storage root into an operation\"\n            );\n          }\n          ops.push({\n            type: 4 /* CREATE_OBJECT */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey,\n            data: crdt.data\n          });\n          break;\n        case 2 /* MAP */:\n          ops.push({\n            type: 7 /* CREATE_MAP */,\n            id,\n            parentId: crdt.parentId,\n            parentKey: crdt.parentKey\n          });\n          break;\n      }\n    }\n  });\n  return ops;\n}\nfunction mergeObjectStorageUpdates(first, second) {\n  const updates = first.updates;\n  for (const [key, value] of entries(second.updates)) {\n    updates[key] = value;\n  }\n  return {\n    ...second,\n    updates\n  };\n}\nfunction mergeMapStorageUpdates(first, second) {\n  const updates = first.updates;\n  for (const [key, value] of entries(second.updates)) {\n    updates[key] = value;\n  }\n  return {\n    ...second,\n    updates\n  };\n}\nfunction mergeListStorageUpdates(first, second) {\n  const updates = first.updates;\n  return {\n    ...second,\n    updates: updates.concat(second.updates)\n  };\n}\nfunction mergeStorageUpdates(first, second) {\n  if (first === void 0) {\n    return second;\n  }\n  if (first.type === \"LiveObject\" && second.type === \"LiveObject\") {\n    return mergeObjectStorageUpdates(first, second);\n  } else if (first.type === \"LiveMap\" && second.type === \"LiveMap\") {\n    return mergeMapStorageUpdates(first, second);\n  } else if (first.type === \"LiveList\" && second.type === \"LiveList\") {\n    return mergeListStorageUpdates(first, second);\n  } else {\n  }\n  return second;\n}\nfunction isPlain(value) {\n  const type = typeof value;\n  return value === void 0 || value === null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(value) || isPlainObject(value);\n}\nfunction findNonSerializableValue(value, path = \"\") {\n  if (!isPlain) {\n    return {\n      path: path || \"root\",\n      value\n    };\n  }\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  for (const [key, nestedValue] of Object.entries(value)) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (!isPlain(nestedValue)) {\n      return {\n        path: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === \"object\") {\n      const nonSerializableNestedValue = findNonSerializableValue(\n        nestedValue,\n        nestedPath\n      );\n      if (nonSerializableNestedValue) {\n        return nonSerializableNestedValue;\n      }\n    }\n  }\n  return false;\n}\n\n// src/lib/debug.ts\nfunction captureStackTrace(msg, traceRoot) {\n  const errorLike = { name: msg };\n  if (typeof Error.captureStackTrace !== \"function\") {\n    return void 0;\n  }\n  Error.captureStackTrace(errorLike, traceRoot);\n  return errorLike.stack;\n}\n\n// src/lib/Json.ts\nfunction isJsonScalar(data) {\n  return data === null || typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\";\n}\nfunction isJsonArray(data) {\n  return Array.isArray(data);\n}\nfunction isJsonObject(data) {\n  return !isJsonScalar(data) && !isJsonArray(data);\n}\n\n// src/lib/objectToQuery.ts\nvar identifierRegex = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\nfunction objectToQuery(obj) {\n  let filterList = [];\n  const entries2 = Object.entries(obj);\n  const keyValuePairs = [];\n  const keyValuePairsWithOperator = [];\n  const indexedKeys = [];\n  entries2.forEach(([key, value]) => {\n    if (!identifierRegex.test(key)) {\n      throw new Error(\"Key must only contain letters, numbers, _\");\n    }\n    if (isSimpleValue(value)) {\n      keyValuePairs.push([key, value]);\n    } else if (isValueWithOperator(value)) {\n      keyValuePairsWithOperator.push([key, value]);\n    } else if (typeof value === \"object\" && !(\"startsWith\" in value)) {\n      indexedKeys.push([key, value]);\n    }\n  });\n  filterList = [\n    ...getFiltersFromKeyValuePairs(keyValuePairs),\n    ...getFiltersFromKeyValuePairsWithOperator(keyValuePairsWithOperator)\n  ];\n  indexedKeys.forEach(([key, value]) => {\n    const nestedEntries = Object.entries(value);\n    const nKeyValuePairs = [];\n    const nKeyValuePairsWithOperator = [];\n    nestedEntries.forEach(([nestedKey, nestedValue]) => {\n      if (isStringEmpty(nestedKey)) {\n        throw new Error(\"Key cannot be empty\");\n      }\n      if (isSimpleValue(nestedValue)) {\n        nKeyValuePairs.push([formatFilterKey(key, nestedKey), nestedValue]);\n      } else if (isValueWithOperator(nestedValue)) {\n        nKeyValuePairsWithOperator.push([\n          formatFilterKey(key, nestedKey),\n          nestedValue\n        ]);\n      }\n    });\n    filterList = [\n      ...filterList,\n      ...getFiltersFromKeyValuePairs(nKeyValuePairs),\n      ...getFiltersFromKeyValuePairsWithOperator(nKeyValuePairsWithOperator)\n    ];\n  });\n  return filterList.map(\n    ({ key, operator, value }) => formatFilter(key, operator, formatFilterValue(value))\n  ).join(\" AND \");\n}\nvar getFiltersFromKeyValuePairs = (keyValuePairs) => {\n  const filters = [];\n  keyValuePairs.forEach(([key, value]) => {\n    filters.push({\n      key,\n      operator: \":\",\n      value\n    });\n  });\n  return filters;\n};\nvar getFiltersFromKeyValuePairsWithOperator = (keyValuePairsWithOperator) => {\n  const filters = [];\n  keyValuePairsWithOperator.forEach(([key, value]) => {\n    if (\"startsWith\" in value && typeof value.startsWith === \"string\") {\n      filters.push({\n        key,\n        operator: \"^\",\n        value: value.startsWith\n      });\n    }\n  });\n  return filters;\n};\nvar isSimpleValue = (value) => {\n  if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n    return true;\n  }\n  return false;\n};\nvar isValueWithOperator = (value) => {\n  if (typeof value === \"object\" && value !== null && \"startsWith\" in value) {\n    return true;\n  }\n  return false;\n};\nvar formatFilter = (key, operator, value) => {\n  return `${key}${operator}${value}`;\n};\nvar formatFilterKey = (key, nestedKey) => {\n  if (nestedKey) {\n    return `${key}[${JSON.stringify(nestedKey)}]`;\n  }\n  return key;\n};\nvar formatFilterValue = (value) => {\n  if (typeof value === \"string\") {\n    if (isStringEmpty(value)) {\n      throw new Error(\"Value cannot be empty\");\n    }\n    return JSON.stringify(value);\n  }\n  return value.toString();\n};\nvar isStringEmpty = (value) => {\n  return !value || value.toString().trim() === \"\";\n};\n\n// src/protocol/ClientMsg.ts\nvar ClientMsgCode = /* @__PURE__ */ ((ClientMsgCode2) => {\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n  ClientMsgCode2[ClientMsgCode2[\"BROADCAST_EVENT\"] = 103] = \"BROADCAST_EVENT\";\n  ClientMsgCode2[ClientMsgCode2[\"FETCH_STORAGE\"] = 200] = \"FETCH_STORAGE\";\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n  ClientMsgCode2[ClientMsgCode2[\"FETCH_YDOC\"] = 300] = \"FETCH_YDOC\";\n  ClientMsgCode2[ClientMsgCode2[\"UPDATE_YDOC\"] = 301] = \"UPDATE_YDOC\";\n  return ClientMsgCode2;\n})(ClientMsgCode || {});\n\n// src/refs/ImmutableRef.ts\nfunction merge(target, patch) {\n  let updated = false;\n  const newValue = { ...target };\n  Object.keys(patch).forEach((k) => {\n    const key = k;\n    const val = patch[key];\n    if (newValue[key] !== val) {\n      if (val === void 0) {\n        delete newValue[key];\n      } else {\n        newValue[key] = val;\n      }\n      updated = true;\n    }\n  });\n  return updated ? newValue : target;\n}\nvar ImmutableRef = class {\n  constructor() {\n    this._ev = makeEventSource();\n  }\n  get didInvalidate() {\n    return this._ev.observable;\n  }\n  invalidate() {\n    if (this._cache !== void 0) {\n      this._cache = void 0;\n      this._ev.notify();\n    }\n  }\n  get current() {\n    return this._cache ?? (this._cache = this._toImmutable());\n  }\n};\n\n// src/refs/OthersRef.ts\nfunction makeUser(conn, presence) {\n  const { connectionId, id, info } = conn;\n  const canWrite = canWriteStorage(conn.scopes);\n  return freeze(\n    compactObject({\n      connectionId,\n      id,\n      info,\n      canWrite,\n      canComment: canComment(conn.scopes),\n      isReadOnly: !canWrite,\n      // Deprecated, kept for backward-compatibility\n      presence\n    })\n  );\n}\nvar OthersRef = class extends ImmutableRef {\n  //\n  // --------------------------------------------------------------\n  //\n  constructor() {\n    super();\n    this._connections = /* @__PURE__ */ new Map();\n    this._presences = /* @__PURE__ */ new Map();\n    this._users = /* @__PURE__ */ new Map();\n  }\n  connectionIds() {\n    return this._connections.keys();\n  }\n  /** @internal */\n  _toImmutable() {\n    const users = compact(\n      Array.from(this._presences.keys()).map(\n        (connectionId) => this.getUser(Number(connectionId))\n      )\n    );\n    return users;\n  }\n  clearOthers() {\n    this._connections = /* @__PURE__ */ new Map();\n    this._presences = /* @__PURE__ */ new Map();\n    this._users = /* @__PURE__ */ new Map();\n    this.invalidate();\n  }\n  /** @internal */\n  _getUser(connectionId) {\n    const conn = this._connections.get(connectionId);\n    const presence = this._presences.get(connectionId);\n    if (conn !== void 0 && presence !== void 0) {\n      return makeUser(conn, presence);\n    }\n    return void 0;\n  }\n  getUser(connectionId) {\n    const cachedUser = this._users.get(connectionId);\n    if (cachedUser) {\n      return cachedUser;\n    }\n    const computedUser = this._getUser(connectionId);\n    if (computedUser) {\n      this._users.set(connectionId, computedUser);\n      return computedUser;\n    }\n    return void 0;\n  }\n  /** @internal */\n  _invalidateUser(connectionId) {\n    if (this._users.has(connectionId)) {\n      this._users.delete(connectionId);\n    }\n    this.invalidate();\n  }\n  /**\n   * Records a known connection. This records the connection ID and the\n   * associated metadata.\n   */\n  setConnection(connectionId, metaUserId, metaUserInfo, scopes) {\n    this._connections.set(\n      connectionId,\n      freeze({\n        connectionId,\n        id: metaUserId,\n        info: metaUserInfo,\n        scopes\n      })\n    );\n    if (this._presences.has(connectionId)) {\n      this._invalidateUser(connectionId);\n    }\n  }\n  /**\n   * Removes a known connectionId. Removes both the connection's metadata and\n   * the presence information.\n   */\n  removeConnection(connectionId) {\n    this._connections.delete(connectionId);\n    this._presences.delete(connectionId);\n    this._invalidateUser(connectionId);\n  }\n  /**\n   * Stores a new user from a full presence update. If the user already exists,\n   * its known presence data is overwritten.\n   */\n  setOther(connectionId, presence) {\n    this._presences.set(connectionId, freeze(compactObject(presence)));\n    if (this._connections.has(connectionId)) {\n      this._invalidateUser(connectionId);\n    }\n  }\n  /**\n   * Patches the presence data for an existing \"other\". If we don't know the\n   * initial presence data for this user yet, discard this patch and await the\n   * full .setOther() call first.\n   */\n  patchOther(connectionId, patch) {\n    const oldPresence = this._presences.get(connectionId);\n    if (oldPresence === void 0) {\n      return;\n    }\n    const newPresence = merge(oldPresence, patch);\n    if (oldPresence !== newPresence) {\n      this._presences.set(connectionId, freeze(newPresence));\n      this._invalidateUser(connectionId);\n    }\n  }\n};\n\n// src/refs/PatchableRef.ts\nvar PatchableRef = class extends ImmutableRef {\n  constructor(data) {\n    super();\n    this._data = freeze(compactObject(data));\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._data;\n  }\n  /**\n   * Patches the current object.\n   */\n  patch(patch) {\n    const oldData = this._data;\n    const newData = merge(oldData, patch);\n    if (oldData !== newData) {\n      this._data = freeze(newData);\n      this.invalidate();\n    }\n  }\n};\n\n// src/refs/ValueRef.ts\nvar ValueRef = class extends ImmutableRef {\n  constructor(initialValue) {\n    super();\n    this._value = freeze(initialValue);\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._value;\n  }\n  set(newValue) {\n    this._value = freeze(newValue);\n    this.invalidate();\n  }\n};\nvar DerivedRef = class extends ImmutableRef {\n  constructor(...args) {\n    super();\n    const transformFn = args.pop();\n    const otherRefs = args;\n    this._refs = otherRefs;\n    this._refs.forEach((ref) => {\n      ref.didInvalidate.subscribe(() => this.invalidate());\n    });\n    this._transform = transformFn;\n  }\n  /** @internal */\n  _toImmutable() {\n    return this._transform(\n      ...this._refs.map((ref) => ref.current)\n    );\n  }\n};\n\n// src/room.ts\nvar MAX_SOCKET_MESSAGE_SIZE = 1024 * 1024 - 1024;\nfunction makeIdFactory(connectionId) {\n  let count = 0;\n  return () => `${connectionId}:${count++}`;\n}\nfunction userToTreeNode(key, user) {\n  return {\n    type: \"User\",\n    id: `${user.connectionId}`,\n    key,\n    payload: {\n      connectionId: user.connectionId,\n      id: user.id,\n      info: user.info,\n      presence: user.presence,\n      isReadOnly: !user.canWrite\n    }\n  };\n}\nfunction installBackgroundTabSpy() {\n  const doc = typeof document !== \"undefined\" ? document : void 0;\n  const inBackgroundSince = { current: null };\n  function onVisibilityChange() {\n    if (doc?.visibilityState === \"hidden\") {\n      inBackgroundSince.current = inBackgroundSince.current ?? Date.now();\n    } else {\n      inBackgroundSince.current = null;\n    }\n  }\n  doc?.addEventListener(\"visibilitychange\", onVisibilityChange);\n  const unsub = () => {\n    doc?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n  };\n  return [inBackgroundSince, unsub];\n}\nvar CommentsApiError = class extends Error {\n  constructor(message, status, details) {\n    super(message);\n    this.message = message;\n    this.status = status;\n    this.details = details;\n  }\n};\nfunction createCommentsApi(roomId, getAuthValue, fetchClientApi) {\n  async function fetchCommentsApi(endpoint, params, options) {\n    const authValue = await getAuthValue();\n    return fetchClientApi(roomId, endpoint, authValue, options, params);\n  }\n  async function fetchJson(endpoint, options, params) {\n    const response = await fetchCommentsApi(endpoint, params, options);\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new CommentsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new CommentsApiError(response.statusText, response.status);\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  async function getThreads(options) {\n    let query;\n    if (options?.query) {\n      query = objectToQuery(options.query);\n    }\n    const response = await fetchCommentsApi(\n      \"/threads\",\n      {\n        since: options?.since?.toISOString(),\n        query\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return {\n        threads: json.data.map((thread) => convertToThreadData(thread)),\n        inboxNotifications: json.inboxNotifications.map(\n          (notification) => convertToInboxNotificationData(notification)\n        ),\n        deletedThreads: json.deletedThreads.map(\n          (info) => convertToThreadDeleteInfo(info)\n        ),\n        deletedInboxNotifications: json.deletedInboxNotifications.map(\n          (info) => convertToInboxNotificationDeleteInfo(info)\n        ),\n        meta: {\n          requestedAt: new Date(json.meta.requestedAt)\n        }\n      };\n    } else if (response.status === 404) {\n      return {\n        threads: [],\n        inboxNotifications: [],\n        deletedThreads: [],\n        deletedInboxNotifications: [],\n        meta: {\n          requestedAt: /* @__PURE__ */ new Date()\n        }\n      };\n    } else {\n      throw new Error(\"There was an error while getting threads.\");\n    }\n  }\n  async function getThread({ threadId }) {\n    const response = await fetchCommentsApi(\n      `/thread-with-notification/${threadId}`\n    );\n    if (response.ok) {\n      const json = await response.json();\n      return {\n        thread: convertToThreadData(json.thread),\n        inboxNotification: json.inboxNotification ? convertToInboxNotificationData(json.inboxNotification) : void 0\n      };\n    } else if (response.status === 404) {\n      return;\n    } else {\n      throw new Error(`There was an error while getting thread ${threadId}.`);\n    }\n  }\n  async function createThread({\n    metadata,\n    body,\n    commentId,\n    threadId\n  }) {\n    const thread = await fetchJson(\"/threads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: threadId,\n        comment: {\n          id: commentId,\n          body\n        },\n        metadata\n      })\n    });\n    return convertToThreadData(thread);\n  }\n  async function deleteThread({ threadId }) {\n    await fetchJson(`/threads/${encodeURIComponent(threadId)}`, {\n      method: \"DELETE\"\n    });\n  }\n  async function editThreadMetadata({\n    metadata,\n    threadId\n  }) {\n    return await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/metadata`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(metadata)\n      }\n    );\n  }\n  async function markThreadAsResolved({ threadId }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/mark-as-resolved`,\n      {\n        method: \"POST\"\n      }\n    );\n  }\n  async function markThreadAsUnresolved({ threadId }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/mark-as-unresolved`,\n      {\n        method: \"POST\"\n      }\n    );\n  }\n  async function createComment({\n    threadId,\n    commentId,\n    body\n  }) {\n    const comment = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          id: commentId,\n          body\n        })\n      }\n    );\n    return convertToCommentData(comment);\n  }\n  async function editComment({\n    threadId,\n    commentId,\n    body\n  }) {\n    const comment = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          body\n        })\n      }\n    );\n    return convertToCommentData(comment);\n  }\n  async function deleteComment2({\n    threadId,\n    commentId\n  }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  async function addReaction2({\n    threadId,\n    commentId,\n    emoji\n  }) {\n    const reaction = await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}/reactions`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ emoji })\n      }\n    );\n    return convertToCommentUserReaction(reaction);\n  }\n  async function removeReaction2({\n    threadId,\n    commentId,\n    emoji\n  }) {\n    await fetchJson(\n      `/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(\n        commentId\n      )}/reactions/${encodeURIComponent(emoji)}`,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  return {\n    getThreads,\n    getThread,\n    createThread,\n    deleteThread,\n    editThreadMetadata,\n    markThreadAsResolved,\n    markThreadAsUnresolved,\n    createComment,\n    editComment,\n    deleteComment: deleteComment2,\n    addReaction: addReaction2,\n    removeReaction: removeReaction2\n  };\n}\nvar MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY2 = 50;\nfunction createRoom(options, config) {\n  const initialPresence = options.initialPresence;\n  const initialStorage = options.initialStorage;\n  const [inBackgroundSince, uninstallBgTabSpy] = installBackgroundTabSpy();\n  const delegates = {\n    ...config.delegates,\n    // A connection is allowed to go into \"zombie state\" only if all of the\n    // following conditions apply:\n    //\n    // - The `backgroundKeepAliveTimeout` client option is configured\n    // - The browser window has been in the background for at least\n    //   `backgroundKeepAliveTimeout` milliseconds\n    // - There are no pending changes\n    //\n    canZombie() {\n      return config.backgroundKeepAliveTimeout !== void 0 && inBackgroundSince.current !== null && Date.now() > inBackgroundSince.current + config.backgroundKeepAliveTimeout && getStorageStatus() !== \"synchronizing\";\n    }\n  };\n  const managedSocket = new ManagedSocket(\n    delegates,\n    config.enableDebugLogging\n  );\n  const context = {\n    buffer: {\n      flushTimerID: void 0,\n      lastFlushedAt: 0,\n      presenceUpdates: (\n        // Queue up the initial presence message as a Full Presence™ update\n        {\n          type: \"full\",\n          data: initialPresence\n        }\n      ),\n      messages: [],\n      storageOperations: []\n    },\n    staticSessionInfo: new ValueRef(null),\n    dynamicSessionInfo: new ValueRef(null),\n    myPresence: new PatchableRef(initialPresence),\n    others: new OthersRef(),\n    initialStorage,\n    idFactory: null,\n    // Storage\n    clock: 0,\n    opClock: 0,\n    nodes: /* @__PURE__ */ new Map(),\n    root: void 0,\n    undoStack: [],\n    redoStack: [],\n    pausedHistory: null,\n    activeBatch: null,\n    unacknowledgedOps: /* @__PURE__ */ new Map(),\n    // Debug\n    opStackTraces:  true ? /* @__PURE__ */ new Map() : 0\n  };\n  const doNotBatchUpdates = (cb) => cb();\n  const batchUpdates = config.unstable_batchedUpdates ?? doNotBatchUpdates;\n  let lastTokenKey;\n  function onStatusDidChange(newStatus) {\n    const authValue = managedSocket.authValue;\n    if (authValue !== null) {\n      const tokenKey = getAuthBearerHeaderFromAuthValue(authValue);\n      if (tokenKey !== lastTokenKey) {\n        lastTokenKey = tokenKey;\n        if (authValue.type === \"secret\") {\n          const token = authValue.token.parsed;\n          context.staticSessionInfo.set({\n            userId: token.k === \"sec-legacy\" /* SECRET_LEGACY */ ? token.id : token.uid,\n            userInfo: token.k === \"sec-legacy\" /* SECRET_LEGACY */ ? token.info : token.ui\n          });\n        } else {\n          context.staticSessionInfo.set({\n            userId: void 0,\n            userInfo: void 0\n          });\n        }\n      }\n    }\n    batchUpdates(() => {\n      eventHub.status.notify(newStatus);\n      notifySelfChanged(doNotBatchUpdates);\n    });\n  }\n  let _connectionLossTimerId;\n  let _hasLostConnection = false;\n  function handleConnectionLossEvent(newStatus) {\n    if (newStatus === \"reconnecting\") {\n      _connectionLossTimerId = setTimeout(() => {\n        batchUpdates(() => {\n          eventHub.lostConnection.notify(\"lost\");\n          _hasLostConnection = true;\n          context.others.clearOthers();\n          notify({ others: [{ type: \"reset\" }] }, doNotBatchUpdates);\n        });\n      }, config.lostConnectionTimeout);\n    } else {\n      clearTimeout(_connectionLossTimerId);\n      if (_hasLostConnection) {\n        if (newStatus === \"disconnected\") {\n          batchUpdates(() => {\n            eventHub.lostConnection.notify(\"failed\");\n          });\n        } else {\n          batchUpdates(() => {\n            eventHub.lostConnection.notify(\"restored\");\n          });\n        }\n        _hasLostConnection = false;\n      }\n    }\n  }\n  function onDidConnect() {\n    context.buffer.presenceUpdates = {\n      type: \"full\",\n      data: (\n        // Because context.me.current is a readonly object, we'll have to\n        // make a copy here. Otherwise, type errors happen later when\n        // \"patching\" my presence.\n        { ...context.myPresence.current }\n      )\n    };\n    if (_getStorage$ !== null) {\n      refreshStorage({ flush: false });\n    }\n    flushNowOrSoon();\n  }\n  function onDidDisconnect() {\n    clearTimeout(context.buffer.flushTimerID);\n  }\n  managedSocket.events.onMessage.subscribe(handleServerMessage);\n  managedSocket.events.statusDidChange.subscribe(onStatusDidChange);\n  managedSocket.events.statusDidChange.subscribe(handleConnectionLossEvent);\n  managedSocket.events.didConnect.subscribe(onDidConnect);\n  managedSocket.events.didDisconnect.subscribe(onDidDisconnect);\n  managedSocket.events.onLiveblocksError.subscribe((err) => {\n    batchUpdates(() => {\n      if (true) {\n        error2(\n          `Connection to websocket server closed. Reason: ${err.message} (code: ${err.code}).`\n        );\n      }\n      eventHub.error.notify(err);\n    });\n  });\n  const pool = {\n    roomId: config.roomId,\n    getNode: (id) => context.nodes.get(id),\n    addNode: (id, node) => void context.nodes.set(id, node),\n    deleteNode: (id) => void context.nodes.delete(id),\n    generateId: () => `${getConnectionId()}:${context.clock++}`,\n    generateOpId: () => `${getConnectionId()}:${context.opClock++}`,\n    dispatch(ops, reverse, storageUpdates) {\n      const activeBatch = context.activeBatch;\n      if (true) {\n        const stackTrace = captureStackTrace(\"Storage mutation\", this.dispatch);\n        if (stackTrace) {\n          for (const op of ops) {\n            if (op.opId) {\n              nn(context.opStackTraces).set(op.opId, stackTrace);\n            }\n          }\n        }\n      }\n      if (activeBatch) {\n        for (const op of ops) {\n          activeBatch.ops.push(op);\n        }\n        for (const [key, value] of storageUpdates) {\n          activeBatch.updates.storageUpdates.set(\n            key,\n            mergeStorageUpdates(\n              activeBatch.updates.storageUpdates.get(key),\n              value\n            )\n          );\n        }\n        activeBatch.reverseOps.unshift(...reverse);\n      } else {\n        batchUpdates(() => {\n          addToUndoStack(reverse, doNotBatchUpdates);\n          context.redoStack.length = 0;\n          dispatchOps(ops);\n          notify({ storageUpdates }, doNotBatchUpdates);\n        });\n      }\n    },\n    assertStorageIsWritable: () => {\n      const scopes = context.dynamicSessionInfo.current?.scopes;\n      if (scopes === void 0) {\n        return;\n      }\n      const canWrite = canWriteStorage(scopes);\n      if (!canWrite) {\n        throw new Error(\n          \"Cannot write to storage with a read only user, please ensure the user has write permissions\"\n        );\n      }\n    }\n  };\n  const eventHub = {\n    status: makeEventSource(),\n    // New/recommended API\n    lostConnection: makeEventSource(),\n    customEvent: makeEventSource(),\n    self: makeEventSource(),\n    myPresence: makeEventSource(),\n    others: makeEventSource(),\n    error: makeEventSource(),\n    storageBatch: makeEventSource(),\n    history: makeEventSource(),\n    storageDidLoad: makeEventSource(),\n    storageStatus: makeEventSource(),\n    ydoc: makeEventSource(),\n    comments: makeEventSource()\n  };\n  async function fetchClientApi(roomId, endpoint, authValue, options2, params) {\n    const url = urljoin(\n      config.baseUrl,\n      `/v2/c/rooms/${encodeURIComponent(roomId)}${endpoint}`,\n      params\n    );\n    const fetcher = config.polyfills?.fetch || /* istanbul ignore next */\n    fetch;\n    return await fetcher(url, {\n      ...options2,\n      headers: {\n        ...options2?.headers,\n        Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n      }\n    });\n  }\n  async function streamFetch(authValue, roomId) {\n    return fetchClientApi(roomId, \"/storage\", authValue, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  async function httpPostToRoom(endpoint, body) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(config.roomId, endpoint, managedSocket.authValue, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n  }\n  async function createTextMention(userId, mentionId) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(\n      config.roomId,\n      \"/text-mentions\",\n      managedSocket.authValue,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          mentionId\n        })\n      }\n    );\n  }\n  async function deleteTextMention(mentionId) {\n    if (!managedSocket.authValue) {\n      throw new Error(\"Not authorized\");\n    }\n    return fetchClientApi(\n      config.roomId,\n      `/text-mentions/${mentionId}`,\n      managedSocket.authValue,\n      {\n        method: \"DELETE\"\n      }\n    );\n  }\n  async function reportTextEditor(type, rootKey) {\n    const authValue = await delegates.authenticate();\n    return fetchClientApi(config.roomId, \"/text-metadata\", authValue, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        type,\n        rootKey\n      })\n    });\n  }\n  function sendMessages(messages) {\n    const serializedPayload = JSON.stringify(messages);\n    const nonce = context.dynamicSessionInfo.current?.nonce;\n    if (config.unstable_fallbackToHTTP && nonce) {\n      const size = new TextEncoder().encode(serializedPayload).length;\n      if (size > MAX_SOCKET_MESSAGE_SIZE) {\n        void httpPostToRoom(\"/send-message\", { nonce, messages }).then(\n          (resp) => {\n            if (!resp.ok && resp.status === 403) {\n              managedSocket.reconnect();\n            }\n          }\n        );\n        warn(\n          \"Message was too large for websockets and sent over HTTP instead\"\n        );\n        return;\n      }\n    }\n    managedSocket.send(serializedPayload);\n  }\n  const self = new DerivedRef(\n    context.staticSessionInfo,\n    context.dynamicSessionInfo,\n    context.myPresence,\n    (staticSession, dynamicSession, myPresence) => {\n      if (staticSession === null || dynamicSession === null) {\n        return null;\n      } else {\n        const canWrite = canWriteStorage(dynamicSession.scopes);\n        return {\n          connectionId: dynamicSession.actor,\n          id: staticSession.userId,\n          info: staticSession.userInfo,\n          presence: myPresence,\n          canWrite,\n          canComment: canComment(dynamicSession.scopes)\n        };\n      }\n    }\n  );\n  let _lastSelf;\n  function notifySelfChanged(batchedUpdatesWrapper) {\n    const currSelf = self.current;\n    if (currSelf !== null && currSelf !== _lastSelf) {\n      batchedUpdatesWrapper(() => {\n        eventHub.self.notify(currSelf);\n      });\n      _lastSelf = currSelf;\n    }\n  }\n  const selfAsTreeNode = new DerivedRef(\n    self,\n    (me) => me !== null ? userToTreeNode(\"Me\", me) : null\n  );\n  function createOrUpdateRootFromMessage(message, batchedUpdatesWrapper) {\n    if (message.items.length === 0) {\n      throw new Error(\"Internal error: cannot load storage without items\");\n    }\n    if (context.root !== void 0) {\n      updateRoot(message.items, batchedUpdatesWrapper);\n    } else {\n      context.root = LiveObject._fromItems(message.items, pool);\n    }\n    const canWrite = self.current?.canWrite ?? true;\n    const stackSizeBefore = context.undoStack.length;\n    for (const key in context.initialStorage) {\n      if (context.root.get(key) === void 0) {\n        if (canWrite) {\n          context.root.set(key, cloneLson(context.initialStorage[key]));\n        } else {\n          warn(\n            `Attempted to populate missing storage key '${key}', but current user has no write access`\n          );\n        }\n      }\n    }\n    context.undoStack.length = stackSizeBefore;\n  }\n  function updateRoot(items, batchedUpdatesWrapper) {\n    if (context.root === void 0) {\n      return;\n    }\n    const currentItems = /* @__PURE__ */ new Map();\n    for (const [id, node] of context.nodes) {\n      currentItems.set(id, node._serialize());\n    }\n    const ops = getTreesDiffOperations(currentItems, new Map(items));\n    const result = applyOps(ops, false);\n    notify(result.updates, batchedUpdatesWrapper);\n  }\n  function _addToRealUndoStack(historyOps, batchedUpdatesWrapper) {\n    if (context.undoStack.length >= 50) {\n      context.undoStack.shift();\n    }\n    context.undoStack.push(historyOps);\n    onHistoryChange(batchedUpdatesWrapper);\n  }\n  function addToUndoStack(historyOps, batchedUpdatesWrapper) {\n    if (context.pausedHistory !== null) {\n      context.pausedHistory.unshift(...historyOps);\n    } else {\n      _addToRealUndoStack(historyOps, batchedUpdatesWrapper);\n    }\n  }\n  function notify(updates, batchedUpdatesWrapper) {\n    const storageUpdates = updates.storageUpdates;\n    const othersUpdates = updates.others;\n    batchedUpdatesWrapper(() => {\n      if (othersUpdates !== void 0 && othersUpdates.length > 0) {\n        const others = context.others.current;\n        for (const event of othersUpdates) {\n          eventHub.others.notify({ ...event, others });\n        }\n      }\n      if (updates.presence ?? false) {\n        notifySelfChanged(doNotBatchUpdates);\n        eventHub.myPresence.notify(context.myPresence.current);\n      }\n      if (storageUpdates !== void 0 && storageUpdates.size > 0) {\n        const updates2 = Array.from(storageUpdates.values());\n        eventHub.storageBatch.notify(updates2);\n      }\n      notifyStorageStatus();\n    });\n  }\n  function getConnectionId() {\n    const info = context.dynamicSessionInfo.current;\n    if (info) {\n      return info.actor;\n    }\n    throw new Error(\n      \"Internal. Tried to get connection id but connection was never open\"\n    );\n  }\n  function applyOps(rawOps, isLocal) {\n    const output = {\n      reverse: [],\n      storageUpdates: /* @__PURE__ */ new Map(),\n      presence: false\n    };\n    const createdNodeIds = /* @__PURE__ */ new Set();\n    const ops = rawOps.map((op) => {\n      if (op.type !== \"presence\" && !op.opId) {\n        return { ...op, opId: pool.generateOpId() };\n      } else {\n        return op;\n      }\n    });\n    for (const op of ops) {\n      if (op.type === \"presence\") {\n        const reverse = {\n          type: \"presence\",\n          data: {}\n        };\n        for (const key in op.data) {\n          reverse.data[key] = context.myPresence.current[key];\n        }\n        context.myPresence.patch(op.data);\n        if (context.buffer.presenceUpdates === null) {\n          context.buffer.presenceUpdates = { type: \"partial\", data: op.data };\n        } else {\n          for (const key in op.data) {\n            context.buffer.presenceUpdates.data[key] = op.data[key];\n          }\n        }\n        output.reverse.unshift(reverse);\n        output.presence = true;\n      } else {\n        let source;\n        if (isLocal) {\n          source = 0 /* UNDOREDO_RECONNECT */;\n        } else {\n          const opId = nn(op.opId);\n          if (true) {\n            nn(context.opStackTraces).delete(opId);\n          }\n          const deleted = context.unacknowledgedOps.delete(opId);\n          source = deleted ? 2 /* ACK */ : 1 /* REMOTE */;\n        }\n        const applyOpResult = applyOp(op, source);\n        if (applyOpResult.modified) {\n          const nodeId = applyOpResult.modified.node._id;\n          if (!(nodeId && createdNodeIds.has(nodeId))) {\n            output.storageUpdates.set(\n              nn(applyOpResult.modified.node._id),\n              mergeStorageUpdates(\n                output.storageUpdates.get(nn(applyOpResult.modified.node._id)),\n                applyOpResult.modified\n              )\n            );\n            output.reverse.unshift(...applyOpResult.reverse);\n          }\n          if (op.type === 2 /* CREATE_LIST */ || op.type === 7 /* CREATE_MAP */ || op.type === 4 /* CREATE_OBJECT */) {\n            createdNodeIds.add(nn(op.id));\n          }\n        }\n      }\n    }\n    return {\n      ops,\n      reverse: output.reverse,\n      updates: {\n        storageUpdates: output.storageUpdates,\n        presence: output.presence\n      }\n    };\n  }\n  function applyOp(op, source) {\n    if (isAckOp(op)) {\n      return { modified: false };\n    }\n    switch (op.type) {\n      case 6 /* DELETE_OBJECT_KEY */:\n      case 3 /* UPDATE_OBJECT */:\n      case 5 /* DELETE_CRDT */: {\n        const node = context.nodes.get(op.id);\n        if (node === void 0) {\n          return { modified: false };\n        }\n        return node._apply(op, source === 0 /* UNDOREDO_RECONNECT */);\n      }\n      case 1 /* SET_PARENT_KEY */: {\n        const node = context.nodes.get(op.id);\n        if (node === void 0) {\n          return { modified: false };\n        }\n        if (node.parent.type === \"HasParent\" && isLiveList(node.parent.node)) {\n          return node.parent.node._setChildKey(\n            asPos(op.parentKey),\n            node,\n            source\n          );\n        }\n        return { modified: false };\n      }\n      case 4 /* CREATE_OBJECT */:\n      case 2 /* CREATE_LIST */:\n      case 7 /* CREATE_MAP */:\n      case 8 /* CREATE_REGISTER */: {\n        if (op.parentId === void 0) {\n          return { modified: false };\n        }\n        const parentNode = context.nodes.get(op.parentId);\n        if (parentNode === void 0) {\n          return { modified: false };\n        }\n        return parentNode._attachChild(op, source);\n      }\n    }\n  }\n  function updatePresence(patch, options2) {\n    const oldValues = {};\n    if (context.buffer.presenceUpdates === null) {\n      context.buffer.presenceUpdates = {\n        type: \"partial\",\n        data: {}\n      };\n    }\n    for (const key in patch) {\n      const overrideValue = patch[key];\n      if (overrideValue === void 0) {\n        continue;\n      }\n      context.buffer.presenceUpdates.data[key] = overrideValue;\n      oldValues[key] = context.myPresence.current[key];\n    }\n    context.myPresence.patch(patch);\n    if (context.activeBatch) {\n      if (options2?.addToHistory) {\n        context.activeBatch.reverseOps.unshift({\n          type: \"presence\",\n          data: oldValues\n        });\n      }\n      context.activeBatch.updates.presence = true;\n    } else {\n      flushNowOrSoon();\n      batchUpdates(() => {\n        if (options2?.addToHistory) {\n          addToUndoStack(\n            [{ type: \"presence\", data: oldValues }],\n            doNotBatchUpdates\n          );\n        }\n        notify({ presence: true }, doNotBatchUpdates);\n      });\n    }\n  }\n  function onUpdatePresenceMessage(message) {\n    if (message.targetActor !== void 0) {\n      const oldUser = context.others.getUser(message.actor);\n      context.others.setOther(message.actor, message.data);\n      const newUser = context.others.getUser(message.actor);\n      if (oldUser === void 0 && newUser !== void 0) {\n        return { type: \"enter\", user: newUser };\n      }\n    } else {\n      context.others.patchOther(message.actor, message.data), message;\n    }\n    const user = context.others.getUser(message.actor);\n    if (user) {\n      return {\n        type: \"update\",\n        updates: message.data,\n        user\n      };\n    } else {\n      return void 0;\n    }\n  }\n  function onUserLeftMessage(message) {\n    const user = context.others.getUser(message.actor);\n    if (user) {\n      context.others.removeConnection(message.actor);\n      return { type: \"leave\", user };\n    }\n    return null;\n  }\n  function onRoomStateMessage(message, batchedUpdatesWrapper) {\n    context.dynamicSessionInfo.set({\n      actor: message.actor,\n      nonce: message.nonce,\n      scopes: message.scopes\n    });\n    context.idFactory = makeIdFactory(message.actor);\n    notifySelfChanged(batchedUpdatesWrapper);\n    for (const connectionId of context.others.connectionIds()) {\n      const user = message.users[connectionId];\n      if (user === void 0) {\n        context.others.removeConnection(connectionId);\n      }\n    }\n    for (const key in message.users) {\n      const user = message.users[key];\n      const connectionId = Number(key);\n      context.others.setConnection(\n        connectionId,\n        user.id,\n        user.info,\n        user.scopes\n      );\n    }\n    return { type: \"reset\" };\n  }\n  function canUndo() {\n    return context.undoStack.length > 0;\n  }\n  function canRedo() {\n    return context.redoStack.length > 0;\n  }\n  function onHistoryChange(batchedUpdatesWrapper) {\n    batchedUpdatesWrapper(() => {\n      eventHub.history.notify({ canUndo: canUndo(), canRedo: canRedo() });\n    });\n  }\n  function onUserJoinedMessage(message) {\n    context.others.setConnection(\n      message.actor,\n      message.id,\n      message.info,\n      message.scopes\n    );\n    context.buffer.messages.push({\n      type: 100 /* UPDATE_PRESENCE */,\n      data: context.myPresence.current,\n      targetActor: message.actor\n    });\n    flushNowOrSoon();\n    const user = context.others.getUser(message.actor);\n    return user ? { type: \"enter\", user } : void 0;\n  }\n  function parseServerMessage(data) {\n    if (!isJsonObject(data)) {\n      return null;\n    }\n    return data;\n  }\n  function parseServerMessages(text) {\n    const data = tryParseJson(text);\n    if (data === void 0) {\n      return null;\n    } else if (isJsonArray(data)) {\n      return compact(data.map((item) => parseServerMessage(item)));\n    } else {\n      return compact([parseServerMessage(data)]);\n    }\n  }\n  function applyAndSendOps(offlineOps, batchedUpdatesWrapper) {\n    if (offlineOps.size === 0) {\n      return;\n    }\n    const messages = [];\n    const ops = Array.from(offlineOps.values());\n    const result = applyOps(ops, true);\n    messages.push({\n      type: 201 /* UPDATE_STORAGE */,\n      ops: result.ops\n    });\n    notify(result.updates, batchedUpdatesWrapper);\n    sendMessages(messages);\n  }\n  function handleServerMessage(event) {\n    if (typeof event.data !== \"string\") {\n      return;\n    }\n    const messages = parseServerMessages(event.data);\n    if (messages === null || messages.length === 0) {\n      return;\n    }\n    const updates = {\n      storageUpdates: /* @__PURE__ */ new Map(),\n      others: []\n    };\n    batchUpdates(() => {\n      for (const message of messages) {\n        switch (message.type) {\n          case 101 /* USER_JOINED */: {\n            const userJoinedUpdate = onUserJoinedMessage(message);\n            if (userJoinedUpdate) {\n              updates.others.push(userJoinedUpdate);\n            }\n            break;\n          }\n          case 100 /* UPDATE_PRESENCE */: {\n            const othersPresenceUpdate = onUpdatePresenceMessage(message);\n            if (othersPresenceUpdate) {\n              updates.others.push(othersPresenceUpdate);\n            }\n            break;\n          }\n          case 103 /* BROADCASTED_EVENT */: {\n            const others = context.others.current;\n            eventHub.customEvent.notify({\n              connectionId: message.actor,\n              user: message.actor < 0 ? null : others.find((u) => u.connectionId === message.actor) ?? null,\n              event: message.event\n            });\n            break;\n          }\n          case 102 /* USER_LEFT */: {\n            const event2 = onUserLeftMessage(message);\n            if (event2) {\n              updates.others.push(event2);\n            }\n            break;\n          }\n          case 300 /* UPDATE_YDOC */: {\n            eventHub.ydoc.notify(message);\n            break;\n          }\n          case 104 /* ROOM_STATE */: {\n            updates.others.push(onRoomStateMessage(message, doNotBatchUpdates));\n            break;\n          }\n          case 200 /* INITIAL_STORAGE_STATE */: {\n            processInitialStorage(message);\n            break;\n          }\n          case 201 /* UPDATE_STORAGE */: {\n            const applyResult = applyOps(message.ops, false);\n            for (const [key, value] of applyResult.updates.storageUpdates) {\n              updates.storageUpdates.set(\n                key,\n                mergeStorageUpdates(updates.storageUpdates.get(key), value)\n              );\n            }\n            break;\n          }\n          case 299 /* REJECT_STORAGE_OP */: {\n            errorWithTitle(\n              \"Storage mutation rejection error\",\n              message.reason\n            );\n            if (true) {\n              const traces = /* @__PURE__ */ new Set();\n              for (const opId of message.opIds) {\n                const trace = context.opStackTraces?.get(opId);\n                if (trace) {\n                  traces.add(trace);\n                }\n              }\n              if (traces.size > 0) {\n                warnWithTitle(\n                  \"The following function calls caused the rejected storage mutations:\",\n                  `\n\n${Array.from(traces).join(\"\\n\\n\")}`\n                );\n              }\n              throw new Error(\n                `Storage mutations rejected by server: ${message.reason}`\n              );\n            }\n            break;\n          }\n          case 400 /* THREAD_CREATED */:\n          case 407 /* THREAD_DELETED */:\n          case 401 /* THREAD_METADATA_UPDATED */:\n          case 408 /* THREAD_UPDATED */:\n          case 405 /* COMMENT_REACTION_ADDED */:\n          case 406 /* COMMENT_REACTION_REMOVED */:\n          case 402 /* COMMENT_CREATED */:\n          case 403 /* COMMENT_EDITED */:\n          case 404 /* COMMENT_DELETED */: {\n            eventHub.comments.notify(message);\n            break;\n          }\n        }\n      }\n      notify(updates, doNotBatchUpdates);\n    });\n  }\n  function flushNowOrSoon() {\n    const storageOps = context.buffer.storageOperations;\n    if (storageOps.length > 0) {\n      for (const op of storageOps) {\n        context.unacknowledgedOps.set(nn(op.opId), op);\n      }\n      notifyStorageStatus();\n    }\n    if (managedSocket.getStatus() !== \"connected\") {\n      context.buffer.storageOperations = [];\n      return;\n    }\n    const now = Date.now();\n    const elapsedMillis = now - context.buffer.lastFlushedAt;\n    if (elapsedMillis >= config.throttleDelay) {\n      const messagesToFlush = serializeBuffer();\n      if (messagesToFlush.length === 0) {\n        return;\n      }\n      sendMessages(messagesToFlush);\n      context.buffer = {\n        flushTimerID: void 0,\n        lastFlushedAt: now,\n        messages: [],\n        storageOperations: [],\n        presenceUpdates: null\n      };\n    } else {\n      clearTimeout(context.buffer.flushTimerID);\n      context.buffer.flushTimerID = setTimeout(\n        flushNowOrSoon,\n        config.throttleDelay - elapsedMillis\n      );\n    }\n  }\n  function serializeBuffer() {\n    const messages = [];\n    if (context.buffer.presenceUpdates) {\n      messages.push(\n        context.buffer.presenceUpdates.type === \"full\" ? {\n          type: 100 /* UPDATE_PRESENCE */,\n          // Populating the `targetActor` field turns this message into\n          // a Full Presence™ update message (not a patch), which will get\n          // interpreted by other clients as such.\n          targetActor: -1,\n          data: context.buffer.presenceUpdates.data\n        } : {\n          type: 100 /* UPDATE_PRESENCE */,\n          data: context.buffer.presenceUpdates.data\n        }\n      );\n    }\n    for (const event of context.buffer.messages) {\n      messages.push(event);\n    }\n    if (context.buffer.storageOperations.length > 0) {\n      messages.push({\n        type: 201 /* UPDATE_STORAGE */,\n        ops: context.buffer.storageOperations\n      });\n    }\n    return messages;\n  }\n  function updateYDoc(update, guid) {\n    const clientMsg = {\n      type: 301 /* UPDATE_YDOC */,\n      update,\n      guid\n    };\n    context.buffer.messages.push(clientMsg);\n    eventHub.ydoc.notify(clientMsg);\n    flushNowOrSoon();\n  }\n  function broadcastEvent(event, options2 = {\n    shouldQueueEventIfNotReady: false\n  }) {\n    if (managedSocket.getStatus() !== \"connected\" && !options2.shouldQueueEventIfNotReady) {\n      return;\n    }\n    context.buffer.messages.push({\n      type: 103 /* BROADCAST_EVENT */,\n      event\n    });\n    flushNowOrSoon();\n  }\n  function dispatchOps(ops) {\n    const { storageOperations } = context.buffer;\n    for (const op of ops) {\n      storageOperations.push(op);\n    }\n    flushNowOrSoon();\n  }\n  let _getStorage$ = null;\n  let _resolveStoragePromise = null;\n  function processInitialStorage(message) {\n    const unacknowledgedOps = new Map(context.unacknowledgedOps);\n    createOrUpdateRootFromMessage(message, doNotBatchUpdates);\n    applyAndSendOps(unacknowledgedOps, doNotBatchUpdates);\n    _resolveStoragePromise?.();\n    notifyStorageStatus();\n    eventHub.storageDidLoad.notify();\n  }\n  async function streamStorage() {\n    if (!managedSocket.authValue) {\n      return;\n    }\n    const result = await streamFetch(managedSocket.authValue, config.roomId);\n    const items = await result.json();\n    processInitialStorage({ type: 200 /* INITIAL_STORAGE_STATE */, items });\n  }\n  function refreshStorage(options2) {\n    const messages = context.buffer.messages;\n    if (config.unstable_streamData) {\n      void streamStorage();\n    } else if (!messages.some((msg) => msg.type === 200 /* FETCH_STORAGE */)) {\n      messages.push({ type: 200 /* FETCH_STORAGE */ });\n    }\n    if (options2.flush) {\n      flushNowOrSoon();\n    }\n  }\n  function startLoadingStorage() {\n    if (_getStorage$ === null) {\n      refreshStorage({ flush: true });\n      _getStorage$ = new Promise((resolve) => {\n        _resolveStoragePromise = resolve;\n      });\n      notifyStorageStatus();\n    }\n    return _getStorage$;\n  }\n  function getStorageSnapshot() {\n    const root = context.root;\n    if (root !== void 0) {\n      return root;\n    } else {\n      void startLoadingStorage();\n      return null;\n    }\n  }\n  async function getStorage() {\n    if (context.root !== void 0) {\n      return Promise.resolve({\n        root: context.root\n      });\n    }\n    await startLoadingStorage();\n    return {\n      root: nn(context.root)\n    };\n  }\n  function fetchYDoc(vector, guid) {\n    if (!context.buffer.messages.find((m) => {\n      return m.type === 300 /* FETCH_YDOC */ && m.vector === vector && m.guid === guid;\n    })) {\n      context.buffer.messages.push({\n        type: 300 /* FETCH_YDOC */,\n        vector,\n        guid\n      });\n    }\n    flushNowOrSoon();\n  }\n  function undo() {\n    if (context.activeBatch) {\n      throw new Error(\"undo is not allowed during a batch\");\n    }\n    const historyOps = context.undoStack.pop();\n    if (historyOps === void 0) {\n      return;\n    }\n    context.pausedHistory = null;\n    const result = applyOps(historyOps, true);\n    batchUpdates(() => {\n      notify(result.updates, doNotBatchUpdates);\n      context.redoStack.push(result.reverse);\n      onHistoryChange(doNotBatchUpdates);\n    });\n    for (const op of result.ops) {\n      if (op.type !== \"presence\") {\n        context.buffer.storageOperations.push(op);\n      }\n    }\n    flushNowOrSoon();\n  }\n  function redo() {\n    if (context.activeBatch) {\n      throw new Error(\"redo is not allowed during a batch\");\n    }\n    const historyOps = context.redoStack.pop();\n    if (historyOps === void 0) {\n      return;\n    }\n    context.pausedHistory = null;\n    const result = applyOps(historyOps, true);\n    batchUpdates(() => {\n      notify(result.updates, doNotBatchUpdates);\n      context.undoStack.push(result.reverse);\n      onHistoryChange(doNotBatchUpdates);\n    });\n    for (const op of result.ops) {\n      if (op.type !== \"presence\") {\n        context.buffer.storageOperations.push(op);\n      }\n    }\n    flushNowOrSoon();\n  }\n  function clear() {\n    context.undoStack.length = 0;\n    context.redoStack.length = 0;\n  }\n  function batch(callback) {\n    if (context.activeBatch) {\n      return callback();\n    }\n    let returnValue = void 0;\n    batchUpdates(() => {\n      context.activeBatch = {\n        ops: [],\n        updates: {\n          storageUpdates: /* @__PURE__ */ new Map(),\n          presence: false,\n          others: []\n        },\n        reverseOps: []\n      };\n      try {\n        returnValue = callback();\n      } finally {\n        const currentBatch = context.activeBatch;\n        context.activeBatch = null;\n        if (currentBatch.reverseOps.length > 0) {\n          addToUndoStack(currentBatch.reverseOps, doNotBatchUpdates);\n        }\n        if (currentBatch.ops.length > 0) {\n          context.redoStack.length = 0;\n        }\n        if (currentBatch.ops.length > 0) {\n          dispatchOps(currentBatch.ops);\n        }\n        notify(currentBatch.updates, doNotBatchUpdates);\n        flushNowOrSoon();\n      }\n    });\n    return returnValue;\n  }\n  function pauseHistory() {\n    if (context.pausedHistory === null) {\n      context.pausedHistory = [];\n    }\n  }\n  function resumeHistory() {\n    const historyOps = context.pausedHistory;\n    context.pausedHistory = null;\n    if (historyOps !== null && historyOps.length > 0) {\n      _addToRealUndoStack(historyOps, batchUpdates);\n    }\n  }\n  function getStorageStatus() {\n    if (context.root === void 0) {\n      return _getStorage$ === null ? \"not-loaded\" : \"loading\";\n    } else {\n      return context.unacknowledgedOps.size === 0 ? \"synchronized\" : \"synchronizing\";\n    }\n  }\n  let _lastStorageStatus = getStorageStatus();\n  function notifyStorageStatus() {\n    const storageStatus = getStorageStatus();\n    if (_lastStorageStatus !== storageStatus) {\n      _lastStorageStatus = storageStatus;\n      eventHub.storageStatus.notify(storageStatus);\n    }\n  }\n  function isPresenceReady() {\n    return self.current !== null;\n  }\n  async function waitUntilPresenceReady() {\n    while (!isPresenceReady()) {\n      const { promise, resolve } = Promise_withResolvers();\n      const unsub1 = events.self.subscribeOnce(resolve);\n      const unsub2 = events.status.subscribeOnce(resolve);\n      await promise;\n      unsub1();\n      unsub2();\n    }\n  }\n  function isStorageReady() {\n    return getStorageSnapshot() !== null;\n  }\n  async function waitUntilStorageReady() {\n    while (!isStorageReady()) {\n      await getStorage();\n    }\n  }\n  const others_forDevTools = new DerivedRef(\n    context.others,\n    (others) => others.map((other, index) => userToTreeNode(`Other ${index}`, other))\n  );\n  const events = {\n    status: eventHub.status.observable,\n    lostConnection: eventHub.lostConnection.observable,\n    customEvent: eventHub.customEvent.observable,\n    others: eventHub.others.observable,\n    self: eventHub.self.observable,\n    myPresence: eventHub.myPresence.observable,\n    error: eventHub.error.observable,\n    /** @deprecated */\n    storage: eventHub.storageBatch.observable,\n    storageBatch: eventHub.storageBatch.observable,\n    history: eventHub.history.observable,\n    storageDidLoad: eventHub.storageDidLoad.observable,\n    storageStatus: eventHub.storageStatus.observable,\n    ydoc: eventHub.ydoc.observable,\n    comments: eventHub.comments.observable\n  };\n  const commentsApi = createCommentsApi(\n    config.roomId,\n    delegates.authenticate,\n    fetchClientApi\n  );\n  async function fetchNotificationsJson(endpoint, options2) {\n    const authValue = await delegates.authenticate();\n    const response = await fetchClientApi(\n      config.roomId,\n      endpoint,\n      authValue,\n      options2\n    );\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 600) {\n        let error3;\n        try {\n          const errorBody = await response.json();\n          error3 = new NotificationsApiError(\n            errorBody.message,\n            response.status,\n            errorBody\n          );\n        } catch {\n          error3 = new NotificationsApiError(\n            response.statusText,\n            response.status\n          );\n        }\n        throw error3;\n      }\n    }\n    let body;\n    try {\n      body = await response.json();\n    } catch {\n      body = {};\n    }\n    return body;\n  }\n  function getRoomNotificationSettings() {\n    return fetchNotificationsJson(\n      \"/notification-settings\"\n    );\n  }\n  function updateRoomNotificationSettings(settings) {\n    return fetchNotificationsJson(\n      \"/notification-settings\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(settings),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n  }\n  async function markInboxNotificationsAsRead(inboxNotificationIds) {\n    await fetchNotificationsJson(\"/inbox-notifications/read\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ inboxNotificationIds })\n    });\n  }\n  const batchedMarkInboxNotificationsAsRead = new Batch(\n    async (batchedInboxNotificationIds) => {\n      const inboxNotificationIds = batchedInboxNotificationIds.flat();\n      await markInboxNotificationsAsRead(inboxNotificationIds);\n      return inboxNotificationIds;\n    },\n    { delay: MARK_INBOX_NOTIFICATIONS_AS_READ_BATCH_DELAY2 }\n  );\n  async function markInboxNotificationAsRead(inboxNotificationId) {\n    await batchedMarkInboxNotificationsAsRead.get(inboxNotificationId);\n  }\n  return Object.defineProperty(\n    {\n      [kInternal]: {\n        get presenceBuffer() {\n          return deepClone(context.buffer.presenceUpdates?.data ?? null);\n        },\n        // prettier-ignore\n        get undoStack() {\n          return deepClone(context.undoStack);\n        },\n        // prettier-ignore\n        get nodeCount() {\n          return context.nodes.size;\n        },\n        // prettier-ignore\n        // send metadata when using a text editor\n        reportTextEditor,\n        // create a text mention when using a text editor\n        createTextMention,\n        // delete a text mention when using a text editor\n        deleteTextMention,\n        // Support for the Liveblocks browser extension\n        getSelf_forDevTools: () => selfAsTreeNode.current,\n        getOthers_forDevTools: () => others_forDevTools.current,\n        // prettier-ignore\n        simulate: {\n          // These exist only for our E2E testing app\n          explicitClose: (event) => managedSocket._privateSendMachineEvent({ type: \"EXPLICIT_SOCKET_CLOSE\", event }),\n          rawSend: (data) => managedSocket.send(data)\n        },\n        comments: {\n          ...commentsApi\n        },\n        notifications: {\n          getRoomNotificationSettings,\n          updateRoomNotificationSettings,\n          markInboxNotificationAsRead\n        }\n      },\n      id: config.roomId,\n      subscribe: makeClassicSubscribeFn(events),\n      connect: () => managedSocket.connect(),\n      reconnect: () => managedSocket.reconnect(),\n      disconnect: () => managedSocket.disconnect(),\n      destroy: () => {\n        uninstallBgTabSpy();\n        managedSocket.destroy();\n      },\n      // Presence\n      updatePresence,\n      updateYDoc,\n      broadcastEvent,\n      // Storage\n      batch,\n      history: {\n        undo,\n        redo,\n        canUndo,\n        canRedo,\n        clear,\n        pause: pauseHistory,\n        resume: resumeHistory\n      },\n      fetchYDoc,\n      getStorage,\n      getStorageSnapshot,\n      getStorageStatus,\n      isPresenceReady,\n      isStorageReady,\n      waitUntilPresenceReady: memoizeOnSuccess(waitUntilPresenceReady),\n      waitUntilStorageReady: memoizeOnSuccess(waitUntilStorageReady),\n      events,\n      // Core\n      getStatus: () => managedSocket.getStatus(),\n      getSelf: () => self.current,\n      // Presence\n      getPresence: () => context.myPresence.current,\n      getOthers: () => context.others.current\n    },\n    // Explictly make the internal field non-enumerable, to avoid aggressive\n    // freezing when used with Immer\n    kInternal,\n    { enumerable: false }\n  );\n}\nfunction makeClassicSubscribeFn(events) {\n  function subscribeToLiveStructureDeeply(node, callback) {\n    return events.storageBatch.subscribe((updates) => {\n      const relatedUpdates = updates.filter(\n        (update) => isSameNodeOrChildOf(update.node, node)\n      );\n      if (relatedUpdates.length > 0) {\n        callback(relatedUpdates);\n      }\n    });\n  }\n  function subscribeToLiveStructureShallowly(node, callback) {\n    return events.storageBatch.subscribe((updates) => {\n      for (const update of updates) {\n        if (update.node._id === node._id) {\n          callback(update.node);\n        }\n      }\n    });\n  }\n  function subscribe(first, second, options) {\n    if (typeof first === \"string\" && isRoomEventName(first)) {\n      if (typeof second !== \"function\") {\n        throw new Error(\"Second argument must be a callback function\");\n      }\n      const callback = second;\n      switch (first) {\n        case \"event\":\n          return events.customEvent.subscribe(\n            callback\n          );\n        case \"my-presence\":\n          return events.myPresence.subscribe(callback);\n        case \"others\": {\n          const cb = callback;\n          return events.others.subscribe((event) => {\n            const { others, ...internalEvent } = event;\n            return cb(others, internalEvent);\n          });\n        }\n        case \"error\":\n          return events.error.subscribe(callback);\n        case \"status\":\n          return events.status.subscribe(callback);\n        case \"lost-connection\":\n          return events.lostConnection.subscribe(\n            callback\n          );\n        case \"history\":\n          return events.history.subscribe(callback);\n        case \"storage-status\":\n          return events.storageStatus.subscribe(\n            callback\n          );\n        default:\n          return assertNever(\n            first,\n            `\"${String(first)}\" is not a valid event name`\n          );\n      }\n    }\n    if (second === void 0 || typeof first === \"function\") {\n      if (typeof first === \"function\") {\n        const storageCallback = first;\n        return events.storageBatch.subscribe(storageCallback);\n      } else {\n        throw new Error(\"Please specify a listener callback\");\n      }\n    }\n    if (isLiveNode(first)) {\n      const node = first;\n      if (options?.isDeep) {\n        const storageCallback = second;\n        return subscribeToLiveStructureDeeply(node, storageCallback);\n      } else {\n        const nodeCallback = second;\n        return subscribeToLiveStructureShallowly(node, nodeCallback);\n      }\n    }\n    throw new Error(\n      `${String(first)} is not a value that can be subscribed to.`\n    );\n  }\n  return subscribe;\n}\nfunction isRoomEventName(value) {\n  return value === \"my-presence\" || value === \"others\" || value === \"event\" || value === \"error\" || value === \"history\" || value === \"status\" || value === \"storage-status\" || value === \"lost-connection\" || value === \"connection\";\n}\nfunction makeAuthDelegateForRoom(roomId, authManager) {\n  return async () => {\n    return authManager.getAuthValue({ requestedScope: \"room:read\", roomId });\n  };\n}\nfunction makeCreateSocketDelegateForRoom(roomId, baseUrl, WebSocketPolyfill) {\n  return (authValue) => {\n    const ws = WebSocketPolyfill ?? (typeof WebSocket === \"undefined\" ? void 0 : WebSocket);\n    if (ws === void 0) {\n      throw new StopRetrying(\n        \"To use Liveblocks client in a non-DOM environment, you need to provide a WebSocket polyfill.\"\n      );\n    }\n    const url = new URL(baseUrl);\n    url.protocol = url.protocol === \"http:\" ? \"ws\" : \"wss\";\n    url.pathname = \"/v7\";\n    url.searchParams.set(\"roomId\", roomId);\n    if (authValue.type === \"secret\") {\n      url.searchParams.set(\"tok\", authValue.token.raw);\n    } else if (authValue.type === \"public\") {\n      url.searchParams.set(\"pubkey\", authValue.publicApiKey);\n    } else {\n      return assertNever(authValue, \"Unhandled case\");\n    }\n    url.searchParams.set(\"version\", PKG_VERSION || \"dev\");\n    return new ws(url.toString());\n  };\n}\n\n// src/store.ts\nfunction createClientStore() {\n  const store = createStore({\n    threads: {},\n    queries: {},\n    optimisticUpdates: [],\n    inboxNotifications: {},\n    notificationSettings: {}\n  });\n  const optimisticUpdatesEventSource = makeEventSource();\n  return {\n    ...store,\n    deleteThread(threadId) {\n      store.set((state) => {\n        return {\n          ...state,\n          threads: deleteKeyImmutable(state.threads, threadId),\n          inboxNotifications: Object.fromEntries(\n            Object.entries(state.inboxNotifications).filter(\n              ([_id, notification]) => notification.kind === \"thread\" && notification.threadId === threadId\n            )\n          )\n        };\n      });\n    },\n    updateThreadAndNotification(thread, inboxNotification) {\n      store.set((state) => {\n        const existingThread = state.threads[thread.id];\n        return {\n          ...state,\n          threads: existingThread === void 0 || compareThreads(thread, existingThread) === 1 ? { ...state.threads, [thread.id]: thread } : state.threads,\n          inboxNotifications: inboxNotification === void 0 ? state.inboxNotifications : {\n            ...state.inboxNotifications,\n            [inboxNotification.id]: inboxNotification\n          }\n        };\n      });\n    },\n    updateThreadsAndNotifications(threads, inboxNotifications, deletedThreads, deletedInboxNotifications, queryKey) {\n      store.set((state) => ({\n        ...state,\n        threads: applyThreadUpdates(state.threads, {\n          newThreads: threads,\n          deletedThreads\n        }),\n        inboxNotifications: applyNotificationsUpdates(\n          state.inboxNotifications,\n          {\n            newInboxNotifications: inboxNotifications,\n            deletedNotifications: deletedInboxNotifications\n          }\n        ),\n        queries: queryKey !== void 0 ? {\n          ...state.queries,\n          [queryKey]: { isLoading: false, data: void 0 }\n        } : state.queries\n      }));\n    },\n    updateRoomInboxNotificationSettings(roomId, settings, queryKey) {\n      store.set((state) => ({\n        ...state,\n        notificationSettings: {\n          ...state.notificationSettings,\n          [roomId]: settings\n        },\n        queries: {\n          ...state.queries,\n          [queryKey]: { isLoading: false, data: void 0 }\n        }\n      }));\n    },\n    pushOptimisticUpdate(optimisticUpdate) {\n      optimisticUpdatesEventSource.notify(optimisticUpdate);\n      store.set((state) => ({\n        ...state,\n        optimisticUpdates: [...state.optimisticUpdates, optimisticUpdate]\n      }));\n    },\n    setQueryState(queryKey, queryState) {\n      store.set((state) => ({\n        ...state,\n        queries: {\n          ...state.queries,\n          [queryKey]: queryState\n        }\n      }));\n    },\n    optimisticUpdatesEventSource\n  };\n}\nfunction deleteKeyImmutable(record, key) {\n  if (Object.prototype.hasOwnProperty.call(record, key)) {\n    const { [key]: _toDelete, ...rest } = record;\n    return rest;\n  }\n  return record;\n}\nfunction compareThreads(thread1, thread2) {\n  if (thread1.updatedAt && thread2.updatedAt) {\n    return thread1.updatedAt > thread2.updatedAt ? 1 : thread1.updatedAt < thread2.updatedAt ? -1 : 0;\n  } else if (thread1.updatedAt || thread2.updatedAt) {\n    return thread1.updatedAt ? 1 : -1;\n  }\n  if (thread1.createdAt > thread2.createdAt) {\n    return 1;\n  } else if (thread1.createdAt < thread2.createdAt) {\n    return -1;\n  }\n  return 0;\n}\nfunction applyOptimisticUpdates(state) {\n  const result = {\n    threads: {\n      ...state.threads\n    },\n    inboxNotifications: {\n      ...state.inboxNotifications\n    },\n    notificationSettings: {\n      ...state.notificationSettings\n    }\n  };\n  for (const optimisticUpdate of state.optimisticUpdates) {\n    switch (optimisticUpdate.type) {\n      case \"create-thread\": {\n        result.threads[optimisticUpdate.thread.id] = optimisticUpdate.thread;\n        break;\n      }\n      case \"edit-thread-metadata\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        if (thread.updatedAt !== void 0 && thread.updatedAt > optimisticUpdate.updatedAt) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          updatedAt: optimisticUpdate.updatedAt,\n          metadata: {\n            ...thread.metadata,\n            ...optimisticUpdate.metadata\n          }\n        };\n        break;\n      }\n      case \"mark-thread-as-resolved\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          resolved: true\n        };\n        break;\n      }\n      case \"mark-thread-as-unresolved\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        if (thread.deletedAt !== void 0) {\n          break;\n        }\n        result.threads[thread.id] = {\n          ...thread,\n          resolved: false\n        };\n        break;\n      }\n      case \"create-comment\": {\n        const thread = result.threads[optimisticUpdate.comment.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = upsertComment(\n          thread,\n          optimisticUpdate.comment\n        );\n        const inboxNotification = Object.values(result.inboxNotifications).find(\n          (notification) => notification.kind === \"thread\" && notification.threadId === thread.id\n        );\n        if (inboxNotification === void 0) {\n          break;\n        }\n        result.inboxNotifications[inboxNotification.id] = {\n          ...inboxNotification,\n          notifiedAt: optimisticUpdate.comment.createdAt,\n          readAt: optimisticUpdate.comment.createdAt\n        };\n        break;\n      }\n      case \"edit-comment\": {\n        const thread = result.threads[optimisticUpdate.comment.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = upsertComment(\n          thread,\n          optimisticUpdate.comment\n        );\n        break;\n      }\n      case \"delete-comment\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = deleteComment(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.deletedAt\n        );\n        break;\n      }\n      case \"delete-thread\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[optimisticUpdate.threadId] = {\n          ...result.threads[optimisticUpdate.threadId],\n          deletedAt: optimisticUpdate.deletedAt,\n          updatedAt: optimisticUpdate.deletedAt,\n          comments: []\n        };\n        break;\n      }\n      case \"add-reaction\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = addReaction(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.reaction\n        );\n        break;\n      }\n      case \"remove-reaction\": {\n        const thread = result.threads[optimisticUpdate.threadId];\n        if (thread === void 0) {\n          break;\n        }\n        result.threads[thread.id] = removeReaction(\n          thread,\n          optimisticUpdate.commentId,\n          optimisticUpdate.emoji,\n          optimisticUpdate.userId,\n          optimisticUpdate.removedAt\n        );\n        break;\n      }\n      case \"mark-inbox-notification-as-read\": {\n        result.inboxNotifications[optimisticUpdate.inboxNotificationId] = {\n          ...state.inboxNotifications[optimisticUpdate.inboxNotificationId],\n          readAt: optimisticUpdate.readAt\n        };\n        break;\n      }\n      case \"mark-all-inbox-notifications-as-read\": {\n        for (const id in result.inboxNotifications) {\n          result.inboxNotifications[id] = {\n            ...result.inboxNotifications[id],\n            readAt: optimisticUpdate.readAt\n          };\n        }\n        break;\n      }\n      case \"delete-inbox-notification\": {\n        const {\n          [optimisticUpdate.inboxNotificationId]: _,\n          ...inboxNotifications\n        } = result.inboxNotifications;\n        result.inboxNotifications = inboxNotifications;\n        break;\n      }\n      case \"delete-all-inbox-notifications\": {\n        result.inboxNotifications = {};\n        break;\n      }\n      case \"update-notification-settings\": {\n        result.notificationSettings[optimisticUpdate.roomId] = {\n          ...result.notificationSettings[optimisticUpdate.roomId],\n          ...optimisticUpdate.settings\n        };\n      }\n    }\n  }\n  return result;\n}\nfunction applyThreadUpdates(existingThreads, updates) {\n  const updatedThreads = { ...existingThreads };\n  updates.newThreads.forEach((thread) => {\n    const existingThread = updatedThreads[thread.id];\n    if (existingThread) {\n      const result = compareThreads(existingThread, thread);\n      if (result === 1) return;\n    }\n    updatedThreads[thread.id] = thread;\n  });\n  updates.deletedThreads.forEach(({ id, deletedAt }) => {\n    const existingThread = updatedThreads[id];\n    if (existingThread === void 0) return;\n    existingThread.deletedAt = deletedAt;\n    existingThread.updatedAt = deletedAt;\n    existingThread.comments = [];\n  });\n  return updatedThreads;\n}\nfunction applyNotificationsUpdates(existingInboxNotifications, updates) {\n  const updatedInboxNotifications = { ...existingInboxNotifications };\n  updates.newInboxNotifications.forEach((notification) => {\n    const existingNotification = updatedInboxNotifications[notification.id];\n    if (existingNotification) {\n      const result = compareInboxNotifications(\n        existingNotification,\n        notification\n      );\n      if (result === 1) return;\n    }\n    updatedInboxNotifications[notification.id] = notification;\n  });\n  updates.deletedNotifications.forEach(\n    ({ id }) => delete updatedInboxNotifications[id]\n  );\n  return updatedInboxNotifications;\n}\nfunction compareInboxNotifications(inboxNotificationA, inboxNotificationB) {\n  if (inboxNotificationA.notifiedAt > inboxNotificationB.notifiedAt) {\n    return 1;\n  } else if (inboxNotificationA.notifiedAt < inboxNotificationB.notifiedAt) {\n    return -1;\n  }\n  if (inboxNotificationA.readAt && inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt > inboxNotificationB.readAt ? 1 : inboxNotificationA.readAt < inboxNotificationB.readAt ? -1 : 0;\n  } else if (inboxNotificationA.readAt || inboxNotificationB.readAt) {\n    return inboxNotificationA.readAt ? 1 : -1;\n  }\n  return 0;\n}\nfunction upsertComment(thread, comment) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  if (comment.threadId !== thread.id) {\n    warn(\n      `Comment ${comment.id} does not belong to thread ${thread.id}`\n    );\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (existingComment2) => existingComment2.id === comment.id\n  );\n  if (existingComment === void 0) {\n    const updatedAt = new Date(\n      Math.max(thread.updatedAt?.getTime() || 0, comment.createdAt.getTime())\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt,\n      comments: [...thread.comments, comment]\n    };\n    return updatedThread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  if (existingComment.editedAt === void 0 || comment.editedAt === void 0 || existingComment.editedAt <= comment.editedAt) {\n    const updatedComments = thread.comments.map(\n      (existingComment2) => existingComment2.id === comment.id ? comment : existingComment2\n    );\n    const updatedThread = {\n      ...thread,\n      updatedAt: new Date(\n        Math.max(\n          thread.updatedAt?.getTime() || 0,\n          comment.editedAt?.getTime() || comment.createdAt.getTime()\n        )\n      ),\n      comments: updatedComments\n    };\n    return updatedThread;\n  }\n  return thread;\n}\nfunction deleteComment(thread, commentId, deletedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      deletedAt,\n      body: void 0\n    } : comment\n  );\n  if (!updatedComments.some((comment) => comment.deletedAt === void 0)) {\n    return {\n      ...thread,\n      deletedAt,\n      updatedAt: deletedAt,\n      comments: []\n    };\n  }\n  return {\n    ...thread,\n    updatedAt: deletedAt,\n    comments: updatedComments\n  };\n}\nfunction addReaction(thread, commentId, reaction) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: upsertReaction(comment.reactions, reaction)\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(reaction.createdAt.getTime(), thread.updatedAt?.getTime() || 0)\n    ),\n    comments: updatedComments\n  };\n}\nfunction removeReaction(thread, commentId, emoji, userId, removedAt) {\n  if (thread.deletedAt !== void 0) {\n    return thread;\n  }\n  const existingComment = thread.comments.find(\n    (comment) => comment.id === commentId\n  );\n  if (existingComment === void 0) {\n    return thread;\n  }\n  if (existingComment.deletedAt !== void 0) {\n    return thread;\n  }\n  const updatedComments = thread.comments.map(\n    (comment) => comment.id === commentId ? {\n      ...comment,\n      reactions: comment.reactions.map(\n        (reaction) => reaction.emoji === emoji ? {\n          ...reaction,\n          users: reaction.users.filter((user) => user.id !== userId)\n        } : reaction\n      ).filter((reaction) => reaction.users.length > 0)\n      // Remove reactions with no users left\n    } : comment\n  );\n  return {\n    ...thread,\n    updatedAt: new Date(\n      Math.max(removedAt.getTime(), thread.updatedAt?.getTime() || 0)\n    ),\n    comments: updatedComments\n  };\n}\nfunction upsertReaction(reactions, reaction) {\n  const existingReaction = reactions.find(\n    (existingReaction2) => existingReaction2.emoji === reaction.emoji\n  );\n  if (existingReaction === void 0) {\n    return [\n      ...reactions,\n      {\n        emoji: reaction.emoji,\n        createdAt: reaction.createdAt,\n        users: [{ id: reaction.userId }]\n      }\n    ];\n  }\n  if (existingReaction.users.some((user) => user.id === reaction.userId) === false) {\n    return reactions.map(\n      (existingReaction2) => existingReaction2.emoji === reaction.emoji ? {\n        ...existingReaction2,\n        users: [...existingReaction2.users, { id: reaction.userId }]\n      } : existingReaction2\n    );\n  }\n  return reactions;\n}\n\n// src/client.ts\nvar MIN_THROTTLE = 16;\nvar MAX_THROTTLE = 1e3;\nvar DEFAULT_THROTTLE = 100;\nvar MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT = 15e3;\nvar MIN_LOST_CONNECTION_TIMEOUT = 200;\nvar RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT = 1e3;\nvar MAX_LOST_CONNECTION_TIMEOUT = 3e4;\nvar DEFAULT_LOST_CONNECTION_TIMEOUT = 5e3;\nvar RESOLVE_USERS_BATCH_DELAY = 50;\nvar RESOLVE_ROOMS_INFO_BATCH_DELAY = 50;\nfunction getBaseUrl(baseUrl) {\n  if (typeof baseUrl === \"string\" && baseUrl.startsWith(\"http\")) {\n    return baseUrl;\n  } else {\n    return DEFAULT_BASE_URL;\n  }\n}\nfunction getAuthBearerHeaderFromAuthValue(authValue) {\n  if (authValue.type === \"public\") {\n    return authValue.publicApiKey;\n  } else {\n    return authValue.token.raw;\n  }\n}\nfunction createClient(options) {\n  const clientOptions = options;\n  const throttleDelay = getThrottle(clientOptions.throttle ?? DEFAULT_THROTTLE);\n  const lostConnectionTimeout = getLostConnectionTimeout(\n    clientOptions.lostConnectionTimeout ?? DEFAULT_LOST_CONNECTION_TIMEOUT\n  );\n  const backgroundKeepAliveTimeout = getBackgroundKeepAliveTimeout(\n    clientOptions.backgroundKeepAliveTimeout\n  );\n  const baseUrl = getBaseUrl(clientOptions.baseUrl);\n  const authManager = createAuthManager(options);\n  const roomsById = /* @__PURE__ */ new Map();\n  function teardownRoom(room) {\n    unlinkDevTools(room.id);\n    roomsById.delete(room.id);\n    room.destroy();\n  }\n  function leaseRoom(details) {\n    const leave = () => {\n      const self = leave;\n      if (!details.unsubs.delete(self)) {\n        warn(\n          \"This leave function was already called. Calling it more than once has no effect.\"\n        );\n      } else {\n        if (details.unsubs.size === 0) {\n          teardownRoom(details.room);\n        }\n      }\n    };\n    details.unsubs.add(leave);\n    return {\n      room: details.room,\n      leave\n    };\n  }\n  function enterRoom(roomId, ...args) {\n    const existing = roomsById.get(roomId);\n    if (existing !== void 0) {\n      return leaseRoom(existing);\n    }\n    const options2 = args[0] ?? {};\n    const initialPresence = (typeof options2.initialPresence === \"function\" ? options2.initialPresence(roomId) : options2.initialPresence) ?? {};\n    const initialStorage = (typeof options2.initialStorage === \"function\" ? options2.initialStorage(roomId) : options2.initialStorage) ?? {};\n    const newRoom = createRoom(\n      { initialPresence, initialStorage },\n      {\n        roomId,\n        throttleDelay,\n        lostConnectionTimeout,\n        backgroundKeepAliveTimeout,\n        polyfills: clientOptions.polyfills,\n        delegates: clientOptions.mockedDelegates ?? {\n          createSocket: makeCreateSocketDelegateForRoom(\n            roomId,\n            baseUrl,\n            clientOptions.polyfills?.WebSocket\n          ),\n          authenticate: makeAuthDelegateForRoom(roomId, authManager)\n        },\n        enableDebugLogging: clientOptions.enableDebugLogging,\n        unstable_batchedUpdates: options2?.unstable_batchedUpdates,\n        baseUrl,\n        unstable_fallbackToHTTP: !!clientOptions.unstable_fallbackToHTTP,\n        unstable_streamData: !!clientOptions.unstable_streamData\n      }\n    );\n    const newRoomDetails = {\n      room: newRoom,\n      unsubs: /* @__PURE__ */ new Set()\n    };\n    roomsById.set(roomId, newRoomDetails);\n    setupDevTools(() => Array.from(roomsById.keys()));\n    linkDevTools(roomId, newRoom);\n    const shouldConnect = options2.autoConnect ?? true;\n    if (shouldConnect) {\n      if (typeof atob === \"undefined\") {\n        if (clientOptions.polyfills?.atob === void 0) {\n          throw new Error(\n            \"You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill\"\n          );\n        }\n        global.atob = clientOptions.polyfills.atob;\n      }\n      newRoom.connect();\n    }\n    return leaseRoom(newRoomDetails);\n  }\n  function getRoom(roomId) {\n    const room = roomsById.get(roomId)?.room;\n    return room ? room : null;\n  }\n  function logout() {\n    authManager.reset();\n    for (const { room } of roomsById.values()) {\n      if (!isIdle(room.getStatus())) {\n        room.reconnect();\n      }\n    }\n  }\n  const currentUserIdStore = createStore(null);\n  const {\n    getInboxNotifications,\n    getUnreadInboxNotificationsCount,\n    markAllInboxNotificationsAsRead,\n    markInboxNotificationAsRead,\n    deleteAllInboxNotifications,\n    deleteInboxNotification\n  } = createNotificationsApi({\n    baseUrl,\n    fetcher: clientOptions.polyfills?.fetch || /* istanbul ignore next */\n    fetch,\n    authManager,\n    currentUserIdStore\n  });\n  const cacheStore = createClientStore();\n  const resolveUsers = clientOptions.resolveUsers;\n  const warnIfNoResolveUsers = createDevelopmentWarning(\n    () => !resolveUsers,\n    \"Set the resolveUsers option in createClient to specify user info.\"\n  );\n  const usersStore = createBatchStore(\n    async (batchedUserIds) => {\n      const userIds = batchedUserIds.flat();\n      const users = await resolveUsers?.({ userIds });\n      warnIfNoResolveUsers();\n      return users ?? userIds.map(() => void 0);\n    },\n    { delay: RESOLVE_USERS_BATCH_DELAY }\n  );\n  const resolveRoomsInfo = clientOptions.resolveRoomsInfo;\n  const warnIfNoResolveRoomsInfo = createDevelopmentWarning(\n    () => !resolveRoomsInfo,\n    \"Set the resolveRoomsInfo option in createClient to specify room info.\"\n  );\n  const roomsInfoStore = createBatchStore(\n    async (batchedRoomIds) => {\n      const roomIds = batchedRoomIds.flat();\n      const roomsInfo = await resolveRoomsInfo?.({ roomIds });\n      warnIfNoResolveRoomsInfo();\n      return roomsInfo ?? roomIds.map(() => void 0);\n    },\n    { delay: RESOLVE_ROOMS_INFO_BATCH_DELAY }\n  );\n  return Object.defineProperty(\n    {\n      enterRoom,\n      getRoom,\n      logout,\n      // Internal\n      [kInternal]: {\n        notifications: {\n          getInboxNotifications,\n          getUnreadInboxNotificationsCount,\n          markAllInboxNotificationsAsRead,\n          markInboxNotificationAsRead,\n          deleteAllInboxNotifications,\n          deleteInboxNotification\n        },\n        currentUserIdStore,\n        resolveMentionSuggestions: clientOptions.resolveMentionSuggestions,\n        cacheStore,\n        usersStore,\n        roomsInfoStore,\n        getRoomIds() {\n          return Array.from(roomsById.keys());\n        }\n      }\n    },\n    kInternal,\n    {\n      enumerable: false\n    }\n  );\n}\nvar NotificationsApiError = class extends Error {\n  constructor(message, status, details) {\n    super(message);\n    this.message = message;\n    this.status = status;\n    this.details = details;\n  }\n};\nfunction checkBounds(option, value, min, max, recommendedMin) {\n  if (typeof value !== \"number\" || value < min || max !== void 0 && value > max) {\n    throw new Error(\n      max !== void 0 ? `${option} should be between ${recommendedMin ?? min} and ${max}.` : `${option} should be at least ${recommendedMin ?? min}.`\n    );\n  }\n  return value;\n}\nfunction getBackgroundKeepAliveTimeout(value) {\n  if (value === void 0) return void 0;\n  return checkBounds(\n    \"backgroundKeepAliveTimeout\",\n    value,\n    MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT\n  );\n}\nfunction getThrottle(value) {\n  return checkBounds(\"throttle\", value, MIN_THROTTLE, MAX_THROTTLE);\n}\nfunction getLostConnectionTimeout(value) {\n  return checkBounds(\n    \"lostConnectionTimeout\",\n    value,\n    MIN_LOST_CONNECTION_TIMEOUT,\n    MAX_LOST_CONNECTION_TIMEOUT,\n    RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT\n  );\n}\nfunction createDevelopmentWarning(condition, ...args) {\n  let hasWarned = false;\n  if (true) {\n    return () => {\n      if (!hasWarned && (typeof condition === \"function\" ? condition() : condition)) {\n        warn(...args);\n        hasWarned = true;\n      }\n    };\n  } else {}\n}\n\n// src/comments/comment-body.ts\nfunction isCommentBodyParagraph(element) {\n  return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyText(element) {\n  return !(\"type\" in element) && \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n  return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n  return \"type\" in element && element.type === \"link\";\n}\nvar commentBodyElementsGuards = {\n  paragraph: isCommentBodyParagraph,\n  text: isCommentBodyText,\n  link: isCommentBodyLink,\n  mention: isCommentBodyMention\n};\nvar commentBodyElementsTypes = {\n  paragraph: \"block\",\n  text: \"inline\",\n  link: \"inline\",\n  mention: \"inline\"\n};\nfunction traverseCommentBody(body, elementOrVisitor, possiblyVisitor) {\n  if (!body || !body?.content) {\n    return;\n  }\n  const element = typeof elementOrVisitor === \"string\" ? elementOrVisitor : void 0;\n  const type = element ? commentBodyElementsTypes[element] : \"all\";\n  const guard = element ? commentBodyElementsGuards[element] : () => true;\n  const visitor = typeof elementOrVisitor === \"function\" ? elementOrVisitor : possiblyVisitor;\n  for (const block of body.content) {\n    if (type === \"all\" || type === \"block\") {\n      if (guard(block)) {\n        visitor?.(block);\n      }\n    }\n    if (type === \"all\" || type === \"inline\") {\n      for (const inline of block.children) {\n        if (guard(inline)) {\n          visitor?.(inline);\n        }\n      }\n    }\n  }\n}\nfunction getMentionedIdsFromCommentBody(body) {\n  const mentionedIds = /* @__PURE__ */ new Set();\n  traverseCommentBody(\n    body,\n    \"mention\",\n    (mention) => mentionedIds.add(mention.id)\n  );\n  return Array.from(mentionedIds);\n}\nasync function resolveUsersInCommentBody(body, resolveUsers) {\n  const resolvedUsers = /* @__PURE__ */ new Map();\n  if (!resolveUsers) {\n    return resolvedUsers;\n  }\n  const userIds = getMentionedIdsFromCommentBody(body);\n  const users = await resolveUsers({\n    userIds\n  });\n  for (const [index, userId] of userIds.entries()) {\n    const user = users?.[index];\n    if (user) {\n      resolvedUsers.set(userId, user);\n    }\n  }\n  return resolvedUsers;\n}\nvar htmlEscapables = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar htmlEscapablesRegex = new RegExp(\n  Object.keys(htmlEscapables).map((entity) => `\\\\${entity}`).join(\"|\"),\n  \"g\"\n);\nfunction htmlSafe(value) {\n  return new HtmlSafeString([String(value)], []);\n}\nfunction joinHtml(strings) {\n  if (strings.length <= 0) {\n    return new HtmlSafeString([\"\"], []);\n  }\n  return new HtmlSafeString(\n    [\"\", ...Array(strings.length - 1).fill(\"\"), \"\"],\n    strings\n  );\n}\nfunction escapeHtml(value) {\n  if (value instanceof HtmlSafeString) {\n    return value.toString();\n  }\n  if (Array.isArray(value)) {\n    return joinHtml(value).toString();\n  }\n  return String(value).replace(\n    htmlEscapablesRegex,\n    (character) => htmlEscapables[character]\n  );\n}\nvar HtmlSafeString = class {\n  constructor(strings, values) {\n    this._strings = strings;\n    this._values = values;\n  }\n  toString() {\n    return this._strings.reduce((result, str, i) => {\n      return result + escapeHtml(nn(this._values[i - 1])) + str;\n    });\n  }\n};\nfunction html(strings, ...values) {\n  return new HtmlSafeString(strings, values);\n}\nvar markdownEscapables = {\n  _: \"\\\\_\",\n  \"*\": \"\\\\*\",\n  \"#\": \"\\\\#\",\n  \"`\": \"\\\\`\",\n  \"~\": \"\\\\~\",\n  \"!\": \"\\\\!\",\n  \"|\": \"\\\\|\",\n  \"(\": \"\\\\(\",\n  \")\": \"\\\\)\",\n  \"{\": \"\\\\{\",\n  \"}\": \"\\\\}\",\n  \"[\": \"\\\\[\",\n  \"]\": \"\\\\]\"\n};\nvar markdownEscapablesRegex = new RegExp(\n  Object.keys(markdownEscapables).map((entity) => `\\\\${entity}`).join(\"|\"),\n  \"g\"\n);\nfunction joinMarkdown(strings) {\n  if (strings.length <= 0) {\n    return new MarkdownSafeString([\"\"], []);\n  }\n  return new MarkdownSafeString(\n    [\"\", ...Array(strings.length - 1).fill(\"\"), \"\"],\n    strings\n  );\n}\nfunction escapeMarkdown(value) {\n  if (value instanceof MarkdownSafeString) {\n    return value.toString();\n  }\n  if (Array.isArray(value)) {\n    return joinMarkdown(value).toString();\n  }\n  return String(value).replace(\n    markdownEscapablesRegex,\n    (character) => markdownEscapables[character]\n  );\n}\nvar MarkdownSafeString = class {\n  constructor(strings, values) {\n    this._strings = strings;\n    this._values = values;\n  }\n  toString() {\n    return this._strings.reduce((result, str, i) => {\n      return result + escapeMarkdown(nn(this._values[i - 1])) + str;\n    });\n  }\n};\nfunction markdown(strings, ...values) {\n  return new MarkdownSafeString(strings, values);\n}\nfunction toAbsoluteUrl(url) {\n  if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n    return url;\n  } else if (url.startsWith(\"www.\")) {\n    return \"https://\" + url;\n  }\n  return;\n}\nvar stringifyCommentBodyPlainElements = {\n  paragraph: ({ children }) => children,\n  text: ({ element }) => element.text,\n  link: ({ element }) => element.text ?? element.url,\n  mention: ({ element, user }) => {\n    return `@${user?.name ?? element.id}`;\n  }\n};\nvar stringifyCommentBodyHtmlElements = {\n  paragraph: ({ children }) => {\n    return children ? html`<p>${htmlSafe(children)}</p>` : children;\n  },\n  text: ({ element }) => {\n    let children = element.text;\n    if (!children) {\n      return children;\n    }\n    if (element.bold) {\n      children = html`<strong>${children}</strong>`;\n    }\n    if (element.italic) {\n      children = html`<em>${children}</em>`;\n    }\n    if (element.strikethrough) {\n      children = html`<s>${children}</s>`;\n    }\n    if (element.code) {\n      children = html`<code>${children}</code>`;\n    }\n    return children;\n  },\n  link: ({ element, href }) => {\n    return html`<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\">${element.text ?? element.url}</a>`;\n  },\n  mention: ({ element, user }) => {\n    return html`<span data-mention>@${user?.name ?? element.id}</span>`;\n  }\n};\nvar stringifyCommentBodyMarkdownElements = {\n  paragraph: ({ children }) => {\n    return children;\n  },\n  text: ({ element }) => {\n    let children = element.text;\n    if (!children) {\n      return children;\n    }\n    if (element.bold) {\n      children = markdown`**${children}**`;\n    }\n    if (element.italic) {\n      children = markdown`_${children}_`;\n    }\n    if (element.strikethrough) {\n      children = markdown`~~${children}~~`;\n    }\n    if (element.code) {\n      children = markdown`\\`${children}\\``;\n    }\n    return children;\n  },\n  link: ({ element, href }) => {\n    return markdown`[${element.text ?? element.url}](${href})`;\n  },\n  mention: ({ element, user }) => {\n    return markdown`@${user?.name ?? element.id}`;\n  }\n};\nasync function stringifyCommentBody(body, options) {\n  const format = options?.format ?? \"plain\";\n  const separator = options?.separator ?? (format === \"markdown\" ? \"\\n\\n\" : \"\\n\");\n  const elements = {\n    ...format === \"html\" ? stringifyCommentBodyHtmlElements : format === \"markdown\" ? stringifyCommentBodyMarkdownElements : stringifyCommentBodyPlainElements,\n    ...options?.elements\n  };\n  const resolvedUsers = await resolveUsersInCommentBody(\n    body,\n    options?.resolveUsers\n  );\n  const blocks = body.content.flatMap((block, blockIndex) => {\n    switch (block.type) {\n      case \"paragraph\": {\n        const inlines = block.children.flatMap((inline, inlineIndex) => {\n          if (isCommentBodyMention(inline)) {\n            return inline.id ? [\n              elements.mention(\n                {\n                  element: inline,\n                  user: resolvedUsers.get(inline.id)\n                },\n                inlineIndex\n              )\n            ] : [];\n          }\n          if (isCommentBodyLink(inline)) {\n            return [\n              elements.link(\n                {\n                  element: inline,\n                  href: toAbsoluteUrl(inline.url) ?? inline.url\n                },\n                inlineIndex\n              )\n            ];\n          }\n          if (isCommentBodyText(inline)) {\n            return [elements.text({ element: inline }, inlineIndex)];\n          }\n          return [];\n        });\n        return [\n          elements.paragraph(\n            { element: block, children: inlines.join(\"\") },\n            blockIndex\n          )\n        ];\n      }\n      default:\n        return [];\n    }\n  });\n  return blocks.join(separator);\n}\n\n// src/crdts/utils.ts\nfunction toPlainLson(lson) {\n  if (lson instanceof LiveObject) {\n    return {\n      liveblocksType: \"LiveObject\",\n      data: Object.fromEntries(\n        Object.entries(lson.toObject()).flatMap(\n          ([key, value]) => value !== void 0 ? [[key, toPlainLson(value)]] : []\n        )\n      )\n    };\n  } else if (lson instanceof LiveMap) {\n    return {\n      liveblocksType: \"LiveMap\",\n      data: Object.fromEntries(\n        [...lson].map(([key, value]) => [key, toPlainLson(value)])\n      )\n    };\n  } else if (lson instanceof LiveList) {\n    return {\n      liveblocksType: \"LiveList\",\n      data: [...lson].map((item) => toPlainLson(item))\n    };\n  } else {\n    return lson;\n  }\n}\n\n// src/immutable.ts\nfunction lsonObjectToJson(obj) {\n  const result = {};\n  for (const key in obj) {\n    const val = obj[key];\n    if (val !== void 0) {\n      result[key] = lsonToJson(val);\n    }\n  }\n  return result;\n}\nfunction liveObjectToJson(liveObject) {\n  return lsonObjectToJson(liveObject.toObject());\n}\nfunction liveMapToJson(map) {\n  const result = {};\n  for (const [key, value] of map.entries()) {\n    result[key] = lsonToJson(value);\n  }\n  return result;\n}\nfunction lsonListToJson(value) {\n  return value.map(lsonToJson);\n}\nfunction liveListToJson(value) {\n  return lsonListToJson(value.toArray());\n}\nfunction lsonToJson(value) {\n  if (value instanceof LiveObject) {\n    return liveObjectToJson(value);\n  } else if (value instanceof LiveList) {\n    return liveListToJson(value);\n  } else if (value instanceof LiveMap) {\n    return liveMapToJson(value);\n  } else if (value instanceof LiveRegister) {\n    return value.data;\n  }\n  if (Array.isArray(value)) {\n    return lsonListToJson(value);\n  } else if (isPlainObject(value)) {\n    return lsonObjectToJson(value);\n  }\n  return value;\n}\nfunction deepLiveify(value) {\n  if (Array.isArray(value)) {\n    return new LiveList(value.map(deepLiveify));\n  } else if (isPlainObject(value)) {\n    const init = {};\n    for (const key in value) {\n      const val = value[key];\n      if (val === void 0) {\n        continue;\n      }\n      init[key] = deepLiveify(val);\n    }\n    return new LiveObject(init);\n  } else {\n    return value;\n  }\n}\nfunction patchLiveList(liveList, prev, next) {\n  let i = 0;\n  let prevEnd = prev.length - 1;\n  let nextEnd = next.length - 1;\n  let prevNode = prev[0];\n  let nextNode = next[0];\n  outer: {\n    while (prevNode === nextNode) {\n      ++i;\n      if (i > prevEnd || i > nextEnd) {\n        break outer;\n      }\n      prevNode = prev[i];\n      nextNode = next[i];\n    }\n    prevNode = prev[prevEnd];\n    nextNode = next[nextEnd];\n    while (prevNode === nextNode) {\n      prevEnd--;\n      nextEnd--;\n      if (i > prevEnd || i > nextEnd) {\n        break outer;\n      }\n      prevNode = prev[prevEnd];\n      nextNode = next[nextEnd];\n    }\n  }\n  if (i > prevEnd) {\n    if (i <= nextEnd) {\n      while (i <= nextEnd) {\n        liveList.insert(deepLiveify(next[i]), i);\n        i++;\n      }\n    }\n  } else if (i > nextEnd) {\n    let localI = i;\n    while (localI <= prevEnd) {\n      liveList.delete(i);\n      localI++;\n    }\n  } else {\n    while (i <= prevEnd && i <= nextEnd) {\n      prevNode = prev[i];\n      nextNode = next[i];\n      const liveListNode = liveList.get(i);\n      if (isLiveObject(liveListNode) && isPlainObject(prevNode) && isPlainObject(nextNode)) {\n        patchLiveObject(liveListNode, prevNode, nextNode);\n      } else {\n        liveList.set(i, deepLiveify(nextNode));\n      }\n      i++;\n    }\n    while (i <= nextEnd) {\n      liveList.insert(deepLiveify(next[i]), i);\n      i++;\n    }\n    let localI = i;\n    while (localI <= prevEnd) {\n      liveList.delete(i);\n      localI++;\n    }\n  }\n}\nfunction patchLiveObjectKey(liveObject, key, prev, next) {\n  if (true) {\n    const nonSerializableValue = findNonSerializableValue(next);\n    if (nonSerializableValue) {\n      error2(\n        `New state path: '${nonSerializableValue.path}' value: '${String(\n          nonSerializableValue.value\n        )}' is not serializable.\nOnly serializable value can be synced with Liveblocks.`\n      );\n      return;\n    }\n  }\n  const value = liveObject.get(key);\n  if (next === void 0) {\n    liveObject.delete(key);\n  } else if (value === void 0) {\n    liveObject.set(key, deepLiveify(next));\n  } else if (prev === next) {\n    return;\n  } else if (isLiveList(value) && Array.isArray(prev) && Array.isArray(next)) {\n    patchLiveList(value, prev, next);\n  } else if (isLiveObject(value) && isPlainObject(prev) && isPlainObject(next)) {\n    patchLiveObject(value, prev, next);\n  } else {\n    liveObject.set(key, deepLiveify(next));\n  }\n}\nfunction patchLiveObject(root, prev, next) {\n  const updates = {};\n  for (const key in next) {\n    patchLiveObjectKey(root, key, prev[key], next[key]);\n  }\n  for (const key in prev) {\n    if (next[key] === void 0) {\n      root.delete(key);\n    }\n  }\n  if (Object.keys(updates).length > 0) {\n    root.update(updates);\n  }\n}\nfunction getParentsPath(node) {\n  const path = [];\n  while (node.parent.type === \"HasParent\") {\n    if (isLiveList(node.parent.node)) {\n      path.push(node.parent.node._indexOfPosition(node.parent.key));\n    } else {\n      path.push(node.parent.key);\n    }\n    node = node.parent.node;\n  }\n  return path;\n}\nfunction legacy_patchImmutableObject(state, updates) {\n  return updates.reduce(\n    (state2, update) => legacy_patchImmutableObjectWithUpdate(state2, update),\n    state\n  );\n}\nfunction legacy_patchImmutableObjectWithUpdate(state, update) {\n  const path = getParentsPath(update.node);\n  return legacy_patchImmutableNode(state, path, update);\n}\nfunction legacy_patchImmutableNode(state, path, update) {\n  const pathItem = path.pop();\n  if (pathItem === void 0) {\n    switch (update.type) {\n      case \"LiveObject\": {\n        if (!isJsonObject(state)) {\n          throw new Error(\n            \"Internal: received update on LiveObject but state was not an object\"\n          );\n        }\n        const newState = Object.assign({}, state);\n        for (const key in update.updates) {\n          if (update.updates[key]?.type === \"update\") {\n            const val = update.node.get(key);\n            if (val !== void 0) {\n              newState[key] = lsonToJson(val);\n            }\n          } else if (update.updates[key]?.type === \"delete\") {\n            delete newState[key];\n          }\n        }\n        return newState;\n      }\n      case \"LiveList\": {\n        if (!Array.isArray(state)) {\n          throw new Error(\n            \"Internal: received update on LiveList but state was not an array\"\n          );\n        }\n        let newState = state.map((x) => x);\n        for (const listUpdate of update.updates) {\n          if (listUpdate.type === \"set\") {\n            newState = newState.map(\n              (item, index) => index === listUpdate.index ? lsonToJson(listUpdate.item) : item\n            );\n          } else if (listUpdate.type === \"insert\") {\n            if (listUpdate.index === newState.length) {\n              newState.push(lsonToJson(listUpdate.item));\n            } else {\n              newState = [\n                ...newState.slice(0, listUpdate.index),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index)\n              ];\n            }\n          } else if (listUpdate.type === \"delete\") {\n            newState.splice(listUpdate.index, 1);\n          } else if (listUpdate.type === \"move\") {\n            if (listUpdate.previousIndex > listUpdate.index) {\n              newState = [\n                ...newState.slice(0, listUpdate.index),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index, listUpdate.previousIndex),\n                ...newState.slice(listUpdate.previousIndex + 1)\n              ];\n            } else {\n              newState = [\n                ...newState.slice(0, listUpdate.previousIndex),\n                ...newState.slice(\n                  listUpdate.previousIndex + 1,\n                  listUpdate.index + 1\n                ),\n                lsonToJson(listUpdate.item),\n                ...newState.slice(listUpdate.index + 1)\n              ];\n            }\n          }\n        }\n        return newState;\n      }\n      case \"LiveMap\": {\n        if (!isJsonObject(state)) {\n          throw new Error(\n            \"Internal: received update on LiveMap but state was not an object\"\n          );\n        }\n        const newState = Object.assign({}, state);\n        for (const key in update.updates) {\n          if (update.updates[key]?.type === \"update\") {\n            const value = update.node.get(key);\n            if (value !== void 0) {\n              newState[key] = lsonToJson(value);\n            }\n          } else if (update.updates[key]?.type === \"delete\") {\n            delete newState[key];\n          }\n        }\n        return newState;\n      }\n    }\n  }\n  if (Array.isArray(state)) {\n    const newArray = [...state];\n    newArray[pathItem] = legacy_patchImmutableNode(\n      state[pathItem],\n      path,\n      update\n    );\n    return newArray;\n  } else if (isJsonObject(state)) {\n    const node = state[pathItem];\n    if (node === void 0) {\n      return state;\n    } else {\n      const stateAsObj = state;\n      return {\n        ...stateAsObj,\n        [pathItem]: legacy_patchImmutableNode(node, path, update)\n      };\n    }\n  } else {\n    return state;\n  }\n}\n\n// src/lib/deprecation.ts\nvar _emittedDeprecationWarnings = /* @__PURE__ */ new Set();\nfunction deprecate(message, key = message) {\n  if (true) {\n    if (!_emittedDeprecationWarnings.has(key)) {\n      _emittedDeprecationWarnings.add(key);\n      errorWithTitle(\"Deprecation warning\", message);\n    }\n  }\n}\nfunction deprecateIf(condition, message, key = message) {\n  if (true) {\n    if (condition) {\n      deprecate(message, key);\n    }\n  }\n}\nfunction throwUsageError(message) {\n  if (true) {\n    const usageError = new Error(message);\n    usageError.name = \"Usage error\";\n    errorWithTitle(\"Usage error\", message);\n    throw usageError;\n  }\n}\nfunction errorIf(condition, message) {\n  if (true) {\n    if (condition) {\n      throwUsageError(message);\n    }\n  }\n}\n\n// src/lib/Poller.ts\nfunction makePoller(callback) {\n  let context = {\n    state: \"stopped\",\n    timeoutHandle: null,\n    interval: null,\n    lastScheduledAt: null,\n    remainingInterval: null\n  };\n  function poll() {\n    if (context.state === \"running\") {\n      schedule(context.interval);\n    }\n    void callback();\n  }\n  function schedule(interval) {\n    context = {\n      state: \"running\",\n      interval: context.state !== \"stopped\" ? context.interval : interval,\n      lastScheduledAt: performance.now(),\n      timeoutHandle: setTimeout(poll, interval),\n      remainingInterval: null\n    };\n  }\n  function scheduleRemaining(remaining) {\n    if (context.state !== \"paused\") {\n      return;\n    }\n    context = {\n      state: \"running\",\n      interval: context.interval,\n      lastScheduledAt: context.lastScheduledAt,\n      timeoutHandle: setTimeout(poll, remaining),\n      remainingInterval: null\n    };\n  }\n  function start(interval) {\n    if (context.state === \"running\") {\n      return;\n    }\n    schedule(interval);\n  }\n  function restart(interval) {\n    stop();\n    start(interval);\n  }\n  function pause() {\n    if (context.state !== \"running\") {\n      return;\n    }\n    clearTimeout(context.timeoutHandle);\n    context = {\n      state: \"paused\",\n      interval: context.interval,\n      lastScheduledAt: context.lastScheduledAt,\n      timeoutHandle: null,\n      remainingInterval: context.interval - (performance.now() - context.lastScheduledAt)\n    };\n  }\n  function resume() {\n    if (context.state !== \"paused\") {\n      return;\n    }\n    scheduleRemaining(context.remainingInterval);\n  }\n  function stop() {\n    if (context.state === \"stopped\") {\n      return;\n    }\n    if (context.timeoutHandle) {\n      clearTimeout(context.timeoutHandle);\n    }\n    context = {\n      state: \"stopped\",\n      interval: null,\n      lastScheduledAt: null,\n      timeoutHandle: null,\n      remainingInterval: null\n    };\n  }\n  return {\n    start,\n    restart,\n    pause,\n    resume,\n    stop\n  };\n}\n\n// src/lib/shallow.ts\nfunction shallowArray(xs, ys) {\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (!Object.is(xs[i], ys[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction shallowObj(objA, objB) {\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null || Object.prototype.toString.call(objA) !== \"[object Object]\" || Object.prototype.toString.call(objB) !== \"[object Object]\") {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n  return keysA.every(\n    (key) => Object.prototype.hasOwnProperty.call(objB, key) && Object.is(objA[key], objB[key])\n  );\n}\nfunction shallow(a, b) {\n  if (Object.is(a, b)) {\n    return true;\n  }\n  const isArrayA = Array.isArray(a);\n  const isArrayB = Array.isArray(b);\n  if (isArrayA || isArrayB) {\n    if (!isArrayA || !isArrayB) {\n      return false;\n    }\n    return shallowArray(a, b);\n  }\n  return shallowObj(a, b);\n}\n\n// src/index.ts\ndetectDupes(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@liveblocks/core/dist/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@liveblocks/node/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/node/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Liveblocks: () => (/* binding */ Liveblocks),\n/* harmony export */   LiveblocksError: () => (/* binding */ LiveblocksError),\n/* harmony export */   WebhookHandler: () => (/* binding */ WebhookHandler),\n/* harmony export */   getMentionedIdsFromCommentBody: () => (/* reexport safe */ _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.getMentionedIdsFromCommentBody),\n/* harmony export */   stringifyCommentBody: () => (/* reexport safe */ _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.stringifyCommentBody)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liveblocks/core */ \"(action-browser)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var _stablelib_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/base64 */ \"(action-browser)/./node_modules/@stablelib/base64/lib/base64.js\");\n/* harmony import */ var fast_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-sha256 */ \"(action-browser)/./node_modules/fast-sha256/sha256.js\");\n// src/index.ts\n\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/node\";\nvar PKG_VERSION = \"2.3.0\";\nvar PKG_FORMAT = \"esm\";\n\n// src/client.ts\n\n\n// src/utils.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\nfunction getBaseUrl(baseUrl) {\n  if (typeof baseUrl === \"string\" && baseUrl.startsWith(\"http\")) {\n    return baseUrl;\n  } else {\n    return DEFAULT_BASE_URL;\n  }\n}\nasync function fetchPolyfill() {\n  return typeof globalThis.fetch !== \"undefined\" ? globalThis.fetch : (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/lib/index.mjs\"))).default;\n}\nfunction isNonEmpty(value) {\n  return typeof value === \"string\" && value.length > 0;\n}\nfunction assertNonEmpty(value, field) {\n  if (!isNonEmpty(value)) {\n    throw new Error(\n      `Invalid value for field \"${field}\". Please provide a non-empty string. For more information: https://liveblocks.io/docs/api-reference/liveblocks-node#authorize`\n    );\n  }\n}\nfunction assertSecretKey(value, field) {\n  if (!isNonEmpty(value) || !value.startsWith(\"sk_\")) {\n    throw new Error(\n      `Invalid value for field \"${field}\". Secret keys must start with \"sk_\". Please provide the secret key from your Liveblocks dashboard at https://liveblocks.io/dashboard/apikeys.`\n    );\n  }\n}\nfunction normalizeStatusCode(statusCode) {\n  if (statusCode >= 200 && statusCode < 300) {\n    return 200;\n  } else if (statusCode >= 500) {\n    return 503;\n  } else {\n    return 403;\n  }\n}\nfunction toURLSearchParams(params) {\n  const result = new URLSearchParams();\n  for (const [key, value] of Object.entries(params)) {\n    if (value !== void 0 && value !== null) {\n      result.set(key, value.toString());\n    }\n  }\n  return result;\n}\nfunction urljoin(baseUrl, path, params) {\n  const url2 = new URL(path, baseUrl);\n  if (params !== void 0) {\n    url2.search = (params instanceof URLSearchParams ? params : toURLSearchParams(params)).toString();\n  }\n  return url2.toString();\n}\nfunction url(strings, ...values) {\n  return strings.reduce(\n    (result, str, i) => result + encodeURIComponent(values[i - 1] ?? \"\") + str\n  );\n}\n\n// src/Session.ts\nvar ALL_PERMISSIONS = Object.freeze([\n  \"room:write\",\n  \"room:read\",\n  \"room:presence:write\",\n  \"comments:write\",\n  \"comments:read\"\n]);\nfunction isPermission(value) {\n  return ALL_PERMISSIONS.includes(value);\n}\nvar MAX_PERMS_PER_SET = 10;\nvar READ_ACCESS = Object.freeze([\n  \"room:read\",\n  \"room:presence:write\",\n  \"comments:read\"\n]);\nvar FULL_ACCESS = Object.freeze([\"room:write\", \"comments:write\"]);\nvar roomPatternRegex = /^([*]|[^*]{1,128}[*]?)$/;\nvar Session = class {\n  /** @internal */\n  constructor(postFn, userId, userInfo) {\n    this.FULL_ACCESS = FULL_ACCESS;\n    this.READ_ACCESS = READ_ACCESS;\n    /** @internal */\n    this._sealed = false;\n    /** @internal */\n    this._permissions = /* @__PURE__ */ new Map();\n    assertNonEmpty(userId, \"userId\");\n    this._postFn = postFn;\n    this._userId = userId;\n    this._userInfo = userInfo;\n  }\n  /** @internal */\n  getOrCreate(roomId) {\n    if (this._sealed) {\n      throw new Error(\"You can no longer change these permissions.\");\n    }\n    let perms = this._permissions.get(roomId);\n    if (perms) {\n      return perms;\n    } else {\n      if (this._permissions.size >= MAX_PERMS_PER_SET) {\n        throw new Error(\n          \"You cannot add permissions for more than 10 rooms in a single token\"\n        );\n      }\n      perms = /* @__PURE__ */ new Set();\n      this._permissions.set(roomId, perms);\n      return perms;\n    }\n  }\n  allow(roomIdOrPattern, newPerms) {\n    if (typeof roomIdOrPattern !== \"string\") {\n      throw new Error(\"Room name or pattern must be a string\");\n    }\n    if (!roomPatternRegex.test(roomIdOrPattern)) {\n      throw new Error(\"Invalid room name or pattern\");\n    }\n    if (newPerms.length === 0) {\n      throw new Error(\"Permission list cannot be empty\");\n    }\n    const existingPerms = this.getOrCreate(roomIdOrPattern);\n    for (const perm of newPerms) {\n      if (!isPermission(perm)) {\n        throw new Error(`Not a valid permission: ${perm}`);\n      }\n      existingPerms.add(perm);\n    }\n    return this;\n  }\n  /** @internal - For unit tests only */\n  hasPermissions() {\n    return this._permissions.size > 0;\n  }\n  /** @internal - For unit tests only */\n  seal() {\n    if (this._sealed) {\n      throw new Error(\n        \"You cannot reuse Session instances. Please create a new session every time.\"\n      );\n    }\n    this._sealed = true;\n  }\n  /** @internal - For unit tests only */\n  serializePermissions() {\n    return Object.fromEntries(\n      Array.from(this._permissions.entries()).map(([pat, perms]) => [\n        pat,\n        Array.from(perms)\n      ])\n    );\n  }\n  /**\n   * Call this to authorize the session to access Liveblocks. Note that this\n   * will return a Liveblocks \"access token\". Anyone that obtains such access\n   * token will have access to the allowed resources.\n   */\n  async authorize() {\n    this.seal();\n    if (!this.hasPermissions()) {\n      console.warn(\n        \"Access tokens without any permission will not be supported soon, you should use wildcards when the client requests a token for resources outside a room. See https://liveblocks.io/docs/errors/liveblocks-client/access-tokens-not-enough-permissions\"\n      );\n    }\n    try {\n      const resp = await this._postFn(url`/v2/authorize-user`, {\n        // Required\n        userId: this._userId,\n        permissions: this.serializePermissions(),\n        // Optional metadata\n        userInfo: this._userInfo\n      });\n      return {\n        status: normalizeStatusCode(resp.status),\n        body: await resp.text()\n      };\n    } catch (er) {\n      return {\n        status: 503,\n        body: 'Call to /v2/authorize-user failed. See \"error\" for more information.',\n        error: er\n      };\n    }\n  }\n};\n\n// src/client.ts\nvar Liveblocks = class {\n  /**\n   * Interact with the Liveblocks API from your Node.js backend.\n   */\n  constructor(options) {\n    const options_ = options;\n    const secret = options_.secret;\n    assertSecretKey(secret, \"secret\");\n    this._secret = secret;\n    this._baseUrl = new URL(getBaseUrl(options.baseUrl));\n  }\n  /** @internal */\n  async post(path, json) {\n    const url2 = urljoin(this._baseUrl, path);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`,\n      \"Content-Type\": \"application/json\"\n    };\n    const fetch = await fetchPolyfill();\n    const res = await fetch(url2, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(json)\n    });\n    return res;\n  }\n  /** @internal */\n  async put(path, json) {\n    const url2 = urljoin(this._baseUrl, path);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`,\n      \"Content-Type\": \"application/json\"\n    };\n    const fetch = await fetchPolyfill();\n    return await fetch(url2, {\n      method: \"PUT\",\n      headers,\n      body: JSON.stringify(json)\n    });\n  }\n  /** @internal */\n  async putBinary(path, body, params) {\n    const url2 = urljoin(this._baseUrl, path, params);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`,\n      \"Content-Type\": \"application/octet-stream\"\n    };\n    const fetch = await fetchPolyfill();\n    return await fetch(url2, { method: \"PUT\", headers, body });\n  }\n  /** @internal */\n  async delete(path) {\n    const url2 = urljoin(this._baseUrl, path);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`\n    };\n    const fetch = await fetchPolyfill();\n    const res = await fetch(url2, { method: \"DELETE\", headers });\n    return res;\n  }\n  /** @internal */\n  async get(path, params) {\n    const url2 = urljoin(this._baseUrl, path, params);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`\n    };\n    const fetch = await fetchPolyfill();\n    const res = await fetch(url2, { method: \"GET\", headers });\n    return res;\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Authentication\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Prepares a new session to authorize a user to access Liveblocks.\n   *\n   * IMPORTANT:\n   * Always make sure that you trust the user making the request to your\n   * backend before calling .prepareSession()!\n   *\n   * @param userId Tell Liveblocks the user ID of the user to authorize. Must\n   * uniquely identify the user account in your system. The uniqueness of this\n   * value will determine how many MAUs will be counted/billed.\n   *\n   * @param options.userInfo Custom metadata to attach to this user. Data you\n   * add here will be visible to all other clients in the room, through the\n   * `other.info` property.\n   *\n   */\n  prepareSession(userId, ...rest) {\n    const options = rest[0];\n    return new Session(this.post.bind(this), userId, options?.userInfo);\n  }\n  /**\n   * Call this to authenticate the user as an actor you want to allow to use\n   * Liveblocks.\n   *\n   * You should use this method only if you want to manage your permissions\n   * through the Liveblocks Permissions API. This method is more complicated to\n   * set up, but allows for finer-grained specification of permissions.\n   *\n   * Calling `.identifyUser()` only lets you securely identify a user (and what\n   * groups they belong to). What permissions this user will end up having is\n   * determined by whatever permissions you assign the user/group in your\n   * Liveblocks account, through the Permissions API:\n   * https://liveblocks.io/docs/rooms/permissions\n   *\n   * IMPORTANT:\n   * Always verify that you trust the user making the request before calling\n   * .identifyUser()!\n   *\n   * @param identity Tell Liveblocks the user ID of the user to authenticate.\n   * Must uniquely identify the user account in your system. The uniqueness of\n   * this value will determine how many MAUs will be counted/billed.\n   *\n   * If you also want to assign which groups this user belongs to, use the\n   * object form and specify the `groupIds` property. Those `groupIds` should\n   * match the groupIds you assigned permissions to via the Liveblocks\n   * Permissions API, see\n   * https://liveblocks.io/docs/rooms/permissions#permissions-levels-groups-accesses-example\n   *\n   * @param options.userInfo Custom metadata to attach to this user. Data you\n   * add here will be visible to all other clients in the room, through the\n   * `other.info` property.\n   */\n  // These fields define the security identity of the user. Whatever you pass in here will define which\n  async identifyUser(identity, ...rest) {\n    const options = rest[0];\n    const path = url`/v2/identify-user`;\n    const userId = typeof identity === \"string\" ? identity : identity.userId;\n    const groupIds = typeof identity === \"string\" ? void 0 : identity.groupIds;\n    assertNonEmpty(userId, \"userId\");\n    try {\n      const resp = await this.post(path, {\n        userId,\n        groupIds,\n        // Optional metadata\n        userInfo: options?.userInfo\n      });\n      return {\n        status: normalizeStatusCode(resp.status),\n        body: await resp.text()\n      };\n    } catch (er) {\n      return {\n        status: 503,\n        body: `Call to ${urljoin(\n          this._baseUrl,\n          path\n        )} failed. See \"error\" for more information.`,\n        error: er\n      };\n    }\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Room\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Returns a list of your rooms. The rooms are returned sorted by creation date, from newest to oldest. You can filter rooms by metadata, users accesses and groups accesses.\n   * @param params.limit (optional) A limit on the number of rooms to be returned. The limit can range between 1 and 100, and defaults to 20.\n   * @param params.startingAfter (optional) A cursor used for pagination. You get the value from the response of the previous page.\n   * @param params.userId (optional) A filter on users accesses.\n   * @param params.metadata (optional) A filter on metadata. Multiple metadata keys can be used to filter rooms.\n   * @param params.groupIds (optional) A filter on groups accesses. Multiple groups can be used.\n   * @param params.query (optional) A query to filter rooms by. It is based on our query language. You can filter by metadata and room ID.\n   * @returns A list of rooms.\n   */\n  async getRooms(params = {}) {\n    const path = url`/v2/rooms`;\n    let query;\n    if (typeof params.query === \"string\") {\n      query = params.query;\n    } else if (typeof params.query === \"object\") {\n      query = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.objectToQuery)(params.query);\n    }\n    const queryParams = {\n      limit: params.limit,\n      startingAfter: params.startingAfter,\n      userId: params.userId,\n      groupIds: params.groupIds ? params.groupIds.join(\",\") : void 0,\n      // \"Flatten\" {metadata: {foo: \"bar\"}} to {\"metadata.foo\": \"bar\"}\n      ...Object.fromEntries(\n        Object.entries(params.metadata ?? {}).map(([key, val]) => [\n          `metadata.${key}`,\n          val\n        ])\n      ),\n      query\n    };\n    const res = await this.get(path, queryParams);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const rooms = data.data.map((room) => {\n      const lastConnectionAt = room.lastConnectionAt ? new Date(room.lastConnectionAt) : void 0;\n      const createdAt = new Date(room.createdAt);\n      return {\n        ...room,\n        createdAt,\n        lastConnectionAt\n      };\n    });\n    return {\n      ...data,\n      data: rooms\n    };\n  }\n  /**\n   * Creates a new room with the given id.\n   * @param roomId The id of the room to create.\n   * @param params.defaultAccesses The default accesses for the room.\n   * @param params.groupsAccesses (optional) The group accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.usersAccesses (optional) The user accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.metadata (optional) The metadata for the room. Supports upto a maximum of 50 entries. Key length has a limit of 40 characters. Value length has a limit of 256 characters.\n   * @returns The created room.\n   */\n  async createRoom(roomId, params) {\n    const { defaultAccesses, groupsAccesses, usersAccesses, metadata } = params;\n    const res = await this.post(url`/v2/rooms`, {\n      id: roomId,\n      defaultAccesses,\n      groupsAccesses,\n      usersAccesses,\n      metadata\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const lastConnectionAt = data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    return {\n      ...data,\n      lastConnectionAt,\n      createdAt\n    };\n  }\n  /**\n   * Returns a room with the given id.\n   * @param roomId The id of the room to return.\n   * @returns The room with the given id.\n   */\n  async getRoom(roomId) {\n    const res = await this.get(url`/v2/rooms/${roomId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const lastConnectionAt = data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    return {\n      ...data,\n      createdAt,\n      lastConnectionAt\n    };\n  }\n  /**\n   * Updates specific properties of a room. It’s not necessary to provide the entire room’s information.\n   * Setting a property to `null` means to delete this property.\n   * @param roomId The id of the room to update.\n   * @param params.defaultAccesses (optional) The default accesses for the room.\n   * @param params.groupsAccesses (optional) The group accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.usersAccesses (optional) The user accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.metadata (optional) The metadata for the room. Supports upto a maximum of 50 entries. Key length has a limit of 40 characters. Value length has a limit of 256 characters.\n   * @returns The updated room.\n   */\n  async updateRoom(roomId, params) {\n    const { defaultAccesses, groupsAccesses, usersAccesses, metadata } = params;\n    const res = await this.post(url`/v2/rooms/${roomId}`, {\n      defaultAccesses,\n      groupsAccesses,\n      usersAccesses,\n      metadata\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const lastConnectionAt = data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    return {\n      ...data,\n      lastConnectionAt,\n      createdAt\n    };\n  }\n  /**\n   * Deletes a room with the given id. A deleted room is no longer accessible from the API or the dashboard and it cannot be restored.\n   * @param roomId The id of the room to delete.\n   */\n  async deleteRoom(roomId) {\n    const res = await this.delete(url`/v2/rooms/${roomId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns a list of users currently present in the requested room. For better performance, we recommand to call this endpoint every 10 seconds maximum. Duplicates can happen if a user is in the requested room with multiple browser tabs opened.\n   * @param roomId The id of the room to get the users from.\n   * @returns A list of users currently present in the requested room.\n   */\n  async getActiveUsers(roomId) {\n    const res = await this.get(url`/v2/rooms/${roomId}/active_users`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Boadcasts an event to a room without having to connect to it via the client from @liveblocks/client. The connectionId passed to event listeners is -1 when using this API.\n   * @param roomId The id of the room to broadcast the event to.\n   * @param message The message to broadcast. It can be any JSON serializable value.\n   */\n  async broadcastEvent(roomId, message) {\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/broadcast_event`,\n      message\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  async getStorageDocument(roomId, format = \"plain-lson\") {\n    const res = await this.get(url`/v2/rooms/${roomId}/storage`, { format });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Initializes a room’s Storage. The room must already exist and have an empty Storage.\n   * Calling this endpoint will disconnect all users from the room if there are any.\n   *\n   * @param roomId The id of the room to initialize the storage from.\n   * @param document The document to initialize the storage with.\n   * @returns The initialized storage document. It is of the same format as the one passed in.\n   */\n  async initializeStorageDocument(roomId, document) {\n    const res = await this.post(url`/v2/rooms/${roomId}/storage`, document);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Deletes all of the room’s Storage data and disconnect all users from the room if there are any. Note that this does not delete the Yjs document in the room if one exists.\n   * @param roomId The id of the room to delete the storage from.\n   */\n  async deleteStorageDocument(roomId) {\n    const res = await this.delete(url`/v2/rooms/${roomId}/storage`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Yjs\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Returns a JSON representation of the room’s Yjs document.\n   * @param roomId The id of the room to get the Yjs document from.\n   * @param params.format (optional) If true, YText will return formatting.\n   * @param params.key (optional) If provided, returns only a single key’s value, e.g. doc.get(key).toJSON().\n   * @param params.type (optional) Used with key to override the inferred type, i.e. \"ymap\" will return doc.get(key, Y.Map).\n   * @returns A JSON representation of the room’s Yjs document.\n   */\n  async getYjsDocument(roomId, params = {}) {\n    const { format, key, type } = params;\n    const path = url`v2/rooms/${roomId}/ydoc`;\n    const res = await this.get(path, {\n      formatting: format ? \"true\" : void 0,\n      key,\n      type\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Send a Yjs binary update to the room’s Yjs document. You can use this endpoint to initialize Yjs data for the room or to update the room’s Yjs document.\n   * @param roomId The id of the room to send the Yjs binary update to.\n   * @param update The Yjs update to send. Typically the result of calling `Yjs.encodeStateAsUpdate(doc)`. Read the [Yjs documentation](https://docs.yjs.dev/api/document-updates) to learn how to create a binary update.\n   * @param params.guid (optional) If provided, the binary update will be applied to the Yjs subdocument with the given guid. If not provided, the binary update will be applied to the root Yjs document.\n   */\n  async sendYjsBinaryUpdate(roomId, update, params = {}) {\n    const res = await this.putBinary(url`/v2/rooms/${roomId}/ydoc`, update, {\n      guid: params.guid\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns the room’s Yjs document encoded as a single binary update. This can be used by Y.applyUpdate(responseBody) to get a copy of the document in your backend.\n   * See [Yjs documentation](https://docs.yjs.dev/api/document-updates) for more information on working with updates.\n   * @param roomId The id of the room to get the Yjs document from.\n   * @param params.guid (optional) If provided, returns the binary update of the Yjs subdocument with the given guid. If not provided, returns the binary update of the root Yjs document.\n   * @returns The room’s Yjs document encoded as a single binary update.\n   */\n  async getYjsDocumentAsBinaryUpdate(roomId, params = {}) {\n    const res = await this.get(url`/v2/rooms/${roomId}/ydoc-binary`, {\n      guid: params.guid\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return res.arrayBuffer();\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Schema Validation\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Creates a new schema which can be referenced later to enforce a room’s Storage data structure.\n   * @param name The name used to reference the schema. Must be a non-empty string with less than 65 characters and only contain lowercase letters, numbers and dashes\n   * @param body The exact allowed shape of data in the room. It is a multi-line string written in the [Liveblocks schema syntax](https://liveblocks.io/docs/platform/schema-validation/syntax).\n   * @returns The created schema.\n   */\n  async createSchema(name, body) {\n    const res = await this.post(url`/v2/schemas`, {\n      name,\n      body\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Returns a schema by its id.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   * @returns The schema with the given id.\n   */\n  async getSchema(schemaId) {\n    const res = await this.get(url`/v2/schemas/${schemaId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Updates the body for the schema. A schema can only be updated if it is not used by any room.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   * @param body The exact allowed shape of data in the room. It is a multi-line string written in the [Liveblocks schema syntax](https://liveblocks.io/docs/platform/schema-validation/syntax).\n   * @returns The updated schema. The version of the schema will be incremented.\n   */\n  async updateSchema(schemaId, body) {\n    const res = await this.put(url`/v2/schemas/${schemaId}`, {\n      body\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Deletes a schema by its id. A schema can only be deleted if it is not used by any room.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   */\n  async deleteSchema(schemaId) {\n    const res = await this.delete(url`/v2/schemas/${schemaId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns the schema attached to a room.\n   * @param roomId The id of the room to get the schema from.\n   * @returns\n   */\n  async getSchemaByRoomId(roomId) {\n    const res = await this.get(url`/v2/rooms/${roomId}/schema`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Attaches a schema to a room, and instantly enables runtime schema validation for the room.\n   * If the current contents of the room’s Storage do not match the schema, attaching will fail and the error message will give details on why the schema failed to attach.\n   * @param roomId The id of the room to attach the schema to.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   * @returns The schema id as JSON.\n   */\n  async attachSchemaToRoom(roomId, schemaId) {\n    const res = await this.post(url`/v2/rooms/${roomId}/schema`, {\n      schema: schemaId\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Detaches a schema from a room, and disables runtime schema validation for the room.\n   * @param roomId The id of the room to detach the schema from.\n   */\n  async detachSchemaFromRoom(roomId) {\n    const res = await this.delete(url`/v2/rooms/${roomId}/schema`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Comments\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Gets all the threads in a room.\n   *\n   * @param params.roomId The room ID to get the threads from.\n   * @param params.query The query to filter threads by. It is based on our query language and can filter by metadata.\n   * @returns A list of threads.\n   */\n  async getThreads(params) {\n    const { roomId } = params;\n    let query;\n    if (typeof params.query === \"string\") {\n      query = params.query;\n    } else if (typeof params.query === \"object\") {\n      query = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.objectToQuery)(params.query);\n    }\n    const res = await this.get(url`/v2/rooms/${roomId}/threads`, {\n      query\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const { data } = await res.json();\n    return {\n      data: data.map((thread) => (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(thread))\n    };\n  }\n  /**\n   * Gets a thread.\n   *\n   * @param params.roomId The room ID to get the thread from.\n   * @param params.threadId The thread ID.\n   * @returns A thread.\n   */\n  async getThread(params) {\n    const { roomId, threadId } = params;\n    const res = await this.get(url`/v2/rooms/${roomId}/threads/${threadId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Gets a thread's participants.\n   *\n   * Participants are users who have commented on the thread\n   * or users and groups that have been mentioned in a comment.\n   *\n   * @param params.roomId The room ID to get the thread participants from.\n   * @param params.threadId The thread ID to get the participants from.\n   * @returns An object containing an array of participant IDs.\n   */\n  async getThreadParticipants(params) {\n    const { roomId, threadId } = params;\n    const res = await this.get(\n      url`/v2/rooms/${roomId}/threads/${threadId}/participants`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Gets a thread's comment.\n   *\n   * @param params.roomId The room ID to get the comment from.\n   * @param params.threadId The thread ID to get the comment from.\n   * @param params.commentId The comment ID.\n   * @returns A comment.\n   */\n  async getComment(params) {\n    const { roomId, threadId, commentId } = params;\n    const res = await this.get(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentData)(await res.json());\n  }\n  /**\n   * Creates a comment.\n   *\n   * @param params.roomId The room ID to create the comment in.\n   * @param params.threadId The thread ID to create the comment in.\n   * @param params.data.userId The user ID of the user who is set to create the comment.\n   * @param params.data.createdAt (optional) The date the comment is set to be created.\n   * @param params.data.body The body of the comment.\n   * @returns The created comment.\n   */\n  async createComment(params) {\n    const { roomId, threadId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments`,\n      {\n        ...data,\n        createdAt: data.createdAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentData)(await res.json());\n  }\n  /**\n   * Edits a comment.\n   * @param params.roomId The room ID to edit the comment in.\n   * @param params.threadId The thread ID to edit the comment in.\n   * @param params.commentId The comment ID to edit.\n   * @param params.data.body The body of the comment.\n   * @param params.data.editedAt (optional) The date the comment was edited.\n   * @returns The edited comment.\n   */\n  async editComment(params) {\n    const { roomId, threadId, commentId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}`,\n      {\n        ...data,\n        editedAt: data.editedAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentData)(await res.json());\n  }\n  /**\n   * Deletes a comment. Deletes a comment. If there are no remaining comments in the thread, the thread is also deleted.\n   * @param params.roomId The room ID to delete the comment in.\n   * @param params.threadId The thread ID to delete the comment in.\n   * @param params.commentId The comment ID to delete.\n   */\n  async deleteComment(params) {\n    const { roomId, threadId, commentId } = params;\n    const res = await this.delete(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Creates a new thread. The thread will be created with the specified comment as its first comment.\n   * If the thread already exists, a `LiveblocksError` will be thrown with status code 409.\n   * @param params.roomId The room ID to create the thread in.\n   * @param params.thread.metadata (optional) The metadata for the thread. Supports upto a maximum of 10 entries. Value must be a string, boolean or number\n   * @param params.thread.comment.userId The user ID of the user who created the comment.\n   * @param params.thread.comment.createdAt (optional) The date the comment was created.\n   * @param params.thread.comment.body The body of the comment.\n   * @returns The created thread. The thread will be created with the specified comment as its first comment.\n   */\n  async createThread(params) {\n    const { roomId, data } = params;\n    const res = await this.post(url`/v2/rooms/${roomId}/threads`, {\n      ...data,\n      comment: {\n        ...data.comment,\n        createdAt: data.comment.createdAt?.toISOString()\n      }\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Deletes a thread and all of its comments.\n   * @param params.roomId The room ID to delete the thread in.\n   * @param params.threadId The thread ID to delete.\n   */\n  async deleteThread(params) {\n    const { roomId, threadId } = params;\n    const res = await this.delete(url`/v2/rooms/${roomId}/threads/${threadId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Mark a thread as resolved.\n   * @param params.roomId The room ID of the thread.\n   * @param params.threadId The thread ID to mark as resolved.\n   * @param params.data.userId The user ID of the user who marked the thread as resolved.\n   * @returns The thread marked as resolved.\n   */\n  async markThreadAsResolved(params) {\n    const { roomId, threadId } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/mark-as-resolved`,\n      {}\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Mark a thread as unresolved.\n   * @param params.roomId The room ID of the thread.\n   * @param params.threadId The thread ID to mark as unresolved.\n   * @param params.data.userId The user ID of the user who marked the thread as unresolved.\n   * @returns The thread marked as unresolved.\n   */\n  async markThreadAsUnresolved(params) {\n    const { roomId, threadId } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/mark-as-unresolved`,\n      {}\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Updates the metadata of the specified thread in a room.\n   * @param params.roomId The room ID to update the thread in.\n   * @param params.threadId The thread ID to update.\n   * @param params.data.metadata The metadata for the thread. Value must be a string, boolean or number\n   * @param params.data.userId The user ID of the user who updated the thread.\n   * @param params.data.updatedAt (optional) The date the thread is set to be updated.\n   * @returns The updated thread metadata.\n   */\n  async editThreadMetadata(params) {\n    const { roomId, threadId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/metadata`,\n      {\n        ...data,\n        updatedAt: data.updatedAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Adds a new comment reaction to a comment.\n   * @param params.roomId The room ID to add the comment reaction in.\n   * @param params.threadId The thread ID to add the comment reaction in.\n   * @param params.commentId The comment ID to add the reaction in.\n   * @param params.data.emoji The (emoji) reaction to add.\n   * @param params.data.userId The user ID of the user associated with the reaction.\n   * @param params.data.createdAt (optional) The date the reaction is set to be created.\n   * @returns The created comment reaction.\n   */\n  async addCommentReaction(params) {\n    const { roomId, threadId, commentId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}/add-reaction`,\n      {\n        ...data,\n        createdAt: data.createdAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const reaction = await res.json();\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentUserReaction)(reaction);\n  }\n  /**\n   * Removes a reaction from a comment.\n   * @param params.roomId The room ID to remove the comment reaction from.\n   * @param params.threadId The thread ID to remove the comment reaction from.\n   * @param params.commentId The comment ID to remove the reaction from.\n   * @param params.data.emoji The (emoji) reaction to remove.\n   * @param params.data.userId The user ID of the user associated with the reaction.\n   * @param params.data.removedAt (optional) The date the reaction is set to be removed.\n   */\n  async removeCommentReaction(params) {\n    const { roomId, threadId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${params.commentId}/remove-reaction`,\n      {\n        ...data,\n        removedAt: data.removedAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns the inbox notifications for a user.\n   * @param params.userId The user ID to get the inbox notifications from.\n   * @param params.inboxNotificationId The ID of the inbox notification to get.\n   */\n  async getInboxNotification(params) {\n    const { userId, inboxNotificationId } = params;\n    const res = await this.get(\n      url`/v2/users/${userId}/inbox-notifications/${inboxNotificationId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToInboxNotificationData)(\n      await res.json()\n    );\n  }\n  /**\n   * Gets the user's room notification settings.\n   * @param params.userId The user ID to get the room notifications from.\n   * @param params.roomId The room ID to get the room notification settings from.\n   */\n  async getRoomNotificationSettings(params) {\n    const { userId, roomId } = params;\n    const res = await this.get(\n      url`/v2/rooms/${roomId}/users/${userId}/notification-settings`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Updates the user's room notification settings.\n   * @param params.userId The user ID to update the room notification settings for.\n   * @param params.roomId The room ID to update the room notification settings for.\n   * @param params.data The new room notification settings for the user.\n   */\n  async updateRoomNotificationSettings(params) {\n    const { userId, roomId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/users/${userId}/notification-settings`,\n      data\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Delete the user's room notification settings.\n   * @param params.userId The user ID to delete the room notification settings from.\n   * @param params.roomId The room ID to delete the room notification settings from.\n   */\n  async deleteRoomNotificationSettings(params) {\n    const { userId, roomId } = params;\n    const res = await this.delete(\n      url`/v2/rooms/${roomId}/users/${userId}/notification-settings`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Update a room ID.\n   * @param params.roomId The current ID of the room.\n   * @param params.newRoomId The new room ID.\n   */\n  async updateRoomId(params) {\n    const { currentRoomId, newRoomId } = params;\n    const res = await this.post(\n      url`/v2/rooms/${currentRoomId}/update-room-id`,\n      {\n        newRoomId\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    return {\n      ...data,\n      createdAt: new Date(data.createdAt),\n      lastConnectionAt: data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0\n    };\n  }\n  async triggerInboxNotification(params) {\n    const res = await this.post(url`/v2/inbox-notifications/trigger`, params);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Deletes an inbox notification for a user.\n   * @param params.userId The user ID for which to delete the inbox notification.\n   * @param params.inboxNotificationId The ID of the inbox notification to delete.\n   */\n  async deleteInboxNotification(params) {\n    const { userId, inboxNotificationId } = params;\n    const res = await this.delete(\n      url`/v2/users/${userId}/inbox-notifications/${inboxNotificationId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Deletes all inbox notifications for a user.\n   * @param params.userId The user ID for which to delete all the inbox notifications.\n   */\n  async deleteAllInboxNotifications(params) {\n    const { userId } = params;\n    const res = await this.delete(url`/v2/users/${userId}/inbox-notifications`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n};\nvar LiveblocksError = class extends Error {\n  constructor(status, message = \"\") {\n    super(message);\n    this.name = \"LiveblocksError\";\n    this.status = status;\n  }\n};\n\n// src/webhooks.ts\n\n\nvar _WebhookHandler = class _WebhookHandler {\n  constructor(secret) {\n    if (!secret) throw new Error(\"Secret is required\");\n    if (typeof secret !== \"string\") throw new Error(\"Secret must be a string\");\n    if (secret.startsWith(_WebhookHandler.secretPrefix) === false)\n      throw new Error(\"Invalid secret, must start with whsec_\");\n    const secretKey = secret.slice(_WebhookHandler.secretPrefix.length);\n    this.secretBuffer = Buffer.from(secretKey, \"base64\");\n  }\n  /**\n   * Verifies a webhook request and returns the event\n   */\n  verifyRequest(request) {\n    const { headers, rawBody } = request;\n    const { webhookId, timestamp, rawSignatures } = this.verifyHeaders(headers);\n    if (typeof rawBody !== \"string\") {\n      throw new Error(\n        `Invalid rawBody field, must be a string, got \"${typeof rawBody}\" instead. It is likely that you need to JSON.stringify the body before passing it.`\n      );\n    }\n    this.verifyTimestamp(timestamp);\n    const signature = this.sign(`${webhookId}.${timestamp}.${rawBody}`);\n    const expectedSignatures = rawSignatures.split(\" \").map((rawSignature) => {\n      const [, parsedSignature] = rawSignature.split(\",\");\n      return parsedSignature;\n    }).filter(isNotUndefined);\n    if (expectedSignatures.includes(signature) === false)\n      throw new Error(\n        `Invalid signature, expected one of ${expectedSignatures.join(\n          \", \"\n        )}, got ${signature}`\n      );\n    const event = JSON.parse(rawBody);\n    this.verifyWebhookEventType(event);\n    return event;\n  }\n  /**\n   * Verifies the headers and returns the webhookId, timestamp and rawSignatures\n   */\n  verifyHeaders(headers) {\n    const usingNativeHeaders = typeof Headers !== \"undefined\" && headers instanceof Headers;\n    const normalizedHeaders = usingNativeHeaders ? Object.fromEntries(headers) : headers;\n    const sanitizedHeaders = {};\n    Object.keys(normalizedHeaders).forEach((key) => {\n      sanitizedHeaders[key.toLowerCase()] = normalizedHeaders[key];\n    });\n    const webhookId = sanitizedHeaders[\"webhook-id\"];\n    if (typeof webhookId !== \"string\")\n      throw new Error(\"Invalid webhook-id header\");\n    const timestamp = sanitizedHeaders[\"webhook-timestamp\"];\n    if (typeof timestamp !== \"string\")\n      throw new Error(\"Invalid webhook-timestamp header\");\n    const rawSignatures = sanitizedHeaders[\"webhook-signature\"];\n    if (typeof rawSignatures !== \"string\")\n      throw new Error(\"Invalid webhook-signature header\");\n    return { webhookId, timestamp, rawSignatures };\n  }\n  /**\n   * Signs the content with the secret\n   * @param content\n   * @returns `string`\n   */\n  sign(content) {\n    const encoder = new TextEncoder();\n    const toSign = encoder.encode(content);\n    return _stablelib_base64__WEBPACK_IMPORTED_MODULE_1__.encode(fast_sha256__WEBPACK_IMPORTED_MODULE_2__.hmac(this.secretBuffer, toSign));\n  }\n  /**\n   * Verifies that the timestamp is not too old or in the future\n   */\n  verifyTimestamp(timestampHeader) {\n    const now = Math.floor(Date.now() / 1e3);\n    const timestamp = parseInt(timestampHeader, 10);\n    if (isNaN(timestamp)) {\n      throw new Error(\"Invalid timestamp\");\n    }\n    if (timestamp < now - WEBHOOK_TOLERANCE_IN_SECONDS) {\n      throw new Error(\"Timestamp too old\");\n    }\n    if (timestamp > now + WEBHOOK_TOLERANCE_IN_SECONDS) {\n      throw new Error(\"Timestamp in the future\");\n    }\n  }\n  /**\n   * Ensures that the event is a known event type\n   * or throws and prompts the user to upgrade to a higher version of @liveblocks/node\n   */\n  verifyWebhookEventType(event) {\n    if (event && event.type && [\n      \"storageUpdated\",\n      \"userEntered\",\n      \"userLeft\",\n      \"roomCreated\",\n      \"roomDeleted\",\n      \"commentCreated\",\n      \"commentEdited\",\n      \"commentDeleted\",\n      \"commentReactionAdded\",\n      \"commentReactionRemoved\",\n      \"threadMetadataUpdated\",\n      \"threadCreated\",\n      \"threadDeleted\",\n      \"ydocUpdated\",\n      \"notification\",\n      \"threadMarkedAsResolved\",\n      \"threadMarkedAsUnresolved\"\n    ].includes(event.type)) {\n      if (event.type === \"notification\") {\n        const notification = event;\n        if (notification.data.kind === \"thread\" || notification.data.kind === \"textMention\" || notification.data.kind.startsWith(\"$\")) {\n          return;\n        } else {\n          throw new Error(\n            `Unknown notification kind: ${notification.data.kind}`\n          );\n        }\n      }\n      return;\n    }\n    throw new Error(\n      \"Unknown event type, please upgrade to a higher version of @liveblocks/node\"\n    );\n  }\n};\n_WebhookHandler.secretPrefix = \"whsec_\";\nvar WebhookHandler = _WebhookHandler;\nvar WEBHOOK_TOLERANCE_IN_SECONDS = 5 * 60;\nvar isNotUndefined = (value) => value !== void 0;\n\n// src/index.ts\n\n(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.detectDupes)(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9ub2RlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDK0M7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBTzBCOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLDRXQUFvQjtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxNQUFNO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxNQUFNO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE1BQU07QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxLQUFLO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsYUFBYTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsYUFBYTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDhCQUE4QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTtBQUNBLG9DQUFvQywyQkFBMkI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTtBQUNBLG9DQUFvQyx3QkFBd0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sY0FBYywrREFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsV0FBVyxhQUFhLElBQUk7QUFDaEQ7QUFDQSw0Q0FBNEM7QUFDNUMsc0JBQXNCLElBQUk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyREFBMkQ7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLE9BQU87QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyREFBMkQ7QUFDdkUsZ0RBQWdELE9BQU87QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELE9BQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxPQUFPO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE9BQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxPQUFPLGFBQWEsUUFBUTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsT0FBTztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELE9BQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsWUFBWSxvQkFBb0I7QUFDaEMsZ0NBQWdDLE9BQU87QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELHFEQUFxRCxPQUFPO0FBQzVEO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RCwrQ0FBK0MsT0FBTztBQUN0RDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxTQUFTO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsU0FBUztBQUMxRDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsU0FBUztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLE9BQU87QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELE9BQU87QUFDdkQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxPQUFPO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixjQUFjLCtEQUFhO0FBQzNCO0FBQ0EsK0NBQStDLE9BQU87QUFDdEQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQSxpQ0FBaUMscUVBQW1CO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQkFBbUI7QUFDL0IsK0NBQStDLE9BQU8sV0FBVyxTQUFTO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxRUFBbUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQkFBbUI7QUFDL0I7QUFDQSxzQkFBc0IsT0FBTyxXQUFXLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhCQUE4QjtBQUMxQztBQUNBLHNCQUFzQixPQUFPLFdBQVcsU0FBUyxZQUFZLFVBQVU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0VBQW9CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUJBQXlCO0FBQ3JDO0FBQ0Esc0JBQXNCLE9BQU8sV0FBVyxTQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0VBQW9CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9DQUFvQztBQUNoRDtBQUNBLHNCQUFzQixPQUFPLFdBQVcsU0FBUyxZQUFZLFVBQVU7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzRUFBb0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOEJBQThCO0FBQzFDO0FBQ0Esc0JBQXNCLE9BQU8sV0FBVyxTQUFTLFlBQVksVUFBVTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlO0FBQzNCLGdEQUFnRCxPQUFPO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFFQUFtQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLGtEQUFrRCxPQUFPLFdBQVcsU0FBUztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0Esc0JBQXNCLE9BQU8sV0FBVyxTQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUVBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0Esc0JBQXNCLE9BQU8sV0FBVyxTQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcscUVBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlCQUF5QjtBQUNyQztBQUNBLHNCQUFzQixPQUFPLFdBQVcsU0FBUztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0NBQW9DO0FBQ2hEO0FBQ0Esc0JBQXNCLE9BQU8sV0FBVyxTQUFTLFlBQVksVUFBVTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOEVBQTRCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlCQUF5QjtBQUNyQztBQUNBLHNCQUFzQixPQUFPLFdBQVcsU0FBUyxZQUFZLGlCQUFpQjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOEJBQThCO0FBQzFDO0FBQ0Esc0JBQXNCLE9BQU8sdUJBQXVCLG9CQUFvQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnRkFBOEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQSxzQkFBc0IsT0FBTyxTQUFTLE9BQU87QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0Esc0JBQXNCLE9BQU8sU0FBUyxPQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQjtBQUM3QjtBQUNBLHNCQUFzQixPQUFPLFNBQVMsT0FBTztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJCQUEyQjtBQUN2QztBQUNBLHNCQUFzQixjQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4QkFBOEI7QUFDMUM7QUFDQSxzQkFBc0IsT0FBTyx1QkFBdUIsb0JBQW9CO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckIsa0RBQWtELE9BQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDNEM7QUFDTjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLFlBQVksc0NBQXNDO0FBQ2xEO0FBQ0E7QUFDQSx5REFBeUQsZUFBZTtBQUN4RTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsVUFBVSxHQUFHLFVBQVUsR0FBRyxRQUFRO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsVUFBVSxRQUFRLFVBQVU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxREFBYSxDQUFDLDZDQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLDBDQUEwQyx1QkFBdUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUkwQjtBQUMxQiw2REFBVztBQU9UO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvLi9ub2RlX21vZHVsZXMvQGxpdmVibG9ja3Mvbm9kZS9kaXN0L2luZGV4Lm1qcz9iNDliIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbmRleC50c1xuaW1wb3J0IHsgZGV0ZWN0RHVwZXMgfSBmcm9tIFwiQGxpdmVibG9ja3MvY29yZVwiO1xuXG4vLyBzcmMvdmVyc2lvbi50c1xudmFyIFBLR19OQU1FID0gXCJAbGl2ZWJsb2Nrcy9ub2RlXCI7XG52YXIgUEtHX1ZFUlNJT04gPSBcIjIuMy4wXCI7XG52YXIgUEtHX0ZPUk1BVCA9IFwiZXNtXCI7XG5cbi8vIHNyYy9jbGllbnQudHNcbmltcG9ydCB7XG4gIGNvbnZlcnRUb0NvbW1lbnREYXRhLFxuICBjb252ZXJ0VG9Db21tZW50VXNlclJlYWN0aW9uLFxuICBjb252ZXJ0VG9JbmJveE5vdGlmaWNhdGlvbkRhdGEsXG4gIGNvbnZlcnRUb1RocmVhZERhdGEsXG4gIG9iamVjdFRvUXVlcnlcbn0gZnJvbSBcIkBsaXZlYmxvY2tzL2NvcmVcIjtcblxuLy8gc3JjL3V0aWxzLnRzXG52YXIgREVGQVVMVF9CQVNFX1VSTCA9IFwiaHR0cHM6Ly9hcGkubGl2ZWJsb2Nrcy5pb1wiO1xuZnVuY3Rpb24gZ2V0QmFzZVVybChiYXNlVXJsKSB7XG4gIGlmICh0eXBlb2YgYmFzZVVybCA9PT0gXCJzdHJpbmdcIiAmJiBiYXNlVXJsLnN0YXJ0c1dpdGgoXCJodHRwXCIpKSB7XG4gICAgcmV0dXJuIGJhc2VVcmw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIERFRkFVTFRfQkFTRV9VUkw7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGZldGNoUG9seWZpbGwoKSB7XG4gIHJldHVybiB0eXBlb2YgZ2xvYmFsVGhpcy5mZXRjaCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFRoaXMuZmV0Y2ggOiAoYXdhaXQgaW1wb3J0KFwibm9kZS1mZXRjaFwiKSkuZGVmYXVsdDtcbn1cbmZ1bmN0aW9uIGlzTm9uRW1wdHkodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5sZW5ndGggPiAwO1xufVxuZnVuY3Rpb24gYXNzZXJ0Tm9uRW1wdHkodmFsdWUsIGZpZWxkKSB7XG4gIGlmICghaXNOb25FbXB0eSh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSW52YWxpZCB2YWx1ZSBmb3IgZmllbGQgXCIke2ZpZWxkfVwiLiBQbGVhc2UgcHJvdmlkZSBhIG5vbi1lbXB0eSBzdHJpbmcuIEZvciBtb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2xpdmVibG9ja3MuaW8vZG9jcy9hcGktcmVmZXJlbmNlL2xpdmVibG9ja3Mtbm9kZSNhdXRob3JpemVgXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0U2VjcmV0S2V5KHZhbHVlLCBmaWVsZCkge1xuICBpZiAoIWlzTm9uRW1wdHkodmFsdWUpIHx8ICF2YWx1ZS5zdGFydHNXaXRoKFwic2tfXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgdmFsdWUgZm9yIGZpZWxkIFwiJHtmaWVsZH1cIi4gU2VjcmV0IGtleXMgbXVzdCBzdGFydCB3aXRoIFwic2tfXCIuIFBsZWFzZSBwcm92aWRlIHRoZSBzZWNyZXQga2V5IGZyb20geW91ciBMaXZlYmxvY2tzIGRhc2hib2FyZCBhdCBodHRwczovL2xpdmVibG9ja3MuaW8vZGFzaGJvYXJkL2FwaWtleXMuYFxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0YXR1c0NvZGUoc3RhdHVzQ29kZSkge1xuICBpZiAoc3RhdHVzQ29kZSA+PSAyMDAgJiYgc3RhdHVzQ29kZSA8IDMwMCkge1xuICAgIHJldHVybiAyMDA7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICByZXR1cm4gNTAzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiA0MDM7XG4gIH1cbn1cbmZ1bmN0aW9uIHRvVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtcykpIHtcbiAgICBpZiAodmFsdWUgIT09IHZvaWQgMCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdXJsam9pbihiYXNlVXJsLCBwYXRoLCBwYXJhbXMpIHtcbiAgY29uc3QgdXJsMiA9IG5ldyBVUkwocGF0aCwgYmFzZVVybCk7XG4gIGlmIChwYXJhbXMgIT09IHZvaWQgMCkge1xuICAgIHVybDIuc2VhcmNoID0gKHBhcmFtcyBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IHBhcmFtcyA6IHRvVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpLnRvU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuIHVybDIudG9TdHJpbmcoKTtcbn1cbmZ1bmN0aW9uIHVybChzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgcmV0dXJuIHN0cmluZ3MucmVkdWNlKFxuICAgIChyZXN1bHQsIHN0ciwgaSkgPT4gcmVzdWx0ICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlc1tpIC0gMV0gPz8gXCJcIikgKyBzdHJcbiAgKTtcbn1cblxuLy8gc3JjL1Nlc3Npb24udHNcbnZhciBBTExfUEVSTUlTU0lPTlMgPSBPYmplY3QuZnJlZXplKFtcbiAgXCJyb29tOndyaXRlXCIsXG4gIFwicm9vbTpyZWFkXCIsXG4gIFwicm9vbTpwcmVzZW5jZTp3cml0ZVwiLFxuICBcImNvbW1lbnRzOndyaXRlXCIsXG4gIFwiY29tbWVudHM6cmVhZFwiXG5dKTtcbmZ1bmN0aW9uIGlzUGVybWlzc2lvbih2YWx1ZSkge1xuICByZXR1cm4gQUxMX1BFUk1JU1NJT05TLmluY2x1ZGVzKHZhbHVlKTtcbn1cbnZhciBNQVhfUEVSTVNfUEVSX1NFVCA9IDEwO1xudmFyIFJFQURfQUNDRVNTID0gT2JqZWN0LmZyZWV6ZShbXG4gIFwicm9vbTpyZWFkXCIsXG4gIFwicm9vbTpwcmVzZW5jZTp3cml0ZVwiLFxuICBcImNvbW1lbnRzOnJlYWRcIlxuXSk7XG52YXIgRlVMTF9BQ0NFU1MgPSBPYmplY3QuZnJlZXplKFtcInJvb206d3JpdGVcIiwgXCJjb21tZW50czp3cml0ZVwiXSk7XG52YXIgcm9vbVBhdHRlcm5SZWdleCA9IC9eKFsqXXxbXipdezEsMTI4fVsqXT8pJC87XG52YXIgU2Vzc2lvbiA9IGNsYXNzIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBjb25zdHJ1Y3Rvcihwb3N0Rm4sIHVzZXJJZCwgdXNlckluZm8pIHtcbiAgICB0aGlzLkZVTExfQUNDRVNTID0gRlVMTF9BQ0NFU1M7XG4gICAgdGhpcy5SRUFEX0FDQ0VTUyA9IFJFQURfQUNDRVNTO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9zZWFsZWQgPSBmYWxzZTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fcGVybWlzc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGFzc2VydE5vbkVtcHR5KHVzZXJJZCwgXCJ1c2VySWRcIik7XG4gICAgdGhpcy5fcG9zdEZuID0gcG9zdEZuO1xuICAgIHRoaXMuX3VzZXJJZCA9IHVzZXJJZDtcbiAgICB0aGlzLl91c2VySW5mbyA9IHVzZXJJbmZvO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZ2V0T3JDcmVhdGUocm9vbUlkKSB7XG4gICAgaWYgKHRoaXMuX3NlYWxlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbiBubyBsb25nZXIgY2hhbmdlIHRoZXNlIHBlcm1pc3Npb25zLlwiKTtcbiAgICB9XG4gICAgbGV0IHBlcm1zID0gdGhpcy5fcGVybWlzc2lvbnMuZ2V0KHJvb21JZCk7XG4gICAgaWYgKHBlcm1zKSB7XG4gICAgICByZXR1cm4gcGVybXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9wZXJtaXNzaW9ucy5zaXplID49IE1BWF9QRVJNU19QRVJfU0VUKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIllvdSBjYW5ub3QgYWRkIHBlcm1pc3Npb25zIGZvciBtb3JlIHRoYW4gMTAgcm9vbXMgaW4gYSBzaW5nbGUgdG9rZW5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcGVybXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgdGhpcy5fcGVybWlzc2lvbnMuc2V0KHJvb21JZCwgcGVybXMpO1xuICAgICAgcmV0dXJuIHBlcm1zO1xuICAgIH1cbiAgfVxuICBhbGxvdyhyb29tSWRPclBhdHRlcm4sIG5ld1Blcm1zKSB7XG4gICAgaWYgKHR5cGVvZiByb29tSWRPclBhdHRlcm4gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJvb20gbmFtZSBvciBwYXR0ZXJuIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgfVxuICAgIGlmICghcm9vbVBhdHRlcm5SZWdleC50ZXN0KHJvb21JZE9yUGF0dGVybikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcm9vbSBuYW1lIG9yIHBhdHRlcm5cIik7XG4gICAgfVxuICAgIGlmIChuZXdQZXJtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlBlcm1pc3Npb24gbGlzdCBjYW5ub3QgYmUgZW1wdHlcIik7XG4gICAgfVxuICAgIGNvbnN0IGV4aXN0aW5nUGVybXMgPSB0aGlzLmdldE9yQ3JlYXRlKHJvb21JZE9yUGF0dGVybik7XG4gICAgZm9yIChjb25zdCBwZXJtIG9mIG5ld1Blcm1zKSB7XG4gICAgICBpZiAoIWlzUGVybWlzc2lvbihwZXJtKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBhIHZhbGlkIHBlcm1pc3Npb246ICR7cGVybX1gKTtcbiAgICAgIH1cbiAgICAgIGV4aXN0aW5nUGVybXMuYWRkKHBlcm0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKiogQGludGVybmFsIC0gRm9yIHVuaXQgdGVzdHMgb25seSAqL1xuICBoYXNQZXJtaXNzaW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fcGVybWlzc2lvbnMuc2l6ZSA+IDA7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAtIEZvciB1bml0IHRlc3RzIG9ubHkgKi9cbiAgc2VhbCgpIHtcbiAgICBpZiAodGhpcy5fc2VhbGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiWW91IGNhbm5vdCByZXVzZSBTZXNzaW9uIGluc3RhbmNlcy4gUGxlYXNlIGNyZWF0ZSBhIG5ldyBzZXNzaW9uIGV2ZXJ5IHRpbWUuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX3NlYWxlZCA9IHRydWU7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAtIEZvciB1bml0IHRlc3RzIG9ubHkgKi9cbiAgc2VyaWFsaXplUGVybWlzc2lvbnMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgIEFycmF5LmZyb20odGhpcy5fcGVybWlzc2lvbnMuZW50cmllcygpKS5tYXAoKFtwYXQsIHBlcm1zXSkgPT4gW1xuICAgICAgICBwYXQsXG4gICAgICAgIEFycmF5LmZyb20ocGVybXMpXG4gICAgICBdKVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgdGhpcyB0byBhdXRob3JpemUgdGhlIHNlc3Npb24gdG8gYWNjZXNzIExpdmVibG9ja3MuIE5vdGUgdGhhdCB0aGlzXG4gICAqIHdpbGwgcmV0dXJuIGEgTGl2ZWJsb2NrcyBcImFjY2VzcyB0b2tlblwiLiBBbnlvbmUgdGhhdCBvYnRhaW5zIHN1Y2ggYWNjZXNzXG4gICAqIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MgdG8gdGhlIGFsbG93ZWQgcmVzb3VyY2VzLlxuICAgKi9cbiAgYXN5bmMgYXV0aG9yaXplKCkge1xuICAgIHRoaXMuc2VhbCgpO1xuICAgIGlmICghdGhpcy5oYXNQZXJtaXNzaW9ucygpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiQWNjZXNzIHRva2VucyB3aXRob3V0IGFueSBwZXJtaXNzaW9uIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBzb29uLCB5b3Ugc2hvdWxkIHVzZSB3aWxkY2FyZHMgd2hlbiB0aGUgY2xpZW50IHJlcXVlc3RzIGEgdG9rZW4gZm9yIHJlc291cmNlcyBvdXRzaWRlIGEgcm9vbS4gU2VlIGh0dHBzOi8vbGl2ZWJsb2Nrcy5pby9kb2NzL2Vycm9ycy9saXZlYmxvY2tzLWNsaWVudC9hY2Nlc3MtdG9rZW5zLW5vdC1lbm91Z2gtcGVybWlzc2lvbnNcIlxuICAgICAgKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLl9wb3N0Rm4odXJsYC92Mi9hdXRob3JpemUtdXNlcmAsIHtcbiAgICAgICAgLy8gUmVxdWlyZWRcbiAgICAgICAgdXNlcklkOiB0aGlzLl91c2VySWQsXG4gICAgICAgIHBlcm1pc3Npb25zOiB0aGlzLnNlcmlhbGl6ZVBlcm1pc3Npb25zKCksXG4gICAgICAgIC8vIE9wdGlvbmFsIG1ldGFkYXRhXG4gICAgICAgIHVzZXJJbmZvOiB0aGlzLl91c2VySW5mb1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IG5vcm1hbGl6ZVN0YXR1c0NvZGUocmVzcC5zdGF0dXMpLFxuICAgICAgICBib2R5OiBhd2FpdCByZXNwLnRleHQoKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGJvZHk6ICdDYWxsIHRvIC92Mi9hdXRob3JpemUtdXNlciBmYWlsZWQuIFNlZSBcImVycm9yXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyxcbiAgICAgICAgZXJyb3I6IGVyXG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL2NsaWVudC50c1xudmFyIExpdmVibG9ja3MgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBJbnRlcmFjdCB3aXRoIHRoZSBMaXZlYmxvY2tzIEFQSSBmcm9tIHlvdXIgTm9kZS5qcyBiYWNrZW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGNvbnN0IG9wdGlvbnNfID0gb3B0aW9ucztcbiAgICBjb25zdCBzZWNyZXQgPSBvcHRpb25zXy5zZWNyZXQ7XG4gICAgYXNzZXJ0U2VjcmV0S2V5KHNlY3JldCwgXCJzZWNyZXRcIik7XG4gICAgdGhpcy5fc2VjcmV0ID0gc2VjcmV0O1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBuZXcgVVJMKGdldEJhc2VVcmwob3B0aW9ucy5iYXNlVXJsKSk7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc3luYyBwb3N0KHBhdGgsIGpzb24pIHtcbiAgICBjb25zdCB1cmwyID0gdXJsam9pbih0aGlzLl9iYXNlVXJsLCBwYXRoKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuX3NlY3JldH1gLFxuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIGNvbnN0IGZldGNoID0gYXdhaXQgZmV0Y2hQb2x5ZmlsbCgpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybDIsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoanNvbilcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXN5bmMgcHV0KHBhdGgsIGpzb24pIHtcbiAgICBjb25zdCB1cmwyID0gdXJsam9pbih0aGlzLl9iYXNlVXJsLCBwYXRoKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuX3NlY3JldH1gLFxuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIGNvbnN0IGZldGNoID0gYXdhaXQgZmV0Y2hQb2x5ZmlsbCgpO1xuICAgIHJldHVybiBhd2FpdCBmZXRjaCh1cmwyLCB7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoanNvbilcbiAgICB9KTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIHB1dEJpbmFyeShwYXRoLCBib2R5LCBwYXJhbXMpIHtcbiAgICBjb25zdCB1cmwyID0gdXJsam9pbih0aGlzLl9iYXNlVXJsLCBwYXRoLCBwYXJhbXMpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5fc2VjcmV0fWAsXG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXG4gICAgfTtcbiAgICBjb25zdCBmZXRjaCA9IGF3YWl0IGZldGNoUG9seWZpbGwoKTtcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2godXJsMiwgeyBtZXRob2Q6IFwiUFVUXCIsIGhlYWRlcnMsIGJvZHkgfSk7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc3luYyBkZWxldGUocGF0aCkge1xuICAgIGNvbnN0IHVybDIgPSB1cmxqb2luKHRoaXMuX2Jhc2VVcmwsIHBhdGgpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5fc2VjcmV0fWBcbiAgICB9O1xuICAgIGNvbnN0IGZldGNoID0gYXdhaXQgZmV0Y2hQb2x5ZmlsbCgpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybDIsIHsgbWV0aG9kOiBcIkRFTEVURVwiLCBoZWFkZXJzIH0pO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc3luYyBnZXQocGF0aCwgcGFyYW1zKSB7XG4gICAgY29uc3QgdXJsMiA9IHVybGpvaW4odGhpcy5fYmFzZVVybCwgcGF0aCwgcGFyYW1zKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuX3NlY3JldH1gXG4gICAgfTtcbiAgICBjb25zdCBmZXRjaCA9IGF3YWl0IGZldGNoUG9seWZpbGwoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwyLCB7IG1ldGhvZDogXCJHRVRcIiwgaGVhZGVycyB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQXV0aGVudGljYXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAvKipcbiAgICogUHJlcGFyZXMgYSBuZXcgc2Vzc2lvbiB0byBhdXRob3JpemUgYSB1c2VyIHRvIGFjY2VzcyBMaXZlYmxvY2tzLlxuICAgKlxuICAgKiBJTVBPUlRBTlQ6XG4gICAqIEFsd2F5cyBtYWtlIHN1cmUgdGhhdCB5b3UgdHJ1c3QgdGhlIHVzZXIgbWFraW5nIHRoZSByZXF1ZXN0IHRvIHlvdXJcbiAgICogYmFja2VuZCBiZWZvcmUgY2FsbGluZyAucHJlcGFyZVNlc3Npb24oKSFcbiAgICpcbiAgICogQHBhcmFtIHVzZXJJZCBUZWxsIExpdmVibG9ja3MgdGhlIHVzZXIgSUQgb2YgdGhlIHVzZXIgdG8gYXV0aG9yaXplLiBNdXN0XG4gICAqIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSB1c2VyIGFjY291bnQgaW4geW91ciBzeXN0ZW0uIFRoZSB1bmlxdWVuZXNzIG9mIHRoaXNcbiAgICogdmFsdWUgd2lsbCBkZXRlcm1pbmUgaG93IG1hbnkgTUFVcyB3aWxsIGJlIGNvdW50ZWQvYmlsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy51c2VySW5mbyBDdXN0b20gbWV0YWRhdGEgdG8gYXR0YWNoIHRvIHRoaXMgdXNlci4gRGF0YSB5b3VcbiAgICogYWRkIGhlcmUgd2lsbCBiZSB2aXNpYmxlIHRvIGFsbCBvdGhlciBjbGllbnRzIGluIHRoZSByb29tLCB0aHJvdWdoIHRoZVxuICAgKiBgb3RoZXIuaW5mb2AgcHJvcGVydHkuXG4gICAqXG4gICAqL1xuICBwcmVwYXJlU2Vzc2lvbih1c2VySWQsIC4uLnJlc3QpIHtcbiAgICBjb25zdCBvcHRpb25zID0gcmVzdFswXTtcbiAgICByZXR1cm4gbmV3IFNlc3Npb24odGhpcy5wb3N0LmJpbmQodGhpcyksIHVzZXJJZCwgb3B0aW9ucz8udXNlckluZm8pO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyIGFzIGFuIGFjdG9yIHlvdSB3YW50IHRvIGFsbG93IHRvIHVzZVxuICAgKiBMaXZlYmxvY2tzLlxuICAgKlxuICAgKiBZb3Ugc2hvdWxkIHVzZSB0aGlzIG1ldGhvZCBvbmx5IGlmIHlvdSB3YW50IHRvIG1hbmFnZSB5b3VyIHBlcm1pc3Npb25zXG4gICAqIHRocm91Z2ggdGhlIExpdmVibG9ja3MgUGVybWlzc2lvbnMgQVBJLiBUaGlzIG1ldGhvZCBpcyBtb3JlIGNvbXBsaWNhdGVkIHRvXG4gICAqIHNldCB1cCwgYnV0IGFsbG93cyBmb3IgZmluZXItZ3JhaW5lZCBzcGVjaWZpY2F0aW9uIG9mIHBlcm1pc3Npb25zLlxuICAgKlxuICAgKiBDYWxsaW5nIGAuaWRlbnRpZnlVc2VyKClgIG9ubHkgbGV0cyB5b3Ugc2VjdXJlbHkgaWRlbnRpZnkgYSB1c2VyIChhbmQgd2hhdFxuICAgKiBncm91cHMgdGhleSBiZWxvbmcgdG8pLiBXaGF0IHBlcm1pc3Npb25zIHRoaXMgdXNlciB3aWxsIGVuZCB1cCBoYXZpbmcgaXNcbiAgICogZGV0ZXJtaW5lZCBieSB3aGF0ZXZlciBwZXJtaXNzaW9ucyB5b3UgYXNzaWduIHRoZSB1c2VyL2dyb3VwIGluIHlvdXJcbiAgICogTGl2ZWJsb2NrcyBhY2NvdW50LCB0aHJvdWdoIHRoZSBQZXJtaXNzaW9ucyBBUEk6XG4gICAqIGh0dHBzOi8vbGl2ZWJsb2Nrcy5pby9kb2NzL3Jvb21zL3Blcm1pc3Npb25zXG4gICAqXG4gICAqIElNUE9SVEFOVDpcbiAgICogQWx3YXlzIHZlcmlmeSB0aGF0IHlvdSB0cnVzdCB0aGUgdXNlciBtYWtpbmcgdGhlIHJlcXVlc3QgYmVmb3JlIGNhbGxpbmdcbiAgICogLmlkZW50aWZ5VXNlcigpIVxuICAgKlxuICAgKiBAcGFyYW0gaWRlbnRpdHkgVGVsbCBMaXZlYmxvY2tzIHRoZSB1c2VyIElEIG9mIHRoZSB1c2VyIHRvIGF1dGhlbnRpY2F0ZS5cbiAgICogTXVzdCB1bmlxdWVseSBpZGVudGlmeSB0aGUgdXNlciBhY2NvdW50IGluIHlvdXIgc3lzdGVtLiBUaGUgdW5pcXVlbmVzcyBvZlxuICAgKiB0aGlzIHZhbHVlIHdpbGwgZGV0ZXJtaW5lIGhvdyBtYW55IE1BVXMgd2lsbCBiZSBjb3VudGVkL2JpbGxlZC5cbiAgICpcbiAgICogSWYgeW91IGFsc28gd2FudCB0byBhc3NpZ24gd2hpY2ggZ3JvdXBzIHRoaXMgdXNlciBiZWxvbmdzIHRvLCB1c2UgdGhlXG4gICAqIG9iamVjdCBmb3JtIGFuZCBzcGVjaWZ5IHRoZSBgZ3JvdXBJZHNgIHByb3BlcnR5LiBUaG9zZSBgZ3JvdXBJZHNgIHNob3VsZFxuICAgKiBtYXRjaCB0aGUgZ3JvdXBJZHMgeW91IGFzc2lnbmVkIHBlcm1pc3Npb25zIHRvIHZpYSB0aGUgTGl2ZWJsb2Nrc1xuICAgKiBQZXJtaXNzaW9ucyBBUEksIHNlZVxuICAgKiBodHRwczovL2xpdmVibG9ja3MuaW8vZG9jcy9yb29tcy9wZXJtaXNzaW9ucyNwZXJtaXNzaW9ucy1sZXZlbHMtZ3JvdXBzLWFjY2Vzc2VzLWV4YW1wbGVcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMudXNlckluZm8gQ3VzdG9tIG1ldGFkYXRhIHRvIGF0dGFjaCB0byB0aGlzIHVzZXIuIERhdGEgeW91XG4gICAqIGFkZCBoZXJlIHdpbGwgYmUgdmlzaWJsZSB0byBhbGwgb3RoZXIgY2xpZW50cyBpbiB0aGUgcm9vbSwgdGhyb3VnaCB0aGVcbiAgICogYG90aGVyLmluZm9gIHByb3BlcnR5LlxuICAgKi9cbiAgLy8gVGhlc2UgZmllbGRzIGRlZmluZSB0aGUgc2VjdXJpdHkgaWRlbnRpdHkgb2YgdGhlIHVzZXIuIFdoYXRldmVyIHlvdSBwYXNzIGluIGhlcmUgd2lsbCBkZWZpbmUgd2hpY2hcbiAgYXN5bmMgaWRlbnRpZnlVc2VyKGlkZW50aXR5LCAuLi5yZXN0KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHJlc3RbMF07XG4gICAgY29uc3QgcGF0aCA9IHVybGAvdjIvaWRlbnRpZnktdXNlcmA7XG4gICAgY29uc3QgdXNlcklkID0gdHlwZW9mIGlkZW50aXR5ID09PSBcInN0cmluZ1wiID8gaWRlbnRpdHkgOiBpZGVudGl0eS51c2VySWQ7XG4gICAgY29uc3QgZ3JvdXBJZHMgPSB0eXBlb2YgaWRlbnRpdHkgPT09IFwic3RyaW5nXCIgPyB2b2lkIDAgOiBpZGVudGl0eS5ncm91cElkcztcbiAgICBhc3NlcnROb25FbXB0eSh1c2VySWQsIFwidXNlcklkXCIpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5wb3N0KHBhdGgsIHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBncm91cElkcyxcbiAgICAgICAgLy8gT3B0aW9uYWwgbWV0YWRhdGFcbiAgICAgICAgdXNlckluZm86IG9wdGlvbnM/LnVzZXJJbmZvXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogbm9ybWFsaXplU3RhdHVzQ29kZShyZXNwLnN0YXR1cyksXG4gICAgICAgIGJvZHk6IGF3YWl0IHJlc3AudGV4dCgpXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IDUwMyxcbiAgICAgICAgYm9keTogYENhbGwgdG8gJHt1cmxqb2luKFxuICAgICAgICAgIHRoaXMuX2Jhc2VVcmwsXG4gICAgICAgICAgcGF0aFxuICAgICAgICApfSBmYWlsZWQuIFNlZSBcImVycm9yXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uYCxcbiAgICAgICAgZXJyb3I6IGVyXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFJvb21cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgeW91ciByb29tcy4gVGhlIHJvb21zIGFyZSByZXR1cm5lZCBzb3J0ZWQgYnkgY3JlYXRpb24gZGF0ZSwgZnJvbSBuZXdlc3QgdG8gb2xkZXN0LiBZb3UgY2FuIGZpbHRlciByb29tcyBieSBtZXRhZGF0YSwgdXNlcnMgYWNjZXNzZXMgYW5kIGdyb3VwcyBhY2Nlc3Nlcy5cbiAgICogQHBhcmFtIHBhcmFtcy5saW1pdCAob3B0aW9uYWwpIEEgbGltaXQgb24gdGhlIG51bWJlciBvZiByb29tcyB0byBiZSByZXR1cm5lZC4gVGhlIGxpbWl0IGNhbiByYW5nZSBiZXR3ZWVuIDEgYW5kIDEwMCwgYW5kIGRlZmF1bHRzIHRvIDIwLlxuICAgKiBAcGFyYW0gcGFyYW1zLnN0YXJ0aW5nQWZ0ZXIgKG9wdGlvbmFsKSBBIGN1cnNvciB1c2VkIGZvciBwYWdpbmF0aW9uLiBZb3UgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSByZXNwb25zZSBvZiB0aGUgcHJldmlvdXMgcGFnZS5cbiAgICogQHBhcmFtIHBhcmFtcy51c2VySWQgKG9wdGlvbmFsKSBBIGZpbHRlciBvbiB1c2VycyBhY2Nlc3Nlcy5cbiAgICogQHBhcmFtIHBhcmFtcy5tZXRhZGF0YSAob3B0aW9uYWwpIEEgZmlsdGVyIG9uIG1ldGFkYXRhLiBNdWx0aXBsZSBtZXRhZGF0YSBrZXlzIGNhbiBiZSB1c2VkIHRvIGZpbHRlciByb29tcy5cbiAgICogQHBhcmFtIHBhcmFtcy5ncm91cElkcyAob3B0aW9uYWwpIEEgZmlsdGVyIG9uIGdyb3VwcyBhY2Nlc3Nlcy4gTXVsdGlwbGUgZ3JvdXBzIGNhbiBiZSB1c2VkLlxuICAgKiBAcGFyYW0gcGFyYW1zLnF1ZXJ5IChvcHRpb25hbCkgQSBxdWVyeSB0byBmaWx0ZXIgcm9vbXMgYnkuIEl0IGlzIGJhc2VkIG9uIG91ciBxdWVyeSBsYW5ndWFnZS4gWW91IGNhbiBmaWx0ZXIgYnkgbWV0YWRhdGEgYW5kIHJvb20gSUQuXG4gICAqIEByZXR1cm5zIEEgbGlzdCBvZiByb29tcy5cbiAgICovXG4gIGFzeW5jIGdldFJvb21zKHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgcGF0aCA9IHVybGAvdjIvcm9vbXNgO1xuICAgIGxldCBxdWVyeTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5xdWVyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcXVlcnkgPSBwYXJhbXMucXVlcnk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyYW1zLnF1ZXJ5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBxdWVyeSA9IG9iamVjdFRvUXVlcnkocGFyYW1zLnF1ZXJ5KTtcbiAgICB9XG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICBsaW1pdDogcGFyYW1zLmxpbWl0LFxuICAgICAgc3RhcnRpbmdBZnRlcjogcGFyYW1zLnN0YXJ0aW5nQWZ0ZXIsXG4gICAgICB1c2VySWQ6IHBhcmFtcy51c2VySWQsXG4gICAgICBncm91cElkczogcGFyYW1zLmdyb3VwSWRzID8gcGFyYW1zLmdyb3VwSWRzLmpvaW4oXCIsXCIpIDogdm9pZCAwLFxuICAgICAgLy8gXCJGbGF0dGVuXCIge21ldGFkYXRhOiB7Zm9vOiBcImJhclwifX0gdG8ge1wibWV0YWRhdGEuZm9vXCI6IFwiYmFyXCJ9XG4gICAgICAuLi5PYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHBhcmFtcy5tZXRhZGF0YSA/PyB7fSkubWFwKChba2V5LCB2YWxdKSA9PiBbXG4gICAgICAgICAgYG1ldGFkYXRhLiR7a2V5fWAsXG4gICAgICAgICAgdmFsXG4gICAgICAgIF0pXG4gICAgICApLFxuICAgICAgcXVlcnlcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KHBhdGgsIHF1ZXJ5UGFyYW1zKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBjb25zdCByb29tcyA9IGRhdGEuZGF0YS5tYXAoKHJvb20pID0+IHtcbiAgICAgIGNvbnN0IGxhc3RDb25uZWN0aW9uQXQgPSByb29tLmxhc3RDb25uZWN0aW9uQXQgPyBuZXcgRGF0ZShyb29tLmxhc3RDb25uZWN0aW9uQXQpIDogdm9pZCAwO1xuICAgICAgY29uc3QgY3JlYXRlZEF0ID0gbmV3IERhdGUocm9vbS5jcmVhdGVkQXQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucm9vbSxcbiAgICAgICAgY3JlYXRlZEF0LFxuICAgICAgICBsYXN0Q29ubmVjdGlvbkF0XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgZGF0YTogcm9vbXNcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHJvb20gd2l0aCB0aGUgZ2l2ZW4gaWQuXG4gICAqIEBwYXJhbSByb29tSWQgVGhlIGlkIG9mIHRoZSByb29tIHRvIGNyZWF0ZS5cbiAgICogQHBhcmFtIHBhcmFtcy5kZWZhdWx0QWNjZXNzZXMgVGhlIGRlZmF1bHQgYWNjZXNzZXMgZm9yIHRoZSByb29tLlxuICAgKiBAcGFyYW0gcGFyYW1zLmdyb3Vwc0FjY2Vzc2VzIChvcHRpb25hbCkgVGhlIGdyb3VwIGFjY2Vzc2VzIGZvciB0aGUgcm9vbS4gQ2FuIGNvbnRhaW4gYSBtYXhpbXVtIG9mIDEwMCBlbnRyaWVzLiBLZXkgbGVuZ3RoIGhhcyBhIGxpbWl0IG9mIDQwIGNoYXJhY3RlcnMuXG4gICAqIEBwYXJhbSBwYXJhbXMudXNlcnNBY2Nlc3NlcyAob3B0aW9uYWwpIFRoZSB1c2VyIGFjY2Vzc2VzIGZvciB0aGUgcm9vbS4gQ2FuIGNvbnRhaW4gYSBtYXhpbXVtIG9mIDEwMCBlbnRyaWVzLiBLZXkgbGVuZ3RoIGhhcyBhIGxpbWl0IG9mIDQwIGNoYXJhY3RlcnMuXG4gICAqIEBwYXJhbSBwYXJhbXMubWV0YWRhdGEgKG9wdGlvbmFsKSBUaGUgbWV0YWRhdGEgZm9yIHRoZSByb29tLiBTdXBwb3J0cyB1cHRvIGEgbWF4aW11bSBvZiA1MCBlbnRyaWVzLiBLZXkgbGVuZ3RoIGhhcyBhIGxpbWl0IG9mIDQwIGNoYXJhY3RlcnMuIFZhbHVlIGxlbmd0aCBoYXMgYSBsaW1pdCBvZiAyNTYgY2hhcmFjdGVycy5cbiAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgcm9vbS5cbiAgICovXG4gIGFzeW5jIGNyZWF0ZVJvb20ocm9vbUlkLCBwYXJhbXMpIHtcbiAgICBjb25zdCB7IGRlZmF1bHRBY2Nlc3NlcywgZ3JvdXBzQWNjZXNzZXMsIHVzZXJzQWNjZXNzZXMsIG1ldGFkYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KHVybGAvdjIvcm9vbXNgLCB7XG4gICAgICBpZDogcm9vbUlkLFxuICAgICAgZGVmYXVsdEFjY2Vzc2VzLFxuICAgICAgZ3JvdXBzQWNjZXNzZXMsXG4gICAgICB1c2Vyc0FjY2Vzc2VzLFxuICAgICAgbWV0YWRhdGFcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBjb25zdCBsYXN0Q29ubmVjdGlvbkF0ID0gZGF0YS5sYXN0Q29ubmVjdGlvbkF0ID8gbmV3IERhdGUoZGF0YS5sYXN0Q29ubmVjdGlvbkF0KSA6IHZvaWQgMDtcbiAgICBjb25zdCBjcmVhdGVkQXQgPSBuZXcgRGF0ZShkYXRhLmNyZWF0ZWRBdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBsYXN0Q29ubmVjdGlvbkF0LFxuICAgICAgY3JlYXRlZEF0XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHJvb20gd2l0aCB0aGUgZ2l2ZW4gaWQuXG4gICAqIEBwYXJhbSByb29tSWQgVGhlIGlkIG9mIHRoZSByb29tIHRvIHJldHVybi5cbiAgICogQHJldHVybnMgVGhlIHJvb20gd2l0aCB0aGUgZ2l2ZW4gaWQuXG4gICAqL1xuICBhc3luYyBnZXRSb29tKHJvb21JZCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KHVybGAvdjIvcm9vbXMvJHtyb29tSWR9YCk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgY29uc3QgbGFzdENvbm5lY3Rpb25BdCA9IGRhdGEubGFzdENvbm5lY3Rpb25BdCA/IG5ldyBEYXRlKGRhdGEubGFzdENvbm5lY3Rpb25BdCkgOiB2b2lkIDA7XG4gICAgY29uc3QgY3JlYXRlZEF0ID0gbmV3IERhdGUoZGF0YS5jcmVhdGVkQXQpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgY3JlYXRlZEF0LFxuICAgICAgbGFzdENvbm5lY3Rpb25BdFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgc3BlY2lmaWMgcHJvcGVydGllcyBvZiBhIHJvb20uIEl04oCZcyBub3QgbmVjZXNzYXJ5IHRvIHByb3ZpZGUgdGhlIGVudGlyZSByb29t4oCZcyBpbmZvcm1hdGlvbi5cbiAgICogU2V0dGluZyBhIHByb3BlcnR5IHRvIGBudWxsYCBtZWFucyB0byBkZWxldGUgdGhpcyBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHJvb21JZCBUaGUgaWQgb2YgdGhlIHJvb20gdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0gcGFyYW1zLmRlZmF1bHRBY2Nlc3NlcyAob3B0aW9uYWwpIFRoZSBkZWZhdWx0IGFjY2Vzc2VzIGZvciB0aGUgcm9vbS5cbiAgICogQHBhcmFtIHBhcmFtcy5ncm91cHNBY2Nlc3NlcyAob3B0aW9uYWwpIFRoZSBncm91cCBhY2Nlc3NlcyBmb3IgdGhlIHJvb20uIENhbiBjb250YWluIGEgbWF4aW11bSBvZiAxMDAgZW50cmllcy4gS2V5IGxlbmd0aCBoYXMgYSBsaW1pdCBvZiA0MCBjaGFyYWN0ZXJzLlxuICAgKiBAcGFyYW0gcGFyYW1zLnVzZXJzQWNjZXNzZXMgKG9wdGlvbmFsKSBUaGUgdXNlciBhY2Nlc3NlcyBmb3IgdGhlIHJvb20uIENhbiBjb250YWluIGEgbWF4aW11bSBvZiAxMDAgZW50cmllcy4gS2V5IGxlbmd0aCBoYXMgYSBsaW1pdCBvZiA0MCBjaGFyYWN0ZXJzLlxuICAgKiBAcGFyYW0gcGFyYW1zLm1ldGFkYXRhIChvcHRpb25hbCkgVGhlIG1ldGFkYXRhIGZvciB0aGUgcm9vbS4gU3VwcG9ydHMgdXB0byBhIG1heGltdW0gb2YgNTAgZW50cmllcy4gS2V5IGxlbmd0aCBoYXMgYSBsaW1pdCBvZiA0MCBjaGFyYWN0ZXJzLiBWYWx1ZSBsZW5ndGggaGFzIGEgbGltaXQgb2YgMjU2IGNoYXJhY3RlcnMuXG4gICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIHJvb20uXG4gICAqL1xuICBhc3luYyB1cGRhdGVSb29tKHJvb21JZCwgcGFyYW1zKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0QWNjZXNzZXMsIGdyb3Vwc0FjY2Vzc2VzLCB1c2Vyc0FjY2Vzc2VzLCBtZXRhZGF0YSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucG9zdCh1cmxgL3YyL3Jvb21zLyR7cm9vbUlkfWAsIHtcbiAgICAgIGRlZmF1bHRBY2Nlc3NlcyxcbiAgICAgIGdyb3Vwc0FjY2Vzc2VzLFxuICAgICAgdXNlcnNBY2Nlc3NlcyxcbiAgICAgIG1ldGFkYXRhXG4gICAgfSk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgY29uc3QgbGFzdENvbm5lY3Rpb25BdCA9IGRhdGEubGFzdENvbm5lY3Rpb25BdCA/IG5ldyBEYXRlKGRhdGEubGFzdENvbm5lY3Rpb25BdCkgOiB2b2lkIDA7XG4gICAgY29uc3QgY3JlYXRlZEF0ID0gbmV3IERhdGUoZGF0YS5jcmVhdGVkQXQpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgbGFzdENvbm5lY3Rpb25BdCxcbiAgICAgIGNyZWF0ZWRBdFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSByb29tIHdpdGggdGhlIGdpdmVuIGlkLiBBIGRlbGV0ZWQgcm9vbSBpcyBubyBsb25nZXIgYWNjZXNzaWJsZSBmcm9tIHRoZSBBUEkgb3IgdGhlIGRhc2hib2FyZCBhbmQgaXQgY2Fubm90IGJlIHJlc3RvcmVkLlxuICAgKiBAcGFyYW0gcm9vbUlkIFRoZSBpZCBvZiB0aGUgcm9vbSB0byBkZWxldGUuXG4gICAqL1xuICBhc3luYyBkZWxldGVSb29tKHJvb21JZCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZGVsZXRlKHVybGAvdjIvcm9vbXMvJHtyb29tSWR9YCk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHVzZXJzIGN1cnJlbnRseSBwcmVzZW50IGluIHRoZSByZXF1ZXN0ZWQgcm9vbS4gRm9yIGJldHRlciBwZXJmb3JtYW5jZSwgd2UgcmVjb21tYW5kIHRvIGNhbGwgdGhpcyBlbmRwb2ludCBldmVyeSAxMCBzZWNvbmRzIG1heGltdW0uIER1cGxpY2F0ZXMgY2FuIGhhcHBlbiBpZiBhIHVzZXIgaXMgaW4gdGhlIHJlcXVlc3RlZCByb29tIHdpdGggbXVsdGlwbGUgYnJvd3NlciB0YWJzIG9wZW5lZC5cbiAgICogQHBhcmFtIHJvb21JZCBUaGUgaWQgb2YgdGhlIHJvb20gdG8gZ2V0IHRoZSB1c2VycyBmcm9tLlxuICAgKiBAcmV0dXJucyBBIGxpc3Qgb2YgdXNlcnMgY3VycmVudGx5IHByZXNlbnQgaW4gdGhlIHJlcXVlc3RlZCByb29tLlxuICAgKi9cbiAgYXN5bmMgZ2V0QWN0aXZlVXNlcnMocm9vbUlkKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXQodXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vYWN0aXZlX3VzZXJzYCk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHJlcy5qc29uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEJvYWRjYXN0cyBhbiBldmVudCB0byBhIHJvb20gd2l0aG91dCBoYXZpbmcgdG8gY29ubmVjdCB0byBpdCB2aWEgdGhlIGNsaWVudCBmcm9tIEBsaXZlYmxvY2tzL2NsaWVudC4gVGhlIGNvbm5lY3Rpb25JZCBwYXNzZWQgdG8gZXZlbnQgbGlzdGVuZXJzIGlzIC0xIHdoZW4gdXNpbmcgdGhpcyBBUEkuXG4gICAqIEBwYXJhbSByb29tSWQgVGhlIGlkIG9mIHRoZSByb29tIHRvIGJyb2FkY2FzdCB0aGUgZXZlbnQgdG8uXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGJyb2FkY2FzdC4gSXQgY2FuIGJlIGFueSBKU09OIHNlcmlhbGl6YWJsZSB2YWx1ZS5cbiAgICovXG4gIGFzeW5jIGJyb2FkY2FzdEV2ZW50KHJvb21JZCwgbWVzc2FnZSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucG9zdChcbiAgICAgIHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L2Jyb2FkY2FzdF9ldmVudGAsXG4gICAgICBtZXNzYWdlXG4gICAgKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBnZXRTdG9yYWdlRG9jdW1lbnQocm9vbUlkLCBmb3JtYXQgPSBcInBsYWluLWxzb25cIikge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3N0b3JhZ2VgLCB7IGZvcm1hdCB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcbiAgfVxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgYSByb29t4oCZcyBTdG9yYWdlLiBUaGUgcm9vbSBtdXN0IGFscmVhZHkgZXhpc3QgYW5kIGhhdmUgYW4gZW1wdHkgU3RvcmFnZS5cbiAgICogQ2FsbGluZyB0aGlzIGVuZHBvaW50IHdpbGwgZGlzY29ubmVjdCBhbGwgdXNlcnMgZnJvbSB0aGUgcm9vbSBpZiB0aGVyZSBhcmUgYW55LlxuICAgKlxuICAgKiBAcGFyYW0gcm9vbUlkIFRoZSBpZCBvZiB0aGUgcm9vbSB0byBpbml0aWFsaXplIHRoZSBzdG9yYWdlIGZyb20uXG4gICAqIEBwYXJhbSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgdG8gaW5pdGlhbGl6ZSB0aGUgc3RvcmFnZSB3aXRoLlxuICAgKiBAcmV0dXJucyBUaGUgaW5pdGlhbGl6ZWQgc3RvcmFnZSBkb2N1bWVudC4gSXQgaXMgb2YgdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBvbmUgcGFzc2VkIGluLlxuICAgKi9cbiAgYXN5bmMgaW5pdGlhbGl6ZVN0b3JhZ2VEb2N1bWVudChyb29tSWQsIGRvY3VtZW50KSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3N0b3JhZ2VgLCBkb2N1bWVudCk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHJlcy5qc29uKCk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIG9mIHRoZSByb29t4oCZcyBTdG9yYWdlIGRhdGEgYW5kIGRpc2Nvbm5lY3QgYWxsIHVzZXJzIGZyb20gdGhlIHJvb20gaWYgdGhlcmUgYXJlIGFueS4gTm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgZGVsZXRlIHRoZSBZanMgZG9jdW1lbnQgaW4gdGhlIHJvb20gaWYgb25lIGV4aXN0cy5cbiAgICogQHBhcmFtIHJvb21JZCBUaGUgaWQgb2YgdGhlIHJvb20gdG8gZGVsZXRlIHRoZSBzdG9yYWdlIGZyb20uXG4gICAqL1xuICBhc3luYyBkZWxldGVTdG9yYWdlRG9jdW1lbnQocm9vbUlkKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5kZWxldGUodXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vc3RvcmFnZWApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICB9XG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogWWpzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByb29t4oCZcyBZanMgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSByb29tSWQgVGhlIGlkIG9mIHRoZSByb29tIHRvIGdldCB0aGUgWWpzIGRvY3VtZW50IGZyb20uXG4gICAqIEBwYXJhbSBwYXJhbXMuZm9ybWF0IChvcHRpb25hbCkgSWYgdHJ1ZSwgWVRleHQgd2lsbCByZXR1cm4gZm9ybWF0dGluZy5cbiAgICogQHBhcmFtIHBhcmFtcy5rZXkgKG9wdGlvbmFsKSBJZiBwcm92aWRlZCwgcmV0dXJucyBvbmx5IGEgc2luZ2xlIGtleeKAmXMgdmFsdWUsIGUuZy4gZG9jLmdldChrZXkpLnRvSlNPTigpLlxuICAgKiBAcGFyYW0gcGFyYW1zLnR5cGUgKG9wdGlvbmFsKSBVc2VkIHdpdGgga2V5IHRvIG92ZXJyaWRlIHRoZSBpbmZlcnJlZCB0eXBlLCBpLmUuIFwieW1hcFwiIHdpbGwgcmV0dXJuIGRvYy5nZXQoa2V5LCBZLk1hcCkuXG4gICAqIEByZXR1cm5zIEEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcm9vbeKAmXMgWWpzIGRvY3VtZW50LlxuICAgKi9cbiAgYXN5bmMgZ2V0WWpzRG9jdW1lbnQocm9vbUlkLCBwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHsgZm9ybWF0LCBrZXksIHR5cGUgfSA9IHBhcmFtcztcbiAgICBjb25zdCBwYXRoID0gdXJsYHYyL3Jvb21zLyR7cm9vbUlkfS95ZG9jYDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmdldChwYXRoLCB7XG4gICAgICBmb3JtYXR0aW5nOiBmb3JtYXQgPyBcInRydWVcIiA6IHZvaWQgMCxcbiAgICAgIGtleSxcbiAgICAgIHR5cGVcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcbiAgfVxuICAvKipcbiAgICogU2VuZCBhIFlqcyBiaW5hcnkgdXBkYXRlIHRvIHRoZSByb29t4oCZcyBZanMgZG9jdW1lbnQuIFlvdSBjYW4gdXNlIHRoaXMgZW5kcG9pbnQgdG8gaW5pdGlhbGl6ZSBZanMgZGF0YSBmb3IgdGhlIHJvb20gb3IgdG8gdXBkYXRlIHRoZSByb29t4oCZcyBZanMgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSByb29tSWQgVGhlIGlkIG9mIHRoZSByb29tIHRvIHNlbmQgdGhlIFlqcyBiaW5hcnkgdXBkYXRlIHRvLlxuICAgKiBAcGFyYW0gdXBkYXRlIFRoZSBZanMgdXBkYXRlIHRvIHNlbmQuIFR5cGljYWxseSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYFlqcy5lbmNvZGVTdGF0ZUFzVXBkYXRlKGRvYylgLiBSZWFkIHRoZSBbWWpzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy55anMuZGV2L2FwaS9kb2N1bWVudC11cGRhdGVzKSB0byBsZWFybiBob3cgdG8gY3JlYXRlIGEgYmluYXJ5IHVwZGF0ZS5cbiAgICogQHBhcmFtIHBhcmFtcy5ndWlkIChvcHRpb25hbCkgSWYgcHJvdmlkZWQsIHRoZSBiaW5hcnkgdXBkYXRlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgWWpzIHN1YmRvY3VtZW50IHdpdGggdGhlIGdpdmVuIGd1aWQuIElmIG5vdCBwcm92aWRlZCwgdGhlIGJpbmFyeSB1cGRhdGUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSByb290IFlqcyBkb2N1bWVudC5cbiAgICovXG4gIGFzeW5jIHNlbmRZanNCaW5hcnlVcGRhdGUocm9vbUlkLCB1cGRhdGUsIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wdXRCaW5hcnkodXJsYC92Mi9yb29tcy8ke3Jvb21JZH0veWRvY2AsIHVwZGF0ZSwge1xuICAgICAgZ3VpZDogcGFyYW1zLmd1aWRcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcm9vbeKAmXMgWWpzIGRvY3VtZW50IGVuY29kZWQgYXMgYSBzaW5nbGUgYmluYXJ5IHVwZGF0ZS4gVGhpcyBjYW4gYmUgdXNlZCBieSBZLmFwcGx5VXBkYXRlKHJlc3BvbnNlQm9keSkgdG8gZ2V0IGEgY29weSBvZiB0aGUgZG9jdW1lbnQgaW4geW91ciBiYWNrZW5kLlxuICAgKiBTZWUgW1lqcyBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3MueWpzLmRldi9hcGkvZG9jdW1lbnQtdXBkYXRlcykgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gd29ya2luZyB3aXRoIHVwZGF0ZXMuXG4gICAqIEBwYXJhbSByb29tSWQgVGhlIGlkIG9mIHRoZSByb29tIHRvIGdldCB0aGUgWWpzIGRvY3VtZW50IGZyb20uXG4gICAqIEBwYXJhbSBwYXJhbXMuZ3VpZCAob3B0aW9uYWwpIElmIHByb3ZpZGVkLCByZXR1cm5zIHRoZSBiaW5hcnkgdXBkYXRlIG9mIHRoZSBZanMgc3ViZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gZ3VpZC4gSWYgbm90IHByb3ZpZGVkLCByZXR1cm5zIHRoZSBiaW5hcnkgdXBkYXRlIG9mIHRoZSByb290IFlqcyBkb2N1bWVudC5cbiAgICogQHJldHVybnMgVGhlIHJvb23igJlzIFlqcyBkb2N1bWVudCBlbmNvZGVkIGFzIGEgc2luZ2xlIGJpbmFyeSB1cGRhdGUuXG4gICAqL1xuICBhc3luYyBnZXRZanNEb2N1bWVudEFzQmluYXJ5VXBkYXRlKHJvb21JZCwgcGFyYW1zID0ge30pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmdldCh1cmxgL3YyL3Jvb21zLyR7cm9vbUlkfS95ZG9jLWJpbmFyeWAsIHtcbiAgICAgIGd1aWQ6IHBhcmFtcy5ndWlkXG4gICAgfSk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5hcnJheUJ1ZmZlcigpO1xuICB9XG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogU2NoZW1hIFZhbGlkYXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBzY2hlbWEgd2hpY2ggY2FuIGJlIHJlZmVyZW5jZWQgbGF0ZXIgdG8gZW5mb3JjZSBhIHJvb23igJlzIFN0b3JhZ2UgZGF0YSBzdHJ1Y3R1cmUuXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSBzY2hlbWEuIE11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nIHdpdGggbGVzcyB0aGFuIDY1IGNoYXJhY3RlcnMgYW5kIG9ubHkgY29udGFpbiBsb3dlcmNhc2UgbGV0dGVycywgbnVtYmVycyBhbmQgZGFzaGVzXG4gICAqIEBwYXJhbSBib2R5IFRoZSBleGFjdCBhbGxvd2VkIHNoYXBlIG9mIGRhdGEgaW4gdGhlIHJvb20uIEl0IGlzIGEgbXVsdGktbGluZSBzdHJpbmcgd3JpdHRlbiBpbiB0aGUgW0xpdmVibG9ja3Mgc2NoZW1hIHN5bnRheF0oaHR0cHM6Ly9saXZlYmxvY2tzLmlvL2RvY3MvcGxhdGZvcm0vc2NoZW1hLXZhbGlkYXRpb24vc3ludGF4KS5cbiAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgc2NoZW1hLlxuICAgKi9cbiAgYXN5bmMgY3JlYXRlU2NoZW1hKG5hbWUsIGJvZHkpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnBvc3QodXJsYC92Mi9zY2hlbWFzYCwge1xuICAgICAgbmFtZSxcbiAgICAgIGJvZHlcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBjb25zdCBjcmVhdGVkQXQgPSBuZXcgRGF0ZShkYXRhLmNyZWF0ZWRBdCk7XG4gICAgY29uc3QgdXBkYXRlZEF0ID0gbmV3IERhdGUoZGF0YS51cGRhdGVkQXQpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5kYXRhLFxuICAgICAgY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZEF0XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHNjaGVtYSBieSBpdHMgaWQuXG4gICAqIEBwYXJhbSBzY2hlbWFJZCBJZCBvZiB0aGUgc2NoZW1hIC0gdGhpcyBpcyB0aGUgY29tYmluYXRpb24gb2YgdGhlIHNjaGVtYSBuYW1lIGFuZCB2ZXJzaW9uIG9mIHRoZSBzY2hlbWEgdG8gdXBkYXRlLiBGb3IgZXhhbXBsZSwgYG15LXNjaGVtYUAxYC5cbiAgICogQHJldHVybnMgVGhlIHNjaGVtYSB3aXRoIHRoZSBnaXZlbiBpZC5cbiAgICovXG4gIGFzeW5jIGdldFNjaGVtYShzY2hlbWFJZCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KHVybGAvdjIvc2NoZW1hcy8ke3NjaGVtYUlkfWApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGNvbnN0IGNyZWF0ZWRBdCA9IG5ldyBEYXRlKGRhdGEuY3JlYXRlZEF0KTtcbiAgICBjb25zdCB1cGRhdGVkQXQgPSBuZXcgRGF0ZShkYXRhLnVwZGF0ZWRBdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBjcmVhdGVkQXQsXG4gICAgICB1cGRhdGVkQXRcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBib2R5IGZvciB0aGUgc2NoZW1hLiBBIHNjaGVtYSBjYW4gb25seSBiZSB1cGRhdGVkIGlmIGl0IGlzIG5vdCB1c2VkIGJ5IGFueSByb29tLlxuICAgKiBAcGFyYW0gc2NoZW1hSWQgSWQgb2YgdGhlIHNjaGVtYSAtIHRoaXMgaXMgdGhlIGNvbWJpbmF0aW9uIG9mIHRoZSBzY2hlbWEgbmFtZSBhbmQgdmVyc2lvbiBvZiB0aGUgc2NoZW1hIHRvIHVwZGF0ZS4gRm9yIGV4YW1wbGUsIGBteS1zY2hlbWFAMWAuXG4gICAqIEBwYXJhbSBib2R5IFRoZSBleGFjdCBhbGxvd2VkIHNoYXBlIG9mIGRhdGEgaW4gdGhlIHJvb20uIEl0IGlzIGEgbXVsdGktbGluZSBzdHJpbmcgd3JpdHRlbiBpbiB0aGUgW0xpdmVibG9ja3Mgc2NoZW1hIHN5bnRheF0oaHR0cHM6Ly9saXZlYmxvY2tzLmlvL2RvY3MvcGxhdGZvcm0vc2NoZW1hLXZhbGlkYXRpb24vc3ludGF4KS5cbiAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgc2NoZW1hLiBUaGUgdmVyc2lvbiBvZiB0aGUgc2NoZW1hIHdpbGwgYmUgaW5jcmVtZW50ZWQuXG4gICAqL1xuICBhc3luYyB1cGRhdGVTY2hlbWEoc2NoZW1hSWQsIGJvZHkpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnB1dCh1cmxgL3YyL3NjaGVtYXMvJHtzY2hlbWFJZH1gLCB7XG4gICAgICBib2R5XG4gICAgfSk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgY29uc3QgY3JlYXRlZEF0ID0gbmV3IERhdGUoZGF0YS5jcmVhdGVkQXQpO1xuICAgIGNvbnN0IHVwZGF0ZWRBdCA9IG5ldyBEYXRlKGRhdGEudXBkYXRlZEF0KTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGNyZWF0ZWRBdCxcbiAgICAgIHVwZGF0ZWRBdFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBzY2hlbWEgYnkgaXRzIGlkLiBBIHNjaGVtYSBjYW4gb25seSBiZSBkZWxldGVkIGlmIGl0IGlzIG5vdCB1c2VkIGJ5IGFueSByb29tLlxuICAgKiBAcGFyYW0gc2NoZW1hSWQgSWQgb2YgdGhlIHNjaGVtYSAtIHRoaXMgaXMgdGhlIGNvbWJpbmF0aW9uIG9mIHRoZSBzY2hlbWEgbmFtZSBhbmQgdmVyc2lvbiBvZiB0aGUgc2NoZW1hIHRvIHVwZGF0ZS4gRm9yIGV4YW1wbGUsIGBteS1zY2hlbWFAMWAuXG4gICAqL1xuICBhc3luYyBkZWxldGVTY2hlbWEoc2NoZW1hSWQpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmRlbGV0ZSh1cmxgL3YyL3NjaGVtYXMvJHtzY2hlbWFJZH1gKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2NoZW1hIGF0dGFjaGVkIHRvIGEgcm9vbS5cbiAgICogQHBhcmFtIHJvb21JZCBUaGUgaWQgb2YgdGhlIHJvb20gdG8gZ2V0IHRoZSBzY2hlbWEgZnJvbS5cbiAgICogQHJldHVybnNcbiAgICovXG4gIGFzeW5jIGdldFNjaGVtYUJ5Um9vbUlkKHJvb21JZCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3NjaGVtYWApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGNvbnN0IGNyZWF0ZWRBdCA9IG5ldyBEYXRlKGRhdGEuY3JlYXRlZEF0KTtcbiAgICBjb25zdCB1cGRhdGVkQXQgPSBuZXcgRGF0ZShkYXRhLnVwZGF0ZWRBdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBjcmVhdGVkQXQsXG4gICAgICB1cGRhdGVkQXRcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2hlcyBhIHNjaGVtYSB0byBhIHJvb20sIGFuZCBpbnN0YW50bHkgZW5hYmxlcyBydW50aW1lIHNjaGVtYSB2YWxpZGF0aW9uIGZvciB0aGUgcm9vbS5cbiAgICogSWYgdGhlIGN1cnJlbnQgY29udGVudHMgb2YgdGhlIHJvb23igJlzIFN0b3JhZ2UgZG8gbm90IG1hdGNoIHRoZSBzY2hlbWEsIGF0dGFjaGluZyB3aWxsIGZhaWwgYW5kIHRoZSBlcnJvciBtZXNzYWdlIHdpbGwgZ2l2ZSBkZXRhaWxzIG9uIHdoeSB0aGUgc2NoZW1hIGZhaWxlZCB0byBhdHRhY2guXG4gICAqIEBwYXJhbSByb29tSWQgVGhlIGlkIG9mIHRoZSByb29tIHRvIGF0dGFjaCB0aGUgc2NoZW1hIHRvLlxuICAgKiBAcGFyYW0gc2NoZW1hSWQgSWQgb2YgdGhlIHNjaGVtYSAtIHRoaXMgaXMgdGhlIGNvbWJpbmF0aW9uIG9mIHRoZSBzY2hlbWEgbmFtZSBhbmQgdmVyc2lvbiBvZiB0aGUgc2NoZW1hIHRvIHVwZGF0ZS4gRm9yIGV4YW1wbGUsIGBteS1zY2hlbWFAMWAuXG4gICAqIEByZXR1cm5zIFRoZSBzY2hlbWEgaWQgYXMgSlNPTi5cbiAgICovXG4gIGFzeW5jIGF0dGFjaFNjaGVtYVRvUm9vbShyb29tSWQsIHNjaGVtYUlkKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3NjaGVtYWAsIHtcbiAgICAgIHNjaGVtYTogc2NoZW1hSWRcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoZXMgYSBzY2hlbWEgZnJvbSBhIHJvb20sIGFuZCBkaXNhYmxlcyBydW50aW1lIHNjaGVtYSB2YWxpZGF0aW9uIGZvciB0aGUgcm9vbS5cbiAgICogQHBhcmFtIHJvb21JZCBUaGUgaWQgb2YgdGhlIHJvb20gdG8gZGV0YWNoIHRoZSBzY2hlbWEgZnJvbS5cbiAgICovXG4gIGFzeW5jIGRldGFjaFNjaGVtYUZyb21Sb29tKHJvb21JZCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZGVsZXRlKHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3NjaGVtYWApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICB9XG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29tbWVudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAvKipcbiAgICogR2V0cyBhbGwgdGhlIHRocmVhZHMgaW4gYSByb29tLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byBnZXQgdGhlIHRocmVhZHMgZnJvbS5cbiAgICogQHBhcmFtIHBhcmFtcy5xdWVyeSBUaGUgcXVlcnkgdG8gZmlsdGVyIHRocmVhZHMgYnkuIEl0IGlzIGJhc2VkIG9uIG91ciBxdWVyeSBsYW5ndWFnZSBhbmQgY2FuIGZpbHRlciBieSBtZXRhZGF0YS5cbiAgICogQHJldHVybnMgQSBsaXN0IG9mIHRocmVhZHMuXG4gICAqL1xuICBhc3luYyBnZXRUaHJlYWRzKHBhcmFtcykge1xuICAgIGNvbnN0IHsgcm9vbUlkIH0gPSBwYXJhbXM7XG4gICAgbGV0IHF1ZXJ5O1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLnF1ZXJ5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBxdWVyeSA9IHBhcmFtcy5xdWVyeTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJhbXMucXVlcnkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHF1ZXJ5ID0gb2JqZWN0VG9RdWVyeShwYXJhbXMucXVlcnkpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmdldCh1cmxgL3YyL3Jvb21zLyR7cm9vbUlkfS90aHJlYWRzYCwge1xuICAgICAgcXVlcnlcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IGRhdGEubWFwKCh0aHJlYWQpID0+IGNvbnZlcnRUb1RocmVhZERhdGEodGhyZWFkKSlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgdGhyZWFkLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byBnZXQgdGhlIHRocmVhZCBmcm9tLlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZElkIFRoZSB0aHJlYWQgSUQuXG4gICAqIEByZXR1cm5zIEEgdGhyZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0VGhyZWFkKHBhcmFtcykge1xuICAgIGNvbnN0IHsgcm9vbUlkLCB0aHJlYWRJZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3RocmVhZHMvJHt0aHJlYWRJZH1gKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udmVydFRvVGhyZWFkRGF0YShhd2FpdCByZXMuanNvbigpKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIHRocmVhZCdzIHBhcnRpY2lwYW50cy5cbiAgICpcbiAgICogUGFydGljaXBhbnRzIGFyZSB1c2VycyB3aG8gaGF2ZSBjb21tZW50ZWQgb24gdGhlIHRocmVhZFxuICAgKiBvciB1c2VycyBhbmQgZ3JvdXBzIHRoYXQgaGF2ZSBiZWVuIG1lbnRpb25lZCBpbiBhIGNvbW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMucm9vbUlkIFRoZSByb29tIElEIHRvIGdldCB0aGUgdGhyZWFkIHBhcnRpY2lwYW50cyBmcm9tLlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZElkIFRoZSB0aHJlYWQgSUQgdG8gZ2V0IHRoZSBwYXJ0aWNpcGFudHMgZnJvbS5cbiAgICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgcGFydGljaXBhbnQgSURzLlxuICAgKi9cbiAgYXN5bmMgZ2V0VGhyZWFkUGFydGljaXBhbnRzKHBhcmFtcykge1xuICAgIGNvbnN0IHsgcm9vbUlkLCB0aHJlYWRJZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkcy8ke3RocmVhZElkfS9wYXJ0aWNpcGFudHNgXG4gICAgKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIHRocmVhZCdzIGNvbW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMucm9vbUlkIFRoZSByb29tIElEIHRvIGdldCB0aGUgY29tbWVudCBmcm9tLlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZElkIFRoZSB0aHJlYWQgSUQgdG8gZ2V0IHRoZSBjb21tZW50IGZyb20uXG4gICAqIEBwYXJhbSBwYXJhbXMuY29tbWVudElkIFRoZSBjb21tZW50IElELlxuICAgKiBAcmV0dXJucyBBIGNvbW1lbnQuXG4gICAqL1xuICBhc3luYyBnZXRDb21tZW50KHBhcmFtcykge1xuICAgIGNvbnN0IHsgcm9vbUlkLCB0aHJlYWRJZCwgY29tbWVudElkIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXQoXG4gICAgICB1cmxgL3YyL3Jvb21zLyR7cm9vbUlkfS90aHJlYWRzLyR7dGhyZWFkSWR9L2NvbW1lbnRzLyR7Y29tbWVudElkfWBcbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0VG9Db21tZW50RGF0YShhd2FpdCByZXMuanNvbigpKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMucm9vbUlkIFRoZSByb29tIElEIHRvIGNyZWF0ZSB0aGUgY29tbWVudCBpbi5cbiAgICogQHBhcmFtIHBhcmFtcy50aHJlYWRJZCBUaGUgdGhyZWFkIElEIHRvIGNyZWF0ZSB0aGUgY29tbWVudCBpbi5cbiAgICogQHBhcmFtIHBhcmFtcy5kYXRhLnVzZXJJZCBUaGUgdXNlciBJRCBvZiB0aGUgdXNlciB3aG8gaXMgc2V0IHRvIGNyZWF0ZSB0aGUgY29tbWVudC5cbiAgICogQHBhcmFtIHBhcmFtcy5kYXRhLmNyZWF0ZWRBdCAob3B0aW9uYWwpIFRoZSBkYXRlIHRoZSBjb21tZW50IGlzIHNldCB0byBiZSBjcmVhdGVkLlxuICAgKiBAcGFyYW0gcGFyYW1zLmRhdGEuYm9keSBUaGUgYm9keSBvZiB0aGUgY29tbWVudC5cbiAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgY29tbWVudC5cbiAgICovXG4gIGFzeW5jIGNyZWF0ZUNvbW1lbnQocGFyYW1zKSB7XG4gICAgY29uc3QgeyByb29tSWQsIHRocmVhZElkLCBkYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkcy8ke3RocmVhZElkfS9jb21tZW50c2AsXG4gICAgICB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGNyZWF0ZWRBdDogZGF0YS5jcmVhdGVkQXQ/LnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0VG9Db21tZW50RGF0YShhd2FpdCByZXMuanNvbigpKTtcbiAgfVxuICAvKipcbiAgICogRWRpdHMgYSBjb21tZW50LlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byBlZGl0IHRoZSBjb21tZW50IGluLlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZElkIFRoZSB0aHJlYWQgSUQgdG8gZWRpdCB0aGUgY29tbWVudCBpbi5cbiAgICogQHBhcmFtIHBhcmFtcy5jb21tZW50SWQgVGhlIGNvbW1lbnQgSUQgdG8gZWRpdC5cbiAgICogQHBhcmFtIHBhcmFtcy5kYXRhLmJvZHkgVGhlIGJvZHkgb2YgdGhlIGNvbW1lbnQuXG4gICAqIEBwYXJhbSBwYXJhbXMuZGF0YS5lZGl0ZWRBdCAob3B0aW9uYWwpIFRoZSBkYXRlIHRoZSBjb21tZW50IHdhcyBlZGl0ZWQuXG4gICAqIEByZXR1cm5zIFRoZSBlZGl0ZWQgY29tbWVudC5cbiAgICovXG4gIGFzeW5jIGVkaXRDb21tZW50KHBhcmFtcykge1xuICAgIGNvbnN0IHsgcm9vbUlkLCB0aHJlYWRJZCwgY29tbWVudElkLCBkYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkcy8ke3RocmVhZElkfS9jb21tZW50cy8ke2NvbW1lbnRJZH1gLFxuICAgICAge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBlZGl0ZWRBdDogZGF0YS5lZGl0ZWRBdD8udG9JU09TdHJpbmcoKVxuICAgICAgfVxuICAgICk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRUb0NvbW1lbnREYXRhKGF3YWl0IHJlcy5qc29uKCkpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGVzIGEgY29tbWVudC4gRGVsZXRlcyBhIGNvbW1lbnQuIElmIHRoZXJlIGFyZSBubyByZW1haW5pbmcgY29tbWVudHMgaW4gdGhlIHRocmVhZCwgdGhlIHRocmVhZCBpcyBhbHNvIGRlbGV0ZWQuXG4gICAqIEBwYXJhbSBwYXJhbXMucm9vbUlkIFRoZSByb29tIElEIHRvIGRlbGV0ZSB0aGUgY29tbWVudCBpbi5cbiAgICogQHBhcmFtIHBhcmFtcy50aHJlYWRJZCBUaGUgdGhyZWFkIElEIHRvIGRlbGV0ZSB0aGUgY29tbWVudCBpbi5cbiAgICogQHBhcmFtIHBhcmFtcy5jb21tZW50SWQgVGhlIGNvbW1lbnQgSUQgdG8gZGVsZXRlLlxuICAgKi9cbiAgYXN5bmMgZGVsZXRlQ29tbWVudChwYXJhbXMpIHtcbiAgICBjb25zdCB7IHJvb21JZCwgdGhyZWFkSWQsIGNvbW1lbnRJZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZGVsZXRlKFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkcy8ke3RocmVhZElkfS9jb21tZW50cy8ke2NvbW1lbnRJZH1gXG4gICAgKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyB0aHJlYWQuIFRoZSB0aHJlYWQgd2lsbCBiZSBjcmVhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBjb21tZW50IGFzIGl0cyBmaXJzdCBjb21tZW50LlxuICAgKiBJZiB0aGUgdGhyZWFkIGFscmVhZHkgZXhpc3RzLCBhIGBMaXZlYmxvY2tzRXJyb3JgIHdpbGwgYmUgdGhyb3duIHdpdGggc3RhdHVzIGNvZGUgNDA5LlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byBjcmVhdGUgdGhlIHRocmVhZCBpbi5cbiAgICogQHBhcmFtIHBhcmFtcy50aHJlYWQubWV0YWRhdGEgKG9wdGlvbmFsKSBUaGUgbWV0YWRhdGEgZm9yIHRoZSB0aHJlYWQuIFN1cHBvcnRzIHVwdG8gYSBtYXhpbXVtIG9mIDEwIGVudHJpZXMuIFZhbHVlIG11c3QgYmUgYSBzdHJpbmcsIGJvb2xlYW4gb3IgbnVtYmVyXG4gICAqIEBwYXJhbSBwYXJhbXMudGhyZWFkLmNvbW1lbnQudXNlcklkIFRoZSB1c2VyIElEIG9mIHRoZSB1c2VyIHdobyBjcmVhdGVkIHRoZSBjb21tZW50LlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZC5jb21tZW50LmNyZWF0ZWRBdCAob3B0aW9uYWwpIFRoZSBkYXRlIHRoZSBjb21tZW50IHdhcyBjcmVhdGVkLlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZC5jb21tZW50LmJvZHkgVGhlIGJvZHkgb2YgdGhlIGNvbW1lbnQuXG4gICAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHRocmVhZC4gVGhlIHRocmVhZCB3aWxsIGJlIGNyZWF0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGNvbW1lbnQgYXMgaXRzIGZpcnN0IGNvbW1lbnQuXG4gICAqL1xuICBhc3luYyBjcmVhdGVUaHJlYWQocGFyYW1zKSB7XG4gICAgY29uc3QgeyByb29tSWQsIGRhdGEgfSA9IHBhcmFtcztcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnBvc3QodXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkc2AsIHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIC4uLmRhdGEuY29tbWVudCxcbiAgICAgICAgY3JlYXRlZEF0OiBkYXRhLmNvbW1lbnQuY3JlYXRlZEF0Py50b0lTT1N0cmluZygpXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRUb1RocmVhZERhdGEoYXdhaXQgcmVzLmpzb24oKSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSB0aHJlYWQgYW5kIGFsbCBvZiBpdHMgY29tbWVudHMuXG4gICAqIEBwYXJhbSBwYXJhbXMucm9vbUlkIFRoZSByb29tIElEIHRvIGRlbGV0ZSB0aGUgdGhyZWFkIGluLlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZElkIFRoZSB0aHJlYWQgSUQgdG8gZGVsZXRlLlxuICAgKi9cbiAgYXN5bmMgZGVsZXRlVGhyZWFkKHBhcmFtcykge1xuICAgIGNvbnN0IHsgcm9vbUlkLCB0aHJlYWRJZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZGVsZXRlKHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3RocmVhZHMvJHt0aHJlYWRJZH1gKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTWFyayBhIHRocmVhZCBhcyByZXNvbHZlZC5cbiAgICogQHBhcmFtIHBhcmFtcy5yb29tSWQgVGhlIHJvb20gSUQgb2YgdGhlIHRocmVhZC5cbiAgICogQHBhcmFtIHBhcmFtcy50aHJlYWRJZCBUaGUgdGhyZWFkIElEIHRvIG1hcmsgYXMgcmVzb2x2ZWQuXG4gICAqIEBwYXJhbSBwYXJhbXMuZGF0YS51c2VySWQgVGhlIHVzZXIgSUQgb2YgdGhlIHVzZXIgd2hvIG1hcmtlZCB0aGUgdGhyZWFkIGFzIHJlc29sdmVkLlxuICAgKiBAcmV0dXJucyBUaGUgdGhyZWFkIG1hcmtlZCBhcyByZXNvbHZlZC5cbiAgICovXG4gIGFzeW5jIG1hcmtUaHJlYWRBc1Jlc29sdmVkKHBhcmFtcykge1xuICAgIGNvbnN0IHsgcm9vbUlkLCB0aHJlYWRJZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucG9zdChcbiAgICAgIHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3RocmVhZHMvJHt0aHJlYWRJZH0vbWFyay1hcy1yZXNvbHZlZGAsXG4gICAgICB7fVxuICAgICk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRUb1RocmVhZERhdGEoYXdhaXQgcmVzLmpzb24oKSk7XG4gIH1cbiAgLyoqXG4gICAqIE1hcmsgYSB0aHJlYWQgYXMgdW5yZXNvbHZlZC5cbiAgICogQHBhcmFtIHBhcmFtcy5yb29tSWQgVGhlIHJvb20gSUQgb2YgdGhlIHRocmVhZC5cbiAgICogQHBhcmFtIHBhcmFtcy50aHJlYWRJZCBUaGUgdGhyZWFkIElEIHRvIG1hcmsgYXMgdW5yZXNvbHZlZC5cbiAgICogQHBhcmFtIHBhcmFtcy5kYXRhLnVzZXJJZCBUaGUgdXNlciBJRCBvZiB0aGUgdXNlciB3aG8gbWFya2VkIHRoZSB0aHJlYWQgYXMgdW5yZXNvbHZlZC5cbiAgICogQHJldHVybnMgVGhlIHRocmVhZCBtYXJrZWQgYXMgdW5yZXNvbHZlZC5cbiAgICovXG4gIGFzeW5jIG1hcmtUaHJlYWRBc1VucmVzb2x2ZWQocGFyYW1zKSB7XG4gICAgY29uc3QgeyByb29tSWQsIHRocmVhZElkIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkcy8ke3RocmVhZElkfS9tYXJrLWFzLXVucmVzb2x2ZWRgLFxuICAgICAge31cbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0VG9UaHJlYWREYXRhKGF3YWl0IHJlcy5qc29uKCkpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBtZXRhZGF0YSBvZiB0aGUgc3BlY2lmaWVkIHRocmVhZCBpbiBhIHJvb20uXG4gICAqIEBwYXJhbSBwYXJhbXMucm9vbUlkIFRoZSByb29tIElEIHRvIHVwZGF0ZSB0aGUgdGhyZWFkIGluLlxuICAgKiBAcGFyYW0gcGFyYW1zLnRocmVhZElkIFRoZSB0aHJlYWQgSUQgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0gcGFyYW1zLmRhdGEubWV0YWRhdGEgVGhlIG1ldGFkYXRhIGZvciB0aGUgdGhyZWFkLiBWYWx1ZSBtdXN0IGJlIGEgc3RyaW5nLCBib29sZWFuIG9yIG51bWJlclxuICAgKiBAcGFyYW0gcGFyYW1zLmRhdGEudXNlcklkIFRoZSB1c2VyIElEIG9mIHRoZSB1c2VyIHdobyB1cGRhdGVkIHRoZSB0aHJlYWQuXG4gICAqIEBwYXJhbSBwYXJhbXMuZGF0YS51cGRhdGVkQXQgKG9wdGlvbmFsKSBUaGUgZGF0ZSB0aGUgdGhyZWFkIGlzIHNldCB0byBiZSB1cGRhdGVkLlxuICAgKiBAcmV0dXJucyBUaGUgdXBkYXRlZCB0aHJlYWQgbWV0YWRhdGEuXG4gICAqL1xuICBhc3luYyBlZGl0VGhyZWFkTWV0YWRhdGEocGFyYW1zKSB7XG4gICAgY29uc3QgeyByb29tSWQsIHRocmVhZElkLCBkYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkcy8ke3RocmVhZElkfS9tZXRhZGF0YWAsXG4gICAgICB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIHVwZGF0ZWRBdDogZGF0YS51cGRhdGVkQXQ/LnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXMuanNvbigpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgbmV3IGNvbW1lbnQgcmVhY3Rpb24gdG8gYSBjb21tZW50LlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byBhZGQgdGhlIGNvbW1lbnQgcmVhY3Rpb24gaW4uXG4gICAqIEBwYXJhbSBwYXJhbXMudGhyZWFkSWQgVGhlIHRocmVhZCBJRCB0byBhZGQgdGhlIGNvbW1lbnQgcmVhY3Rpb24gaW4uXG4gICAqIEBwYXJhbSBwYXJhbXMuY29tbWVudElkIFRoZSBjb21tZW50IElEIHRvIGFkZCB0aGUgcmVhY3Rpb24gaW4uXG4gICAqIEBwYXJhbSBwYXJhbXMuZGF0YS5lbW9qaSBUaGUgKGVtb2ppKSByZWFjdGlvbiB0byBhZGQuXG4gICAqIEBwYXJhbSBwYXJhbXMuZGF0YS51c2VySWQgVGhlIHVzZXIgSUQgb2YgdGhlIHVzZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSByZWFjdGlvbi5cbiAgICogQHBhcmFtIHBhcmFtcy5kYXRhLmNyZWF0ZWRBdCAob3B0aW9uYWwpIFRoZSBkYXRlIHRoZSByZWFjdGlvbiBpcyBzZXQgdG8gYmUgY3JlYXRlZC5cbiAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgY29tbWVudCByZWFjdGlvbi5cbiAgICovXG4gIGFzeW5jIGFkZENvbW1lbnRSZWFjdGlvbihwYXJhbXMpIHtcbiAgICBjb25zdCB7IHJvb21JZCwgdGhyZWFkSWQsIGNvbW1lbnRJZCwgZGF0YSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucG9zdChcbiAgICAgIHVybGAvdjIvcm9vbXMvJHtyb29tSWR9L3RocmVhZHMvJHt0aHJlYWRJZH0vY29tbWVudHMvJHtjb21tZW50SWR9L2FkZC1yZWFjdGlvbmAsXG4gICAgICB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIGNyZWF0ZWRBdDogZGF0YS5jcmVhdGVkQXQ/LnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IHJlYWN0aW9uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4gY29udmVydFRvQ29tbWVudFVzZXJSZWFjdGlvbihyZWFjdGlvbik7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSByZWFjdGlvbiBmcm9tIGEgY29tbWVudC5cbiAgICogQHBhcmFtIHBhcmFtcy5yb29tSWQgVGhlIHJvb20gSUQgdG8gcmVtb3ZlIHRoZSBjb21tZW50IHJlYWN0aW9uIGZyb20uXG4gICAqIEBwYXJhbSBwYXJhbXMudGhyZWFkSWQgVGhlIHRocmVhZCBJRCB0byByZW1vdmUgdGhlIGNvbW1lbnQgcmVhY3Rpb24gZnJvbS5cbiAgICogQHBhcmFtIHBhcmFtcy5jb21tZW50SWQgVGhlIGNvbW1lbnQgSUQgdG8gcmVtb3ZlIHRoZSByZWFjdGlvbiBmcm9tLlxuICAgKiBAcGFyYW0gcGFyYW1zLmRhdGEuZW1vamkgVGhlIChlbW9qaSkgcmVhY3Rpb24gdG8gcmVtb3ZlLlxuICAgKiBAcGFyYW0gcGFyYW1zLmRhdGEudXNlcklkIFRoZSB1c2VyIElEIG9mIHRoZSB1c2VyIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVhY3Rpb24uXG4gICAqIEBwYXJhbSBwYXJhbXMuZGF0YS5yZW1vdmVkQXQgKG9wdGlvbmFsKSBUaGUgZGF0ZSB0aGUgcmVhY3Rpb24gaXMgc2V0IHRvIGJlIHJlbW92ZWQuXG4gICAqL1xuICBhc3luYyByZW1vdmVDb21tZW50UmVhY3Rpb24ocGFyYW1zKSB7XG4gICAgY29uc3QgeyByb29tSWQsIHRocmVhZElkLCBkYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdGhyZWFkcy8ke3RocmVhZElkfS9jb21tZW50cy8ke3BhcmFtcy5jb21tZW50SWR9L3JlbW92ZS1yZWFjdGlvbmAsXG4gICAgICB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIHJlbW92ZWRBdDogZGF0YS5yZW1vdmVkQXQ/LnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbmJveCBub3RpZmljYXRpb25zIGZvciBhIHVzZXIuXG4gICAqIEBwYXJhbSBwYXJhbXMudXNlcklkIFRoZSB1c2VyIElEIHRvIGdldCB0aGUgaW5ib3ggbm90aWZpY2F0aW9ucyBmcm9tLlxuICAgKiBAcGFyYW0gcGFyYW1zLmluYm94Tm90aWZpY2F0aW9uSWQgVGhlIElEIG9mIHRoZSBpbmJveCBub3RpZmljYXRpb24gdG8gZ2V0LlxuICAgKi9cbiAgYXN5bmMgZ2V0SW5ib3hOb3RpZmljYXRpb24ocGFyYW1zKSB7XG4gICAgY29uc3QgeyB1c2VySWQsIGluYm94Tm90aWZpY2F0aW9uSWQgfSA9IHBhcmFtcztcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmdldChcbiAgICAgIHVybGAvdjIvdXNlcnMvJHt1c2VySWR9L2luYm94LW5vdGlmaWNhdGlvbnMvJHtpbmJveE5vdGlmaWNhdGlvbklkfWBcbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0VG9JbmJveE5vdGlmaWNhdGlvbkRhdGEoXG4gICAgICBhd2FpdCByZXMuanNvbigpXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgdXNlcidzIHJvb20gbm90aWZpY2F0aW9uIHNldHRpbmdzLlxuICAgKiBAcGFyYW0gcGFyYW1zLnVzZXJJZCBUaGUgdXNlciBJRCB0byBnZXQgdGhlIHJvb20gbm90aWZpY2F0aW9ucyBmcm9tLlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byBnZXQgdGhlIHJvb20gbm90aWZpY2F0aW9uIHNldHRpbmdzIGZyb20uXG4gICAqL1xuICBhc3luYyBnZXRSb29tTm90aWZpY2F0aW9uU2V0dGluZ3MocGFyYW1zKSB7XG4gICAgY29uc3QgeyB1c2VySWQsIHJvb21JZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdXNlcnMvJHt1c2VySWR9L25vdGlmaWNhdGlvbi1zZXR0aW5nc2BcbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXMuanNvbigpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB1c2VyJ3Mgcm9vbSBub3RpZmljYXRpb24gc2V0dGluZ3MuXG4gICAqIEBwYXJhbSBwYXJhbXMudXNlcklkIFRoZSB1c2VyIElEIHRvIHVwZGF0ZSB0aGUgcm9vbSBub3RpZmljYXRpb24gc2V0dGluZ3MgZm9yLlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byB1cGRhdGUgdGhlIHJvb20gbm90aWZpY2F0aW9uIHNldHRpbmdzIGZvci5cbiAgICogQHBhcmFtIHBhcmFtcy5kYXRhIFRoZSBuZXcgcm9vbSBub3RpZmljYXRpb24gc2V0dGluZ3MgZm9yIHRoZSB1c2VyLlxuICAgKi9cbiAgYXN5bmMgdXBkYXRlUm9vbU5vdGlmaWNhdGlvblNldHRpbmdzKHBhcmFtcykge1xuICAgIGNvbnN0IHsgdXNlcklkLCByb29tSWQsIGRhdGEgfSA9IHBhcmFtcztcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnBvc3QoXG4gICAgICB1cmxgL3YyL3Jvb21zLyR7cm9vbUlkfS91c2Vycy8ke3VzZXJJZH0vbm90aWZpY2F0aW9uLXNldHRpbmdzYCxcbiAgICAgIGRhdGFcbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXMuanNvbigpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgdGhlIHVzZXIncyByb29tIG5vdGlmaWNhdGlvbiBzZXR0aW5ncy5cbiAgICogQHBhcmFtIHBhcmFtcy51c2VySWQgVGhlIHVzZXIgSUQgdG8gZGVsZXRlIHRoZSByb29tIG5vdGlmaWNhdGlvbiBzZXR0aW5ncyBmcm9tLlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgcm9vbSBJRCB0byBkZWxldGUgdGhlIHJvb20gbm90aWZpY2F0aW9uIHNldHRpbmdzIGZyb20uXG4gICAqL1xuICBhc3luYyBkZWxldGVSb29tTm90aWZpY2F0aW9uU2V0dGluZ3MocGFyYW1zKSB7XG4gICAgY29uc3QgeyB1c2VySWQsIHJvb21JZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZGVsZXRlKFxuICAgICAgdXJsYC92Mi9yb29tcy8ke3Jvb21JZH0vdXNlcnMvJHt1c2VySWR9L25vdGlmaWNhdGlvbi1zZXR0aW5nc2BcbiAgICApO1xuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgIHRocm93IG5ldyBMaXZlYmxvY2tzRXJyb3IocmVzLnN0YXR1cywgdGV4dCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgYSByb29tIElELlxuICAgKiBAcGFyYW0gcGFyYW1zLnJvb21JZCBUaGUgY3VycmVudCBJRCBvZiB0aGUgcm9vbS5cbiAgICogQHBhcmFtIHBhcmFtcy5uZXdSb29tSWQgVGhlIG5ldyByb29tIElELlxuICAgKi9cbiAgYXN5bmMgdXBkYXRlUm9vbUlkKHBhcmFtcykge1xuICAgIGNvbnN0IHsgY3VycmVudFJvb21JZCwgbmV3Um9vbUlkIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wb3N0KFxuICAgICAgdXJsYC92Mi9yb29tcy8ke2N1cnJlbnRSb29tSWR9L3VwZGF0ZS1yb29tLWlkYCxcbiAgICAgIHtcbiAgICAgICAgbmV3Um9vbUlkXG4gICAgICB9XG4gICAgKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoZGF0YS5jcmVhdGVkQXQpLFxuICAgICAgbGFzdENvbm5lY3Rpb25BdDogZGF0YS5sYXN0Q29ubmVjdGlvbkF0ID8gbmV3IERhdGUoZGF0YS5sYXN0Q29ubmVjdGlvbkF0KSA6IHZvaWQgMFxuICAgIH07XG4gIH1cbiAgYXN5bmMgdHJpZ2dlckluYm94Tm90aWZpY2F0aW9uKHBhcmFtcykge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucG9zdCh1cmxgL3YyL2luYm94LW5vdGlmaWNhdGlvbnMvdHJpZ2dlcmAsIHBhcmFtcyk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgdGhyb3cgbmV3IExpdmVibG9ja3NFcnJvcihyZXMuc3RhdHVzLCB0ZXh0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaW5ib3ggbm90aWZpY2F0aW9uIGZvciBhIHVzZXIuXG4gICAqIEBwYXJhbSBwYXJhbXMudXNlcklkIFRoZSB1c2VyIElEIGZvciB3aGljaCB0byBkZWxldGUgdGhlIGluYm94IG5vdGlmaWNhdGlvbi5cbiAgICogQHBhcmFtIHBhcmFtcy5pbmJveE5vdGlmaWNhdGlvbklkIFRoZSBJRCBvZiB0aGUgaW5ib3ggbm90aWZpY2F0aW9uIHRvIGRlbGV0ZS5cbiAgICovXG4gIGFzeW5jIGRlbGV0ZUluYm94Tm90aWZpY2F0aW9uKHBhcmFtcykge1xuICAgIGNvbnN0IHsgdXNlcklkLCBpbmJveE5vdGlmaWNhdGlvbklkIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5kZWxldGUoXG4gICAgICB1cmxgL3YyL3VzZXJzLyR7dXNlcklkfS9pbmJveC1ub3RpZmljYXRpb25zLyR7aW5ib3hOb3RpZmljYXRpb25JZH1gXG4gICAgKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaW5ib3ggbm90aWZpY2F0aW9ucyBmb3IgYSB1c2VyLlxuICAgKiBAcGFyYW0gcGFyYW1zLnVzZXJJZCBUaGUgdXNlciBJRCBmb3Igd2hpY2ggdG8gZGVsZXRlIGFsbCB0aGUgaW5ib3ggbm90aWZpY2F0aW9ucy5cbiAgICovXG4gIGFzeW5jIGRlbGV0ZUFsbEluYm94Tm90aWZpY2F0aW9ucyhwYXJhbXMpIHtcbiAgICBjb25zdCB7IHVzZXJJZCB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZGVsZXRlKHVybGAvdjIvdXNlcnMvJHt1c2VySWR9L2luYm94LW5vdGlmaWNhdGlvbnNgKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgTGl2ZWJsb2Nrc0Vycm9yKHJlcy5zdGF0dXMsIHRleHQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBMaXZlYmxvY2tzRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBtZXNzYWdlID0gXCJcIikge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiTGl2ZWJsb2Nrc0Vycm9yXCI7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gIH1cbn07XG5cbi8vIHNyYy93ZWJob29rcy50c1xuaW1wb3J0ICogYXMgYmFzZTY0IGZyb20gXCJAc3RhYmxlbGliL2Jhc2U2NFwiO1xuaW1wb3J0ICogYXMgc2hhMjU2IGZyb20gXCJmYXN0LXNoYTI1NlwiO1xudmFyIF9XZWJob29rSGFuZGxlciA9IGNsYXNzIF9XZWJob29rSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKHNlY3JldCkge1xuICAgIGlmICghc2VjcmV0KSB0aHJvdyBuZXcgRXJyb3IoXCJTZWNyZXQgaXMgcmVxdWlyZWRcIik7XG4gICAgaWYgKHR5cGVvZiBzZWNyZXQgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcIlNlY3JldCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgIGlmIChzZWNyZXQuc3RhcnRzV2l0aChfV2ViaG9va0hhbmRsZXIuc2VjcmV0UHJlZml4KSA9PT0gZmFsc2UpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNlY3JldCwgbXVzdCBzdGFydCB3aXRoIHdoc2VjX1wiKTtcbiAgICBjb25zdCBzZWNyZXRLZXkgPSBzZWNyZXQuc2xpY2UoX1dlYmhvb2tIYW5kbGVyLnNlY3JldFByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMuc2VjcmV0QnVmZmVyID0gQnVmZmVyLmZyb20oc2VjcmV0S2V5LCBcImJhc2U2NFwiKTtcbiAgfVxuICAvKipcbiAgICogVmVyaWZpZXMgYSB3ZWJob29rIHJlcXVlc3QgYW5kIHJldHVybnMgdGhlIGV2ZW50XG4gICAqL1xuICB2ZXJpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCB7IGhlYWRlcnMsIHJhd0JvZHkgfSA9IHJlcXVlc3Q7XG4gICAgY29uc3QgeyB3ZWJob29rSWQsIHRpbWVzdGFtcCwgcmF3U2lnbmF0dXJlcyB9ID0gdGhpcy52ZXJpZnlIZWFkZXJzKGhlYWRlcnMpO1xuICAgIGlmICh0eXBlb2YgcmF3Qm9keSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCByYXdCb2R5IGZpZWxkLCBtdXN0IGJlIGEgc3RyaW5nLCBnb3QgXCIke3R5cGVvZiByYXdCb2R5fVwiIGluc3RlYWQuIEl0IGlzIGxpa2VseSB0aGF0IHlvdSBuZWVkIHRvIEpTT04uc3RyaW5naWZ5IHRoZSBib2R5IGJlZm9yZSBwYXNzaW5nIGl0LmBcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMudmVyaWZ5VGltZXN0YW1wKHRpbWVzdGFtcCk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gdGhpcy5zaWduKGAke3dlYmhvb2tJZH0uJHt0aW1lc3RhbXB9LiR7cmF3Qm9keX1gKTtcbiAgICBjb25zdCBleHBlY3RlZFNpZ25hdHVyZXMgPSByYXdTaWduYXR1cmVzLnNwbGl0KFwiIFwiKS5tYXAoKHJhd1NpZ25hdHVyZSkgPT4ge1xuICAgICAgY29uc3QgWywgcGFyc2VkU2lnbmF0dXJlXSA9IHJhd1NpZ25hdHVyZS5zcGxpdChcIixcIik7XG4gICAgICByZXR1cm4gcGFyc2VkU2lnbmF0dXJlO1xuICAgIH0pLmZpbHRlcihpc05vdFVuZGVmaW5lZCk7XG4gICAgaWYgKGV4cGVjdGVkU2lnbmF0dXJlcy5pbmNsdWRlcyhzaWduYXR1cmUpID09PSBmYWxzZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgc2lnbmF0dXJlLCBleHBlY3RlZCBvbmUgb2YgJHtleHBlY3RlZFNpZ25hdHVyZXMuam9pbihcbiAgICAgICAgICBcIiwgXCJcbiAgICAgICAgKX0sIGdvdCAke3NpZ25hdHVyZX1gXG4gICAgICApO1xuICAgIGNvbnN0IGV2ZW50ID0gSlNPTi5wYXJzZShyYXdCb2R5KTtcbiAgICB0aGlzLnZlcmlmeVdlYmhvb2tFdmVudFR5cGUoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICAvKipcbiAgICogVmVyaWZpZXMgdGhlIGhlYWRlcnMgYW5kIHJldHVybnMgdGhlIHdlYmhvb2tJZCwgdGltZXN0YW1wIGFuZCByYXdTaWduYXR1cmVzXG4gICAqL1xuICB2ZXJpZnlIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICBjb25zdCB1c2luZ05hdGl2ZUhlYWRlcnMgPSB0eXBlb2YgSGVhZGVycyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycztcbiAgICBjb25zdCBub3JtYWxpemVkSGVhZGVycyA9IHVzaW5nTmF0aXZlSGVhZGVycyA/IE9iamVjdC5mcm9tRW50cmllcyhoZWFkZXJzKSA6IGhlYWRlcnM7XG4gICAgY29uc3Qgc2FuaXRpemVkSGVhZGVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKG5vcm1hbGl6ZWRIZWFkZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHNhbml0aXplZEhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gbm9ybWFsaXplZEhlYWRlcnNba2V5XTtcbiAgICB9KTtcbiAgICBjb25zdCB3ZWJob29rSWQgPSBzYW5pdGl6ZWRIZWFkZXJzW1wid2ViaG9vay1pZFwiXTtcbiAgICBpZiAodHlwZW9mIHdlYmhvb2tJZCAhPT0gXCJzdHJpbmdcIilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgd2ViaG9vay1pZCBoZWFkZXJcIik7XG4gICAgY29uc3QgdGltZXN0YW1wID0gc2FuaXRpemVkSGVhZGVyc1tcIndlYmhvb2stdGltZXN0YW1wXCJdO1xuICAgIGlmICh0eXBlb2YgdGltZXN0YW1wICE9PSBcInN0cmluZ1wiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB3ZWJob29rLXRpbWVzdGFtcCBoZWFkZXJcIik7XG4gICAgY29uc3QgcmF3U2lnbmF0dXJlcyA9IHNhbml0aXplZEhlYWRlcnNbXCJ3ZWJob29rLXNpZ25hdHVyZVwiXTtcbiAgICBpZiAodHlwZW9mIHJhd1NpZ25hdHVyZXMgIT09IFwic3RyaW5nXCIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHdlYmhvb2stc2lnbmF0dXJlIGhlYWRlclwiKTtcbiAgICByZXR1cm4geyB3ZWJob29rSWQsIHRpbWVzdGFtcCwgcmF3U2lnbmF0dXJlcyB9O1xuICB9XG4gIC8qKlxuICAgKiBTaWducyB0aGUgY29udGVudCB3aXRoIHRoZSBzZWNyZXRcbiAgICogQHBhcmFtIGNvbnRlbnRcbiAgICogQHJldHVybnMgYHN0cmluZ2BcbiAgICovXG4gIHNpZ24oY29udGVudCkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBjb25zdCB0b1NpZ24gPSBlbmNvZGVyLmVuY29kZShjb250ZW50KTtcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZShzaGEyNTYuaG1hYyh0aGlzLnNlY3JldEJ1ZmZlciwgdG9TaWduKSk7XG4gIH1cbiAgLyoqXG4gICAqIFZlcmlmaWVzIHRoYXQgdGhlIHRpbWVzdGFtcCBpcyBub3QgdG9vIG9sZCBvciBpbiB0aGUgZnV0dXJlXG4gICAqL1xuICB2ZXJpZnlUaW1lc3RhbXAodGltZXN0YW1wSGVhZGVyKSB7XG4gICAgY29uc3Qgbm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMWUzKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBwYXJzZUludCh0aW1lc3RhbXBIZWFkZXIsIDEwKTtcbiAgICBpZiAoaXNOYU4odGltZXN0YW1wKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0aW1lc3RhbXBcIik7XG4gICAgfVxuICAgIGlmICh0aW1lc3RhbXAgPCBub3cgLSBXRUJIT09LX1RPTEVSQU5DRV9JTl9TRUNPTkRTKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaW1lc3RhbXAgdG9vIG9sZFwiKTtcbiAgICB9XG4gICAgaWYgKHRpbWVzdGFtcCA+IG5vdyArIFdFQkhPT0tfVE9MRVJBTkNFX0lOX1NFQ09ORFMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRpbWVzdGFtcCBpbiB0aGUgZnV0dXJlXCIpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRW5zdXJlcyB0aGF0IHRoZSBldmVudCBpcyBhIGtub3duIGV2ZW50IHR5cGVcbiAgICogb3IgdGhyb3dzIGFuZCBwcm9tcHRzIHRoZSB1c2VyIHRvIHVwZ3JhZGUgdG8gYSBoaWdoZXIgdmVyc2lvbiBvZiBAbGl2ZWJsb2Nrcy9ub2RlXG4gICAqL1xuICB2ZXJpZnlXZWJob29rRXZlbnRUeXBlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgJiYgW1xuICAgICAgXCJzdG9yYWdlVXBkYXRlZFwiLFxuICAgICAgXCJ1c2VyRW50ZXJlZFwiLFxuICAgICAgXCJ1c2VyTGVmdFwiLFxuICAgICAgXCJyb29tQ3JlYXRlZFwiLFxuICAgICAgXCJyb29tRGVsZXRlZFwiLFxuICAgICAgXCJjb21tZW50Q3JlYXRlZFwiLFxuICAgICAgXCJjb21tZW50RWRpdGVkXCIsXG4gICAgICBcImNvbW1lbnREZWxldGVkXCIsXG4gICAgICBcImNvbW1lbnRSZWFjdGlvbkFkZGVkXCIsXG4gICAgICBcImNvbW1lbnRSZWFjdGlvblJlbW92ZWRcIixcbiAgICAgIFwidGhyZWFkTWV0YWRhdGFVcGRhdGVkXCIsXG4gICAgICBcInRocmVhZENyZWF0ZWRcIixcbiAgICAgIFwidGhyZWFkRGVsZXRlZFwiLFxuICAgICAgXCJ5ZG9jVXBkYXRlZFwiLFxuICAgICAgXCJub3RpZmljYXRpb25cIixcbiAgICAgIFwidGhyZWFkTWFya2VkQXNSZXNvbHZlZFwiLFxuICAgICAgXCJ0aHJlYWRNYXJrZWRBc1VucmVzb2x2ZWRcIlxuICAgIF0uaW5jbHVkZXMoZXZlbnQudHlwZSkpIHtcbiAgICAgIGlmIChldmVudC50eXBlID09PSBcIm5vdGlmaWNhdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IGV2ZW50O1xuICAgICAgICBpZiAobm90aWZpY2F0aW9uLmRhdGEua2luZCA9PT0gXCJ0aHJlYWRcIiB8fCBub3RpZmljYXRpb24uZGF0YS5raW5kID09PSBcInRleHRNZW50aW9uXCIgfHwgbm90aWZpY2F0aW9uLmRhdGEua2luZC5zdGFydHNXaXRoKFwiJFwiKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgVW5rbm93biBub3RpZmljYXRpb24ga2luZDogJHtub3RpZmljYXRpb24uZGF0YS5raW5kfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVW5rbm93biBldmVudCB0eXBlLCBwbGVhc2UgdXBncmFkZSB0byBhIGhpZ2hlciB2ZXJzaW9uIG9mIEBsaXZlYmxvY2tzL25vZGVcIlxuICAgICk7XG4gIH1cbn07XG5fV2ViaG9va0hhbmRsZXIuc2VjcmV0UHJlZml4ID0gXCJ3aHNlY19cIjtcbnZhciBXZWJob29rSGFuZGxlciA9IF9XZWJob29rSGFuZGxlcjtcbnZhciBXRUJIT09LX1RPTEVSQU5DRV9JTl9TRUNPTkRTID0gNSAqIDYwO1xudmFyIGlzTm90VW5kZWZpbmVkID0gKHZhbHVlKSA9PiB2YWx1ZSAhPT0gdm9pZCAwO1xuXG4vLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7XG4gIGdldE1lbnRpb25lZElkc0Zyb21Db21tZW50Qm9keSxcbiAgc3RyaW5naWZ5Q29tbWVudEJvZHlcbn0gZnJvbSBcIkBsaXZlYmxvY2tzL2NvcmVcIjtcbmRldGVjdER1cGVzKFBLR19OQU1FLCBQS0dfVkVSU0lPTiwgUEtHX0ZPUk1BVCk7XG5leHBvcnQge1xuICBMaXZlYmxvY2tzLFxuICBMaXZlYmxvY2tzRXJyb3IsXG4gIFdlYmhvb2tIYW5kbGVyLFxuICBnZXRNZW50aW9uZWRJZHNGcm9tQ29tbWVudEJvZHksXG4gIHN0cmluZ2lmeUNvbW1lbnRCb2R5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@liveblocks/node/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@liveblocks/node/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/node/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Liveblocks: () => (/* binding */ Liveblocks),\n/* harmony export */   LiveblocksError: () => (/* binding */ LiveblocksError),\n/* harmony export */   WebhookHandler: () => (/* binding */ WebhookHandler),\n/* harmony export */   getMentionedIdsFromCommentBody: () => (/* reexport safe */ _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.getMentionedIdsFromCommentBody),\n/* harmony export */   stringifyCommentBody: () => (/* reexport safe */ _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.stringifyCommentBody)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liveblocks/core */ \"(rsc)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var _stablelib_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/base64 */ \"(rsc)/./node_modules/@stablelib/base64/lib/base64.js\");\n/* harmony import */ var fast_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-sha256 */ \"(rsc)/./node_modules/fast-sha256/sha256.js\");\n// src/index.ts\n\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/node\";\nvar PKG_VERSION = \"2.3.0\";\nvar PKG_FORMAT = \"esm\";\n\n// src/client.ts\n\n\n// src/utils.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\nfunction getBaseUrl(baseUrl) {\n  if (typeof baseUrl === \"string\" && baseUrl.startsWith(\"http\")) {\n    return baseUrl;\n  } else {\n    return DEFAULT_BASE_URL;\n  }\n}\nasync function fetchPolyfill() {\n  return typeof globalThis.fetch !== \"undefined\" ? globalThis.fetch : (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\"))).default;\n}\nfunction isNonEmpty(value) {\n  return typeof value === \"string\" && value.length > 0;\n}\nfunction assertNonEmpty(value, field) {\n  if (!isNonEmpty(value)) {\n    throw new Error(\n      `Invalid value for field \"${field}\". Please provide a non-empty string. For more information: https://liveblocks.io/docs/api-reference/liveblocks-node#authorize`\n    );\n  }\n}\nfunction assertSecretKey(value, field) {\n  if (!isNonEmpty(value) || !value.startsWith(\"sk_\")) {\n    throw new Error(\n      `Invalid value for field \"${field}\". Secret keys must start with \"sk_\". Please provide the secret key from your Liveblocks dashboard at https://liveblocks.io/dashboard/apikeys.`\n    );\n  }\n}\nfunction normalizeStatusCode(statusCode) {\n  if (statusCode >= 200 && statusCode < 300) {\n    return 200;\n  } else if (statusCode >= 500) {\n    return 503;\n  } else {\n    return 403;\n  }\n}\nfunction toURLSearchParams(params) {\n  const result = new URLSearchParams();\n  for (const [key, value] of Object.entries(params)) {\n    if (value !== void 0 && value !== null) {\n      result.set(key, value.toString());\n    }\n  }\n  return result;\n}\nfunction urljoin(baseUrl, path, params) {\n  const url2 = new URL(path, baseUrl);\n  if (params !== void 0) {\n    url2.search = (params instanceof URLSearchParams ? params : toURLSearchParams(params)).toString();\n  }\n  return url2.toString();\n}\nfunction url(strings, ...values) {\n  return strings.reduce(\n    (result, str, i) => result + encodeURIComponent(values[i - 1] ?? \"\") + str\n  );\n}\n\n// src/Session.ts\nvar ALL_PERMISSIONS = Object.freeze([\n  \"room:write\",\n  \"room:read\",\n  \"room:presence:write\",\n  \"comments:write\",\n  \"comments:read\"\n]);\nfunction isPermission(value) {\n  return ALL_PERMISSIONS.includes(value);\n}\nvar MAX_PERMS_PER_SET = 10;\nvar READ_ACCESS = Object.freeze([\n  \"room:read\",\n  \"room:presence:write\",\n  \"comments:read\"\n]);\nvar FULL_ACCESS = Object.freeze([\"room:write\", \"comments:write\"]);\nvar roomPatternRegex = /^([*]|[^*]{1,128}[*]?)$/;\nvar Session = class {\n  /** @internal */\n  constructor(postFn, userId, userInfo) {\n    this.FULL_ACCESS = FULL_ACCESS;\n    this.READ_ACCESS = READ_ACCESS;\n    /** @internal */\n    this._sealed = false;\n    /** @internal */\n    this._permissions = /* @__PURE__ */ new Map();\n    assertNonEmpty(userId, \"userId\");\n    this._postFn = postFn;\n    this._userId = userId;\n    this._userInfo = userInfo;\n  }\n  /** @internal */\n  getOrCreate(roomId) {\n    if (this._sealed) {\n      throw new Error(\"You can no longer change these permissions.\");\n    }\n    let perms = this._permissions.get(roomId);\n    if (perms) {\n      return perms;\n    } else {\n      if (this._permissions.size >= MAX_PERMS_PER_SET) {\n        throw new Error(\n          \"You cannot add permissions for more than 10 rooms in a single token\"\n        );\n      }\n      perms = /* @__PURE__ */ new Set();\n      this._permissions.set(roomId, perms);\n      return perms;\n    }\n  }\n  allow(roomIdOrPattern, newPerms) {\n    if (typeof roomIdOrPattern !== \"string\") {\n      throw new Error(\"Room name or pattern must be a string\");\n    }\n    if (!roomPatternRegex.test(roomIdOrPattern)) {\n      throw new Error(\"Invalid room name or pattern\");\n    }\n    if (newPerms.length === 0) {\n      throw new Error(\"Permission list cannot be empty\");\n    }\n    const existingPerms = this.getOrCreate(roomIdOrPattern);\n    for (const perm of newPerms) {\n      if (!isPermission(perm)) {\n        throw new Error(`Not a valid permission: ${perm}`);\n      }\n      existingPerms.add(perm);\n    }\n    return this;\n  }\n  /** @internal - For unit tests only */\n  hasPermissions() {\n    return this._permissions.size > 0;\n  }\n  /** @internal - For unit tests only */\n  seal() {\n    if (this._sealed) {\n      throw new Error(\n        \"You cannot reuse Session instances. Please create a new session every time.\"\n      );\n    }\n    this._sealed = true;\n  }\n  /** @internal - For unit tests only */\n  serializePermissions() {\n    return Object.fromEntries(\n      Array.from(this._permissions.entries()).map(([pat, perms]) => [\n        pat,\n        Array.from(perms)\n      ])\n    );\n  }\n  /**\n   * Call this to authorize the session to access Liveblocks. Note that this\n   * will return a Liveblocks \"access token\". Anyone that obtains such access\n   * token will have access to the allowed resources.\n   */\n  async authorize() {\n    this.seal();\n    if (!this.hasPermissions()) {\n      console.warn(\n        \"Access tokens without any permission will not be supported soon, you should use wildcards when the client requests a token for resources outside a room. See https://liveblocks.io/docs/errors/liveblocks-client/access-tokens-not-enough-permissions\"\n      );\n    }\n    try {\n      const resp = await this._postFn(url`/v2/authorize-user`, {\n        // Required\n        userId: this._userId,\n        permissions: this.serializePermissions(),\n        // Optional metadata\n        userInfo: this._userInfo\n      });\n      return {\n        status: normalizeStatusCode(resp.status),\n        body: await resp.text()\n      };\n    } catch (er) {\n      return {\n        status: 503,\n        body: 'Call to /v2/authorize-user failed. See \"error\" for more information.',\n        error: er\n      };\n    }\n  }\n};\n\n// src/client.ts\nvar Liveblocks = class {\n  /**\n   * Interact with the Liveblocks API from your Node.js backend.\n   */\n  constructor(options) {\n    const options_ = options;\n    const secret = options_.secret;\n    assertSecretKey(secret, \"secret\");\n    this._secret = secret;\n    this._baseUrl = new URL(getBaseUrl(options.baseUrl));\n  }\n  /** @internal */\n  async post(path, json) {\n    const url2 = urljoin(this._baseUrl, path);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`,\n      \"Content-Type\": \"application/json\"\n    };\n    const fetch = await fetchPolyfill();\n    const res = await fetch(url2, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify(json)\n    });\n    return res;\n  }\n  /** @internal */\n  async put(path, json) {\n    const url2 = urljoin(this._baseUrl, path);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`,\n      \"Content-Type\": \"application/json\"\n    };\n    const fetch = await fetchPolyfill();\n    return await fetch(url2, {\n      method: \"PUT\",\n      headers,\n      body: JSON.stringify(json)\n    });\n  }\n  /** @internal */\n  async putBinary(path, body, params) {\n    const url2 = urljoin(this._baseUrl, path, params);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`,\n      \"Content-Type\": \"application/octet-stream\"\n    };\n    const fetch = await fetchPolyfill();\n    return await fetch(url2, { method: \"PUT\", headers, body });\n  }\n  /** @internal */\n  async delete(path) {\n    const url2 = urljoin(this._baseUrl, path);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`\n    };\n    const fetch = await fetchPolyfill();\n    const res = await fetch(url2, { method: \"DELETE\", headers });\n    return res;\n  }\n  /** @internal */\n  async get(path, params) {\n    const url2 = urljoin(this._baseUrl, path, params);\n    const headers = {\n      Authorization: `Bearer ${this._secret}`\n    };\n    const fetch = await fetchPolyfill();\n    const res = await fetch(url2, { method: \"GET\", headers });\n    return res;\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Authentication\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Prepares a new session to authorize a user to access Liveblocks.\n   *\n   * IMPORTANT:\n   * Always make sure that you trust the user making the request to your\n   * backend before calling .prepareSession()!\n   *\n   * @param userId Tell Liveblocks the user ID of the user to authorize. Must\n   * uniquely identify the user account in your system. The uniqueness of this\n   * value will determine how many MAUs will be counted/billed.\n   *\n   * @param options.userInfo Custom metadata to attach to this user. Data you\n   * add here will be visible to all other clients in the room, through the\n   * `other.info` property.\n   *\n   */\n  prepareSession(userId, ...rest) {\n    const options = rest[0];\n    return new Session(this.post.bind(this), userId, options?.userInfo);\n  }\n  /**\n   * Call this to authenticate the user as an actor you want to allow to use\n   * Liveblocks.\n   *\n   * You should use this method only if you want to manage your permissions\n   * through the Liveblocks Permissions API. This method is more complicated to\n   * set up, but allows for finer-grained specification of permissions.\n   *\n   * Calling `.identifyUser()` only lets you securely identify a user (and what\n   * groups they belong to). What permissions this user will end up having is\n   * determined by whatever permissions you assign the user/group in your\n   * Liveblocks account, through the Permissions API:\n   * https://liveblocks.io/docs/rooms/permissions\n   *\n   * IMPORTANT:\n   * Always verify that you trust the user making the request before calling\n   * .identifyUser()!\n   *\n   * @param identity Tell Liveblocks the user ID of the user to authenticate.\n   * Must uniquely identify the user account in your system. The uniqueness of\n   * this value will determine how many MAUs will be counted/billed.\n   *\n   * If you also want to assign which groups this user belongs to, use the\n   * object form and specify the `groupIds` property. Those `groupIds` should\n   * match the groupIds you assigned permissions to via the Liveblocks\n   * Permissions API, see\n   * https://liveblocks.io/docs/rooms/permissions#permissions-levels-groups-accesses-example\n   *\n   * @param options.userInfo Custom metadata to attach to this user. Data you\n   * add here will be visible to all other clients in the room, through the\n   * `other.info` property.\n   */\n  // These fields define the security identity of the user. Whatever you pass in here will define which\n  async identifyUser(identity, ...rest) {\n    const options = rest[0];\n    const path = url`/v2/identify-user`;\n    const userId = typeof identity === \"string\" ? identity : identity.userId;\n    const groupIds = typeof identity === \"string\" ? void 0 : identity.groupIds;\n    assertNonEmpty(userId, \"userId\");\n    try {\n      const resp = await this.post(path, {\n        userId,\n        groupIds,\n        // Optional metadata\n        userInfo: options?.userInfo\n      });\n      return {\n        status: normalizeStatusCode(resp.status),\n        body: await resp.text()\n      };\n    } catch (er) {\n      return {\n        status: 503,\n        body: `Call to ${urljoin(\n          this._baseUrl,\n          path\n        )} failed. See \"error\" for more information.`,\n        error: er\n      };\n    }\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Room\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Returns a list of your rooms. The rooms are returned sorted by creation date, from newest to oldest. You can filter rooms by metadata, users accesses and groups accesses.\n   * @param params.limit (optional) A limit on the number of rooms to be returned. The limit can range between 1 and 100, and defaults to 20.\n   * @param params.startingAfter (optional) A cursor used for pagination. You get the value from the response of the previous page.\n   * @param params.userId (optional) A filter on users accesses.\n   * @param params.metadata (optional) A filter on metadata. Multiple metadata keys can be used to filter rooms.\n   * @param params.groupIds (optional) A filter on groups accesses. Multiple groups can be used.\n   * @param params.query (optional) A query to filter rooms by. It is based on our query language. You can filter by metadata and room ID.\n   * @returns A list of rooms.\n   */\n  async getRooms(params = {}) {\n    const path = url`/v2/rooms`;\n    let query;\n    if (typeof params.query === \"string\") {\n      query = params.query;\n    } else if (typeof params.query === \"object\") {\n      query = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.objectToQuery)(params.query);\n    }\n    const queryParams = {\n      limit: params.limit,\n      startingAfter: params.startingAfter,\n      userId: params.userId,\n      groupIds: params.groupIds ? params.groupIds.join(\",\") : void 0,\n      // \"Flatten\" {metadata: {foo: \"bar\"}} to {\"metadata.foo\": \"bar\"}\n      ...Object.fromEntries(\n        Object.entries(params.metadata ?? {}).map(([key, val]) => [\n          `metadata.${key}`,\n          val\n        ])\n      ),\n      query\n    };\n    const res = await this.get(path, queryParams);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const rooms = data.data.map((room) => {\n      const lastConnectionAt = room.lastConnectionAt ? new Date(room.lastConnectionAt) : void 0;\n      const createdAt = new Date(room.createdAt);\n      return {\n        ...room,\n        createdAt,\n        lastConnectionAt\n      };\n    });\n    return {\n      ...data,\n      data: rooms\n    };\n  }\n  /**\n   * Creates a new room with the given id.\n   * @param roomId The id of the room to create.\n   * @param params.defaultAccesses The default accesses for the room.\n   * @param params.groupsAccesses (optional) The group accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.usersAccesses (optional) The user accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.metadata (optional) The metadata for the room. Supports upto a maximum of 50 entries. Key length has a limit of 40 characters. Value length has a limit of 256 characters.\n   * @returns The created room.\n   */\n  async createRoom(roomId, params) {\n    const { defaultAccesses, groupsAccesses, usersAccesses, metadata } = params;\n    const res = await this.post(url`/v2/rooms`, {\n      id: roomId,\n      defaultAccesses,\n      groupsAccesses,\n      usersAccesses,\n      metadata\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const lastConnectionAt = data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    return {\n      ...data,\n      lastConnectionAt,\n      createdAt\n    };\n  }\n  /**\n   * Returns a room with the given id.\n   * @param roomId The id of the room to return.\n   * @returns The room with the given id.\n   */\n  async getRoom(roomId) {\n    const res = await this.get(url`/v2/rooms/${roomId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const lastConnectionAt = data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    return {\n      ...data,\n      createdAt,\n      lastConnectionAt\n    };\n  }\n  /**\n   * Updates specific properties of a room. It’s not necessary to provide the entire room’s information.\n   * Setting a property to `null` means to delete this property.\n   * @param roomId The id of the room to update.\n   * @param params.defaultAccesses (optional) The default accesses for the room.\n   * @param params.groupsAccesses (optional) The group accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.usersAccesses (optional) The user accesses for the room. Can contain a maximum of 100 entries. Key length has a limit of 40 characters.\n   * @param params.metadata (optional) The metadata for the room. Supports upto a maximum of 50 entries. Key length has a limit of 40 characters. Value length has a limit of 256 characters.\n   * @returns The updated room.\n   */\n  async updateRoom(roomId, params) {\n    const { defaultAccesses, groupsAccesses, usersAccesses, metadata } = params;\n    const res = await this.post(url`/v2/rooms/${roomId}`, {\n      defaultAccesses,\n      groupsAccesses,\n      usersAccesses,\n      metadata\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const lastConnectionAt = data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    return {\n      ...data,\n      lastConnectionAt,\n      createdAt\n    };\n  }\n  /**\n   * Deletes a room with the given id. A deleted room is no longer accessible from the API or the dashboard and it cannot be restored.\n   * @param roomId The id of the room to delete.\n   */\n  async deleteRoom(roomId) {\n    const res = await this.delete(url`/v2/rooms/${roomId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns a list of users currently present in the requested room. For better performance, we recommand to call this endpoint every 10 seconds maximum. Duplicates can happen if a user is in the requested room with multiple browser tabs opened.\n   * @param roomId The id of the room to get the users from.\n   * @returns A list of users currently present in the requested room.\n   */\n  async getActiveUsers(roomId) {\n    const res = await this.get(url`/v2/rooms/${roomId}/active_users`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Boadcasts an event to a room without having to connect to it via the client from @liveblocks/client. The connectionId passed to event listeners is -1 when using this API.\n   * @param roomId The id of the room to broadcast the event to.\n   * @param message The message to broadcast. It can be any JSON serializable value.\n   */\n  async broadcastEvent(roomId, message) {\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/broadcast_event`,\n      message\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  async getStorageDocument(roomId, format = \"plain-lson\") {\n    const res = await this.get(url`/v2/rooms/${roomId}/storage`, { format });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Initializes a room’s Storage. The room must already exist and have an empty Storage.\n   * Calling this endpoint will disconnect all users from the room if there are any.\n   *\n   * @param roomId The id of the room to initialize the storage from.\n   * @param document The document to initialize the storage with.\n   * @returns The initialized storage document. It is of the same format as the one passed in.\n   */\n  async initializeStorageDocument(roomId, document) {\n    const res = await this.post(url`/v2/rooms/${roomId}/storage`, document);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Deletes all of the room’s Storage data and disconnect all users from the room if there are any. Note that this does not delete the Yjs document in the room if one exists.\n   * @param roomId The id of the room to delete the storage from.\n   */\n  async deleteStorageDocument(roomId) {\n    const res = await this.delete(url`/v2/rooms/${roomId}/storage`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Yjs\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Returns a JSON representation of the room’s Yjs document.\n   * @param roomId The id of the room to get the Yjs document from.\n   * @param params.format (optional) If true, YText will return formatting.\n   * @param params.key (optional) If provided, returns only a single key’s value, e.g. doc.get(key).toJSON().\n   * @param params.type (optional) Used with key to override the inferred type, i.e. \"ymap\" will return doc.get(key, Y.Map).\n   * @returns A JSON representation of the room’s Yjs document.\n   */\n  async getYjsDocument(roomId, params = {}) {\n    const { format, key, type } = params;\n    const path = url`v2/rooms/${roomId}/ydoc`;\n    const res = await this.get(path, {\n      formatting: format ? \"true\" : void 0,\n      key,\n      type\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Send a Yjs binary update to the room’s Yjs document. You can use this endpoint to initialize Yjs data for the room or to update the room’s Yjs document.\n   * @param roomId The id of the room to send the Yjs binary update to.\n   * @param update The Yjs update to send. Typically the result of calling `Yjs.encodeStateAsUpdate(doc)`. Read the [Yjs documentation](https://docs.yjs.dev/api/document-updates) to learn how to create a binary update.\n   * @param params.guid (optional) If provided, the binary update will be applied to the Yjs subdocument with the given guid. If not provided, the binary update will be applied to the root Yjs document.\n   */\n  async sendYjsBinaryUpdate(roomId, update, params = {}) {\n    const res = await this.putBinary(url`/v2/rooms/${roomId}/ydoc`, update, {\n      guid: params.guid\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns the room’s Yjs document encoded as a single binary update. This can be used by Y.applyUpdate(responseBody) to get a copy of the document in your backend.\n   * See [Yjs documentation](https://docs.yjs.dev/api/document-updates) for more information on working with updates.\n   * @param roomId The id of the room to get the Yjs document from.\n   * @param params.guid (optional) If provided, returns the binary update of the Yjs subdocument with the given guid. If not provided, returns the binary update of the root Yjs document.\n   * @returns The room’s Yjs document encoded as a single binary update.\n   */\n  async getYjsDocumentAsBinaryUpdate(roomId, params = {}) {\n    const res = await this.get(url`/v2/rooms/${roomId}/ydoc-binary`, {\n      guid: params.guid\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return res.arrayBuffer();\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Schema Validation\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Creates a new schema which can be referenced later to enforce a room’s Storage data structure.\n   * @param name The name used to reference the schema. Must be a non-empty string with less than 65 characters and only contain lowercase letters, numbers and dashes\n   * @param body The exact allowed shape of data in the room. It is a multi-line string written in the [Liveblocks schema syntax](https://liveblocks.io/docs/platform/schema-validation/syntax).\n   * @returns The created schema.\n   */\n  async createSchema(name, body) {\n    const res = await this.post(url`/v2/schemas`, {\n      name,\n      body\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Returns a schema by its id.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   * @returns The schema with the given id.\n   */\n  async getSchema(schemaId) {\n    const res = await this.get(url`/v2/schemas/${schemaId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Updates the body for the schema. A schema can only be updated if it is not used by any room.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   * @param body The exact allowed shape of data in the room. It is a multi-line string written in the [Liveblocks schema syntax](https://liveblocks.io/docs/platform/schema-validation/syntax).\n   * @returns The updated schema. The version of the schema will be incremented.\n   */\n  async updateSchema(schemaId, body) {\n    const res = await this.put(url`/v2/schemas/${schemaId}`, {\n      body\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Deletes a schema by its id. A schema can only be deleted if it is not used by any room.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   */\n  async deleteSchema(schemaId) {\n    const res = await this.delete(url`/v2/schemas/${schemaId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns the schema attached to a room.\n   * @param roomId The id of the room to get the schema from.\n   * @returns\n   */\n  async getSchemaByRoomId(roomId) {\n    const res = await this.get(url`/v2/rooms/${roomId}/schema`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    const createdAt = new Date(data.createdAt);\n    const updatedAt = new Date(data.updatedAt);\n    return {\n      ...data,\n      createdAt,\n      updatedAt\n    };\n  }\n  /**\n   * Attaches a schema to a room, and instantly enables runtime schema validation for the room.\n   * If the current contents of the room’s Storage do not match the schema, attaching will fail and the error message will give details on why the schema failed to attach.\n   * @param roomId The id of the room to attach the schema to.\n   * @param schemaId Id of the schema - this is the combination of the schema name and version of the schema to update. For example, `my-schema@1`.\n   * @returns The schema id as JSON.\n   */\n  async attachSchemaToRoom(roomId, schemaId) {\n    const res = await this.post(url`/v2/rooms/${roomId}/schema`, {\n      schema: schemaId\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Detaches a schema from a room, and disables runtime schema validation for the room.\n   * @param roomId The id of the room to detach the schema from.\n   */\n  async detachSchemaFromRoom(roomId) {\n    const res = await this.delete(url`/v2/rooms/${roomId}/schema`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /* -------------------------------------------------------------------------------------------------\n   * Comments\n   * -----------------------------------------------------------------------------------------------*/\n  /**\n   * Gets all the threads in a room.\n   *\n   * @param params.roomId The room ID to get the threads from.\n   * @param params.query The query to filter threads by. It is based on our query language and can filter by metadata.\n   * @returns A list of threads.\n   */\n  async getThreads(params) {\n    const { roomId } = params;\n    let query;\n    if (typeof params.query === \"string\") {\n      query = params.query;\n    } else if (typeof params.query === \"object\") {\n      query = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.objectToQuery)(params.query);\n    }\n    const res = await this.get(url`/v2/rooms/${roomId}/threads`, {\n      query\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const { data } = await res.json();\n    return {\n      data: data.map((thread) => (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(thread))\n    };\n  }\n  /**\n   * Gets a thread.\n   *\n   * @param params.roomId The room ID to get the thread from.\n   * @param params.threadId The thread ID.\n   * @returns A thread.\n   */\n  async getThread(params) {\n    const { roomId, threadId } = params;\n    const res = await this.get(url`/v2/rooms/${roomId}/threads/${threadId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Gets a thread's participants.\n   *\n   * Participants are users who have commented on the thread\n   * or users and groups that have been mentioned in a comment.\n   *\n   * @param params.roomId The room ID to get the thread participants from.\n   * @param params.threadId The thread ID to get the participants from.\n   * @returns An object containing an array of participant IDs.\n   */\n  async getThreadParticipants(params) {\n    const { roomId, threadId } = params;\n    const res = await this.get(\n      url`/v2/rooms/${roomId}/threads/${threadId}/participants`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Gets a thread's comment.\n   *\n   * @param params.roomId The room ID to get the comment from.\n   * @param params.threadId The thread ID to get the comment from.\n   * @param params.commentId The comment ID.\n   * @returns A comment.\n   */\n  async getComment(params) {\n    const { roomId, threadId, commentId } = params;\n    const res = await this.get(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentData)(await res.json());\n  }\n  /**\n   * Creates a comment.\n   *\n   * @param params.roomId The room ID to create the comment in.\n   * @param params.threadId The thread ID to create the comment in.\n   * @param params.data.userId The user ID of the user who is set to create the comment.\n   * @param params.data.createdAt (optional) The date the comment is set to be created.\n   * @param params.data.body The body of the comment.\n   * @returns The created comment.\n   */\n  async createComment(params) {\n    const { roomId, threadId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments`,\n      {\n        ...data,\n        createdAt: data.createdAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentData)(await res.json());\n  }\n  /**\n   * Edits a comment.\n   * @param params.roomId The room ID to edit the comment in.\n   * @param params.threadId The thread ID to edit the comment in.\n   * @param params.commentId The comment ID to edit.\n   * @param params.data.body The body of the comment.\n   * @param params.data.editedAt (optional) The date the comment was edited.\n   * @returns The edited comment.\n   */\n  async editComment(params) {\n    const { roomId, threadId, commentId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}`,\n      {\n        ...data,\n        editedAt: data.editedAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentData)(await res.json());\n  }\n  /**\n   * Deletes a comment. Deletes a comment. If there are no remaining comments in the thread, the thread is also deleted.\n   * @param params.roomId The room ID to delete the comment in.\n   * @param params.threadId The thread ID to delete the comment in.\n   * @param params.commentId The comment ID to delete.\n   */\n  async deleteComment(params) {\n    const { roomId, threadId, commentId } = params;\n    const res = await this.delete(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Creates a new thread. The thread will be created with the specified comment as its first comment.\n   * If the thread already exists, a `LiveblocksError` will be thrown with status code 409.\n   * @param params.roomId The room ID to create the thread in.\n   * @param params.thread.metadata (optional) The metadata for the thread. Supports upto a maximum of 10 entries. Value must be a string, boolean or number\n   * @param params.thread.comment.userId The user ID of the user who created the comment.\n   * @param params.thread.comment.createdAt (optional) The date the comment was created.\n   * @param params.thread.comment.body The body of the comment.\n   * @returns The created thread. The thread will be created with the specified comment as its first comment.\n   */\n  async createThread(params) {\n    const { roomId, data } = params;\n    const res = await this.post(url`/v2/rooms/${roomId}/threads`, {\n      ...data,\n      comment: {\n        ...data.comment,\n        createdAt: data.comment.createdAt?.toISOString()\n      }\n    });\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Deletes a thread and all of its comments.\n   * @param params.roomId The room ID to delete the thread in.\n   * @param params.threadId The thread ID to delete.\n   */\n  async deleteThread(params) {\n    const { roomId, threadId } = params;\n    const res = await this.delete(url`/v2/rooms/${roomId}/threads/${threadId}`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Mark a thread as resolved.\n   * @param params.roomId The room ID of the thread.\n   * @param params.threadId The thread ID to mark as resolved.\n   * @param params.data.userId The user ID of the user who marked the thread as resolved.\n   * @returns The thread marked as resolved.\n   */\n  async markThreadAsResolved(params) {\n    const { roomId, threadId } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/mark-as-resolved`,\n      {}\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Mark a thread as unresolved.\n   * @param params.roomId The room ID of the thread.\n   * @param params.threadId The thread ID to mark as unresolved.\n   * @param params.data.userId The user ID of the user who marked the thread as unresolved.\n   * @returns The thread marked as unresolved.\n   */\n  async markThreadAsUnresolved(params) {\n    const { roomId, threadId } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/mark-as-unresolved`,\n      {}\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToThreadData)(await res.json());\n  }\n  /**\n   * Updates the metadata of the specified thread in a room.\n   * @param params.roomId The room ID to update the thread in.\n   * @param params.threadId The thread ID to update.\n   * @param params.data.metadata The metadata for the thread. Value must be a string, boolean or number\n   * @param params.data.userId The user ID of the user who updated the thread.\n   * @param params.data.updatedAt (optional) The date the thread is set to be updated.\n   * @returns The updated thread metadata.\n   */\n  async editThreadMetadata(params) {\n    const { roomId, threadId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/metadata`,\n      {\n        ...data,\n        updatedAt: data.updatedAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Adds a new comment reaction to a comment.\n   * @param params.roomId The room ID to add the comment reaction in.\n   * @param params.threadId The thread ID to add the comment reaction in.\n   * @param params.commentId The comment ID to add the reaction in.\n   * @param params.data.emoji The (emoji) reaction to add.\n   * @param params.data.userId The user ID of the user associated with the reaction.\n   * @param params.data.createdAt (optional) The date the reaction is set to be created.\n   * @returns The created comment reaction.\n   */\n  async addCommentReaction(params) {\n    const { roomId, threadId, commentId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${commentId}/add-reaction`,\n      {\n        ...data,\n        createdAt: data.createdAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const reaction = await res.json();\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToCommentUserReaction)(reaction);\n  }\n  /**\n   * Removes a reaction from a comment.\n   * @param params.roomId The room ID to remove the comment reaction from.\n   * @param params.threadId The thread ID to remove the comment reaction from.\n   * @param params.commentId The comment ID to remove the reaction from.\n   * @param params.data.emoji The (emoji) reaction to remove.\n   * @param params.data.userId The user ID of the user associated with the reaction.\n   * @param params.data.removedAt (optional) The date the reaction is set to be removed.\n   */\n  async removeCommentReaction(params) {\n    const { roomId, threadId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/threads/${threadId}/comments/${params.commentId}/remove-reaction`,\n      {\n        ...data,\n        removedAt: data.removedAt?.toISOString()\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Returns the inbox notifications for a user.\n   * @param params.userId The user ID to get the inbox notifications from.\n   * @param params.inboxNotificationId The ID of the inbox notification to get.\n   */\n  async getInboxNotification(params) {\n    const { userId, inboxNotificationId } = params;\n    const res = await this.get(\n      url`/v2/users/${userId}/inbox-notifications/${inboxNotificationId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.convertToInboxNotificationData)(\n      await res.json()\n    );\n  }\n  /**\n   * Gets the user's room notification settings.\n   * @param params.userId The user ID to get the room notifications from.\n   * @param params.roomId The room ID to get the room notification settings from.\n   */\n  async getRoomNotificationSettings(params) {\n    const { userId, roomId } = params;\n    const res = await this.get(\n      url`/v2/rooms/${roomId}/users/${userId}/notification-settings`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Updates the user's room notification settings.\n   * @param params.userId The user ID to update the room notification settings for.\n   * @param params.roomId The room ID to update the room notification settings for.\n   * @param params.data The new room notification settings for the user.\n   */\n  async updateRoomNotificationSettings(params) {\n    const { userId, roomId, data } = params;\n    const res = await this.post(\n      url`/v2/rooms/${roomId}/users/${userId}/notification-settings`,\n      data\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    return await res.json();\n  }\n  /**\n   * Delete the user's room notification settings.\n   * @param params.userId The user ID to delete the room notification settings from.\n   * @param params.roomId The room ID to delete the room notification settings from.\n   */\n  async deleteRoomNotificationSettings(params) {\n    const { userId, roomId } = params;\n    const res = await this.delete(\n      url`/v2/rooms/${roomId}/users/${userId}/notification-settings`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Update a room ID.\n   * @param params.roomId The current ID of the room.\n   * @param params.newRoomId The new room ID.\n   */\n  async updateRoomId(params) {\n    const { currentRoomId, newRoomId } = params;\n    const res = await this.post(\n      url`/v2/rooms/${currentRoomId}/update-room-id`,\n      {\n        newRoomId\n      }\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n    const data = await res.json();\n    return {\n      ...data,\n      createdAt: new Date(data.createdAt),\n      lastConnectionAt: data.lastConnectionAt ? new Date(data.lastConnectionAt) : void 0\n    };\n  }\n  async triggerInboxNotification(params) {\n    const res = await this.post(url`/v2/inbox-notifications/trigger`, params);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Deletes an inbox notification for a user.\n   * @param params.userId The user ID for which to delete the inbox notification.\n   * @param params.inboxNotificationId The ID of the inbox notification to delete.\n   */\n  async deleteInboxNotification(params) {\n    const { userId, inboxNotificationId } = params;\n    const res = await this.delete(\n      url`/v2/users/${userId}/inbox-notifications/${inboxNotificationId}`\n    );\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n  /**\n   * Deletes all inbox notifications for a user.\n   * @param params.userId The user ID for which to delete all the inbox notifications.\n   */\n  async deleteAllInboxNotifications(params) {\n    const { userId } = params;\n    const res = await this.delete(url`/v2/users/${userId}/inbox-notifications`);\n    if (!res.ok) {\n      const text = await res.text();\n      throw new LiveblocksError(res.status, text);\n    }\n  }\n};\nvar LiveblocksError = class extends Error {\n  constructor(status, message = \"\") {\n    super(message);\n    this.name = \"LiveblocksError\";\n    this.status = status;\n  }\n};\n\n// src/webhooks.ts\n\n\nvar _WebhookHandler = class _WebhookHandler {\n  constructor(secret) {\n    if (!secret) throw new Error(\"Secret is required\");\n    if (typeof secret !== \"string\") throw new Error(\"Secret must be a string\");\n    if (secret.startsWith(_WebhookHandler.secretPrefix) === false)\n      throw new Error(\"Invalid secret, must start with whsec_\");\n    const secretKey = secret.slice(_WebhookHandler.secretPrefix.length);\n    this.secretBuffer = Buffer.from(secretKey, \"base64\");\n  }\n  /**\n   * Verifies a webhook request and returns the event\n   */\n  verifyRequest(request) {\n    const { headers, rawBody } = request;\n    const { webhookId, timestamp, rawSignatures } = this.verifyHeaders(headers);\n    if (typeof rawBody !== \"string\") {\n      throw new Error(\n        `Invalid rawBody field, must be a string, got \"${typeof rawBody}\" instead. It is likely that you need to JSON.stringify the body before passing it.`\n      );\n    }\n    this.verifyTimestamp(timestamp);\n    const signature = this.sign(`${webhookId}.${timestamp}.${rawBody}`);\n    const expectedSignatures = rawSignatures.split(\" \").map((rawSignature) => {\n      const [, parsedSignature] = rawSignature.split(\",\");\n      return parsedSignature;\n    }).filter(isNotUndefined);\n    if (expectedSignatures.includes(signature) === false)\n      throw new Error(\n        `Invalid signature, expected one of ${expectedSignatures.join(\n          \", \"\n        )}, got ${signature}`\n      );\n    const event = JSON.parse(rawBody);\n    this.verifyWebhookEventType(event);\n    return event;\n  }\n  /**\n   * Verifies the headers and returns the webhookId, timestamp and rawSignatures\n   */\n  verifyHeaders(headers) {\n    const usingNativeHeaders = typeof Headers !== \"undefined\" && headers instanceof Headers;\n    const normalizedHeaders = usingNativeHeaders ? Object.fromEntries(headers) : headers;\n    const sanitizedHeaders = {};\n    Object.keys(normalizedHeaders).forEach((key) => {\n      sanitizedHeaders[key.toLowerCase()] = normalizedHeaders[key];\n    });\n    const webhookId = sanitizedHeaders[\"webhook-id\"];\n    if (typeof webhookId !== \"string\")\n      throw new Error(\"Invalid webhook-id header\");\n    const timestamp = sanitizedHeaders[\"webhook-timestamp\"];\n    if (typeof timestamp !== \"string\")\n      throw new Error(\"Invalid webhook-timestamp header\");\n    const rawSignatures = sanitizedHeaders[\"webhook-signature\"];\n    if (typeof rawSignatures !== \"string\")\n      throw new Error(\"Invalid webhook-signature header\");\n    return { webhookId, timestamp, rawSignatures };\n  }\n  /**\n   * Signs the content with the secret\n   * @param content\n   * @returns `string`\n   */\n  sign(content) {\n    const encoder = new TextEncoder();\n    const toSign = encoder.encode(content);\n    return _stablelib_base64__WEBPACK_IMPORTED_MODULE_1__.encode(fast_sha256__WEBPACK_IMPORTED_MODULE_2__.hmac(this.secretBuffer, toSign));\n  }\n  /**\n   * Verifies that the timestamp is not too old or in the future\n   */\n  verifyTimestamp(timestampHeader) {\n    const now = Math.floor(Date.now() / 1e3);\n    const timestamp = parseInt(timestampHeader, 10);\n    if (isNaN(timestamp)) {\n      throw new Error(\"Invalid timestamp\");\n    }\n    if (timestamp < now - WEBHOOK_TOLERANCE_IN_SECONDS) {\n      throw new Error(\"Timestamp too old\");\n    }\n    if (timestamp > now + WEBHOOK_TOLERANCE_IN_SECONDS) {\n      throw new Error(\"Timestamp in the future\");\n    }\n  }\n  /**\n   * Ensures that the event is a known event type\n   * or throws and prompts the user to upgrade to a higher version of @liveblocks/node\n   */\n  verifyWebhookEventType(event) {\n    if (event && event.type && [\n      \"storageUpdated\",\n      \"userEntered\",\n      \"userLeft\",\n      \"roomCreated\",\n      \"roomDeleted\",\n      \"commentCreated\",\n      \"commentEdited\",\n      \"commentDeleted\",\n      \"commentReactionAdded\",\n      \"commentReactionRemoved\",\n      \"threadMetadataUpdated\",\n      \"threadCreated\",\n      \"threadDeleted\",\n      \"ydocUpdated\",\n      \"notification\",\n      \"threadMarkedAsResolved\",\n      \"threadMarkedAsUnresolved\"\n    ].includes(event.type)) {\n      if (event.type === \"notification\") {\n        const notification = event;\n        if (notification.data.kind === \"thread\" || notification.data.kind === \"textMention\" || notification.data.kind.startsWith(\"$\")) {\n          return;\n        } else {\n          throw new Error(\n            `Unknown notification kind: ${notification.data.kind}`\n          );\n        }\n      }\n      return;\n    }\n    throw new Error(\n      \"Unknown event type, please upgrade to a higher version of @liveblocks/node\"\n    );\n  }\n};\n_WebhookHandler.secretPrefix = \"whsec_\";\nvar WebhookHandler = _WebhookHandler;\nvar WEBHOOK_TOLERANCE_IN_SECONDS = 5 * 60;\nvar isNotUndefined = (value) => value !== void 0;\n\n// src/index.ts\n\n(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_0__.detectDupes)(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@liveblocks/node/dist/index.mjs\n");

/***/ })

};
;